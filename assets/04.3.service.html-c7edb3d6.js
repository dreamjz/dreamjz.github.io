import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as l}from"./framework-09afcf0b.js";const i={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day3-service",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="_1-结构体映射为服务" tabindex="-1"><a class="header-anchor" href="#_1-结构体映射为服务" aria-hidden="true">#</a> 1. 结构体映射为服务</h2><p>对 <code>net/rpc</code> 而言，一个函数需要能够被远程调用，需要满足如下五个条件：</p><ul><li>the method’s type is exported. – 方法所属类型是导出的。</li><li>the method is exported. – 方式是导出的。</li><li>the method has two arguments, both exported (or builtin) types. – 两个入参，均为导出或内置类型。</li><li>the method’s second argument is a pointer. – 第二个入参必须是一个指针。</li><li>the method has return type error. – 返回值为 error 类型。</li></ul><p>客户端发起的调用形式为<code>ServiceMethod: ServiceName.MethodName</code>，不可能为所有的<code>ServiceName</code>进行硬编码来构建实例，此时就需要使用<strong>反射</strong>动态的进行构建。</p><h2 id="_2-通过反射实现-service" tabindex="-1"><a class="header-anchor" href="#_2-通过反射实现-service" aria-hidden="true">#</a> 2. 通过反射实现 service</h2><h3 id="_2-1-注册-service" tabindex="-1"><a class="header-anchor" href="#_2-1-注册-service" aria-hidden="true">#</a> 2.1 注册 service</h3><p><code>geerpc/service.go</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> methodType <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	method    reflect<span class="token punctuation">.</span>Method
	ArgType   reflect<span class="token punctuation">.</span>Type
	ReplyType reflect<span class="token punctuation">.</span>Type
	numCalls  <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">NumCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>numCalls<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">newArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token keyword">var</span> argv reflect<span class="token punctuation">.</span>Value
	<span class="token comment">// arg may be pointer or value type</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>ArgType<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
		argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ArgType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ArgType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> argv
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">newReplyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token comment">// reply must be pointer type</span>
	replyv <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
		replyv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MakeMap</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span>
		replyv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MakeSlice</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> replyv
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>methodType</code>：</p><ul><li><code>method</code>：方法本身</li><li><code>ArgType</code>，<code>ReplyType</code>：参数类型</li><li><code>numCalls</code>：方法调用次数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> service <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name   <span class="token builtin">string</span>
	typ    reflect<span class="token punctuation">.</span>Type
	rcvr   reflect<span class="token punctuation">.</span>Value
	method <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code>：结构体名</li><li><code>typ</code>：结构体类型</li><li><code>rcvr</code>：结构体实例，即方法的接收者</li><li><code>method</code>：注册的方法</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newService</span><span class="token punctuation">(</span>rcvr any<span class="token punctuation">)</span> <span class="token operator">*</span>service <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>rcvr <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>name <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rcvr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>typ <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: %s is not a valid service name&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span><span class="token function">registerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">registerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		method <span class="token operator">:=</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		mType <span class="token operator">:=</span> method<span class="token punctuation">.</span>Type
		<span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token operator">||</span> mType<span class="token punctuation">.</span><span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">Out</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		argType<span class="token punctuation">,</span> replyType <span class="token operator">:=</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>argType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>replyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span>method<span class="token punctuation">[</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>methodType<span class="token punctuation">{</span>
			method<span class="token punctuation">:</span>    method<span class="token punctuation">,</span>
			ArgType<span class="token punctuation">:</span>   argType<span class="token punctuation">,</span>
			ReplyType<span class="token punctuation">:</span> replyType<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: register %s.%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">PkgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>registerMethods</code>选择符合条件的方法：</p><ol><li>两个入参</li><li>入参类型是导出类型或内置类型</li><li>一个返回值，类型为 error</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	atomic<span class="token punctuation">.</span><span class="token function">AddUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>numCalls<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	f <span class="token operator">:=</span> m<span class="token punctuation">.</span>method<span class="token punctuation">.</span>Func
	returnVals <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>s<span class="token punctuation">.</span>rcvr<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> errInter <span class="token operator">:=</span> returnVals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> errInter <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errInter<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>call</code>调用方法。</p><h3 id="_2-2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-2-单元测试" aria-hidden="true">#</a> 2.2 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> geerpc

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
	<span class="token string">&quot;testing&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Foo <span class="token builtin">int</span>

<span class="token keyword">type</span> Args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_assert</span><span class="token punctuation">(</span>condition <span class="token builtin">bool</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>condition <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;assertion failed: &quot;</span><span class="token operator">+</span>msg<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestNewService</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> foo Foo
	s <span class="token operator">:=</span> <span class="token function">newService</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span>
	<span class="token function">_assert</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;wrong service method, expect 1, got %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>
	mType <span class="token operator">:=</span> s<span class="token punctuation">.</span>method<span class="token punctuation">[</span><span class="token string">&quot;Sum&quot;</span><span class="token punctuation">]</span>
	<span class="token function">_assert</span><span class="token punctuation">(</span>mType <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">&quot;wrong Method, Sum should not be nil&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestMethodType_Call</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> foo Foo
	s <span class="token operator">:=</span> <span class="token function">newService</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span>
	mType <span class="token operator">:=</span> s<span class="token punctuation">.</span>method<span class="token punctuation">[</span><span class="token string">&quot;Sum&quot;</span><span class="token punctuation">]</span>

	argv <span class="token operator">:=</span> mType<span class="token punctuation">.</span><span class="token function">newArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	replyv <span class="token operator">:=</span> mType<span class="token punctuation">.</span><span class="token function">newReplyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	argv<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>mType<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv<span class="token punctuation">)</span>
	<span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> mType<span class="token punctuation">.</span><span class="token function">NumCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;failed to call Foo.Sum&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-server" tabindex="-1"><a class="header-anchor" href="#_2-3-server" aria-hidden="true">#</a> 2.3 server</h3><p><code>geerpc/server.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Server represents an RPC server</span>
<span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	serviceMap sync<span class="token punctuation">.</span>Map
<span class="token punctuation">}</span>

<span class="token comment">// Register publishes in the server the set of methods of the</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>rcvr any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">newService</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> dup <span class="token operator">:=</span> server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> dup <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc: service already defined:&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Register publishes the receiver&#39;s methods in the DefaultServer.</span>
<span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>rcvr any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> DefaultServer<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Register</code>用于注册服务。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">findService</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>service<span class="token punctuation">,</span> <span class="token operator">*</span>methodType<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dot <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> dot <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: service/method request ill-formed: &quot;</span> <span class="token operator">+</span> serviceMethod<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	svcname<span class="token punctuation">,</span> methodName <span class="token operator">:=</span> serviceMethod<span class="token punctuation">[</span><span class="token punctuation">:</span>dot<span class="token punctuation">]</span><span class="token punctuation">,</span> serviceMethod<span class="token punctuation">[</span>dot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	svci<span class="token punctuation">,</span> ok <span class="token operator">:=</span> server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>svcname<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: can&#39;t find service &quot;</span> <span class="token operator">+</span> svcname<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	svc <span class="token operator">:=</span> svci<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>service<span class="token punctuation">)</span>
	mtype <span class="token operator">:=</span> svc<span class="token punctuation">.</span>method<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span>
	<span class="token keyword">if</span> mtype <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: can&#39;t find method &quot;</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> svc<span class="token punctuation">,</span> mtype<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>findService</code>通过<code>service.method</code>获取<code>service</code>和<code>methodType</code>实例。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> request <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	h            <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header <span class="token comment">// header of request</span>
	argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value <span class="token comment">// argv and replyv of request</span>
	mtype        <span class="token operator">*</span>methodType
	svc          <span class="token operator">*</span>service
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	req <span class="token operator">:=</span> <span class="token operator">&amp;</span>request<span class="token punctuation">{</span>h<span class="token punctuation">:</span> h<span class="token punctuation">}</span>
	req<span class="token punctuation">.</span>svc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> err <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">findService</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> req<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	req<span class="token punctuation">.</span>argv <span class="token operator">=</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">.</span><span class="token function">newArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>replyv <span class="token operator">=</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">.</span><span class="token function">newReplyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// make sure that argvi is a pointer</span>
	argvi <span class="token operator">:=</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
		argvi <span class="token operator">=</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>argvi<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: read body err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> req<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> req<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>readRequest</code>流程：</p><ol><li>通过<code>serviceMethod</code>调用<code>findService</code>获取<code>service</code>和<code>methodType</code>实例</li><li>构建入参：<code>argv</code>和<code>replyv</code></li><li>确保<code>argv</code>为指针类型，将消息体反序列化到<code>argv</code>中</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> req<span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-demo" tabindex="-1"><a class="header-anchor" href="#_3-demo" aria-hidden="true">#</a> 3. Demo</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;geerpc&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Foo <span class="token builtin">int</span>

<span class="token keyword">type</span> Args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> foo Foo
	<span class="token keyword">if</span> err <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;register error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// pick free port</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:0&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;network error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start rpc server on&quot;</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	addr <span class="token operator">&lt;-</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

	client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			args <span class="token operator">:=</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">}</span>
			<span class="token keyword">var</span> reply <span class="token builtin">int</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;call Foo.Sum error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpc server: register Foo.Sum
start rpc server on [::]:5657
2 + 4 = 6
4 + 8 = 12
0 + 0 = 0
3 + 6 = 9
1 + 2 = 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,33),k={href:"https://geektutu.com/post/geerpc-day3.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=l("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[n("a",u,[a("day3-service"),t(s)])]),r,n("ol",null,[n("li",null,[n("a",k,[a("https://geektutu.com/post/geerpc-day3.html"),t(s)])])])])}const f=p(i,[["render",d],["__file","04.3.service.html.vue"]]);export{f as default};
