import{_ as e,Z as d,$ as c,a3 as o}from"./framework-09afcf0b.js";const t={},r=o('<h1 id="_6-5-内置函数" tabindex="-1"><a class="header-anchor" href="#_6-5-内置函数" aria-hidden="true">#</a> 6.5 内置函数</h1><p>Go 中无需导入可直接使用的函数</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>close()</code></td><td>用于管道通信</td></tr><tr><td><code>len()</code>、<code>cap()</code></td><td><code>len()</code> 用于返回某个类型的长度或数量（字符串、数组、切片、<code>map</code> 和管道）；<code>cap()</code> 是容量的意思，用于返回某个类型的最大容量（只能用于数组、切片和管道，不能用于 <code>map</code>）</td></tr><tr><td><code>new()</code>、<code>make()</code></td><td><code>new()</code> 和 <code>make()</code> 均是用于分配内存：<code>new()</code> 用于值类型和用户定义的类型，如自定义结构，<code>make</code> 用于内置引用类型（切片、<code>map</code> 和管道）。它们的用法就像是函数，但是将类型作为参数：<code>new(type)</code>、<code>make(type)</code>。<code>new(T)</code> 分配类型 <code>T</code> 的零值并返回其地址，也就是指向类型 <code>T</code> 的指针。它也可以被用于基本类型：<code>v := new(int)</code>。<code>make(T)</code> 返回类型 <code>T</code> 的初始化之后的值，因此它比 <code>new()</code> 进行更多的工作d。<strong><code>new()</code> 是一个函数，不要忘记它的括号</strong>。</td></tr><tr><td><code>copy()</code>、<code>append()</code></td><td>用于复制和连接切片</td></tr><tr><td><code>panic()</code>、<code>recover()</code></td><td>两者均用于错误处理机制</td></tr><tr><td><code>print()</code>、<code>println()</code></td><td>底层打印函数，在部署环境中建议使用 <code>fmt</code> 包</td></tr><tr><td><code>complex()</code>、<code>real ()</code>、<code>imag()</code></td><td>用于创建和操作复数</td></tr></tbody></table>',3),a=[r];function n(p,_){return d(),c("div",null,a)}const l=e(t,[["render",n],["__file","06.5.html.vue"]]);export{l as default};
