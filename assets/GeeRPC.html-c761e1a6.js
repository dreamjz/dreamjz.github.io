import{_ as a,Z as t,$ as p,a0 as n,a1 as e,a2 as o,a4 as c,H as i}from"./framework-d03928c9.js";const l={},u=c(`<p>RPC(Remote Procedure Call，远程过程调用)是一种计算机通信协议，允许调用不同进程空间的程序。RPC 的客户端和服务器可以在一台机器上，也可以在不同的机器上。使用时，就像调用本地程序一样，无需关注内部的实现细节。</p><h2 id="_1-消息-报文-的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_1-消息-报文-的序列化和反序列化" aria-hidden="true">#</a> 1. 消息（报文）的序列化和反序列化</h2><p>RPC 客户端和服务端通信报文可以划分为两个部分：</p><ol><li><p>报文头(Header)： 包含调用的服务名，请求序列号和请求的错误信息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Header <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ServiceMethod <span class="token builtin">string</span> <span class="token comment">// format &quot;Service.Method&quot;</span>
	Seq           <span class="token builtin">uint64</span> <span class="token comment">// sequence number chosen by client</span>
	Error         <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>报文体(Body)：请求服务的参数</p></li></ol><p>不同的报文格式所需的编解码方式不同，可以抽象出编解码的接口，以支持不同的报文格式：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Codec <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	io<span class="token punctuation">.</span>Closer
	<span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">ReadBody</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">,</span> any<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>io.Closer</code>：需要实现其<code>Close() error</code>方法</li><li><code>ReadHeader</code>：读取报文头</li><li><code>ReadBody</code>：读取报文体</li><li><code>Write</code>：向客户端发送完整的响应报文（Header+Body）</li></ul><h3 id="_1-1-使用-gob" tabindex="-1"><a class="header-anchor" href="#_1-1-使用-gob" aria-hidden="true">#</a> 1.1 使用 gob</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GobCodec <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	conn io<span class="token punctuation">.</span>ReadWriteCloser
	buf  <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Writer
	dec  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Decoder
	enc  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Encoder
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewGobCodec</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> Codec <span class="token punctuation">{</span>
	buf <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>GobCodec<span class="token punctuation">{</span>
		conn<span class="token punctuation">:</span> conn<span class="token punctuation">,</span>
		buf<span class="token punctuation">:</span>  buf<span class="token punctuation">,</span>
		dec<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
		enc<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GobCodec</code>：</p><ol><li><code>conn</code>：连接实例</li><li><code>dec</code>：用于解码接收到的报文</li><li><code>buf</code>：带缓冲的 writer，避免阻塞以提升性能</li><li><code>enc</code>：用于编码发送的报文</li></ol><h3 id="_1-2-通信协商" tabindex="-1"><a class="header-anchor" href="#_1-2-通信协商" aria-hidden="true">#</a> 1.2 通信协商</h3><p>客户端在发送请求之前需要告知服务端请求相关的信息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	MagicNumber    <span class="token builtin">int</span>           <span class="token comment">// MagicNumber marks this is a geerpc request</span>
	CodecType      codec<span class="token punctuation">.</span>Type    <span class="token comment">// CodecType</span>
	ConnectTimeout time<span class="token punctuation">.</span>Duration <span class="token comment">// 0 means no limit</span>
	HandleTimeout  time<span class="token punctuation">.</span>Duration
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>MagicNumber</code>：标识报文为 RPC 报文</li><li><code>CodeType</code>：编码方式</li><li><code>ConnectTimtout</code>：连接超时时间</li><li><code>HandleTimeout</code>：请求处理超时时间</li></ul><p>一般 Option 使用固定字节编码，为了实现方便此处使用 JSON。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310141635602.png" alt="image-20231014163522531" tabindex="0" loading="lazy"><figcaption>image-20231014163522531</figcaption></figure><h2 id="_2-设计" tabindex="-1"><a class="header-anchor" href="#_2-设计" aria-hidden="true">#</a> 2. 设计</h2><h3 id="_2-1-服务-service" tabindex="-1"><a class="header-anchor" href="#_2-1-服务-service" aria-hidden="true">#</a> 2.1 服务 service</h3><p>在 <code>net/rpc</code>中函数能够被远程调用，需要满足五个条件：</p><ol><li>he method’s type is exported. – 方法所属类型是导出的。</li><li>the method is exported. – 方式是导出的。</li><li>the method has two arguments, both exported (or builtin) types. – 两个入参，均为导出或内置类型。</li><li>the method’s second argument is a pointer. – 第二个入参必须是一个指针。</li><li>the method has return type error. – 返回值为 error 类型</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">MethodName</span><span class="token punctuation">(</span>argType T1<span class="token punctuation">,</span> replyType <span class="token operator">*</span>T2<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为调用的服务是动态的，所以需要通过<strong>反射</strong>将结构体映射为服务。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> service <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    name   <span class="token builtin">string</span>
    typ    reflect<span class="token punctuation">.</span>Type
    rcvr   reflect<span class="token punctuation">.</span>Value
    method <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code>：服务名，即结构体名</li><li><code>typ</code>：结构体类型</li><li><code>rcvr</code>：结构体实例</li><li><code>method</code>：方法名对应的方法类型</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">registerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		method <span class="token operator">:=</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		mType <span class="token operator">:=</span> method<span class="token punctuation">.</span>Type
		<span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token operator">||</span> mType<span class="token punctuation">.</span><span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">Out</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		argType<span class="token punctuation">,</span> replyType <span class="token operator">:=</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>argType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>replyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span>method<span class="token punctuation">[</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>methodType<span class="token punctuation">{</span>
			method<span class="token punctuation">:</span>    method<span class="token punctuation">,</span>
			ArgType<span class="token punctuation">:</span>   argType<span class="token punctuation">,</span>
			ReplyType<span class="token punctuation">:</span> replyType<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: register %s.%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	atomic<span class="token punctuation">.</span><span class="token function">AddUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>numCalls<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	f <span class="token operator">:=</span> m<span class="token punctuation">.</span>method<span class="token punctuation">.</span>Func
	returnVals <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>s<span class="token punctuation">.</span>rcvr<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> errInter <span class="token operator">:=</span> returnVals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> errInter <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errInter<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>registerMethods</code>：通过反射添加满足条件的方法</li><li><code>call</code>：调用指定的方法</li></ul><h3 id="_2-2-服务端-server" tabindex="-1"><a class="header-anchor" href="#_2-2-服务端-server" aria-hidden="true">#</a> 2.2 服务端 server</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Server represents an RPC server</span>
<span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    serviceMap sync<span class="token punctuation">.</span>Map
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>serviceMap</code>：服务名对应的<code>Service</code>实例，使用 <code>sync.Map</code> 保证并发安全</li></ul><h4 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册" aria-hidden="true">#</a> 服务注册</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Register publishes in the server the set of methods of the</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>rcvr any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">newService</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> dup <span class="token operator">:=</span> server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> dup <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc: service already defined:&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过传入的对象，构建<code>service</code>实例</li><li>添加至服务映射表中</li></ol><h4 id="请求处理" tabindex="-1"><a class="header-anchor" href="#请求处理" aria-hidden="true">#</a> 请求处理</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Accept accepts connections on the listener and serves requests</span>
<span class="token comment">// for each incoming connection.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lis net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> lis<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在无限循环中等待连接建立，并开启新的协程进行处理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ServeConn</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> opt Option
	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: options error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> opt<span class="token punctuation">.</span>MagicNumber <span class="token operator">!=</span> MagicNumber <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: invalid magic number %x&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>MagicNumber<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span>
	<span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: invalid codec type: %s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	server<span class="token punctuation">.</span><span class="token function">serveCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>读取客户端发送的 Option 信息</li><li>选择编码方式</li><li>开始处理请求</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">serveCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sending <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token comment">// make sure to send a complete response</span>
	wg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span>  <span class="token comment">// wait until all request are handled</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		req<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> req <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span> <span class="token comment">// it&#39;s not possible to recover, so close the connection</span>
			<span class="token punctuation">}</span>
			req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">,</span> sending<span class="token punctuation">,</span> wg<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>HandleTimeout<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在无限循环中持续处理请求，直到出现错误 或 连接关闭</li><li>开启新的协程处理请求</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	called <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	sent <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> req<span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">)</span>
		called <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
			sent <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
		sent <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> timeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token operator">&lt;-</span>called
		<span class="token operator">&lt;-</span>sent
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
		req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: request handle timeout: exepct within %s&quot;</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
		server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>called<span class="token punctuation">:</span>
		<span class="token operator">&lt;-</span>sent
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>开启新协程进行函数调用</li><li>等待调用并发送响应完成或超时</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> h <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> body any<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: write response error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sending</code>：互斥锁保证响应报文的完整性</li></ul><h4 id="服务端处理流程" tabindex="-1"><a class="header-anchor" href="#服务端处理流程" aria-hidden="true">#</a> 服务端处理流程</h4><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310150916772.png" alt="image-20231015091631838" tabindex="0" loading="lazy"><figcaption>image-20231015091631838</figcaption></figure><h3 id="_2-3-rpc-调用-call" tabindex="-1"><a class="header-anchor" href="#_2-3-rpc-调用-call" aria-hidden="true">#</a> 2.3 RPC 调用 Call</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Call <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Seq           <span class="token builtin">uint64</span>
	ServiceMethod <span class="token builtin">string</span>     <span class="token comment">// format &quot;&lt;service&gt;.&lt;method&gt;&quot;</span>
	Args          any        <span class="token comment">// arguments to the func</span>
	Reply         any        <span class="token comment">// reply from the func</span>
	Error         <span class="token builtin">error</span>      <span class="token comment">// if error occurs, it will be set</span>
	Done          <span class="token keyword">chan</span> <span class="token operator">*</span>Call <span class="token comment">// Strobes when call is complete.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Call</code>用于保存一次 RPC 调用的相关信息：</p><ol><li><code>Seq</code>：请求序列号</li><li><code>ServiceMethod</code>：服务及方法</li><li><code>Args</code>：请求参数</li><li><code>Reply</code>：请求返回值</li><li><code>Error</code>：请求错误</li><li><code>Done</code>：channel，存储 Call</li></ol><h3 id="_2-4-客户端-client" tabindex="-1"><a class="header-anchor" href="#_2-4-客户端-client" aria-hidden="true">#</a> 2.4 客户端 Client</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cc       codec<span class="token punctuation">.</span>Codec
	opt      <span class="token operator">*</span>Option
	sending  sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	header   codec<span class="token punctuation">.</span>Header
	mu       sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	seq      <span class="token builtin">uint64</span>
	pending  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call
	closing  <span class="token builtin">bool</span> <span class="token comment">// user has called Close</span>
	shutdown <span class="token builtin">bool</span> <span class="token comment">// server told to stop</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>cc</code>：编解码器</li><li><code>opt</code>：通信协商数据</li><li><code>sending</code>：互斥锁，保证请求报文的完整性</li><li><code>header</code>：报文头</li><li><code>mu</code>：互斥锁，保证以下数据的并发安全</li><li><code>seq</code>：报文序列号</li><li><code>pending</code>：待处理的 Call</li><li><code>closing</code>：标识 Client 关闭，由客户端发起</li><li><code>shutdown</code>：标识 Client 关闭，由服务端发起 或 出现错误</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	call<span class="token punctuation">.</span>Done <span class="token operator">&lt;-</span> call
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将当前 Call 实例发送至 Channel，通知调用方处理结果。</p><h4 id="建立客户端连接" tabindex="-1"><a class="header-anchor" href="#建立客户端连接" aria-hidden="true">#</a> 建立客户端连接</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> clientResult <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	client <span class="token operator">*</span>Client
	err    <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dial connects to an RPC server at the specified network address</span>
<span class="token keyword">func</span> <span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>NewClient<span class="token punctuation">,</span> network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>f newClientFunc<span class="token punctuation">,</span> network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseOptions</span><span class="token punctuation">(</span>opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> clientResult<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>
		ch <span class="token operator">&lt;-</span> clientResult<span class="token punctuation">{</span>client<span class="token punctuation">:</span> client<span class="token punctuation">,</span> err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> opt<span class="token punctuation">.</span>ConnectTimeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		res <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
		<span class="token keyword">return</span> res<span class="token punctuation">.</span>client<span class="token punctuation">,</span> res<span class="token punctuation">.</span>err
	<span class="token punctuation">}</span>

	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: connect timeout: expect within %s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span>
	<span class="token keyword">case</span> res <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span>client<span class="token punctuation">,</span> res<span class="token punctuation">.</span>err
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>调用<code>net.DialTimeout</code>建立连接</li><li>启用子协程创建客户端实例</li><li>等待客户端创建成功或超时</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span>
    <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid codec type %s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span>
       log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: codec error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token comment">// send option to server</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: options error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
       <span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Client <span class="token punctuation">{</span>
    client <span class="token operator">:=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span>
       seq<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// seq start with 1, 0 means invalid call</span>
       cc<span class="token punctuation">:</span>      cc<span class="token punctuation">,</span>
       opt<span class="token punctuation">:</span>     opt<span class="token punctuation">,</span>
       pending<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">go</span> client<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过 Option 选择编解码器</li><li>发送 Option 报文</li><li>创建 Client 实例</li><li>启用子协程接收响应报文</li></ol><h4 id="接收响应报文" tabindex="-1"><a class="header-anchor" href="#接收响应报文" aria-hidden="true">#</a> 接收响应报文</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> err <span class="token builtin">error</span>
    <span class="token keyword">for</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">var</span> h codec<span class="token punctuation">.</span>Header
       <span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          <span class="token keyword">break</span>
       <span class="token punctuation">}</span>

       call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span>
       <span class="token keyword">switch</span> <span class="token punctuation">{</span>
       <span class="token keyword">case</span> call <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
          <span class="token comment">// write partially failed or call already removed</span>
          err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
       <span class="token keyword">case</span> h<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">:</span>
          call<span class="token punctuation">.</span>Error <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
          err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
          call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">default</span><span class="token punctuation">:</span>
          err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Reply<span class="token punctuation">)</span>
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
             call<span class="token punctuation">.</span>Error <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;reading body &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// error occurs, terminates all pending calls</span>
    client<span class="token punctuation">.</span><span class="token function">terminateCalls</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>无限循环中，持续接收响应报文</p></li><li><p>读取报文头，获取序列号</p></li><li><p>从等待处理 Call 映射表中删除对应的 Call，表示当前 Call 已经被服务端处理：</p><ul><li>若 Call 已不在映射表中，表示 Call 发送失败了 或 已经移除</li><li>若 报文头 中 Error 不为空，表示调用失败</li><li>否则，读取响应报文体</li></ul><p>调用 <code>call.done()</code>返回调用结果</p></li><li><p>出现通信错误（如连接关闭），终止当前等待处理的 Call</p></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">terminateCalls</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client<span class="token punctuation">.</span>shutdown <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> call <span class="token operator">:=</span> <span class="token keyword">range</span> client<span class="token punctuation">.</span>pending <span class="token punctuation">{</span>
		call<span class="token punctuation">.</span>Error <span class="token operator">=</span> err
		call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">removeCall</span><span class="token punctuation">(</span>seq <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	call <span class="token operator">:=</span> client<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>seq<span class="token punctuation">]</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token keyword">return</span> call
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>terminateCalls</code>：将错误通知给调用方</p><p><code>removeCall</code>：移除 Call 并返回</p><h4 id="发送请求报文" tabindex="-1"><a class="header-anchor" href="#发送请求报文" aria-hidden="true">#</a> 发送请求报文</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
    <span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
       log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: done channel is unbuffered&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    call <span class="token operator">:=</span> <span class="token operator">&amp;</span>Call<span class="token punctuation">{</span>
       ServiceMethod<span class="token punctuation">:</span> serviceMethod<span class="token punctuation">,</span>
       Args<span class="token punctuation">:</span>          args<span class="token punctuation">,</span>
       Reply<span class="token punctuation">:</span>         reply<span class="token punctuation">,</span>
       Done<span class="token punctuation">:</span>          done<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
    <span class="token keyword">return</span> call
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span>
       <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: call failed:&quot;</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> c <span class="token operator">:=</span> <span class="token operator">&lt;-</span>call<span class="token punctuation">.</span>Done<span class="token punctuation">:</span>
       <span class="token keyword">return</span> c<span class="token punctuation">.</span>Error
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Go</code>：异步接口</li><li><code>Call</code>：同步接口，会等待请求返回</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// make sure that client will send complete request</span>
	client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// register call</span>
	seq<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">registerCall</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		call<span class="token punctuation">.</span>Error <span class="token operator">=</span> err
		call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// request header</span>
	client<span class="token punctuation">.</span>header<span class="token punctuation">.</span>ServiceMethod <span class="token operator">=</span> call<span class="token punctuation">.</span>ServiceMethod
	client<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Seq <span class="token operator">=</span> seq
	client<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Error <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

	<span class="token comment">// encode request and send</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client<span class="token punctuation">.</span>header<span class="token punctuation">,</span> call<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span>

		<span class="token comment">// c is non-nil means call is not handled by server</span>
		<span class="token keyword">if</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span>Error <span class="token operator">=</span> err
			c<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>加锁保证报文的完整性</li><li>将 Call 添加至待处理映射表</li><li>发送请求报文 <ul><li>发送出现错误，则尝试从等待列表中移除 Call</li><li>移除成功，则表示 Call 尚未被服务端处理，通知调用方</li><li>移除失败，表示 Call 已被处理，无需通知</li></ul></li></ol><h3 id="_2-5-注册中心" tabindex="-1"><a class="header-anchor" href="#_2-5-注册中心" aria-hidden="true">#</a> 2.5 注册中心</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310150950177.jpeg" alt="geerpc registry" tabindex="0" loading="lazy"><figcaption>geerpc registry</figcaption></figure><p>注册中心的好处在于，客户端和服务端都只需要感知注册中心的存在，而无需感知对方的存在：</p><ol><li>服务端启动后，向注册中心发送注册消息，注册中心得知该服务已经启动，处于可用状态。一般来说，服务端还需要定期向注册中心发送心跳，证明自己还活着。</li><li>客户端向注册中心询问，当前哪天服务是可用的，注册中心将可用的服务列表返回客户端。</li><li>客户端根据注册中心得到的服务列表，选择其中一个发起调用</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// GeeRegistry is a simple register center, provide following functions.</span>
<span class="token comment">// add a server and receive heartbeat to keep it alive.</span>
<span class="token comment">// returns all alive servers and delete dead servers sync simultaneously.</span>
<span class="token keyword">type</span> GeeRegistry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	timeout time<span class="token punctuation">.</span>Duration
	mu      sync<span class="token punctuation">.</span>Mutex
	servers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ServerItem
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ServerItem <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Addr  <span class="token builtin">string</span>
	start time<span class="token punctuation">.</span>Time
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>GeeRegistry</code>： <ul><li><code>timeout</code>：服务端过期时间</li><li><code>mu</code>：互斥锁，保证以下字段的并发安全</li><li><code>servers</code>：服务端列表</li></ul></li><li><code>ServerItem</code>：表示服务端 <ul><li><code>Addr</code>：服务端地址</li><li><code>start</code>：服务端更新时间，用于计算服务端是否过期</li></ul></li></ul><h4 id="使用-http-协议" tabindex="-1"><a class="header-anchor" href="#使用-http-协议" aria-hidden="true">#</a> 使用 HTTP 协议</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>GeeRegistry<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> req<span class="token punctuation">.</span>Method <span class="token punctuation">{</span>
    <span class="token keyword">case</span> http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">:</span>
       w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;X-Geerpc-Servers&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">aliveServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> http<span class="token punctuation">.</span>MethodPost<span class="token punctuation">:</span>
       addr <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;X-Geerpc-Server&quot;</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> addr <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
          w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
          <span class="token keyword">return</span>
       <span class="token punctuation">}</span>
       r<span class="token punctuation">.</span><span class="token function">putServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
       w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为实现简单通过 HTTP 协议进行服务注册和更新。</p><h4 id="心跳" tabindex="-1"><a class="header-anchor" href="#心跳" aria-hidden="true">#</a> 心跳</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Heartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">,</span> duration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> duration <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
       <span class="token comment">// make sure there is enough time to send heart beat</span>
       <span class="token comment">// before it&#39;s removed from registry</span>
       duration <span class="token operator">=</span> defaultTimeout <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> err <span class="token builtin">error</span>
    err <span class="token operator">=</span> <span class="token function">sendHeartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
       <span class="token keyword">for</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          <span class="token operator">&lt;-</span>t
          err <span class="token operator">=</span> <span class="token function">sendHeartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>对于每个 服务 Server</li><li>发送首次心跳，用于注册服务</li><li>启用子协程，定时发送心跳，更新服务</li></ol><h3 id="_2-6-服务发现与负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-6-服务发现与负载均衡" aria-hidden="true">#</a> 2.6 服务发现与负载均衡</h3><h4 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法" aria-hidden="true">#</a> 负载均衡算法</h4><p>假设有多个服务实例，每个实例提供相同的功能，为了提高整个系统的吞吐量，每个实例部署在不同的机器上。客户端可以选择任意一个实例进行调用，获取想要的结果。那如何选择呢？取决了负载均衡的策略。对于 RPC 框架来说，我们可以很容易地想到这么几种策略：</p><ul><li>随机选择策略 - 从服务列表中随机选择一个。</li><li>轮询算法(Round Robin) - 依次调度不同的服务器，每次调度执行 i = (i + 1) mode n。</li><li>加权轮询(Weight Round Robin) - 在轮询算法的基础上，为每个服务实例设置一个权重，高性能的机器赋予更高的权重，也可以根据服务实例的当前的负载情况做动态的调整，例如考虑最近5分钟部署服务器的 CPU、内存消耗情况。</li><li>哈希/一致性哈希策略 - 依据请求的某些特征，计算一个 hash 值，根据 hash 值将请求发送到对应的机器。一致性 hash 还可以解决服务实例动态添加情况下，调度抖动的问题。一致性哈希的一个典型应用场景是分布式缓存服务。</li><li>...</li></ul><p>为了简单只实现随机选择和轮询。</p><h4 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现" aria-hidden="true">#</a> 服务发现</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SelectMode <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	RandomSelect SelectMode <span class="token operator">=</span> <span class="token boolean">iota</span>
	RoundRobinSelect
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Discovery <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Discovery</code>接口定义服务发现方法：</p><ul><li><code>Refresh</code>：更新服务列表，与注册中心通信</li><li><code>Update</code>：更新服务列表</li><li><code>Get</code>：根据选择负载均衡策略，获取服务</li><li><code>GetAll</code>：返回服务列表</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MultiServerDiscovery <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	r       <span class="token operator">*</span>rand<span class="token punctuation">.</span>Rand   <span class="token comment">// generate random number</span>
	mu      sync<span class="token punctuation">.</span>RWMutex <span class="token comment">// protect following fields</span>
	servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	index   <span class="token builtin">int</span> <span class="token comment">// record the selected position for robin algorithm</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> GeeRegistryDiscovery <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>MultiServerDiscovery
	registry   <span class="token builtin">string</span>
	timeout    time<span class="token punctuation">.</span>Duration
	lastUpdate time<span class="token punctuation">.</span>Time
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GeeRegistryDiscovery</code>实现服务发现：</p><ul><li><code>r</code>：用于随机选择算法</li><li><code>servers</code>：服务地址列表</li><li><code>index</code>：轮询算法索引</li><li><code>registry</code>：注册中心地址</li><li><code>timeout</code>：服务列表过期时间</li><li><code>lastUpdate</code>：服务列表上次更新时间</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>GeeRegistryDiscovery<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> d<span class="token punctuation">.</span>MultiServerDiscovery<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc discovery: no available servers&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> mode <span class="token punctuation">{</span>
	<span class="token keyword">case</span> RandomSelect<span class="token punctuation">:</span>
		<span class="token keyword">return</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> RoundRobinSelect<span class="token punctuation">:</span>
		s <span class="token operator">:=</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>index<span class="token operator">%</span>n<span class="token punctuation">]</span>
		d<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n
		<span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc discovery: not supported select mode&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>d.index = (d.index + 1) % n</code>使用轮询算法时，采用模运算保证滚动选择。</p><h3 id="_2-7-xclient" tabindex="-1"><a class="header-anchor" href="#_2-7-xclient" aria-hidden="true">#</a> 2.7 XClient</h3><p>XClient 封装 Client，添加负载均衡和服务发现功能。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> XClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	d       Discovery
	mode    SelectMode
	opt     <span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Option
	mu      sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	clients <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>d</code>：服务发现模式</li><li><code>mode</code>：负载均衡策略</li><li><code>opt</code>：通信 Option</li><li><code>clients</code>：服务地址对应的 Client，用于 Client 的复用</li></ul><h4 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接" aria-hidden="true">#</a> 建立连接</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client<span class="token punctuation">,</span> ok <span class="token operator">:=</span> xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">IsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>
		client <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		client<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> xc<span class="token punctuation">.</span>opt<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span> <span class="token operator">=</span> client
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// XDial calls different functions to connect to a RPC server</span>
<span class="token comment">// according the first parameter rpcAddr.</span>
<span class="token comment">// rpcAddr is a general format (protocol@addr) to represent a rpc server</span>
<span class="token comment">// eg, http@10.0.0.1:7001, tcp@10.0.0.1:9999, unix@/tmp/geerpc.sock</span>
<span class="token keyword">func</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client err: wrong format &#39;%s&#39;, expect protocol@addr&quot;</span><span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	protocol<span class="token punctuation">,</span> addr <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">switch</span> protocol <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> geerpc<span class="token punctuation">.</span><span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">// tcp, unix or other transport protocol</span>
		<span class="token keyword">return</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>XDial</code>：根据不同的协议建立客户端</li><li><code>XClient.dial</code>：若存在已有客户端则复用，否则创建新客户端</li></ul><h4 id="发起调用" tabindex="-1"><a class="header-anchor" href="#发起调用" aria-hidden="true">#</a> 发起调用</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    rpcAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Call</code>：根据负载均衡策略选择服务器</p><p><code>call</code>：获取客户端并发起调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Broadcast invokes the named function for every server registered in discovery</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	servers<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		wg sync<span class="token punctuation">.</span>WaitGroup
		mu sync<span class="token punctuation">.</span>Mutex
		e  <span class="token builtin">error</span>
	<span class="token punctuation">)</span>
	replyDone <span class="token operator">:=</span> reply <span class="token operator">==</span> <span class="token boolean">nil</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> rpcAddr <span class="token operator">:=</span> <span class="token keyword">range</span> servers <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">var</span> cloneReply any
			<span class="token keyword">if</span> reply <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				cloneReply <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> cloneReply<span class="token punctuation">)</span>

			mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				e <span class="token operator">=</span> err
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>replyDone <span class="token punctuation">{</span>
				reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>cloneReply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				replyDone <span class="token operator">=</span> <span class="token boolean">true</span>
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> e
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Broadcast</code>：向所有服务器发送请求，当一个返回后则终止其余的服务端的处理。</p><h2 id="_3-流程" tabindex="-1"><a class="header-anchor" href="#_3-流程" aria-hidden="true">#</a> 3. 流程</h2><h3 id="_3-1-服务端注册服务流程" tabindex="-1"><a class="header-anchor" href="#_3-1-服务端注册服务流程" aria-hidden="true">#</a> 3.1 服务端注册服务流程</h3><ol><li>传入结构体实例</li><li>通过反射获取符合条件的方法</li><li>构建 <code>Service</code> 实例，添加至服务端的服务列表</li></ol><h3 id="_3-2-服务端处理流程" tabindex="-1"><a class="header-anchor" href="#_3-2-服务端处理流程" aria-hidden="true">#</a> 3.2 服务端处理流程</h3><ol><li>无限循环中等待连接</li><li>建立连接，启用子协程处理连接</li><li>读取 Option 报文，选择编解码方式</li><li>无限循环中等待报文流</li><li>读取一笔报文，启用子协程处理</li><li>获取调用信息，启用子协程开始调用函数</li><li>将结果写入响应报文，通知父协程处理结果</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310150916772.png" alt="image-20231015091631838" tabindex="0" loading="lazy"><figcaption>image-20231015091631838</figcaption></figure><h3 id="_3-3-客户端发送和接收流程" tabindex="-1"><a class="header-anchor" href="#_3-3-客户端发送和接收流程" aria-hidden="true">#</a> 3.3 客户端发送和接收流程</h3><ol><li>通过负载均衡选择服务器</li><li>建立连接</li><li>发送 Option 报文</li><li>启用子协程，等待接收响应</li><li>添加 Call 至响应列表</li><li>发送请求报文</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310151043110.png" alt="image-20231015104307165" tabindex="0" loading="lazy"><figcaption>image-20231015104307165</figcaption></figure><h2 id="_4-完整通信流程" tabindex="-1"><a class="header-anchor" href="#_4-完整通信流程" aria-hidden="true">#</a> 4. 完整通信流程</h2><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310151052132.png" alt="image-20231015105243243" tabindex="0" loading="lazy"><figcaption>image-20231015105243243</figcaption></figure><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,122),r={href:"https://geektutu.com/post/gee.html",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const s=i("ExternalLinkIcon");return t(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[e("七天用Go从零实现系列"),o(s)])])])])}const b=a(l,[["render",k],["__file","GeeRPC.html.vue"]]);export{b as default};
