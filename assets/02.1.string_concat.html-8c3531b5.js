const n=JSON.parse(`{"key":"v-1244a7cb","path":"/reading/golang/high-performance-go/02-datastructure/02.1.string_concat.html","title":"2.1 字符串高效拼接","lang":"zh-CN","frontmatter":{"title":"2.1 字符串高效拼接","date":"2023-10-03T00:00:00.000Z","category":["golang"],"article":false},"headers":[{"level":2,"title":"1. String","slug":"_1-string","link":"#_1-string","children":[{"level":3,"title":"1.1 拼接方式","slug":"_1-1-拼接方式","link":"#_1-1-拼接方式","children":[]},{"level":3,"title":"1.2. Benchmark","slug":"_1-2-benchmark","link":"#_1-2-benchmark","children":[]},{"level":3,"title":"1.3 推荐使用 strings.Builder","slug":"_1-3-推荐使用-strings-builder","link":"#_1-3-推荐使用-strings-builder","children":[]}]},{"level":2,"title":"2. 原理","slug":"_2-原理","link":"#_2-原理","children":[{"level":3,"title":"2.1 +","slug":"_2-1","link":"#_2-1","children":[]},{"level":3,"title":"2.2 strings.Builder 和 bytes.Buffer","slug":"_2-2-strings-builder-和-bytes-buffer","link":"#_2-2-strings-builder-和-bytes-buffer","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1699943615000},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"reading/golang/high-performance-go/02-datastructure/02.1.string_concat.md","localizedDate":"2023年10月3日","excerpt":"<h2> 1. String</h2>\\n<p>Goalang 中的 string 是只读类型，字符串的拼接实际上会创建新字符串再将内容进行拷贝，若存在大量的拼接操作，会对性能产生严重影响。</p>\\n<h3> 1.1 拼接方式</h3>\\n<p>首先定义一个随机生成字符串的函数：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">const</span> letterBytes <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">randomString</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n\\tb <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> b <span class=\\"token punctuation\\">{</span>\\n\\t\\tb<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> letterBytes<span class=\\"token punctuation\\">[</span>rand<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Intn</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>letterBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 备注：原书使用固定的 byte 数组</span>\\n<span class=\\"token comment\\">// 我偏向于使用动态计算</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">getLetter</span><span class=\\"token punctuation\\">(</span>seed <span class=\\"token builtin\\">int64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">byte</span> <span class=\\"token punctuation\\">{</span>\\n\\tr <span class=\\"token operator\\">:=</span> rand<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span>rand<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewSource</span><span class=\\"token punctuation\\">(</span>seed<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'a'</span> <span class=\\"token operator\\">+</span> r<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Intn</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">26</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">genStr</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> seed <span class=\\"token builtin\\">int64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n\\tbuf <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tbuf <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>buf<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">getLetter</span><span class=\\"token punctuation\\">(</span>seed<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>unsafe<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Pointer</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>buf<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
