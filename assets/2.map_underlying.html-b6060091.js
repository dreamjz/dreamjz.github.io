const n=JSON.parse(`{"key":"v-0f02b40e","path":"/blog/golang/how/2.map_underlying.html","title":"map 底层实现总结","lang":"zh-CN","frontmatter":{"title":"map 底层实现总结","date":"2023-10-10T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"1. 数据结构","slug":"_1-数据结构","link":"#_1-数据结构","children":[{"level":3,"title":"1.1 hmap","slug":"_1-1-hmap","link":"#_1-1-hmap","children":[]},{"level":3,"title":"1.2 bmap","slug":"_1-2-bmap","link":"#_1-2-bmap","children":[]}]},{"level":2,"title":"2. 访问操作","slug":"_2-访问操作","link":"#_2-访问操作","children":[{"level":3,"title":"编译期","slug":"编译期","link":"#编译期","children":[]},{"level":3,"title":"运行时","slug":"运行时","link":"#运行时","children":[]}]},{"level":2,"title":"3. 写入","slug":"_3-写入","link":"#_3-写入","children":[{"level":3,"title":"编译期","slug":"编译期-1","link":"#编译期-1","children":[]},{"level":3,"title":"运行时","slug":"运行时-1","link":"#运行时-1","children":[]}]},{"level":2,"title":"4. 删除","slug":"_4-删除","link":"#_4-删除","children":[{"level":3,"title":"编译期","slug":"编译期-2","link":"#编译期-2","children":[]},{"level":3,"title":"运行时","slug":"运行时-2","link":"#运行时-2","children":[]}]},{"level":2,"title":"5. 扩容","slug":"_5-扩容","link":"#_5-扩容","children":[{"level":3,"title":"扩容条件","slug":"扩容条件","link":"#扩容条件","children":[]},{"level":3,"title":"扩容类型","slug":"扩容类型","link":"#扩容类型","children":[]},{"level":3,"title":"扩容流程","slug":"扩容流程","link":"#扩容流程","children":[]},{"level":3,"title":"扩容操作时机","slug":"扩容操作时机","link":"#扩容操作时机","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1698124149000},"readingTime":{"minutes":6.48,"words":1943},"filePathRelative":"blog/golang/how/2.map_underlying.md","localizedDate":"2023年10月10日","excerpt":"<p>以 <a href=\\"https://github.com/golang/go/tree/release-branch.go1.18/src\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">gov1.18</a>为例总结 map 的底层实现。</p>\\n<h2> 1. 数据结构</h2>\\n<h3> 1.1 hmap</h3>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// A header for a Go map.</span>\\n<span class=\\"token keyword\\">type</span> hmap <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span>\\n\\t<span class=\\"token comment\\">// Make sure this stays in sync with the compiler's definition.</span>\\n\\tcount     <span class=\\"token builtin\\">int</span> <span class=\\"token comment\\">// # live cells == size of map.  Must be first (used by len() builtin)</span>\\n\\tflags     <span class=\\"token builtin\\">uint8</span>\\n\\tB         <span class=\\"token builtin\\">uint8</span>  <span class=\\"token comment\\">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span>\\n\\tnoverflow <span class=\\"token builtin\\">uint16</span> <span class=\\"token comment\\">// approximate number of overflow buckets; see incrnoverflow for details</span>\\n\\thash0     <span class=\\"token builtin\\">uint32</span> <span class=\\"token comment\\">// hash seed</span>\\n\\n\\tbuckets    unsafe<span class=\\"token punctuation\\">.</span>Pointer <span class=\\"token comment\\">// array of 2^B Buckets. may be nil if count==0.</span>\\n\\toldbuckets unsafe<span class=\\"token punctuation\\">.</span>Pointer <span class=\\"token comment\\">// previous bucket array of half the size, non-nil only when growing</span>\\n\\tnevacuate  <span class=\\"token builtin\\">uintptr</span>        <span class=\\"token comment\\">// progress counter for evacuation (buckets less than this have been evacuated)</span>\\n\\n\\textra <span class=\\"token operator\\">*</span>mapextra <span class=\\"token comment\\">// optional fields</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// mapextra holds fields that are not present on all maps.</span>\\n<span class=\\"token keyword\\">type</span> mapextra <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// If both key and elem do not contain pointers and are inline, then we mark bucket</span>\\n\\t<span class=\\"token comment\\">// type as containing no pointers. This avoids scanning such maps.</span>\\n\\t<span class=\\"token comment\\">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span>\\n\\t<span class=\\"token comment\\">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span>\\n\\t<span class=\\"token comment\\">// overflow and oldoverflow are only used if key and elem do not contain pointers.</span>\\n\\t<span class=\\"token comment\\">// overflow contains overflow buckets for hmap.buckets.</span>\\n\\t<span class=\\"token comment\\">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span>\\n\\t<span class=\\"token comment\\">// The indirection allows to store a pointer to the slice in hiter.</span>\\n\\toverflow    <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>bmap\\n\\toldoverflow <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>bmap\\n\\n\\t<span class=\\"token comment\\">// nextOverflow holds a pointer to a free overflow bucket.</span>\\n\\tnextOverflow <span class=\\"token operator\\">*</span>bmap\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
