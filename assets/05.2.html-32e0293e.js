const n=JSON.parse('{"key":"v-3a4b01be","path":"/note/golang/open-source-books/the-way-to-go/05/05.2.html","title":"5.2 测试多返回值函数的错误","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"处理模式","slug":"处理模式","link":"#处理模式","children":[]}],"readingTime":{"minutes":0.3,"words":90},"filePathRelative":"note/golang/open-source-books/the-way-to-go/05/05.2.md","excerpt":"<h1> 5.2 测试多返回值函数的错误</h1>\\n<p>Go 函数通常通过返回两个返回值：</p>\\n<ul>\\n<li>返回值和  <code>error</code>\\n成功执行则<code>error</code>为<code>nil</code>， 否则就会包含相应的错误信息。</li>\\n<li>返回值和 <code>bool</code></li>\\n</ul>\\n<h2> 处理模式</h2>\\n<ul>\\n<li>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>val<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">if</span> val<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>comma, ok pattern</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">if</span> val<span class=\\"token punctuation\\">,</span> ok <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> ok <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>"}');export{n as data};
