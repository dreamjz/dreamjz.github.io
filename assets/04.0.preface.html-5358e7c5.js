const e=JSON.parse('{"key":"v-10f6f8ba","path":"/reading/golang/7-days-golang/04-GeeRPC/04.0.preface.html","title":"0. RPC","lang":"zh-CN","frontmatter":{"title":"0. RPC","date":"2023-10-12T00:00:00.000Z","category":["golang"],"article":false},"headers":[{"level":2,"title":"1. RPC","slug":"_1-rpc","link":"#_1-rpc","children":[]},{"level":2,"title":"2. GeeRPC","slug":"_2-geerpc","link":"#_2-geerpc","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1699943615000},"readingTime":{"minutes":1.36,"words":407},"filePathRelative":"reading/golang/7-days-golang/04-GeeRPC/04.0.preface.md","localizedDate":"2023年10月12日","excerpt":"<h2> 1. RPC</h2>\\n<p>RPC(Remote Procedure Call，远程过程调用)是一种计算机通信协议，允许调用不同进程空间的程序。</p>\\n<p>RPC 的客户端和服务器可以在一台机器上，也可以在不同的机器上。使用时就像调用本地程序一样，无需关注内部的实现细节。</p>\\n<p>不同的应用程序之间的通信方式有很多，比如浏览器和服务器之间广泛使用的基于 HTTP 协议的 Restful API。与 RPC 相比，Restful API 有相对统一的标准，因而更通用，兼容性更好，支持不同的语言。HTTP 协议是基于文本的，一般具备更好的可读性。但是缺点也很明显：</p>\\n<ul>\\n<li>Restful 接口需要额外的定义，无论是客户端还是服务端，都需要额外的代码来处理，而 RPC 调用则更接近于直接调用。</li>\\n<li>基于 HTTP 协议的 Restful 报文冗余，承载了过多的无效信息，而 RPC 通常使用自定义的协议格式，减少冗余报文。</li>\\n<li>RPC 可以采用更高效的序列化协议，将文本转为二进制传输，获得更高的性能。</li>\\n<li>因为 RPC 的灵活性，所以更容易扩展和集成诸如注册中心、负载均衡等功能。</li>\\n</ul>"}');export{e as data};
