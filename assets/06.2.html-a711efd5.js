import{_ as n,Z as s,$ as a,a3 as t}from"./framework-09afcf0b.js";const e={},p=t(`<h1 id="_6-2-函数参数与返回值" tabindex="-1"><a class="header-anchor" href="#_6-2-函数参数与返回值" aria-hidden="true">#</a> 6.2 函数参数与返回值</h1><h2 id="_6-2-1-参数传递" tabindex="-1"><a class="header-anchor" href="#_6-2-1-参数传递" aria-hidden="true">#</a> 6.2.1 参数传递</h2><p><strong>指针也是变量类型，有自己的地址和值，通常指针的值指向一个变量的地址。所以，按引用传递也是按值传递</strong>。</p><ul><li>按<strong>值传递</strong> (call by value)：调用函数时，实参会将其副本传递给函数的实参。对形参的修改不会影响到形参。</li><li>按<strong>引用传递</strong> (call by reference)：将实参的地址传给形参（指针类型），此时可以通过指针来对原参数进行修改。 <ul><li>传递指针（32位或64位）消耗一般小于副本</li><li>引用类型（slice, map, interface, channel) 默认使用引用传递（即使没有显式使用指针）</li></ul></li></ul><h2 id="_6-2-2-命名的返回值-named-return-variables" tabindex="-1"><a class="header-anchor" href="#_6-2-2-命名的返回值-named-return-variables" aria-hidden="true">#</a> 6.2.2 命名的返回值 named return variables</h2><p><strong>尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 非命名返回值</span>
<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token comment">// 命名返回值</span>
<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span> <span class="token punctuation">(</span>v1 <span class="token keyword">type</span><span class="token punctuation">,</span> v2 <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>命名返回作为结果形参时会被初始化相应类型的零值</li></ul><p>例：TODO: <a href="">06_2_multiple_return.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mutlipleReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	num <span class="token operator">:=</span> <span class="token number">10</span>

	x2<span class="token punctuation">,</span> x3 <span class="token operator">:=</span> <span class="token function">getX2AndX3</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token function">printValues</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">)</span>

	x2<span class="token punctuation">,</span> x3 <span class="token operator">=</span> <span class="token function">getX2AndX3_2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token function">printValues</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printValues</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d, 2x num = %d, 3x num = %d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getX2AndX3</span><span class="token punctuation">(</span>input <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> input
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getX2AndX3_2</span><span class="token punctuation">(</span>input <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x2 <span class="token builtin">int</span><span class="token punctuation">,</span> x3 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;init value x2: %d, x3: %d\\n&quot;</span><span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">)</span>
	x2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> input
	x3 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> input
    <span class="token comment">// return x2, x3</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> 2x num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> 3x num <span class="token operator">=</span> <span class="token number">30</span>
init value x2<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> x3<span class="token punctuation">:</span> <span class="token number">0</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> 2x num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> 3x num <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使函数使用了命名返回值，你依旧可以无视它而返回明确的值.</p><h2 id="_6-2-3-空白符-blank-indentifier" tabindex="-1"><a class="header-anchor" href="#_6-2-3-空白符-blank-indentifier" aria-hidden="true">#</a> 6.2.3 空白符 (blank indentifier)</h2><p><code>_</code> 可用于匹配不需要的值并将其丢弃。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token boolean">_</span><span class="token punctuation">,</span> x3 <span class="token operator">:=</span> <span class="token function">getX2AndX3</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处的第一个返回值被丢弃。</p><h2 id="_6-2-4-改变外部变量-outside-variable" tabindex="-1"><a class="header-anchor" href="#_6-2-4-改变外部变量-outside-variable" aria-hidden="true">#</a> 6.2.4 改变外部变量 (outside variable)</h2><p>传递指针给函数不仅可以节省内存，也可以赋予函数直接修改外部变量的能力，那么就可不使用 <code>return</code> 返回此参数。</p><p>例： <a href="">06_2_side_effect.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
	<span class="token keyword">var</span> reply <span class="token builtin">int</span>
	<span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d * %d = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2 * 3 = 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","06.2.html.vue"]]);export{r as default};
