import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as p,H as i}from"./framework-d03928c9.js";const l={},u=n("p",null,"若一个问题每一步有多个选项, 并且需要列出所有解, 那么就适用于回溯法.",-1),r=n("h2",{id:"_13-3-1-问题85-生成匹配括号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-3-1-问题85-生成匹配括号","aria-hidden":"true"},"#"),s(" 13.3.1 问题85: 生成匹配括号")],-1),d={href:"https://leetcode.cn/problems/IDBivT/",target:"_blank",rel:"noopener noreferrer"},k=p(`<blockquote><p>正整数 <code>n</code> 代表生成括号的对数，请设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 3
输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 1
输出：[&quot;()&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 8</code></li></ul></blockquote><h3 id="_13-3-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_13-3-1-1-分析-题解" aria-hidden="true">#</a> 13.3.1.1 分析&amp;题解</h3><p>左右括号各n个, 一共需要2n个括号, 每步有两个选择, 适用于回溯法.</p><p>特殊条件: 左括号要比右括号优先生成.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token builtin">int</span><span class="token punctuation">,</span> par <span class="token builtin">string</span><span class="token punctuation">,</span> res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 生成完毕</span>
    <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> par<span class="token punctuation">)</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>

    <span class="token comment">// 左括号</span>
    <span class="token keyword">if</span> left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> par<span class="token operator">+</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 右括号</span>
    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
        <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> par<span class="token operator">+</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-3-2-问题86-分割回文子串" tabindex="-1"><a class="header-anchor" href="#_13-3-2-问题86-分割回文子串" aria-hidden="true">#</a> 13.3.2 问题86: 分割回文子串</h2>`,6),v={href:"https://leetcode.cn/problems/M99OJA/",target:"_blank",rel:"noopener noreferrer"},b=p(`<blockquote><p>给定一个字符串 <code>s</code> ，请将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> ，返回 s 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;google&quot;
输出：[[&quot;g&quot;,&quot;o&quot;,&quot;o&quot;,&quot;g&quot;,&quot;l&quot;,&quot;e&quot;],[&quot;g&quot;,&quot;oo&quot;,&quot;g&quot;,&quot;l&quot;,&quot;e&quot;],[&quot;goog&quot;,&quot;l&quot;,&quot;e&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;aab&quot;
输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;a&quot;
输出：[[&quot;a&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s </code>仅由小写英文字母组成</li></ul></blockquote><h3 id="_13-3-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_13-3-2-1-分析-题解" aria-hidden="true">#</a> 13.3.2.1 分析&amp;题解</h3><p>解决此问题需要很多步, 每步有多个字符可选, 需要找出所有的组合, 适用于回溯法.</p><p>当从<code>i</code>开始寻找子串, 若<code>[i, j]</code>是回文那么就从<code>i+1</code>开始, 直到字符串末尾结束.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">partition</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">helper</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> start <span class="token builtin">int</span><span class="token punctuation">,</span> sub <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 寻找完毕</span>
    <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tmp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token operator">*</span>sub<span class="token punctuation">)</span>
        <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">for</span> i <span class="token operator">:=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token function">isPalidrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>sub <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">,</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sub<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
            <span class="token comment">// 回溯</span>
            <span class="token operator">*</span>sub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    start<span class="token punctuation">,</span> end <span class="token operator">:=</span> i<span class="token punctuation">,</span> j
    <span class="token keyword">for</span> start <span class="token operator">&lt;</span> end <span class="token punctuation">{</span>
        <span class="token keyword">if</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>

        start<span class="token operator">++</span>
        end<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-3-3-问题87-恢复ip地址" tabindex="-1"><a class="header-anchor" href="#_13-3-3-问题87-恢复ip地址" aria-hidden="true">#</a> 13.3.3 问题87: 恢复IP地址</h2>`,6),m={href:"https://leetcode.cn/problems/0on3uN/",target:"_blank",rel:"noopener noreferrer"},g=p(`<blockquote><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能从 <code>s</code> 获得的 <strong>有效 IP 地址</strong> 。你可以按任何顺序返回答案。</p><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p><p>例如：&quot;0.1.2.201&quot; 和 &quot;192.168.1.1&quot; 是 <strong>有效</strong> IP 地址，但是 &quot;0.011.255.245&quot;、&quot;192.168.1.312&quot; 和 &quot;192.168@1.1&quot; 是 <strong>无效</strong> IP 地址。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;25525511135&quot;
输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;0000&quot;
输出：[&quot;0.0.0.0&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;1111&quot;
输出：[&quot;1.1.1.1&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;010010&quot;
输出：[&quot;0.10.0.10&quot;,&quot;0.100.1.0&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 5：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;10203040&quot;
输出：[&quot;10.20.30.40&quot;,&quot;102.0.30.40&quot;,&quot;10.203.0.40&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 3000</code></li><li><code>s</code> 仅由数字组成</li></ul></blockquote><h3 id="_13-3-3-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_13-3-3-1-分析-题解" aria-hidden="true">#</a> 13.3.3.1 分析&amp;题解</h3><p>对于第<code>i</code>个字符来说, 当前有两个选择:</p><ul><li>继续添加字符: 添加字符后必须是合法数字(不以0开头)</li><li>添加分隔符<code>.</code>: 分隔符数量小于3个,才可以添加</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">helper</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> segI <span class="token builtin">int</span><span class="token punctuation">,</span> seg<span class="token punctuation">,</span> ip <span class="token builtin">string</span><span class="token punctuation">,</span> res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 恢复完成</span>
    <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> segI <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValid</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> ip<span class="token operator">+</span>seg<span class="token punctuation">)</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> idx <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加字符</span>
        c <span class="token operator">:=</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
        newSeg <span class="token operator">:=</span> seg <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token function">isValid</span><span class="token punctuation">(</span>newSeg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> segI<span class="token punctuation">,</span> newSeg<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 添加分隔符</span>
        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> segI <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
            <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> segI<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token operator">+</span>seg<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">return</span> n <span class="token operator">&lt;=</span> <span class="token number">255</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,6),q={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function h(f,x){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",d,[s("LCR 085. 括号生成"),t(a)])]),k,n("p",null,[n("a",v,[s("LCR 086. 分割回文串"),t(a)])]),b,n("p",null,[n("a",m,[s("LCR 087. 复原 IP 地址"),t(a)])]),g,n("ol",null,[n("li",null,[n("a",q,[s("剑指Offer（专项突破版）"),t(a)])])])])}const w=e(l,[["render",h],["__file","13.3.html.vue"]]);export{w as default};
