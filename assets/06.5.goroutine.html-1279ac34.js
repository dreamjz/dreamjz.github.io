import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as t,a4 as e,H as l}from"./framework-d03928c9.js";const i={},u=e('<p><strong>线程</strong>是操作系统调度的基本单位，多个线程可以属于同一<strong>进程</strong>并共享内存空间。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310020422870.png" alt="process-and-threads" tabindex="0" loading="lazy"><figcaption>process-and-threads</figcaption></figure><p>Golang 的调度器通过使用与CPU数量相同的线程减少线程频繁切换的内存开销，同时在每个线程上执行开销更小的 <strong>goroutine</strong> 来降低操作系统和硬件的负担。</p><h2 id="_6-5-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_6-5-1-设计原理" aria-hidden="true">#</a> 6.5.1 设计原理</h2><p>Golang 调度器的发展历程：</p><ol><li><p>单线程调度器 0.x： 程序中只有一个活跃线程。有G-M模型组成</p></li><li><p>多线程调度器 1.0 ：</p><p>允许运行多线程程序</p></li><li><p>任务窃取调度器 1.1 ：</p><ul><li>引入处理器 P，构成 G-M-P 模型</li><li>实现了基于 <strong>工作窃取</strong> 的调度器</li></ul></li><li><p>抢占式调度器 1.2 ：</p><ul><li>基于协作的抢占式调度器 1.2~1.13：</li><li>基于信号的抢占式调度器 1.4 ~</li></ul></li></ol><h2 id="_6-5-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_6-5-2-数据结构" aria-hidden="true">#</a> 6.5.2 数据结构</h2><p>Golang 调度器使用 GMP 模型：</p><ol><li>G：goroutine，表示一个待执行的任务</li><li>M：操作系统线程，由<strong>操作系统</strong>的调度器进行<strong>调度</strong>和<strong>管理</strong></li><li>P：处理器，包含运行 G 的资源</li></ol><h3 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> G</h3><p>Goroutine 是 Golang 调度器中待执行的任务，只存在于<strong>运行时</strong>。</p><p>Goroutine 是 Golang 在<strong>用户态</strong>提供的线程，但 goroutine 比系统线程要更加轻量占用更少的资源。</p>',12),r={href:"https://draveness.me/golang/tree/runtime.g",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.g",-1),k=e(`<p>和<strong>栈</strong>有关的字段为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	stack       stack
	stackguard0 <span class="token builtin">uintptr</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>stack</code>：描述了当前 goroutine 的<strong>栈内存</strong>地址范围 [stack.lo, stack.hi]</li><li><code>stackguard0</code>：用于调度器的抢占式调度</li></ul><p>和<strong>抢占</strong>相关的字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	preempt       <span class="token builtin">bool</span> <span class="token comment">// 抢占信号</span>
	preemptStop   <span class="token builtin">bool</span> <span class="token comment">// 抢占时将状态修改成 \`_Gpreempted\`</span>
	preemptShrink <span class="token builtin">bool</span> <span class="token comment">// 在同步安全点收缩栈</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>goroutine 还持有 <code>derfer</code> 和 <code>panic</code>的链表：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	_panic       <span class="token operator">*</span>_panic <span class="token comment">// 最内侧的 panic 结构体</span>
	_defer       <span class="token operator">*</span>_defer <span class="token comment">// 最内侧的延迟函数结构体</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较重要的字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	m              <span class="token operator">*</span>m
	sched          gobuf
	atomicstatus   <span class="token builtin">uint32</span>
	goid           <span class="token builtin">int64</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>m</code>：当前 goroutine 占用的线程</li><li><code>atomicstatus</code>：goroutine 的状态</li><li><code>sched</code>：goroutine 调度相关信息</li><li><code>goid</code>：goroutine ID</li></ul>`,10),g=n("code",null,"sched",-1),m={href:"https://draveness.me/golang/tree/runtime.gobuf",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.gobuf",-1),_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> gobuf <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	sp   <span class="token builtin">uintptr</span>
	pc   <span class="token builtin">uintptr</span>
	g    guintptr
	ret  sys<span class="token punctuation">.</span>Uintreg
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b=n("li",null,[n("code",null,"sp"),s("：栈指针")],-1),h=n("li",null,[n("code",null,"pc"),s("：程序计数器")],-1),f=n("code",null,"g",-1),y={href:"https://draveness.me/golang/tree/runtime.gobuf",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.gobuf",-1),G=n("li",null,[n("code",null,"ret"),s("：系统调用的返回值")],-1),x=e('<h4 id="状态" tabindex="-1"><a class="header-anchor" href="#状态" aria-hidden="true">#</a> 状态</h4><p><code>atomicstatus</code>表示 goroutine 状态，除去 GC 相关的状态之外，可能有 9 中状态：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>_Gidle</code></td><td>刚刚被分配并且还没有被初始化</td></tr><tr><td><code>_Grunnable</code></td><td>没有执行代码，没有栈的所有权，存储在运行队列中</td></tr><tr><td><code>_Grunning</code></td><td>可以执行代码，拥有栈的所有权，被赋予了内核线程 M 和处理器 P</td></tr><tr><td><code>_Gsyscall</code></td><td>正在执行系统调用，拥有栈的所有权，没有执行用户代码，被赋予了内核线程 M 但是不在运行队列上</td></tr><tr><td><code>_Gwaiting</code></td><td>由于运行时而被阻塞，没有执行用户代码并且不在运行队列上，但是可能存在于 Channel 的等待队列上</td></tr><tr><td><code>_Gdead</code></td><td>没有被使用，没有执行代码，可能有分配的栈</td></tr><tr><td><code>_Gcopystack</code></td><td>栈正在被拷贝，没有执行代码，不在运行队列上</td></tr><tr><td><code>_Gpreempted</code></td><td>由于抢占而被阻塞，没有执行用户代码并且不在运行队列上，等待唤醒</td></tr><tr><td><code>_Gscan</code></td><td>GC 正在扫描栈空间，没有执行代码，可以与其他状态同时存在</td></tr></tbody></table><p><strong>主要</strong>的几个状态有三种：</p><ol><li>等待中：G 等待某些条件满足；如： <code>_Gwaiting</code>、<code>_Gsyscall</code> 和 <code>_Gpreempted</code></li><li>可运行：G 准备就绪，可以在线程上运行；即<code>_Grunnable</code></li><li>运行中：G 正在线程上运行；即 <code>_Grunning</code></li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310021829112.png" alt="golang-goroutine-state-transition" tabindex="0" loading="lazy"><figcaption>golang-goroutine-state-transition</figcaption></figure><h3 id="m" tabindex="-1"><a class="header-anchor" href="#m" aria-hidden="true">#</a> M</h3><p>M 表示<strong>操作系统线程</strong>，即<strong>内核态</strong>线程。</p><p>最大活跃线程数量和<code>GOMAXPROCS</code>有关，一个程序最多只会有 <code>GOMAXPROCS</code>个活跃线程。</p><p>默认情况下<code>GOMAXPROCS</code>为当前机器的CPU数量：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310021913489.png" alt="scheduler-m-and-thread" tabindex="0" loading="lazy"><figcaption>scheduler-m-and-thread</figcaption></figure>',11),P={href:"https://draveness.me/golang/tree/runtime.m",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.m",-1),O=e(`<p>和 <strong>G</strong> 相关的字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> m <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	g0   <span class="token operator">*</span>g
	curg <span class="token operator">*</span>g
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>g0</code>：持有调度栈的 G</li><li><code>curg</code>：当前线程上运行的用户 G</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310021915854.png" alt="g0-and-g" tabindex="0" loading="lazy"><figcaption>g0-and-g</figcaption></figure><p>和 <strong>P</strong> 相关的字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> m <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	p             puintptr
	nextp         puintptr
	oldp          puintptr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>p</code>：正在运行的 P</li><li><code>nextp</code>：暂存的 P</li><li><code>oldp</code>：执行系统调用前的使用线程的 P</li></ul><h3 id="p" tabindex="-1"><a class="header-anchor" href="#p" aria-hidden="true">#</a> P</h3><p>P 是 M 和 G 的中间层：</p><ol><li>提供线程M所需的上下文环境</li><li>负责调度线程上的<strong>等待队列</strong></li></ol><p>P 的数量和<code>GOMAXPROCS</code>相同。</p>`,11),z={href:"https://draveness.me/golang/tree/runtime.p",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.p",-1),M=e(`<p>和 <strong>线程</strong> 与 <strong>运行队列</strong> 相关的字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> p <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	m           muintptr

	runqhead <span class="token builtin">uint32</span>
	runqtail <span class="token builtin">uint32</span>
	runq     <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span>guintptr
	runnext guintptr
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>m</code>：P 对应的 M</li><li><code>runq</code>：P 持有的运行队列，存储等待运行的 G</li><li><code>runnext</code>：下一个需要执行的 G</li></ul><p>P 的状态有以下五种：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>_Pidle</code></td><td>处理器没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空</td></tr><tr><td><code>_Prunning</code></td><td>被线程 M 持有，并且正在执行用户代码或者调度器</td></tr><tr><td><code>_Psyscall</code></td><td>没有执行用户代码，当前线程陷入系统调用</td></tr><tr><td><code>_Pgcstop</code></td><td>被线程 M 持有，当前处理器由于垃圾回收被停止</td></tr><tr><td><code>_Pdead</code></td><td>当前处理器已经不被使用</td></tr></tbody></table><h2 id="_6-5-3-调度器的启动" tabindex="-1"><a class="header-anchor" href="#_6-5-3-调度器的启动" aria-hidden="true">#</a> 6.5.3 调度器的启动</h2>`,6),T={href:"https://draveness.me/golang/tree/runtime.schedinit",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.schedinit",-1),X=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">schedinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>

	sched<span class="token punctuation">.</span>maxmcount <span class="token operator">=</span> <span class="token number">10000</span>

	<span class="token operator">...</span>
	sched<span class="token punctuation">.</span>lastpoll <span class="token operator">=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	procs <span class="token operator">:=</span> ncpu
	<span class="token keyword">if</span> n<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">atoi32</span><span class="token punctuation">(</span><span class="token function">gogetenv</span><span class="token punctuation">(</span><span class="token string">&quot;GOMAXPROCS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		procs <span class="token operator">=</span> n
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">procresize</span><span class="token punctuation">(</span>procs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;unknown runnable goroutine during bootstrap&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sched.maxmcount = 10000</code>：表示 Golang 能够创建的最大线程 M 的数量</li></ul>`,2),C={href:"https://draveness.me/golang/tree/runtime.procresize",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.procresize",-1),V=n("li",null,[s("如果全局变量 "),n("code",null,"allp"),s(" 切片中的处理器数量少于期望数量，会对切片进行扩容；")],-1),A=n("code",null,"new",-1),E={href:"https://draveness.me/golang/tree/runtime.p.init",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.p.init",-1),I=n("li",null,[s("通过指针将线程 m0 和处理器 "),n("code",null,"allp[0]"),s(" 绑定到一起")],-1),R={href:"https://draveness.me/golang/tree/runtime.p.destroy",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.p.destroy",-1),F=n("li",null,[s("通过截断改变全局变量 "),n("code",null,"allp"),s(" 的长度保证与期望处理器数量相等")],-1),$=n("li",null,[s("将除 "),n("code",null,"allp[0]"),s(" 之外的处理器 P 全部设置成 "),n("code",null,"_Pidle"),s(" 并加入到全局的空闲队列中")],-1),D=n("h2",{id:"_6-5-4-g-的创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-5-4-g-的创建","aria-hidden":"true"},"#"),s(" 6.5.4 G 的创建")],-1),U=n("code",null,"go",-1),K={href:"https://draveness.me/golang/tree/runtime.newproc",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"runtime.newproc",-1),Y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> k callKind<span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token keyword">if</span> k <span class="token operator">==</span> callDeferStack <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> k <span class="token operator">==</span> callGo<span class="token punctuation">:</span>
			call <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1A</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpStaticCall<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TypeMem<span class="token punctuation">,</span> newproc<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newproc</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">,</span> fn <span class="token operator">*</span>funcval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	argp <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fn<span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	pc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		newg <span class="token operator">:=</span> <span class="token function">newproc1</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> argp<span class="token punctuation">,</span> siz<span class="token punctuation">,</span> gp<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>

		_p_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">runqput</span><span class="token punctuation">(</span>_p_<span class="token punctuation">,</span> newg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> mainStarted <span class="token punctuation">{</span>
			<span class="token function">wakep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J=n("li",null,[s("入参： "),n("ul",null,[n("li",null,[n("code",null,"siz"),s("：参数大小")]),n("li",null,[n("code",null,"fn"),s("：函数指针")])])],-1),Q=n("li",null,[n("code",null,"newproc1"),s("：获取 G 结构体")],-1),Z=n("li",null,[n("code",null,"runqput"),s("：将创建的 G 加入 P 的运行队列中")],-1),W={href:"https://draveness.me/golang/tree/runtime.wakep",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.wakep",-1),sn={href:"https://draveness.me/golang/tree/runtime.newproc1",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.newproc1",-1),tn=e(`<ol><li>获取或创建新的 G</li><li>将入参放入 G 的栈上</li><li>更新 G 的相关信息</li></ol><p>创建 G 的结构体：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newproc1</span><span class="token punctuation">(</span>fn <span class="token operator">*</span>funcval<span class="token punctuation">,</span> argp unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> narg <span class="token builtin">int32</span><span class="token punctuation">,</span> callergp <span class="token operator">*</span>g<span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>g <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	siz <span class="token operator">:=</span> narg
	siz <span class="token operator">=</span> <span class="token punctuation">(</span>siz <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;^</span> <span class="token number">7</span>

	_p_ <span class="token operator">:=</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	newg <span class="token operator">:=</span> <span class="token function">gfget</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>
	<span class="token keyword">if</span> newg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		newg <span class="token operator">=</span> <span class="token function">malg</span><span class="token punctuation">(</span>_StackMin<span class="token punctuation">)</span>
		<span class="token function">casgstatus</span><span class="token punctuation">(</span>newg<span class="token punctuation">,</span> _Gidle<span class="token punctuation">,</span> _Gdead<span class="token punctuation">)</span>
		<span class="token function">allgadd</span><span class="token punctuation">(</span>newg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从 P 的 <code>gFree</code>中获取<strong>空闲</strong>的 G</li><li>若不存在，则通过 <code>malg</code> 创建一个新的 G</li></ul><p>将参数放入 G 的栈内存中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token operator">...</span>
	totalSize <span class="token operator">:=</span> <span class="token number">4</span><span class="token operator">*</span>sys<span class="token punctuation">.</span>RegSize <span class="token operator">+</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span> <span class="token operator">+</span> sys<span class="token punctuation">.</span>MinFrameSize
	totalSize <span class="token operator">+=</span> <span class="token operator">-</span>totalSize <span class="token operator">&amp;</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>SpAlign <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	sp <span class="token operator">:=</span> newg<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi <span class="token operator">-</span> totalSize
	spArg <span class="token operator">:=</span> sp
	<span class="token keyword">if</span> narg <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>spArg<span class="token punctuation">)</span><span class="token punctuation">,</span> argp<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>narg<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),en={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.memmove",-1),pn=n("code",null,"fn",-1),cn=e(`<p>更新 G 的信息，并返回：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token operator">...</span>
	<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg<span class="token punctuation">.</span>sched<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>newg<span class="token punctuation">.</span>sched<span class="token punctuation">)</span><span class="token punctuation">)</span>
	newg<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp <span class="token operator">=</span> sp
	newg<span class="token punctuation">.</span>stktopsp <span class="token operator">=</span> sp
	newg<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>pc <span class="token operator">=</span> <span class="token function">funcPC</span><span class="token punctuation">(</span>goexit<span class="token punctuation">)</span> <span class="token operator">+</span> sys<span class="token punctuation">.</span>PCQuantum
	newg<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token function">guintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>newg<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">gostartcallfn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg<span class="token punctuation">.</span>sched<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
	newg<span class="token punctuation">.</span>gopc <span class="token operator">=</span> callerpc
	newg<span class="token punctuation">.</span>startpc <span class="token operator">=</span> fn<span class="token punctuation">.</span>fn
	<span class="token function">casgstatus</span><span class="token punctuation">(</span>newg<span class="token punctuation">,</span> _Gdead<span class="token punctuation">,</span> _Grunnable<span class="token punctuation">)</span>
	newg<span class="token punctuation">.</span>goid <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>goidcache<span class="token punctuation">)</span>
	_p_<span class="token punctuation">.</span>goidcache<span class="token operator">++</span>
	<span class="token keyword">return</span> newg
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取空闲的-g-或-创建-g" tabindex="-1"><a class="header-anchor" href="#获取空闲的-g-或-创建-g" aria-hidden="true">#</a> 获取空闲的 G 或 创建 G</h4>`,3),ln={href:"https://draveness.me/golang/tree/runtime.gfget",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.gfget",-1),rn=n("li",null,[s("从 "),n("code",null,"gFree"),s(" 列表中获取空闲的 G： "),n("ol",null,[n("li",null,[s("从当前的 G 所在的 P 的 "),n("code",null,"gFree"),s(" 中获取")]),n("li",null,[s("从当前的调度器的 "),n("code",null,"sched.gFree"),s("中获取")])])],-1),dn={href:"https://draveness.me/golang/tree/runtime.malg",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"runtime.malg",-1),gn=n("code",null,"allgs",-1),mn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310021941725.png",alt:"golang-newproc-get-goroutine",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-newproc-get-goroutine")],-1),vn=n("h4",{id:"运行队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#运行队列","aria-hidden":"true"},"#"),s(" 运行队列")],-1),_n={href:"https://draveness.me/golang/tree/runtime.runqput",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.runqput",-1),hn=e(`<ul><li>全局运行队列</li><li>P 的本地运行队列</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">runqput</span><span class="token punctuation">(</span>_p_ <span class="token operator">*</span>p<span class="token punctuation">,</span> gp <span class="token operator">*</span>g<span class="token punctuation">,</span> next <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> next <span class="token punctuation">{</span>
	retryNext<span class="token punctuation">:</span>
		oldnext <span class="token operator">:=</span> _p_<span class="token punctuation">.</span>runnext
		<span class="token keyword">if</span> <span class="token operator">!</span>_p_<span class="token punctuation">.</span>runnext<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>oldnext<span class="token punctuation">,</span> <span class="token function">guintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">goto</span> retryNext
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> oldnext <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		gp <span class="token operator">=</span> oldnext<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
retry<span class="token punctuation">:</span>
	h <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadAcq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_p_<span class="token punctuation">.</span>runqhead<span class="token punctuation">)</span>
	t <span class="token operator">:=</span> _p_<span class="token punctuation">.</span>runqtail
	<span class="token keyword">if</span> t<span class="token operator">-</span>h <span class="token operator">&lt;</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>runq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		_p_<span class="token punctuation">.</span>runq<span class="token punctuation">[</span>t<span class="token operator">%</span><span class="token function">uint32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>runq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">StoreRel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_p_<span class="token punctuation">.</span>runqtail<span class="token punctuation">,</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">runqputslow</span><span class="token punctuation">(</span>_p_<span class="token punctuation">,</span> gp<span class="token punctuation">,</span> h<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">goto</span> retry
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),fn=n("li",null,[s("当 "),n("code",null,"next"),s(" 为 "),n("code",null,"true"),s(" 时，将 Goroutine 设置到P的 "),n("code",null,"runnext"),s(" 作为下一个处理器执行的任务")],-1),yn=n("li",null,[s("当 "),n("code",null,"next"),s(" 为 "),n("code",null,"false"),s(" 并且本地运行队列还有剩余空间时，将 Goroutine 加入 P 持有的本地运行队列")],-1),wn={href:"https://draveness.me/golang/tree/runtime.runqputslow",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.runqputslow",-1),xn=e('<p>P 的本地的运行队列是一个使用数组构成的<strong>环形链表</strong>，它最多可以存储 256 个待执行任务。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310021946680.png" alt="golang-runnable-queue" tabindex="0" loading="lazy"><figcaption>golang-runnable-queue</figcaption></figure><p>综上，Golang 中有两个 G 的运行队列：</p><ol><li>P 的本地运行队列</li><li>调度器持有的 全局 运行队列，当 P 的本地运行队列已满时才会加入到全局运行队列中</li></ol><h4 id="调度信息" tabindex="-1"><a class="header-anchor" href="#调度信息" aria-hidden="true">#</a> 调度信息</h4><p>新的 G 在被创建后会设置相关的调度信息。</p><h2 id="_6-5-5-调度循环" tabindex="-1"><a class="header-anchor" href="#_6-5-5-调度循环" aria-hidden="true">#</a> 6.5.5 调度循环</h2><p>在调度器启动之后：</p>',8),Pn={href:"https://draveness.me/golang/tree/runtime.mstart",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"runtime.mstart",-1),On=n("code",null,"g0",-1),zn=n("code",null,"stackguard0",-1),Ln=n("code",null,"stackguard1",-1),Mn={href:"https://draveness.me/golang/tree/runtime.mstart1",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"runtime.mstart1",-1),qn=n("strong",null,"线程",-1),Xn={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime.schedule",-1),Bn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

top<span class="token punctuation">:</span>
	<span class="token keyword">var</span> gp <span class="token operator">*</span>g
	<span class="token keyword">var</span> inheritTime <span class="token builtin">bool</span>

	<span class="token keyword">if</span> gp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>schedtick<span class="token operator">%</span><span class="token number">61</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sched<span class="token punctuation">.</span>runqsize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
			gp <span class="token operator">=</span> <span class="token function">globrunqget</span><span class="token punctuation">(</span>_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> gp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		gp<span class="token punctuation">,</span> inheritTime <span class="token operator">=</span> <span class="token function">runqget</span><span class="token punctuation">(</span>_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> gp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		gp<span class="token punctuation">,</span> inheritTime <span class="token operator">=</span> <span class="token function">findrunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">execute</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> inheritTime<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取待执行的 G 流程如下：</p>`,2),Vn=n("li",null,[s("当"),n("strong",null,"全局队列"),s("中有待执行的 G 时，通过 "),n("code",null,"schedtick"),s(" 确保有一定的机率从全局队列中获取G")],-1),An=n("li",null,"从P的本地队列中获取 G",-1),En={href:"https://draveness.me/golang/tree/runtime.findrunnable",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.findrunnable",-1),In={href:"https://draveness.me/golang/tree/runtime.findrunnable",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.findrunnable",-1),jn=n("li",null,[s("从"),n("strong",null,"本地运行队列"),s("、"),n("strong",null,"全局运行队列"),s("中查找")],-1),Fn=n("li",null,[s("从"),n("strong",null,"网络轮询器"),s("中查找是否有 Goroutine 等待运行")],-1),$n={href:"https://draveness.me/golang/tree/runtime.runqsteal",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"runtime.runqsteal",-1),Un=n("strong",null,"窃取",-1),Kn={href:"https://draveness.me/golang/tree/runtime.execute",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime.execute",-1),Yn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">execute</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> inheritTime <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>curg <span class="token operator">=</span> gp
	gp<span class="token punctuation">.</span>m <span class="token operator">=</span> _g_<span class="token punctuation">.</span>m
	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Grunnable<span class="token punctuation">,</span> _Grunning<span class="token punctuation">)</span>
	gp<span class="token punctuation">.</span>waitsince <span class="token operator">=</span> <span class="token number">0</span>
	gp<span class="token punctuation">.</span>preempt <span class="token operator">=</span> <span class="token boolean">false</span>
	gp<span class="token punctuation">.</span>stackguard0 <span class="token operator">=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo <span class="token operator">+</span> _StackGuard
	<span class="token keyword">if</span> <span class="token operator">!</span>inheritTime <span class="token punctuation">{</span>
		_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>schedtick<span class="token operator">++</span>
	<span class="token punctuation">}</span>

	<span class="token function">gogo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>sched<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Jn={href:"https://draveness.me/golang/tree/runtime.gogo",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"runtime.gogo",-1),Zn=n("code",null,"gogo",-1),Wn=e(`<div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>TEXT runtime·gogo(SB), NOSPLIT, $8-4
	MOVL buf+0(FP), BX     // 获取调度信息
	MOVL gobuf_g(BX), DX
	MOVL 0(DX), CX         // 保证 Goroutine 不为空
	get_tls(CX)
	MOVL DX, g(CX)
	MOVL gobuf_sp(BX), SP  // 将 runtime.goexit 函数的 PC 恢复到 SP 中
	MOVL gobuf_ret(BX), AX
	MOVL gobuf_ctxt(BX), DX
	MOVL $0, gobuf_sp(BX)
	MOVL $0, gobuf_ret(BX)
	MOVL $0, gobuf_ctxt(BX)
	MOVL gobuf_pc(BX), BX  // 获取待执行函数的程序计数器
	JMP  BX                // 开始执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310022022789.png" alt="golang-gogo-stack" tabindex="0" loading="lazy"><figcaption>golang-gogo-stack</figcaption></figure>`,2),ns={href:"https://draveness.me/golang/tree/runtime.goexit",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"runtime.goexit",-1),as=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>TEXT runtime·<span class="token function">goexit</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span>NOSPLIT<span class="token punctuation">,</span>$<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span>
	CALL	runtime·<span class="token function">goexit1</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">goexit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">mcall</span><span class="token punctuation">(</span>goexit0<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ts={href:"https://draveness.me/golang/tree/runtime.goexit0",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.goexit0",-1),os=n("code",null,"_Gdead",-1),ps={href:"https://draveness.me/golang/tree/runtime.gfput",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"runtime.gfput",-1),ls=n("code",null,"gFree",-1),is=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">goexit0</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Grunning<span class="token punctuation">,</span> _Gdead<span class="token punctuation">)</span>
	gp<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token operator">...</span>
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>
	gp<span class="token punctuation">.</span>labels <span class="token operator">=</span> <span class="token boolean">nil</span>
	gp<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>

	<span class="token function">dropg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">gfput</span><span class="token punctuation">(</span>_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gp<span class="token punctuation">)</span>
	<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),us={href:"https://draveness.me/golang/tree/runtime.goexit0",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"runtime.goexit0",-1),ds={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.schedule",-1),gs={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},ms=n("code",null,"runtime.schedule",-1),vs={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"runtime.schedule",-1),bs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310022024900.png",alt:"golang-scheduler-loop",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-scheduler-loop")],-1),hs=n("h2",{id:"_6-5-6-触发调度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-5-6-触发调度","aria-hidden":"true"},"#"),s(" 6.5.6 触发调度")],-1),fs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310022025607.png",alt:"schedule-points",tabindex:"0",loading:"lazy"}),n("figcaption",null,"schedule-points")],-1),ys=n("p",null,[s("触发调度的"),n("strong",null,"主要"),s("有以下路径：")],-1),ws={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},Gs=n("code",null,"runtime.gopark",-1),xs={href:"https://draveness.me/golang/tree/runtime.park_m",target:"_blank",rel:"noopener noreferrer"},Ps=n("code",null,"runtime.park_m",-1),Ss={href:"https://draveness.me/golang/tree/runtime.exitsyscall",target:"_blank",rel:"noopener noreferrer"},Os=n("code",null,"runtime.exitsyscall",-1),zs={href:"https://draveness.me/golang/tree/runtime.exitsyscall0",target:"_blank",rel:"noopener noreferrer"},Ls=n("code",null,"runtime.exitsyscall0",-1),Ms={href:"https://draveness.me/golang/tree/runtime.Gosched",target:"_blank",rel:"noopener noreferrer"},Ts=n("code",null,"runtime.Gosched",-1),qs={href:"https://draveness.me/golang/tree/runtime.gosched_m",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"runtime.gosched_m",-1),Cs={href:"https://draveness.me/golang/tree/runtime.goschedImpl",target:"_blank",rel:"noopener noreferrer"},Bs=n("code",null,"runtime.goschedImpl",-1),Vs={href:"https://draveness.me/golang/tree/runtime.sysmon",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"runtime.sysmon",-1),Es={href:"https://draveness.me/golang/tree/runtime.retake",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"runtime.retake",-1),Is={href:"https://draveness.me/golang/tree/runtime.preemptone",target:"_blank",rel:"noopener noreferrer"},Rs=n("code",null,"runtime.preemptone",-1),js=n("h3",{id:"主动挂起",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#主动挂起","aria-hidden":"true"},"#"),s(" 主动挂起")],-1),Fs={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},$s=n("code",null,"runtime.gopark",-1),Ds=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopark</span><span class="token punctuation">(</span>unlockf <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> lock unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> reason waitReason<span class="token punctuation">,</span> traceEv <span class="token builtin">byte</span><span class="token punctuation">,</span> traceskip <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mp <span class="token operator">:=</span> <span class="token function">acquirem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> mp<span class="token punctuation">.</span>curg
	mp<span class="token punctuation">.</span>waitlock <span class="token operator">=</span> lock
	mp<span class="token punctuation">.</span>waitunlockf <span class="token operator">=</span> unlockf
	gp<span class="token punctuation">.</span>waitreason <span class="token operator">=</span> reason
	mp<span class="token punctuation">.</span>waittraceev <span class="token operator">=</span> traceEv
	mp<span class="token punctuation">.</span>waittraceskip <span class="token operator">=</span> traceskip
	<span class="token function">releasem</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>
	<span class="token function">mcall</span><span class="token punctuation">(</span>park_m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Us={href:"https://draveness.me/golang/tree/runtime.mcall",target:"_blank",rel:"noopener noreferrer"},Ks=n("code",null,"runtime.mcall",-1),Hs={href:"https://draveness.me/golang/tree/runtime.park_m",target:"_blank",rel:"noopener noreferrer"},Ys=n("code",null,"runtime.park_m",-1),Js=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">park_m</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Grunning<span class="token punctuation">,</span> _Gwaiting<span class="token punctuation">)</span>
	<span class="token function">dropg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qs={href:"https://draveness.me/golang/tree/runtime.park_m",target:"_blank",rel:"noopener noreferrer"},Zs=n("code",null,"runtime.park_m",-1),Ws=n("code",null,"_Grunning",-1),na=n("code",null,"_Gwaiting",-1),sa={href:"https://draveness.me/golang/tree/runtime.dropg",target:"_blank",rel:"noopener noreferrer"},aa=n("code",null,"runtime.dropg",-1),ta={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},ea=n("code",null,"runtime.schedule",-1),oa={href:"https://draveness.me/golang/tree/runtime.goready",target:"_blank",rel:"noopener noreferrer"},pa=n("code",null,"runtime.goready",-1),ca={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},la=n("code",null,"runtime.gopark",-1),ia=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">goready</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> traceskip <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">ready</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> traceskip<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ready</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> traceskip <span class="token builtin">int</span><span class="token punctuation">,</span> next <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Gwaiting<span class="token punctuation">,</span> _Grunnable<span class="token punctuation">)</span>
	<span class="token function">runqput</span><span class="token punctuation">(</span>_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gp<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>npidle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>nmspinning<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">wakep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ua={href:"https://draveness.me/golang/tree/runtime.ready",target:"_blank",rel:"noopener noreferrer"},ra=n("code",null,"runtime.ready",-1),da=n("code",null,"_Grunnable",-1),ka=n("h3",{id:"系统调用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统调用","aria-hidden":"true"},"#"),s(" 系统调用")],-1),ga=n("p",null,"系统调用也会触发运行时调度器的调度。",-1),ma={href:"https://draveness.me/golang/tree/syscall.Syscall",target:"_blank",rel:"noopener noreferrer"},va=n("code",null,"syscall.Syscall",-1),_a={href:"https://draveness.me/golang/tree/syscall.RawSyscall",target:"_blank",rel:"noopener noreferrer"},ba=n("code",null,"syscall.RawSyscall",-1),ha={href:"https://draveness.me/golang/tree/syscall.Syscall",target:"_blank",rel:"noopener noreferrer"},fa=n("code",null,"syscall.Syscall",-1),ya=e(`<div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>#define INVOKE_SYSCALL	INT	$0x80

TEXT ·Syscall(SB),NOSPLIT,$0-28
	CALL	runtime·entersyscall(SB)
	...
	INVOKE_SYSCALL
	...
	CALL	runtime·exitsyscall(SB)
	RET
ok:
	...
	CALL	runtime·exitsyscall(SB)
	RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wa=n("code",null,"INVOKE_SYSCALL",-1),Ga={href:"https://draveness.me/golang/tree/runtime.entersyscall",target:"_blank",rel:"noopener noreferrer"},xa=n("code",null,"runtime.entersyscall",-1),Pa={href:"https://draveness.me/golang/tree/runtime.exitsyscall",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"runtime.exitsyscall",-1),Oa=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310022029407.png",alt:"golang-syscall-and-rawsyscal",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-syscall-and-rawsyscal")],-1),za=n("h2",{id:"_6-5-7-线程管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-5-7-线程管理","aria-hidden":"true"},"#"),s(" 6.5.7 线程管理")],-1),La=n("p",null,"Golang 通过调度器改变线程的所有权。",-1),Ma={href:"https://draveness.me/golang/tree/runtime.LockOSThread",target:"_blank",rel:"noopener noreferrer"},Ta=n("code",null,"runtime.LockOSThread",-1),qa=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">LockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newmHandoff<span class="token punctuation">.</span>haveTemplateThread<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> GOOS <span class="token operator">!=</span> <span class="token string">&quot;plan9&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">startTemplateThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedExt<span class="token operator">++</span>
	<span class="token function">dolockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">dolockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedg<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_g_<span class="token punctuation">)</span>
	_g_<span class="token punctuation">.</span>lockedm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_g_<span class="token punctuation">.</span>m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Xa={href:"https://draveness.me/golang/tree/runtime.dolockOSThread",target:"_blank",rel:"noopener noreferrer"},Ca=n("code",null,"runtime.dolockOSThread",-1),Ba=n("code",null,"lockedg",-1),Va=n("code",null,"lockedm",-1),Aa={href:"https://draveness.me/golang/tree/runtime.UnlockOSThread",target:"_blank",rel:"noopener noreferrer"},Ea=n("code",null,"runtime.UnlockOSThread",-1),Na=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UnlockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedExt <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedExt<span class="token operator">--</span>
	<span class="token function">dounlockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">dounlockOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	_g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedInt <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedExt <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	_g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>lockedg <span class="token operator">=</span> <span class="token number">0</span>
	_g_<span class="token punctuation">.</span>lockedm <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程生命周期" tabindex="-1"><a class="header-anchor" href="#线程生命周期" aria-hidden="true">#</a> 线程生命周期</h3>`,2),Ia={href:"https://draveness.me/golang/tree/runtime.startm",target:"_blank",rel:"noopener noreferrer"},Ra=n("code",null,"runtime.startm",-1),ja={href:"https://draveness.me/golang/tree/runtime.newm",target:"_blank",rel:"noopener noreferrer"},Fa=n("code",null,"runtime.newm",-1),$a=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newm</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _p_ <span class="token operator">*</span>p<span class="token punctuation">,</span> id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mp <span class="token operator">:=</span> <span class="token function">allocm</span><span class="token punctuation">(</span>_p_<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>nextp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>sigmask <span class="token operator">=</span> initSigmask
	<span class="token operator">...</span>
	<span class="token function">newm1</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newm1</span><span class="token punctuation">(</span>mp <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> iscgo <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token function">newosproc</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Da={href:"https://draveness.me/golang/tree/runtime.newosproc",target:"_blank",rel:"noopener noreferrer"},Ua=n("code",null,"runtime.newosproc",-1),Ka=n("code",null,"clone",-1),Ha=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newosproc</span><span class="token punctuation">(</span>mp <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stk <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	ret <span class="token operator">:=</span> <span class="token function">clone</span><span class="token punctuation">(</span>cloneFlags<span class="token punctuation">,</span> stk<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">funcPC</span><span class="token punctuation">(</span>mstart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ya=n("code",null,"clone",-1),Ja=n("code",null,"exit",-1),Qa={href:"https://draveness.me/golang/tree/runtime.mstart",target:"_blank",rel:"noopener noreferrer"},Za=n("code",null,"runtime.mstart",-1),Wa={href:"https://draveness.me/golang/tree/runtime.mstart",target:"_blank",rel:"noopener noreferrer"},nt=n("code",null,"runtime.mstart",-1),st={href:"https://draveness.me/golang/tree/runtime.newm",target:"_blank",rel:"noopener noreferrer"},at=n("code",null,"runtime.newm",-1),tt=n("code",null,"fn",-1),et=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),ot={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/",target:"_blank",rel:"noopener noreferrer"};function pt(ct,lt){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("Goroutine 的数据结构用 "),n("a",r,[d,t(a)]),s(" 表示，其中：")]),k,n("p",null,[s("其中的 "),g,s("字段使用 "),n("a",m,[v,t(a)]),s(" 结构体：")]),_,n("ul",null,[b,h,n("li",null,[f,s("：持有 "),n("a",y,[w,t(a)]),s(" 的 goroutine")]),G]),x,n("p",null,[s("M 的运行时数据结构由"),n("a",P,[S,t(a)]),s("表示：")]),O,n("p",null,[s("P 的运行时数据结构由"),n("a",z,[L,t(a)]),s("表示，其中：")]),M,n("p",null,[s("调度器在运行时通过"),n("a",T,[q,t(a)]),s("初始化：")]),X,n("p",null,[s("之后会调用"),n("a",C,[B,t(a)]),s("，流程如下：")]),n("ol",null,[V,n("li",null,[s("使用 "),A,s(" 创建新的处理器结构体并调用 "),n("a",E,[N,t(a)]),s(" 初始化刚刚扩容的处理器；")]),I,n("li",null,[s("调用 "),n("a",R,[j,t(a)]),s(" 释放不再使用的处理器结构")]),F,$]),D,n("p",null,[s("创建 G 可以通过 "),U,s("关键字，编译期会将其转换成 "),n("a",K,[H,t(a)]),s(" 函数调用：")]),Y,n("ul",null,[J,Q,Z,n("li",null,[s("在满足条件时，使用"),n("a",W,[nn,t(a)]),s("唤醒 P 执行 G")])]),n("p",null,[n("a",sn,[an,t(a)]),s("的执行流程如下：")]),tn,n("ul",null,[n("li",null,[s("调用 "),n("a",en,[on,t(a)]),s(" 将函数 "),pn,s("的所有参数拷贝到栈上")])]),cn,n("p",null,[n("a",ln,[un,t(a)]),s("函数获取 G 的方式有两种：")]),n("ol",null,[rn,n("li",null,[s("使用 "),n("a",dn,[kn,t(a)]),s(" 生成一个新的 G，并加入全局的 G 列表 "),gn,s(" 中")])]),mn,vn,n("p",null,[n("a",_n,[bn,t(a)]),s("将 G 放到运行队列中，运行队列可能是：")]),hn,n("ol",null,[fn,yn,n("li",null,[s("当 P 的本地运行队列已经没有剩余空间时就会把本地队列中的一部分 Goroutine 和待加入的 Goroutine 通过 "),n("a",wn,[Gn,t(a)]),s(" 添加到调度器持有的全局运行队列上")])]),xn,n("ol",null,[n("li",null,[s("调用 "),n("a",Pn,[Sn,t(a)]),s("，初始化 "),On,s(" 的 "),zn,s(" 和 "),Ln,s(" 字段")]),n("li",null,[s("调用 "),n("a",Mn,[Tn,t(a)]),s(" 初始化"),qn,s("，并使用 "),n("a",Xn,[Cn,t(a)]),s(" 进入调度循环")])]),Bn,n("ol",null,[Vn,An,n("li",null,[s("若无法从 P 的本地队列和全局队列中获取，则调用函数 "),n("a",En,[Nn,t(a)]),s("进行查找")])]),n("p",null,[n("a",In,[Rn,t(a)]),s("的流程如下：")]),n("ol",null,[jn,Fn,n("li",null,[s("通过 "),n("a",$n,[Dn,t(a)]),s(" 尝试从其他随机的 P 中"),Un,s("待运行的 Goroutine")])]),n("p",null,[s("获取 G 之后，调用函数 "),n("a",Kn,[Hn,t(a)]),s(" 执行 G：")]),Yn,n("p",null,[s("函数最终将使用 "),n("a",Jn,[Qn,t(a)]),s(" 将 G 调度到当前的线程 M 上，"),Zn,s("函数在不同架构上实现有所不同，386 架构上如下：")]),Wn,n("p",null,[s("当 Goroutine 中运行的函数返回时，程序会跳转到 "),n("a",ns,[ss,t(a)]),s(" 所在位置执行该函数：")]),as,n("p",null,[s("经过复杂的函数调用之后，最终在当前线程的 g0 的栈上调用 "),n("a",ts,[es,t(a)]),s(" 函数，该函数会将 Goroutine 转换会 "),os,s(" 状态、清理其中的字段、移除 Goroutine 和线程的关联并调用 "),n("a",ps,[cs,t(a)]),s(" 重新加入处理器的 Goroutine 空闲列表 "),ls,s("：")]),is,n("p",null,[n("a",us,[rs,t(a)]),s(" 会重新调用 "),n("a",ds,[ks,t(a)]),s(" 触发新一轮的 Goroutine 调度。")]),n("p",null,[s("Golang 中的运行时调度循环会从 "),n("a",gs,[ms,t(a)]),s(" 开始，最终又回到 "),n("a",vs,[_s,t(a)]),s("，认为调度循环永远都不会返回。")]),bs,hs,fs,ys,n("ol",null,[n("li",null,[s("主动挂起："),n("a",ws,[Gs,t(a)]),s(" -> "),n("a",xs,[Ps,t(a)])]),n("li",null,[s("系统调用 ： "),n("a",Ss,[Os,t(a)]),s(" -> "),n("a",zs,[Ls,t(a)])]),n("li",null,[s("协作式调度 ： "),n("a",Ms,[Ts,t(a)]),s(" -> "),n("a",qs,[Xs,t(a)]),s(" -> "),n("a",Cs,[Bs,t(a)])]),n("li",null,[s("系统监控 ： "),n("a",Vs,[As,t(a)]),s(" -> "),n("a",Es,[Ns,t(a)]),s(" -> "),n("a",Is,[Rs,t(a)])])]),js,n("p",null,[n("a",Fs,[$s,t(a)]),s("会将当前 Goroutine 暂停，被暂停的任务不会放回运行队列：")]),Ds,n("p",null,[s("使用"),n("a",Us,[Ks,t(a)]),s("切换到 g0 的栈上调用 "),n("a",Hs,[Ys,t(a)]),s("：")]),Js,n("p",null,[n("a",Qs,[Zs,t(a)]),s("会将当前 Goroutine 的状态从 "),Ws,s(" 切换至 "),na,s("，调用 "),n("a",sa,[aa,t(a)]),s(" 移除线程和 Goroutine 之间的关联，在这之后调用 "),n("a",ta,[ea,t(a)]),s(" 触发新一轮的调度。")]),n("p",null,[s("当 Goroutine 等待的特定条件满足后，运行时会调用 "),n("a",oa,[pa,t(a)]),s(" 将因为调用 "),n("a",ca,[la,t(a)]),s(" 而陷入休眠的 Goroutine 唤醒。")]),ia,n("p",null,[n("a",ua,[ra,t(a)]),s(" 会将准备就绪的 Goroutine 的状态切换至 "),da,s(" 并将其加入处理器的运行队列中，等待调度器的调度。")]),ka,ga,n("p",null,[s("通过 "),n("a",ma,[va,t(a)]),s(" 和 "),n("a",_a,[ba,t(a)]),s(" 等使用汇编语言编写的方法封装操作系统提供的所有系统调用，其中 "),n("a",ha,[fa,t(a)]),s(" 的实现如下：")]),ya,n("p",null,[wa,s(" 执行系统调用前后，上述函数会调用运行时的 "),n("a",Ga,[xa,t(a)]),s(" 和 "),n("a",Pa,[Sa,t(a)]),s("。")]),Oa,za,La,n("p",null,[n("a",Ma,[Ta,t(a)]),s("通过如下所示的代码绑定 Goroutine 和当前线程：")]),qa,n("p",null,[n("a",Xa,[Ca,t(a)]),s(" 会分别设置线程的 "),Ba,s(" 字段和 Goroutine 的 "),Va,s(" 字段，绑定线程和 Goroutine。")]),n("p",null,[s("当 Goroutine 完成了特定的操作之后，会调用以下函数 "),n("a",Aa,[Ea,t(a)]),s(" 分离 Goroutine 和线程：")]),Na,n("p",null,[s("Go 语言的运行时会通过 "),n("a",Ia,[Ra,t(a)]),s(" 启动线程来执行处理器 P，如果在该函数中没能从闲置列表中获取到线程 M 就会调用 "),n("a",ja,[Fa,t(a)]),s(" 创建新的线程：")]),$a,n("p",null,[s("创建新的线程需要使用如下所示的 "),n("a",Da,[Ua,t(a)]),s("，该函数在 Linux 平台上会通过系统调用 "),Ka,s(" 创建新的操作系统线程，它也是创建线程链路上距离操作系统最近的 Go 语言函数：")]),Ha,n("p",null,[s("使用系统调用 "),Ya,s(" 创建的线程会在线程主动调用 "),Ja,s("、或者传入的函数 "),n("a",Qa,[Za,t(a)]),s(" 返回会主动退出，"),n("a",Wa,[nt,t(a)]),s(" 会执行调用 "),n("a",st,[at,t(a)]),s(" 时传入的匿名函数 "),tt,s("，到这里也就完成了从线程创建到销毁的整个闭环。")]),et,n("ol",null,[n("li",null,[n("a",ot,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/"),t(a)])])])])}const ut=o(i,[["render",pt],["__file","06.5.goroutine.html.vue"]]);export{ut as default};
