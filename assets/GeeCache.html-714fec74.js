import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as e,H as i}from"./framework-d03928c9.js";const l={},u=n("h2",{id:"_1-lru-缓存策略",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-lru-缓存策略","aria-hidden":"true"},"#"),s(" 1. LRU 缓存策略")],-1),r=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131426770.jpeg",alt:"implement lru algorithm with golang",tabindex:"0",loading:"lazy"}),n("figcaption",null,"implement lru algorithm with golang")],-1),k={href:"https://leetcode.cn/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"},d=e(`<ol><li>双向链表：key 对应的 value 组成双向链表</li><li>哈希表：key 指向双向链表中的节点</li></ol><p>算法：</p><ol><li>访问节点后，将节点移动到队尾</li><li>新增的节点放置在队尾</li></ol><p>队首的节点就是 最近最少使用 的节点，当触发淘汰条件时将被删除。</p><h3 id="_1-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-1-数据结构" aria-hidden="true">#</a> 1.1 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Cache is LRU cache. It is not safe for concurrent cases.</span>
<span class="token keyword">type</span> Cache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	maxBytes <span class="token builtin">int64</span>
	nBytes   <span class="token builtin">int64</span>
	dl       <span class="token operator">*</span>list<span class="token punctuation">.</span>List <span class="token comment">// doubly linked list</span>
	cache    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element
	<span class="token comment">// optional and executed when an entry is purged</span>
	OnEvicted <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	key <span class="token builtin">string</span>
	val Value
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Value <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Cache</code>：</p><ul><li><code>maxBytes</code>：缓存的内存大小上限</li><li><code>nBytes</code>：当前已使用的内存大小</li><li><code>dl</code>：双向链表，</li><li><code>cache</code>：哈希表</li><li><code>OnEvicted</code>：记录被移除时的回调函数</li></ul><p><code>entry</code>: 链表元素</p><ul><li><code>key</code>：缓存的 key</li><li><code>val</code>：value，接口类型，方法<code>Len()</code>用于返回占用的内存大小</li></ul><h2 id="_2-设计" tabindex="-1"><a class="header-anchor" href="#_2-设计" aria-hidden="true">#</a> 2. 设计</h2><h3 id="_2-1-byteview" tabindex="-1"><a class="header-anchor" href="#_2-1-byteview" aria-hidden="true">#</a> 2.1 ByteView</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ByteView <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ByteView.b</code>存储实际的缓存值，<code>[]byte</code>可以用于表示任意的数据类型。</p><p>缓存值对于用户来说是只读的，当获取缓存时会拷贝一份数据，防止实际缓存被修改。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ByteSlice returns a copy of the data as a byte slice.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-并发缓存" tabindex="-1"><a class="header-anchor" href="#_2-2-并发缓存" aria-hidden="true">#</a> 2.2 并发缓存</h3><p>单纯的 LRU 缓存不是并发安全的，可以在LRU缓存的基础上进行封装，通过互斥锁来保证并发安全：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> cache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu         sync<span class="token punctuation">.</span>Mutex
	lru        <span class="token operator">*</span>lru<span class="token punctuation">.</span>Cache
	cacheBytes <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val ByteView<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>lru <span class="token operator">=</span> lru<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cacheBytes<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> ok
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-group" tabindex="-1"><a class="header-anchor" href="#_2-3-group" aria-hidden="true">#</a> 2.3 Group</h3><p>Group 用于管理一组缓存，是最核心的数据结构。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name      <span class="token builtin">string</span>
	getter    Getter
	mainCache cache
	peers     PeerPicker
	<span class="token comment">// use singleflight.Group to make sure that</span>
	<span class="token comment">// each key is only fetched once</span>
	loader <span class="token operator">*</span>singleflight<span class="token punctuation">.</span>Group
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code>：Group 名</li><li><code>getter</code>：回调，当缓存不存在时调用<code>getter.Get</code>访问数据源</li><li><code>mainCache</code>：缓存</li><li><code>peers</code>：用于访问其他缓存服务器/节点</li><li><code>loader</code>：抑制重复调用，多次调用只会执行一次，用于避免缓存击穿</li></ul><h4 id="获取缓存" tabindex="-1"><a class="header-anchor" href="#获取缓存" aria-hidden="true">#</a> 获取缓存</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;key is required&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>mainCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;[GeeCache] hit&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	view<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> g<span class="token punctuation">.</span>peers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> peer<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PickPeer</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				val<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">getFromPeer</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">nil</span>
				<span class="token punctuation">}</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;[GeeCache] Failed to get from peer&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">getLocally</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> view<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取缓存流程：</p><ol><li>尝试从本地缓存中获取</li><li>若本地缓存不存在，则通过节点选择策略，访问其他的缓存服务节点获取</li><li>若节点选择的是自身 或 访问其他节点失败，则访问数据源，返回数据并加入本地缓存</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131724612.png" alt="image-20231013172431733" tabindex="0" loading="lazy"><figcaption>image-20231013172431733</figcaption></figure><h3 id="_2-4-接口型函数" tabindex="-1"><a class="header-anchor" href="#_2-4-接口型函数" aria-hidden="true">#</a> 2.4 接口型函数</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Getter loads data for a key</span>
<span class="token keyword">type</span> Getter <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> Getter <span class="token operator">=</span> <span class="token function">GetterFunc</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// GetterFunc implements Getter with a function</span>
<span class="token keyword">type</span> GetterFunc <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// Get implements Getter interface</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f GetterFunc<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>GetterFunc</code>实现了接口<code>Getter</code>，这样做的好处是，<code>Getter</code>类型的参数：</p><ol><li>可以传入 <code>GetterFunc</code>，适用于简单场景</li><li>可以传入实现了 <code>Getter</code>的结构体，适用于复杂场景</li></ol><h3 id="_2-4-一致性哈希算法" tabindex="-1"><a class="header-anchor" href="#_2-4-一致性哈希算法" aria-hidden="true">#</a> 2.4 一致性哈希算法</h3><p>使用一致性哈希算法选择缓存服务节点，可以避免在节点发生变化时出现缓存雪崩。</p><blockquote><p>缓存雪崩：缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。常因为缓存服务器宕机，或缓存设置了相同的过期时间引起。</p></blockquote>`,35),v=n("p",null,[s("一致性哈希算法将 key 映射到 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"32")])]),n("annotation",{encoding:"application/x-tex"},"2^{32}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"32")])])])])])])])])])])]),s(" 的空间中，将这个数字首尾相连，形成一个环。")],-1),m=e(`<ul><li>计算节点/机器(通常使用节点的名称、编号和 IP 地址)的哈希值，放置在环上。</li><li>计算 key 的哈希值，放置在环上，顺时针寻找到的第一个节点，就是应选取的节点/机器。</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131733559.jpeg" alt="一致性哈希添加节点 consistent hashing add peer" tabindex="0" loading="lazy"><figcaption>一致性哈希添加节点 consistent hashing add peer</figcaption></figure><p>单节点数量发生变化时，只会有一小部分数据受到影响。</p><h4 id="虚拟节点" tabindex="-1"><a class="header-anchor" href="#虚拟节点" aria-hidden="true">#</a> 虚拟节点</h4><p>当节点数量比较少时，可能产生<strong>数据倾斜</strong>问题，即大量的数据被分配到某些节点上。</p><p>此时可以引入虚拟节点，一个真实节点可以对应多个虚拟节点，以增加节点数量避免数据倾斜。</p><h3 id="_2-5-分布式节点" tabindex="-1"><a class="header-anchor" href="#_2-5-分布式节点" aria-hidden="true">#</a> 2.5 分布式节点</h3><h4 id="http-server-client" tabindex="-1"><a class="header-anchor" href="#http-server-client" aria-hidden="true">#</a> HTTP server/client</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HTTPPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	self        <span class="token builtin">string</span>     <span class="token comment">// 自己的地址，主机+端口</span>
	basePath    <span class="token builtin">string</span>     <span class="token comment">// 节点间通讯地址的前缀</span>
	mu          sync<span class="token punctuation">.</span>Mutex <span class="token comment">// guards peers and httpGetters</span>
	peers       <span class="token operator">*</span>consistenthash<span class="token punctuation">.</span>Map
	httpGetters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>self</code>：当前节点的地址</li><li><code>basePath</code>：节点间通讯地址前缀；如：“/geecache/”</li><li><code>peers</code>：使用一致性哈希算法，根据 key 选择节点</li><li><code>httpGetters</code>：每个节点对应的客户端</li></ul><h5 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h5><p>实现 <code>http.Handler</code>接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	path <span class="token operator">:=</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path
	<span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> p<span class="token punctuation">.</span>basePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;HTTPPool serving unexpected path: &quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	p<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> path<span class="token punctuation">)</span>

	<span class="token comment">// /&lt;basepath&gt;/&lt;groupname&gt;/&lt;key&gt; required</span>
	parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>basePath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;bad request&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	groupName <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	key <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

	group <span class="token operator">:=</span> <span class="token function">GetGroup</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> group <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;no such group: &quot;</span><span class="token operator">+</span>groupName<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	view<span class="token punctuation">,</span> err <span class="token operator">:=</span> group<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	body<span class="token punctuation">,</span> err <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> view<span class="token punctuation">.</span><span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>检查请求路径</li><li>解析出 Group 名和 key</li><li>获取 value 并返回</li></ol><h5 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> client</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> httpGetter <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	baseURL <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>httpGetter<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>in <span class="token operator">*</span>pb<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> out <span class="token operator">*</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	u <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>
		<span class="token string">&quot;%v%v/%v&quot;</span><span class="token punctuation">,</span>
		h<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span>
		url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">GetGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>

	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;server returned: %v&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;reading response body: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;decoding respose body: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 HTTP 访问其他节点</p><h4 id="peerpicker-peergetter" tabindex="-1"><a class="header-anchor" href="#peerpicker-peergetter" aria-hidden="true">#</a> PeerPicker / PeerGetter</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// PeerPicker is the interface that must be implemented to locate</span>
<span class="token comment">// the peer that owns a specific key</span>
<span class="token keyword">type</span> PeerPicker <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>PeerGetter<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// PeerGetter is the interface that must be implemented by a peer</span>
<span class="token keyword">type</span> PeerGetter <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>in <span class="token operator">*</span>pb<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> out <span class="token operator">*</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>HTTPPool</code>实现了 <code>PeerPicker</code>接口，通过 key 选取节点</li><li><code>httpGetter</code>实现了 <code>PeerGetter</code>接口，向节点发送 HTTP 请求，获取 value</li></ul><h3 id="_2-7-single-flight" tabindex="-1"><a class="header-anchor" href="#_2-7-single-flight" aria-hidden="true">#</a> 2.7 Single Flight</h3><blockquote><p><strong>缓存雪崩</strong>：缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。缓存雪崩通常因为缓存服务器宕机、缓存的 key 设置了相同的过期时间等引起。</p></blockquote><blockquote><p><strong>缓存击穿</strong>：一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到 DB ，造成瞬时DB请求量大、压力骤增。</p></blockquote><blockquote><p><strong>缓存穿透</strong>：查询一个不存在的数据，因为不存在则不会写到缓存中，所以每次都会去请求 DB，如果瞬间流量过大，穿透到 DB，导致宕机。</p></blockquote><p>当同时向节点发送大量的请求时，可能引发缓存击穿。</p><p>因为多次请求的结果和一次请求是一样的，可以只处理一次即可。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	wg  sync<span class="token punctuation">.</span>WaitGroup
	val any
	err <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu sync<span class="token punctuation">.</span>Mutex
	m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span> <span class="token comment">// 延迟加载</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 调用已存在</span>
	<span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 等待调用结束</span>
		c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 直接返回</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err
	<span class="token punctuation">}</span>
	<span class="token comment">// 调用不存在，创建新调用</span>
	c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 发起调用</span>
	c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 调用结束，删除调用</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>一个 key 对应一次请求</li><li>若当前 key 的请求已经存在，表示正在处理中，则等待处理并返回结果</li><li>若不存在，则创建新请求开始处理，并发计数器加一，这样同时只会有一个请求会被处理</li><li>处理完毕后，移除调用，返回结果</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,29),b={href:"https://geektutu.com/post/gee.html",target:"_blank",rel:"noopener noreferrer"};function g(h,y){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("LRU（"),n("a",k,[s("146. LRU 缓存"),t(a)]),s("）由两部分组成：")]),d,v,m,n("ol",null,[n("li",null,[n("a",b,[s("七天用Go从零实现系列"),t(a)])])])])}const w=p(l,[["render",g],["__file","GeeCache.html.vue"]]);export{w as default};
