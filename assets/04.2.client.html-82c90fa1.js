import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as l}from"./framework-09afcf0b.js";const i={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day2-client",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="_1-call-结构体设计" tabindex="-1"><a class="header-anchor" href="#_1-call-结构体设计" aria-hidden="true">#</a> 1. Call 结构体设计</h2><p>对于<code>net/rpc</code>来说，一个函数需要能够被远程调用，需要满足如下五个条件：</p><ul><li>the method’s type is exported.</li><li>the method is exported.</li><li>the method has two arguments, both exported (or builtin) types.</li><li>the method’s second argument is a pointer.</li><li>the method has return type error.</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">MethodName</span><span class="token punctuation">(</span>argType T1<span class="token punctuation">,</span> replyType <span class="token operator">*</span>T2<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>geerpc/client.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Call <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Seq           <span class="token builtin">uint64</span>
	ServiceMethod <span class="token builtin">string</span>     <span class="token comment">// format &quot;&lt;service&gt;.&lt;method&gt;&quot;</span>
	Args          any        <span class="token comment">// arguments to the func</span>
	Reply         any        <span class="token comment">// reply from the func</span>
	Error         <span class="token builtin">error</span>      <span class="token comment">// if error occurs, it will be set</span>
	Done          <span class="token keyword">chan</span> <span class="token operator">*</span>Call <span class="token comment">// Strobes when call is complete.</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	call<span class="token punctuation">.</span>Done <span class="token operator">&lt;-</span> call
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持异步调用，在调用结束时使用<code>call.Done</code>通知。</p><h2 id="_2-client-实现" tabindex="-1"><a class="header-anchor" href="#_2-client-实现" aria-hidden="true">#</a> 2. Client 实现</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cc       codec<span class="token punctuation">.</span>Codec
	opt      <span class="token operator">*</span>Option
	sending  sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	header   codec<span class="token punctuation">.</span>Header
	mu       sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	seq      <span class="token builtin">uint64</span>
	pending  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call
	closing  <span class="token builtin">bool</span> <span class="token comment">// user has called Close</span>
	shutdown <span class="token builtin">bool</span> <span class="token comment">// server told to stop</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> io<span class="token punctuation">.</span>Closer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> ErrShutdown <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;connection is shut down&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// Close the connection</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> client<span class="token punctuation">.</span>closing <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ErrShutdown
	<span class="token punctuation">}</span>
	client<span class="token punctuation">.</span>closing <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">return</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsAvailable return true if the client does work</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">IsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">!</span>client<span class="token punctuation">.</span>shutdown <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>client<span class="token punctuation">.</span>closing
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Client</code>:</p><ul><li><code>cc</code>：消息编解码器</li><li><code>sending</code>：互斥锁，保证并发时报文不会被干扰</li><li><code>header</code>：请求头</li><li><code>seq</code>：请求序列号</li><li><code>pending</code>：存储未完成的请求，key 为请求的编号，value 为 Call</li><li><code>closing</code>：客户端不可用，并且是由客户端关闭</li><li><code>shutdown</code>：客户端不可用，并且是由服务端关闭</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">registerCall</span><span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> client<span class="token punctuation">.</span>closing <span class="token operator">||</span> client<span class="token punctuation">.</span>shutdown <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrShutdown
	<span class="token punctuation">}</span>
	call<span class="token punctuation">.</span>Seq <span class="token operator">=</span> client<span class="token punctuation">.</span>seq
	client<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>call<span class="token punctuation">.</span>Seq<span class="token punctuation">]</span> <span class="token operator">=</span> call
	client<span class="token punctuation">.</span>seq<span class="token operator">++</span>
	<span class="token keyword">return</span> call<span class="token punctuation">.</span>Seq<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">removeCall</span><span class="token punctuation">(</span>seq <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	call <span class="token operator">:=</span> client<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>seq<span class="token punctuation">]</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token keyword">return</span> call
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">terminateCalls</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client<span class="token punctuation">.</span>shutdown <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> call <span class="token operator">:=</span> <span class="token keyword">range</span> client<span class="token punctuation">.</span>pending <span class="token punctuation">{</span>
		call<span class="token punctuation">.</span>Error <span class="token operator">=</span> err
		call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>regiterCall</code>：注册 Call， 将 Call 放入 <code>client.pending</code>中，并更新序列号</li><li><code>removeCall</code>：移除并返回被移除的 Call</li><li><code>terminatesCalls</code>：发生错误时，终止等待中 Call 的调用，并将错误通知调用方</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">for</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> h codec<span class="token punctuation">.</span>Header
		<span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> call <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token comment">// write partially failed or call already removed</span>
			err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> h<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">:</span>
			call<span class="token punctuation">.</span>Error <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
			err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Reply<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				call<span class="token punctuation">.</span>Error <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;reading body &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// error occurs, terminates all pending calls</span>
	client<span class="token punctuation">.</span><span class="token function">terminateCalls</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端接收的响应有三种情况：</p><ol><li>Call 不存在，可能请求没有发送完整，或者被取消，服务端依然进行了处理</li><li>Call 存在，服务端处理出错，获取<code>h.Error</code></li><li>Call 存在，且服务端正常处理，读取响应数据</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span>
	<span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid codec type %s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: codec error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// send option to server</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: options error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Client <span class="token punctuation">{</span>
	client <span class="token operator">:=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span>
		seq<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// seq start with 1, 0 means invalid call</span>
		cc<span class="token punctuation">:</span>      cc<span class="token punctuation">,</span>
		opt<span class="token punctuation">:</span>     opt<span class="token punctuation">,</span>
		pending<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> client<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>向服务端发送<code>Option</code></li><li>启用新协程接收数据</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">parseOptions</span><span class="token punctuation">(</span>opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Option<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// if opts is empty or parameter is nil</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> opts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> DefaultOption<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;only one option allowed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	opt <span class="token operator">:=</span> opts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	opt<span class="token punctuation">.</span>MagicNumber <span class="token operator">=</span> DefaultOption<span class="token punctuation">.</span>MagicNumber
	<span class="token keyword">if</span> opt<span class="token punctuation">.</span>CodecType <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		opt<span class="token punctuation">.</span>CodecType <span class="token operator">=</span> DefaultOption<span class="token punctuation">.</span>CodecType
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> opt<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dial connects to an RPC server at the specified network address</span>
<span class="token keyword">func</span> <span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseOptions</span><span class="token punctuation">(</span>opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>
	<span class="token comment">// close the connection if client is nil</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> client<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Dial</code>：建立连接并返回 Client 实例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
	<span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client: done channel is unbuffered&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	call <span class="token operator">:=</span> <span class="token operator">&amp;</span>Call<span class="token punctuation">{</span>
		ServiceMethod<span class="token punctuation">:</span> serviceMethod<span class="token punctuation">,</span>
		Args<span class="token punctuation">:</span>          args<span class="token punctuation">,</span>
		Reply<span class="token punctuation">:</span>         reply<span class="token punctuation">,</span>
		Done<span class="token punctuation">:</span>          done<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	<span class="token keyword">return</span> call
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	call <span class="token operator">:=</span> <span class="token operator">&lt;-</span>client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Done
	<span class="token keyword">return</span> call<span class="token punctuation">.</span>Error
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Go</code>：异步接口，返回 Call 实例</li><li><code>Call</code>：同步接口，调用 <code>Go</code>后阻塞等待处理完毕并返回</li></ul><h2 id="_3-demo" tabindex="-1"><a class="header-anchor" href="#_3-demo" aria-hidden="true">#</a> 3. Demo</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;geerpc&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// pick free port</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:0&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;network error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start rpc server on&quot;</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	addr <span class="token operator">&lt;-</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

	client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			args <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;geerpc req %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
			<span class="token keyword">var</span> reply <span class="token builtin">string</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;call Foo.Sum error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;reply:&quot;</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,25),k={href:"https://geektutu.com/post/geerpc-day2.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=l("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[n("a",u,[a("day2-client"),t(s)])]),r,n("ol",null,[n("li",null,[n("a",k,[a("https://geektutu.com/post/geerpc-day2.html"),t(s)])])])])}const f=p(i,[["render",d],["__file","04.2.client.html.vue"]]);export{f as default};
