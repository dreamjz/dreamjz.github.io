import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as i}from"./framework-09afcf0b.js";const u={},l=c(`<p>Using <strong><code>unsafe</code></strong> package to convert <code>byte</code> slice to <code>string </code> is more efficient than <strong>type conversion</strong>.</p><h2 id="_1-unsafe-pointer-recommended" tabindex="-1"><a class="header-anchor" href="#_1-unsafe-pointer-recommended" aria-hidden="true">#</a> 1. <code>unsafe.Pointer</code> (Recommended)</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BytesToStringUnsafePointer</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-unsafe-string-ptr-byte-len-integertype-string-recommended-v1-20" tabindex="-1"><a class="header-anchor" href="#_2-unsafe-string-ptr-byte-len-integertype-string-recommended-v1-20" aria-hidden="true">#</a> 2. <code>unsafe.String(ptr *byte, len IntegerType) string</code> (Recommended v1.20)</h2><p>After <code>go v1.20</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BytesToStringUnsafePointer2</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-type-conversion" tabindex="-1"><a class="header-anchor" href="#_3-type-conversion" aria-hidden="true">#</a> 3. Type Conversion</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BytesToStringTypeConvert</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="benchmark" tabindex="-1"><a class="header-anchor" href="#benchmark" aria-hidden="true">#</a> Benchmark</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkBytesToString</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
       name <span class="token builtin">string</span>
       f    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span><span class="token punctuation">{</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UnsafePointer&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> BytesToStringUnsafePointer<span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UnsafePointerV1.20&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> BytesToStringUnsafePointer2<span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;TypeConvert&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> BytesToStringTypeConvert<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> k <span class="token operator">*=</span> <span class="token number">10</span> <span class="token punctuation">{</span>
       buf <span class="token operator">:=</span> <span class="token function">genBytes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
       b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> t <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
          b<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%-20s_%.e&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
             <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genBytes</span><span class="token punctuation">(</span>length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    letters <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> c <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span> c<span class="token operator">++</span> <span class="token punctuation">{</span>
       letters <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       idx <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span>
       buf <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> letters<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> buf
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230914025639101.png" alt="image-20230914025639101" tabindex="0" loading="lazy"><figcaption>image-20230914025639101</figcaption></figure><h2 id="_4-bytes-to-string-using-unsafe-package-not-recommended" tabindex="-1"><a class="header-anchor" href="#_4-bytes-to-string-using-unsafe-package-not-recommended" aria-hidden="true">#</a> 4. Bytes To String using <code>unsafe</code> package (Not Recommended)</h2><p>If convert <code>[]byte</code> to <code>string</code> using <code>unsafe</code> package, it will cause runtime error: <code>unexpected fault address: xxxxx, fatal error: fault</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> <span class="token string">&quot;abc&quot;</span>
	buf <span class="token operator">:=</span> <span class="token function">StringToBytesUnsafePointer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">printBufInfo</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>

	buf2 <span class="token operator">:=</span> <span class="token function">StringToBytesUnsafePointer2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">printBufInfo</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span>
    
    <span class="token comment">// unexpected fault address</span>
    sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> buf<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// unexpected fault address</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>buf2<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> buf2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">StringToBytesUnsafePointer</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">StringToBytesUnsafePointer2</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">StringData</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printBufInfo</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	format <span class="token operator">:=</span> <span class="token string">&quot;%p, %v, len: %d, cap: %d \\n&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230914171301088.png" alt="image-20230914171301088" tabindex="0" loading="lazy"><figcaption>image-20230914171301088</figcaption></figure><ul><li><code>*(*[]byte)(unsafe.Pointer(&amp;s))</code>: will create a capacity unexpected slice</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,18),r={href:"https://stackoverflow.com/questions/26072921/how-do-i-convert-sizebyte-to-string-in-go",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/golang/go/blob/release-branch.go1.18/src/strings/builder.go#L15",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/golang/go/blob/release-branch.go1.20/src/strings/builder.go",target:"_blank",rel:"noopener noreferrer"};function b(v,m){const s=i("ExternalLinkIcon");return e(),o("div",null,[l,n("ol",null,[n("li",null,[n("a",r,[a("https://stackoverflow.com/questions/26072921/how-do-i-convert-sizebyte-to-string-in-go"),t(s)])]),n("li",null,[n("a",k,[a("https://github.com/golang/go/blob/release-branch.go1.18/src/strings/builder.go#L15"),t(s)])]),n("li",null,[n("a",d,[a("https://github.com/golang/go/blob/release-branch.go1.20/src/strings/builder.go"),t(s)])])])])}const g=p(u,[["render",b],["__file","bytes_to_string_quickly.html.vue"]]);export{g as default};
