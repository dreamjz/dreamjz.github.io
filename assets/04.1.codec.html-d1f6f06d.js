import{_ as e,Z as p,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as i}from"./framework-dee406ed.js";const l={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day1-codec",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="_1-消息的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_1-消息的序列化和反序列化" aria-hidden="true">#</a> 1. 消息的序列化和反序列化</h2><p>典型的 RPC 调用如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Arith.Multiply&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>Arith</code>：服务名</li><li><code>Multiply</code>：方法名</li><li><code>args</code>：参数</li><li><code>reply</code>,<code>err</code>：返回值</li></ul><p>可以将消息抽象为两个部分：</p><ol><li>Body：请求参数和返回值</li><li>Header：请求的相关信息，返回的错误等</li></ol><h3 id="_1-1-header-结构" tabindex="-1"><a class="header-anchor" href="#_1-1-header-结构" aria-hidden="true">#</a> 1.1 Header 结构</h3><p><code>codec/codec.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Header <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ServiceMethod <span class="token builtin">string</span> <span class="token comment">// format &quot;Service.Method&quot;</span>
	Seq           <span class="token builtin">uint64</span> <span class="token comment">// sequence number of request</span>
	Error         <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ServiceMethod</code>：请求的服务名和方法名</li><li><code>Seq</code>：序列号，标识某个请求</li><li><code>Error</code>：错误信息</li></ul><h3 id="_1-2-codec-接口" tabindex="-1"><a class="header-anchor" href="#_1-2-codec-接口" aria-hidden="true">#</a> 1.2 Codec 接口</h3><p><code>codec/codec.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Codec <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	io<span class="token punctuation">.</span>Closer
	<span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">ReadBody</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">,</span> any<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> NewCodecFunc <span class="token keyword">func</span><span class="token punctuation">(</span>closer io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> Codec

<span class="token keyword">type</span> Type <span class="token builtin">string</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	GobType  Type <span class="token operator">=</span> <span class="token string">&quot;application/gob&quot;</span>
	JsonType Type <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> NewCodecFuncMap <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>NewCodecFunc

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	NewCodecFuncMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>NewCodecFunc<span class="token punctuation">)</span>
	NewCodecFuncMap<span class="token punctuation">[</span>GobType<span class="token punctuation">]</span> <span class="token operator">=</span> NewGobCodec
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NewCodecFuncMap</code>通过不同的数据类型返回不同<code>Codec</code>构造函数。</p><h3 id="_1-3-gobcodec" tabindex="-1"><a class="header-anchor" href="#_1-3-gobcodec" aria-hidden="true">#</a> 1.3 GobCodec</h3><p><code>codec/gob.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GobCodec <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	conn io<span class="token punctuation">.</span>ReadWriteCloser
	buf  <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Writer
	dec  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Decoder
	enc  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Encoder
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>conn</code>：连接实例</li><li><code>dec</code>,<code>enc</code>：gob 的 decoder/encoder</li><li><code>buf</code>：带缓冲的<code>Writer</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token boolean">_</span> Codec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GobCodec<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">NewGobCodec</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> Codec <span class="token punctuation">{</span>
	buf <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>GobCodec<span class="token punctuation">{</span>
		conn<span class="token punctuation">:</span> conn<span class="token punctuation">,</span>
		buf<span class="token punctuation">:</span>  buf<span class="token punctuation">,</span>
		dec<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
		enc<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">ReadHeader</span><span class="token punctuation">(</span>h <span class="token operator">*</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">ReadBody</span><span class="token punctuation">(</span>body any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>h <span class="token operator">*</span>Header<span class="token punctuation">,</span> body any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span>enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc codec: gob error encoding header:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span>enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc codec: gob error encoding body:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-通信过程" tabindex="-1"><a class="header-anchor" href="#_2-通信过程" aria-hidden="true">#</a> 2. 通信过程</h2><p>客户/服务端通信时，需要协商使用的协议，数据格式和内容等。</p><p>例如 HTTP 报文，分为 header 和 body 2 部分，body 的格式和长度通过 header 中的 <code>Content-Type</code> 和 <code>Content-Length</code> 指定，服务端通过解析 header 就能够知道如何从 body 中读取需要的信息。</p><p>对于 RPC 协议来说，这部分协商是需要自主设计的。为了提升性能，一般在报文的最开始会规划固定的字节，来协商相关的信息。比如第1个字节用来表示序列化方式，第2个字节表示压缩方式，第3-6字节表示 header 的长度，7-10 字节表示 body 的长度。</p><p>现阶段只需要消息的编码方式，将其放在<code>Option</code>结构中。</p><p><code>geerpc/server.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> MagicNumber <span class="token operator">=</span> <span class="token number">0x3bef5c</span>

<span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	MagicNumber <span class="token builtin">int</span>        <span class="token comment">// MagicNumber marks this is a geerpc request</span>
	CodecType   codec<span class="token punctuation">.</span>Type <span class="token comment">// CodecType</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> DefaultOption <span class="token operator">=</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>
	MagicNumber<span class="token punctuation">:</span> MagicNumber<span class="token punctuation">,</span>
	CodecType<span class="token punctuation">:</span>   codec<span class="token punctuation">.</span>GobType<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，涉及协议协商的这部分信息，需要设计固定的字节来传输的。但是为了实现上更简单，GeeRPC 客户端固定采用 JSON 编码 Option，后续的 header 和 body 的编码方式由 Option 中的 CodeType 指定，服务端首先使用 JSON 解码 Option，然后通过 Option 的 CodeType 解码剩余的内容。即报文将以这样的形式发送：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| Option{MagicNumber: xxx, CodecType: xxx} | Header{ServiceMethod ...} | Body interface{} |
|&lt;------      固定 JSON 编码      ------&gt;  | &lt;-------   编码方式由 CodeType 决定   -------&gt;|
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在一次连接中，Option 固定在报文的最开始，Header 和 Body 可以有多个:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| Option | Header1 | Body1 | Header2 | Body2 | ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-服务端" tabindex="-1"><a class="header-anchor" href="#_2-1-服务端" aria-hidden="true">#</a> 2.1 服务端</h3><p><code>geerpc/server.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Server represents an RPC server</span>
<span class="token keyword">type</span> Server <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// NewServer returns a new Server.</span>
<span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// DefaultServer is the default instance of *Server.</span>
<span class="token keyword">var</span> DefaultServer <span class="token operator">=</span> <span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Accept accepts connections on the listener and serves requests</span>
<span class="token comment">// for each incoming connection.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lis net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> lis<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: accept error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lis net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	DefaultServer<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>s.Accept</code>：等待连接建立，并启用新协程进行处理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ServeConn runs the server on a single connection.</span>
<span class="token comment">// ServeConn blocks, serving the connection until the client hangs up.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ServeConn</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> opt Option
	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: options error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> opt<span class="token punctuation">.</span>MagicNumber <span class="token operator">!=</span> MagicNumber <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: invalid magic number %x&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>MagicNumber<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span>
	<span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: invalid codec type: %s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	server<span class="token punctuation">.</span><span class="token function">serveCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// invalidRequest is a placeholder for response argv when error occurs</span>
<span class="token keyword">var</span> invalidRequest <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">serveCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sending <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token comment">// make sure to send a complete response</span>
	wg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span>  <span class="token comment">// wait until all request are handled</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		req<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> req <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span> <span class="token comment">// it&#39;s not possible to recover, so close the connection</span>
			<span class="token punctuation">}</span>
			req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">,</span> sending<span class="token punctuation">,</span> wg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>serveCodec</code>流程：</p><ol><li>创建互斥锁和 Wait Group <ul><li>互斥锁：保证并发时写入的数据不会被其他协程影响，否则返回的报文可能时乱序的，导致客户端无法解析</li><li>Wait Group：保证所有的请求均被解析，因为一次连接可能接收到多个请求</li></ul></li><li>在无限循环中处理请求，直到出现错误或连接关闭： <ol><li>读取请求</li><li>启用新协程处理</li></ol></li><li>等待所有请求处理完毕，关闭连接</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> request <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	h            <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header <span class="token comment">// header of request</span>
	argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value <span class="token comment">// argv and replyv of request</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> h codec<span class="token punctuation">.</span>Header
	<span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> io<span class="token punctuation">.</span>EOF<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> io<span class="token punctuation">.</span>ErrUnexpectedEOF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: read header error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	req <span class="token operator">:=</span> <span class="token operator">&amp;</span>request<span class="token punctuation">{</span>h<span class="token punctuation">:</span> h<span class="token punctuation">}</span>
	<span class="token comment">// day1: suppose the argv type is string</span>
	req<span class="token punctuation">.</span>argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: read argv err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> req<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> h <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> body any<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server: write response error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>replyv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;geerpc resp %d&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token punctuation">)</span>
	server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-简易客户端" tabindex="-1"><a class="header-anchor" href="#_3-简易客户端" aria-hidden="true">#</a> 3. 简易客户端</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// pick free port</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:0&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;network error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start rpc server on&quot;</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	addr <span class="token operator">&lt;-</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

	conn<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// send options</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>geerpc<span class="token punctuation">.</span>DefaultOption<span class="token punctuation">)</span>
	cc <span class="token operator">:=</span> codec<span class="token punctuation">.</span><span class="token function">NewGobCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	<span class="token comment">// send request and receive response</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		h <span class="token operator">:=</span> <span class="token operator">&amp;</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">{</span>
			ServiceMethod<span class="token punctuation">:</span> <span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span>
			Seq<span class="token punctuation">:</span>           <span class="token function">uint64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;geerpc req %d&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> <span class="token punctuation">(</span>
			respH codec<span class="token punctuation">.</span>Header
			reply <span class="token builtin">string</span>
		<span class="token punctuation">)</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>respH<span class="token punctuation">)</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Resp header: %v, reply: %v&quot;</span><span class="token punctuation">,</span> respH<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>net.Listen(&quot;tcp&quot;, &quot;:0&quot;)</code>：tcp 端口号为 0 表示由系统分配</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023/10/12 13:26:25 start rpc server on [::]:5735
2023/10/12 13:26:25 &amp;{Foo.Sum 0 } geerpc req 0
2023/10/12 13:26:25 Resp header: {Foo.Sum 0 }, reply: geerpc resp 0
2023/10/12 13:26:25 &amp;{Foo.Sum 1 } geerpc req 1
2023/10/12 13:26:25 Resp header: {Foo.Sum 1 }, reply: geerpc resp 1
2023/10/12 13:26:25 &amp;{Foo.Sum 2 } geerpc req 2
2023/10/12 13:26:25 Resp header: {Foo.Sum 2 }, reply: geerpc resp 2
2023/10/12 13:26:25 &amp;{Foo.Sum 3 } geerpc req 3
2023/10/12 13:26:25 Resp header: {Foo.Sum 3 }, reply: geerpc resp 3
2023/10/12 13:26:25 &amp;{Foo.Sum 4 } geerpc req 4
2023/10/12 13:26:25 Resp header: {Foo.Sum 4 }, reply: geerpc resp 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,43),d={href:"https://geektutu.com/post/geerpc-day1.html",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const s=i("ExternalLinkIcon");return p(),o("div",null,[n("p",null,[n("a",u,[a("day1-codec"),t(s)])]),r,n("ol",null,[n("li",null,[n("a",d,[a("https://geektutu.com/post/geerpc-day1.html"),t(s)])])])])}const g=e(l,[["render",k],["__file","04.1.codec.html.vue"]]);export{g as default};
