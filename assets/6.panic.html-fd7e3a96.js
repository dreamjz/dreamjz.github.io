import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as i}from"./framework-dee406ed.js";const l={},r=n("h2",{id:"_1-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-数据结构","aria-hidden":"true"},"#"),s(" 1. 数据结构")],-1),u=n("code",null,"panic",-1),d={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"runtime._panic",-1),v=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A _panic holds information about an active panic.</span>
<span class="token comment">//</span>
<span class="token comment">// A _panic value must only ever live on the stack.</span>
<span class="token comment">//</span>
<span class="token comment">// The argp and link fields are stack pointers, but don&#39;t need special</span>
<span class="token comment">// handling during stack growth: because they are pointer-typed and</span>
<span class="token comment">// _panic values only live on the stack, regular stack pointer</span>
<span class="token comment">// adjustment takes care of them.</span>
<span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	argp      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span>
	arg       any            <span class="token comment">// argument to panic</span>
	link      <span class="token operator">*</span>_panic        <span class="token comment">// link to earlier panic</span>
	pc        <span class="token builtin">uintptr</span>        <span class="token comment">// where to return to in runtime if this panic is bypassed</span>
	sp        unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// where to return to in runtime if this panic is bypassed</span>
	recovered <span class="token builtin">bool</span>           <span class="token comment">// whether this panic is over</span>
	aborted   <span class="token builtin">bool</span>           <span class="token comment">// the panic was aborted</span>
	goexit    <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m=n("li",null,[n("code",null,"argp"),s("：指向"),n("code",null,"defer"),s("调用时参数的指针")],-1),_=n("li",null,[n("code",null,"arg"),s("：调用"),n("code",null,"panic"),s("时传入的参数")],-1),g=n("code",null,"link",-1),b={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"runtime._panic",-1),f=n("li",null,[n("code",null,"recovered"),s("：当前panic是否被恢复")],-1),y=n("li",null,[n("code",null,"aborted"),s(": 表示当前的"),n("code",null,"panic"),s("是否被强行终止")],-1),w=n("p",null,[n("code",null,"panic"),s(" 函数可以被连续多次调用，它们之间通过 "),n("code",null,"link"),s(" 可以组成链表。")],-1),x=n("h2",{id:"_2-触发-panic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-触发-panic","aria-hidden":"true"},"#"),s(" 2. 触发 panic")],-1),P=n("code",null,"panic",-1),G={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.gopanic",-1),V={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"runtime._panic",-1),A=n("code",null,"_panic",-1),B=n("code",null,"_defer",-1),E={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime._defer",-1),I={href:"https://draveness.me/golang/tree/runtime.reflectcall",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.reflectcall",-1),T={href:"https://draveness.me/golang/tree/runtime.fatalpanic",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.fatalpanic",-1),C=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopanic</span><span class="token punctuation">(</span>e <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> p _panic
	p<span class="token punctuation">.</span>arg <span class="token operator">=</span> e
	p<span class="token punctuation">.</span>link <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic
	gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		d <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_defer
		<span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token function">reflectcall</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span>

		d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token boolean">nil</span>
		d<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
		gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d<span class="token punctuation">.</span>link

		<span class="token function">freedefer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">fatalpanic</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>_panic<span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fatalpanic</span><span class="token punctuation">(</span>msgs <span class="token operator">*</span>_panic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token function">startpanic_m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> msgs <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		atomic<span class="token punctuation">.</span><span class="token function">Xadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runningPanicDefers<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">printpanics</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">dopanic_m</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> sp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">crash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-执行-recovery" tabindex="-1"><a class="header-anchor" href="#_3-执行-recovery" aria-hidden="true">#</a> 3. 执行 recovery</h2>`,3),D=n("code",null,"recover",-1),H={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"runtime.gorecover",-1),S=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gorecover</span><span class="token punctuation">(</span>argp <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_panic
	<span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>recovered <span class="token operator">&amp;&amp;</span> argp <span class="token operator">==</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>argp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p<span class="token punctuation">.</span>recovered <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token keyword">return</span> p<span class="token punctuation">.</span>arg
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前 Goroutine 没有调用 <code>panic</code>，那么该函数会直接返回 <code>nil</code>，这也是崩溃恢复在非 <code>defer</code> 中调用会失效的原因。</p>`,2),X={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime._panic",-1),$=n("code",null,"recovered",-1),F={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"runtime.gorecover",-1),K={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.gopanic",-1),O=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopanic</span><span class="token punctuation">(</span>e <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 执行延迟调用函数，可能会设置 p.recovered = true</span>
		<span class="token operator">...</span>

		pc <span class="token operator">:=</span> d<span class="token punctuation">.</span>pc
		sp <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>sp<span class="token punctuation">)</span>

		<span class="token operator">...</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
			gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> p<span class="token punctuation">.</span>link
			<span class="token keyword">for</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>aborted <span class="token punctuation">{</span>
				gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>link
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				gp<span class="token punctuation">.</span>sig <span class="token operator">=</span> <span class="token number">0</span>
			<span class="token punctuation">}</span>
			gp<span class="token punctuation">.</span>sigcode0 <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>
			gp<span class="token punctuation">.</span>sigcode1 <span class="token operator">=</span> pc
			<span class="token function">mcall</span><span class="token punctuation">(</span>recovery<span class="token punctuation">)</span>
			<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;recovery failed&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"runtime._defer",-1),W=n("code",null,"pc",-1),Y=n("code",null,"sp",-1),nn={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"runtime.recovery",-1),an=n("code",null,"sp",-1),en=n("code",null,"pc",-1),tn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">recovery</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sp <span class="token operator">:=</span> gp<span class="token punctuation">.</span>sigcode0
	pc <span class="token operator">:=</span> gp<span class="token punctuation">.</span>sigcode1

	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp <span class="token operator">=</span> sp
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>pc <span class="token operator">=</span> pc
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>lr <span class="token operator">=</span> <span class="token number">0</span>
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>ret <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token function">gogo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>sched<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),on=n("code",null,"defer",-1),pn=n("code",null,"sp",-1),cn=n("code",null,"pc",-1),ln={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"runtime._defer",-1),un={href:"https://draveness.me/golang/tree/runtime.gogo",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"runtime.gogo",-1),kn=n("code",null,"defer",-1),vn={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"runtime.recovery",-1),_n={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.deferproc",-1),bn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime.deferreturn",-1),fn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferproc</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">,</span> fn <span class="token operator">*</span>funcval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token function">return0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"runtime.deferreturn",-1),xn=n("code",null,"panic",-1),Pn={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.gorecover",-1),Nn={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime._panic",-1),zn=n("code",null,"panic",-1),An=n("code",null,"arg",-1),Bn=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),En={href:"https://github.com/golang/go/tree/release-branch.go1.18/src",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://draveness.me/golang/",target:"_blank",rel:"noopener noreferrer"};function In(Ln,Tn){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[u,s(" 关键字在 Go 语言的源代码是由数据结构 "),n("a",d,[k,e(a)]),s(" 表示的：")]),v,n("ul",null,[m,_,n("li",null,[g,s("：指向更早调用的 "),n("a",b,[h,e(a)]),s(" 结构；")]),f,y]),w,x,n("p",null,[s("编译器会将关键字 "),P,s(" 转换成 "),n("a",G,[N,e(a)]),s("，该函数的执行过程包含以下几个步骤：")]),n("ol",null,[n("li",null,[s("创建新的 "),n("a",V,[z,e(a)]),s(" 并添加到所在 Goroutine 的 "),A,s(" 链表的最前面；")]),n("li",null,[s("在循环中不断从当前 Goroutine 的 "),B,s(" 中链表获取 "),n("a",E,[q,e(a)]),s(" 并调用 "),n("a",I,[L,e(a)]),s(" 运行延迟调用函数；")]),n("li",null,[s("调用 "),n("a",T,[j,e(a)]),s(" 中止整个程序")])]),C,n("p",null,[s("编译器会将关键字 "),D,s(" 转换成 "),n("a",H,[R,e(a)]),s("：")]),S,n("p",null,[s("它会修改 "),n("a",X,[Z,e(a)]),s(" 的 "),$,s(" 字段，"),n("a",F,[J,e(a)]),s(" 函数中并不包含恢复程序的逻辑，程序的恢复是由 "),n("a",K,[M,e(a)]),s(" 函数负责的：")]),O,n("p",null,[s("从 "),n("a",Q,[U,e(a)]),s(" 中取出了程序计数器 "),W,s(" 和栈指针 "),Y,s(" 并调用 "),n("a",nn,[sn,e(a)]),s(" 函数触发 Goroutine 的调度，调度之前会准备好 "),an,s("、"),en,s(" 以及函数的返回值：")]),tn,n("p",null,[s("在调用 "),on,s(" 关键字时，调用时的栈指针 "),pn,s(" 和程序计数器 "),cn,s(" 就已经存储到了 "),n("a",ln,[rn,e(a)]),s(" 结构体中，这里的 "),n("a",un,[dn,e(a)]),s(" 函数会跳回 "),kn,s(" 关键字调用的位置。")]),n("p",null,[n("a",vn,[mn,e(a)]),s(" 在调度过程中会将函数的返回值设置成 1。当 "),n("a",_n,[gn,e(a)]),s(" 函数的返回值是 1 时，编译器生成的代码会直接跳转到调用方函数返回之前并执行 "),n("a",bn,[hn,e(a)]),s("：")]),fn,n("p",null,[s("跳转到 "),n("a",yn,[wn,e(a)]),s(" 函数之后，程序就已经从 "),xn,s(" 中恢复了并执行正常的逻辑，而 "),n("a",Pn,[Gn,e(a)]),s(" 函数也能从 "),n("a",Nn,[Vn,e(a)]),s(" 结构中取出了调用 "),zn,s(" 时传入的 "),An,s(" 参数并返回给调用方")]),Bn,n("ol",null,[n("li",null,[n("a",En,[s("https://github.com/golang/go/tree/release-branch.go1.18/src"),e(a)])]),n("li",null,[n("a",qn,[s("https://draveness.me/golang/"),e(a)])])])])}const Cn=o(l,[["render",In],["__file","6.panic.html.vue"]]);export{Cn as default};
