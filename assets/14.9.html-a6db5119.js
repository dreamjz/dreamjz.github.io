const n=JSON.parse('{"key":"v-3525ba52","path":"/note/golang/open-source-books/the-way-to-go/14/14.9.html","title":"14.9 Future 模式","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1684038853000},"readingTime":{"minutes":1.11,"words":333},"filePathRelative":"note/golang/open-source-books/the-way-to-go/14/14.9.md","excerpt":"<h1> 14.9 Future 模式</h1>\\n<p><strong>future模式</strong>： 在使用某值之前需要先对其进行计算。</p>\\n<p>Futures 模式通过闭包和通道可以很容易实现，类似于生成器，不同地方在于 Futures 需要返回一个值。</p>\\n<p>假设我们有一个矩阵类型，我们需要计算两个矩阵 A 和 B 乘积的逆，首先我们通过函数 <code>Inverse(M)</code> 分别对其进行求逆运算，再将结果相乘。如下函数 <code>InverseProduct()</code> 实现了如上过程：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">InverseProduct</span><span class=\\"token punctuation\\">(</span>a Matrix<span class=\\"token punctuation\\">,</span> b Matrix<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    a_inv <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">Inverse</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span>\\n    b_inv <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">Inverse</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Product</span><span class=\\"token punctuation\\">(</span>a_inv<span class=\\"token punctuation\\">,</span> b_inv<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
