const e=JSON.parse('{"key":"v-4d657308","path":"/reading/golang/the-design-and-implementation-of-golang/part3-runtime/06-concurrency/06.7.sysmon.html","title":"6.7 系统监控","lang":"zh-CN","frontmatter":{"title":"6.7 系统监控","date":"2023-10-01T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"6.7.1 设计原理","slug":"_6-7-1-设计原理","link":"#_6-7-1-设计原理","children":[]},{"level":2,"title":"6.7.2 监控循环","slug":"_6-7-2-监控循环","link":"#_6-7-2-监控循环","children":[{"level":3,"title":"检查死锁","slug":"检查死锁","link":"#检查死锁","children":[]},{"level":3,"title":"运行计时器","slug":"运行计时器","link":"#运行计时器","children":[]},{"level":3,"title":"轮询网络","slug":"轮询网络","link":"#轮询网络","children":[]},{"level":3,"title":"抢占处理器","slug":"抢占处理器","link":"#抢占处理器","children":[]},{"level":3,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":7.69,"words":2307},"filePathRelative":"reading/golang/the-design-and-implementation-of-golang/part3-runtime/06-concurrency/06.7.sysmon.md","localizedDate":"2023年10月1日","excerpt":"<p>系统监控是 Go 语言运行时的重要组成部分，它会每隔一段时间检查 Go 语言运行时，确保程序没有进入异常状态。</p>\\n<h2> 6.7.1 设计原理</h2>\\n<p>在支持多任务的操作系统中，守护进程是在后台运行的计算机程序，不会由用户直接操作，一般会在操作系统启动时自动运行。</p>\\n<p>Go 语言的系统监控在内部启动了一个不会中止的循环，在循环的内部会轮询网络、抢占长期运行或者处于系统调用的 Goroutine 以及触发垃圾回收，通过这些行为，能够让系统的运行状态变得更健康。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030209450.png\\" alt=\\"golang-system-monitor\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>golang-system-monitor</figcaption></figure>"}');export{e as data};
