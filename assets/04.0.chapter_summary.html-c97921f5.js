const l=JSON.parse('{"key":"v-eb7c0d78","path":"/reading/golang/the-design-and-implementation-of-golang/part2-foundation/ch04-basic/04.0.chapter_summary.html","title":"第四章笔记总结","lang":"zh-CN","frontmatter":{"title":"第四章笔记总结","date":"2023-09-25T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"1. 函数调用","slug":"_1-函数调用","link":"#_1-函数调用","children":[{"level":3,"title":"1.2 参数传递","slug":"_1-2-参数传递","link":"#_1-2-参数传递","children":[]}]},{"level":2,"title":"2. 接口","slug":"_2-接口","link":"#_2-接口","children":[{"level":3,"title":"2.1 定义及其优点","slug":"_2-1-定义及其优点","link":"#_2-1-定义及其优点","children":[]},{"level":3,"title":"2.2 隐式实现","slug":"_2-2-隐式实现","link":"#_2-2-隐式实现","children":[]},{"level":3,"title":"2.3 类型","slug":"_2-3-类型","link":"#_2-3-类型","children":[]},{"level":3,"title":"2.4 接口和方法集","slug":"_2-4-接口和方法集","link":"#_2-4-接口和方法集","children":[]},{"level":3,"title":"2.5 数据结构","slug":"_2-5-数据结构","link":"#_2-5-数据结构","children":[]},{"level":3,"title":"2.6 类型转换","slug":"_2-6-类型转换","link":"#_2-6-类型转换","children":[]},{"level":3,"title":"2.7 类型断言","slug":"_2-7-类型断言","link":"#_2-7-类型断言","children":[]},{"level":3,"title":"2.8 动态派发","slug":"_2-8-动态派发","link":"#_2-8-动态派发","children":[]}]},{"level":2,"title":"3. 反射","slug":"_3-反射","link":"#_3-反射","children":[{"level":3,"title":"3.1 反射的三大法则","slug":"_3-1-反射的三大法则","link":"#_3-1-反射的三大法则","children":[]},{"level":3,"title":"3.2 类型和值","slug":"_3-2-类型和值","link":"#_3-2-类型和值","children":[]},{"level":3,"title":"3.3 更新变量","slug":"_3-3-更新变量","link":"#_3-3-更新变量","children":[]},{"level":3,"title":"3.4 实现协议","slug":"_3-4-实现协议","link":"#_3-4-实现协议","children":[]},{"level":3,"title":"3.5 方法调用","slug":"_3-5-方法调用","link":"#_3-5-方法调用","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":8.35,"words":2505},"filePathRelative":"reading/golang/the-design-and-implementation-of-golang/part2-foundation/ch04-basic/04.0.chapter_summary.md","localizedDate":"2023年9月25日","excerpt":"<h2> 1. 函数调用</h2>\\n<p>Go 语言函数调用：</p>\\n<ol>\\n<li>函数<strong>参数</strong>按照<strong>从右至左</strong>的顺序<strong>入栈</strong></li>\\n<li>函数<strong>返回值</strong>存储在<strong>栈</strong>上</li>\\n</ol>\\n<p>C 和 Go 在函数调用上的差异：</p>\\n<ol>\\n<li>C 使用<strong>寄存器</strong>和<strong>栈</strong>传递参数，使用<strong>寄存器</strong>传递返回值，无法返回多个返回值</li>\\n<li>Go 使用<strong>栈</strong>传递参数和返回值，可以返回多个返回值</li>\\n</ol>"}');export{l as data};
