import{_ as o,Z as p,$ as c,a0 as n,a2 as t,a1 as s,a4 as e,H as l}from"./framework-d03928c9.js";const i={},u={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"context.Context",-1),d=n("code",null,"Deadline",-1),k={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"context.Context",-1),m=n("li",null,[n("code",null,"Done"),s(" ：返回一个 Channel， 会在当前工作完成或者上下文被取消后关闭，多次调用 "),n("code",null,"Done"),s(" 方法会返回同一个 Channel")],-1),h=n("code",null,"Err",-1),_={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"context.Context",-1),g=n("code",null,"Done",-1),f={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"context.Context",-1),C=n("code",null,"Canceled",-1),y={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"context.Context",-1),D=n("code",null,"DeadlineExceeded",-1),T=n("code",null,"Value",-1),V={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"context.Context",-1),O=n("code",null,"Value",-1),B=n("code",null,"Key",-1),E=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-1-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_6-1-1-设计原理" aria-hidden="true">#</a> 6.1.1 设计原理</h2>`,2),z={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"context.Context",-1),G=n("strong",null,"在 Goroutine 构成的树形结构中对信号进行同步以减少计算资源的浪费",-1),U=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010311446.png",alt:"golang-context-usage",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-context-usage")],-1),L={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"context.Context",-1),N={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"context.Context",-1),A={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"context.Context",-1),I=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010312250.png",alt:"golang-without-context",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-without-context")],-1),S=n("p",null,"当最上层的 Goroutine 因为某些原因执行失败时，下层的 Goroutine 由于没有接收到这个信号所以会继续工作。",-1),H={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"context.Context",-1),R=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010313377.png",alt:"golang-with-context",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-with-context")],-1),Z=n("h2",{id:"_6-1-2-默认上下文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-1-2-默认上下文","aria-hidden":"true"},"#"),s(" 6.1.2 默认上下文")],-1),$={href:"https://draveness.me/golang/tree/context.Background",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"context.Background",-1),M={href:"https://draveness.me/golang/tree/context.TODO",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"context.TODO",-1),X=n("code",null,"background",-1),Y=n("code",null,"todo",-1),nn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>
	todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> background
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> todo
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sn=n("code",null,"new(emptyCtx)",-1),an={href:"https://draveness.me/golang/tree/context.emptyCtx",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"context.emptyCtx",-1),en=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),on={href:"https://draveness.me/golang/tree/context.emptyCtx",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"context.emptyCtx",-1),cn={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"context.Context",-1),un=n("strong",null,"没有",-1),rn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010317980.png",alt:"golang-context-hierarchy",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-context-hierarchy")],-1),dn={href:"https://draveness.me/golang/tree/context.Background",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"context.Background",-1),vn={href:"https://draveness.me/golang/tree/context.TODO",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"context.TODO",-1),hn={href:"https://draveness.me/golang/tree/context.Background",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"context.Background",-1),bn={href:"https://draveness.me/golang/tree/context.TODO",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"context.TODO",-1),fn=n("strong",null,"多数情况",-1),xn={href:"https://draveness.me/golang/tree/context.Background",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"context.Background",-1),yn=n("h2",{id:"_6-1-3-取消信号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-1-3-取消信号","aria-hidden":"true"},"#"),s(" 6.1.3 取消信号")],-1),wn=n("h3",{id:"withcancel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#withcancel","aria-hidden":"true"},"#"),s(" WithCancel")],-1),Dn={href:"https://draveness.me/golang/tree/context.WithCancel",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"context.WithCancel",-1),Vn={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"context.Context",-1),On=n("strong",null,"衍生",-1),Bn=n("strong",null,"新的",-1),En=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010319426.png" alt="golang-parent-cancel-context" tabindex="0" loading="lazy"><figcaption>golang-parent-cancel-context</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
	<span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),zn={href:"https://draveness.me/golang/tree/context.newCancelCtx",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"context.newCancelCtx",-1),Gn={href:"https://draveness.me/golang/tree/context.cancelCtx",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"context.cancelCtx",-1),Ln={href:"https://draveness.me/golang/tree/context.propagateCancel",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"context.propagateCancel",-1),Nn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	done <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token comment">// 父上下文不会触发取消信号</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
		child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 父上下文已经被取消</span>
		<span class="token keyword">return</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数流程如下：</p>`,2),qn=e("<li><code>parent.Done() == nil</code>： <code>parent</code> 不会触发取消事件时，当前函数会直接返回</li><li><code>child</code> 的继承链包含可以取消的上下文时，会判断 <code>parent</code> 是否已经触发了取消信号: <ul><li>若已经被取消，<code>child</code> 会立刻被取消</li><li>若没有被取消，<code>child</code> 会被加入 <code>parent</code> 的 <code>children</code> 列表中，等待 <code>parent</code> 释放取消信号</li></ul></li>",2),An={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"context.Context",-1),In=n("code",null,"Done()",-1),Sn=n("ul",null,[n("li",null,[s("运行一个新的 Goroutine 同时监听 "),n("code",null,"parent.Done()"),s(" 和 "),n("code",null,"child.Done()"),s(" 两个 Channel")]),n("li",null,[s("在 "),n("code",null,"parent.Done()"),s(" 关闭时调用 "),n("code",null,"child.cancel"),s(" 取消子上下文")])],-1),Hn={href:"https://draveness.me/golang/tree/context.propagateCancel",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"context.propagateCancel",-1),Rn=n("code",null,"parent",-1),Zn=n("code",null,"child",-1),$n=n("strong",null,"同步",-1),Jn=n("code",null,"parent",-1),Mn=n("code",null,"child",-1),Qn={href:"https://draveness.me/golang/tree/context.cancelCtx.cancel",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"context.cancelCtx.cancel",-1),Yn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>err <span class="token operator">=</span> err
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>done <span class="token operator">=</span> closedchan
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>done<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">{</span>
		child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>
		<span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withdeadline-withtimeout" tabindex="-1"><a class="header-anchor" href="#withdeadline-withtimeout" aria-hidden="true">#</a> WithDeadline, WithTimeout</h3>`,2),ns={href:"https://draveness.me/golang/tree/context.WithDeadline",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"context.WithDeadline",-1),as={href:"https://draveness.me/golang/tree/context.WithTimeout",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"context.WithTimeout",-1),es={href:"https://draveness.me/golang/tree/context.timerCtx",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"context.timerCtx",-1),ps=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> d time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> cur<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c <span class="token operator">:=</span> <span class="token operator">&amp;</span>timerCtx<span class="token punctuation">{</span>
		cancelCtx<span class="token punctuation">:</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
		deadline<span class="token punctuation">:</span>  d<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	dur <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
	<span class="token keyword">if</span> dur <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span> <span class="token comment">// 已经过了截止日期</span>
		<span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>dur<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数流程如下：</p>`,2),cs=n("li",null,"判断父上下文的截止日期与当前日期",-1),ls={href:"https://draveness.me/golang/tree/time.AfterFunc",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"time.AfterFunc",-1),us={href:"https://draveness.me/golang/tree/context.timerCtx.cancel",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"context.timerCtx.cancel",-1),ds={href:"https://draveness.me/golang/tree/context.timerCtx",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"context.timerCtx",-1),vs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cancelCtx
	timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment">// Under cancelCtx.mu.</span>

	deadline time<span class="token punctuation">.</span>Time
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>
		<span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ms={href:"https://draveness.me/golang/tree/context.timerCtx.cancel",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"context.timerCtx.cancel",-1),_s=n("h2",{id:"_6-1-4-传值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-1-4-传值","aria-hidden":"true"},"#"),s(" 6.1.4 传值")],-1),bs={href:"https://draveness.me/golang/tree/context.WithValue",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"context.WithValue",-1),fs={href:"https://draveness.me/golang/tree/context.valueCtx",target:"_blank",rel:"noopener noreferrer"},xs=n("code",null,"context.valueCtx",-1),Cs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>
	<span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;nil key&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>reflectlite<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;key is not comparable&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>valueCtx<span class="token punctuation">{</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ys={href:"https://draveness.me/golang/tree/context.valueCtx.Value",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"context.valueCtx.Value",-1),Ds=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Context
	key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ts={href:"https://draveness.me/golang/tree/context.valueCtx",target:"_blank",rel:"noopener noreferrer"},Vs=n("code",null,"context.valueCtx",-1),Ws={href:"https://draveness.me/golang/tree/context.valueCtx.Value",target:"_blank",rel:"noopener noreferrer"},Os=n("code",null,"context.valueCtx.Value",-1),Bs=n("code",null,"nil",-1),Es=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),zs={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/",target:"_blank",rel:"noopener noreferrer"};function Fs(Gs,Us){const a=l("ExternalLinkIcon");return p(),c("div",null,[n("p",null,[n("a",u,[r,t(a)]),s("接口定义了四个方法：")]),n("ol",null,[n("li",null,[d,s(" ： 返回 "),n("a",k,[v,t(a)]),s(" 被取消的时间，即完成工作的截止时间")]),m,n("li",null,[h,s(" ： 返回 "),n("a",_,[b,t(a)]),s(" 结束的原因，只会在 "),g,s(" 方法对应的 Channel 关闭时返回非空的值： "),n("ol",null,[n("li",null,[s("若 "),n("a",f,[x,t(a)]),s(" 被取消，返回 "),C,s(" 错误")]),n("li",null,[s("若 "),n("a",y,[w,t(a)]),s(" 超时，返回 "),D,s(" 错误")])])]),n("li",null,[T,s(" ：从 "),n("a",V,[W,t(a)]),s(" 中获取键对应的值，对于同一个上下文来说，多次调用 "),O,s(" 并传入相同的 "),B,s(" 会返回相同的结果，该方法可以用来传递请求特定的数据")])]),E,n("p",null,[n("a",z,[F,t(a)]),s("最大作用是 "),G,s("。")]),U,n("p",null,[n("a",L,[j,t(a)]),s(" 的作用是在不同 Goroutine 之间同步请求特定数据、取消信号以及处理请求的截止日期。")]),n("p",null,[s("每一个 "),n("a",N,[q,t(a)]),s(" 都会从最顶层的 Goroutine 一层一层传递到最下层。"),n("a",A,[P,t(a)]),s(" 可以在上层 Goroutine 执行出现错误时，将信号及时同步给下层。")]),I,S,n("p",null,[s("当使用 "),n("a",H,[K,t(a)]),s(" 时，就可以在下层及时停掉无用的工作以减少额外资源的消耗：")]),R,Z,n("p",null,[n("a",$,[J,t(a)]),s("、"),n("a",M,[Q,t(a)]),s("都会返回预先初始化好的私有变量 "),X,s(" 和 "),Y,s("：")]),nn,n("p",null,[s("这两个私有变量都是通过 "),sn,s(" 语句初始化，是指向私有结构体 "),n("a",an,[tn,t(a)]),s(" 的指针：")]),en,n("p",null,[n("a",on,[pn,t(a)]),s(" 通过空方法实现了 "),n("a",cn,[ln,t(a)]),s(" 接口中的所有方法，"),un,s("任何功能。")]),rn,n("p",null,[n("a",dn,[kn,t(a)]),s(" 和 "),n("a",vn,[mn,t(a)]),s(" 互为别名，没有太大的差别，只是在使用和语义上不同：")]),n("ul",null,[n("li",null,[n("a",hn,[_n,t(a)]),s(" 是上下文的默认值，所有其他的上下文都应该从它衍生出来；")]),n("li",null,[n("a",bn,[gn,t(a)]),s(" 应该仅在不确定应该使用哪种上下文时使用；")])]),n("p",null,[s("在"),fn,s("下，若当前函数没有上下文作为入参，会使用 "),n("a",xn,[Cn,t(a)]),s(" 作为起始的上下文向下传递。")]),yn,wn,n("p",null,[n("a",Dn,[Tn,t(a)]),s(" 函数能够从 "),n("a",Vn,[Wn,t(a)]),s(" 中"),On,s("出一个"),Bn,s("Context并返回用于取消该上下文的函数。")]),En,n("ul",null,[n("li",null,[n("a",zn,[Fn,t(a)]),s(" 将传入的上下文包装成私有结构体 "),n("a",Gn,[Un,t(a)])]),n("li",null,[n("a",Ln,[jn,t(a)]),s(" 会构建父子上下文之间的关联，当父上下文被取消时，子上下文也会被取消")])]),Nn,n("ol",null,[qn,n("li",null,[s("当父上下文是开发者自定义的类型、实现了 "),n("a",An,[Pn,t(a)]),s(" 接口并在 "),In,s(" 方法中返回了非空的管道时: "),Sn])]),n("p",null,[n("a",Hn,[Kn,t(a)]),s(" 在 "),Rn,s(" 和 "),Zn,s(" 之间"),$n,s("取消和结束的信号，保证在 "),Jn,s(" 被取消时，"),Mn,s(" 也会收到对应的信号。")]),n("p",null,[n("a",Qn,[Xn,t(a)]),s("会关闭上下文中的 Channel 并向所有的子上下文同步取消信号:")]),Yn,n("p",null,[n("a",ns,[ss,t(a)]),s(" 和 "),n("a",as,[ts,t(a)]),s(" 能创建可以被取消的计时器上下文 "),n("a",es,[os,t(a)]),s("：")]),ps,n("ol",null,[cs,n("li",null,[s("使用 "),n("a",ls,[is,t(a)]),s(" 创建定时器")]),n("li",null,[s("时间超过了截止日期后调用 "),n("a",us,[rs,t(a)]),s(" 同步取消信号")])]),n("p",null,[n("a",ds,[ks,t(a)]),s("：")]),vs,n("p",null,[n("a",ms,[hs,t(a)]),s("会停止context和定时器。")]),_s,n("p",null,[n("a",bs,[gs,t(a)]),s("能从父上下文中创建一个子上下文，传值的子上下文使用 "),n("a",fs,[xs,t(a)]),s(" 类型：")]),Cs,n("p",null,[n("a",ys,[ws,t(a)]),s("：")]),Ds,n("p",null,[s("若 "),n("a",Ts,[Vs,t(a)]),s(" 中存储的键值对与 "),n("a",Ws,[Os,t(a)]),s(" 方法中传入的参数不匹配，就会从父上下文中查找该键对应的值直到某个父上下文中返回 "),Bs,s(" 或者查找到对应的值。")]),Es,n("ol",null,[n("li",null,[n("a",zs,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/"),t(a)])])])])}const js=o(i,[["render",Fs],["__file","06.1.context.html.vue"]]);export{js as default};
