import{_ as o,Z as p,$ as i,a0 as n,a1 as s,a2 as t,a3 as e,H as c}from"./framework-dee406ed.js";const l={},u=n("p",null,[s("学习 ORM 框架 "),n("code",null,"gorm"),s(" 的笔记, 基于"),n("code",null,"GORM v1.22.4")],-1),r={href:"https://github.com/dreamjz/golang-notes/tree/main/gorm-note",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="_1-introduction" tabindex="-1"><a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a> 1. Introduction</h2><p>The fantastic ORM library for Golang, aims to be develpoer friendly.</p><h2 id="_2-quick-start" tabindex="-1"><a class="header-anchor" href="#_2-quick-start" aria-hidden="true">#</a> 2. Quick Start</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> gorm.io/gorm
go get <span class="token parameter variable">-u</span> gorm.io/driver/sqlite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>

	<span class="token string">&quot;gorm.io/gorm/logger&quot;</span>

	<span class="token string">&quot;gorm.io/driver/sqlite&quot;</span>
	<span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	gorm<span class="token punctuation">.</span>Model
	Code  <span class="token builtin">string</span>
	Price <span class="token builtin">uint</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;quick-start.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Logger<span class="token punctuation">:</span> logger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;failed to connect database&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token punctuation">{</span>
		Code<span class="token punctuation">:</span>  <span class="token string">&quot;D42&quot;</span><span class="token punctuation">,</span>
		Price<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> product Product
	db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">,</span> <span class="token string">&quot;code = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D42&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>

	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;Price&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Product<span class="token punctuation">{</span>Code<span class="token punctuation">:</span> <span class="token string">&quot;F42&quot;</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;Code&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;E42&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Price&quot;</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>

	db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result:%v\\n&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Logger: logger.Default.LogMode(logger.Info)</code> :将 log 等级设为 info，会打印执行的 SQL</li></ul><h2 id="_3-declaring-models" tabindex="-1"><a class="header-anchor" href="#_3-declaring-models" aria-hidden="true">#</a> 3. Declaring Models</h2><h3 id="_3-1-declaring-models" tabindex="-1"><a class="header-anchor" href="#_3-1-declaring-models" aria-hidden="true">#</a> 3.1 Declaring Models</h3><p>模型是标准的 struct, 由 Go 的基本数据类型、实现了 Scanner 和 Valuer 接口的自定义类型及其指针或别名组成</p><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID           <span class="token builtin">uint</span>
  Name         <span class="token builtin">string</span>
  Email        <span class="token operator">*</span><span class="token builtin">string</span>
  Age          <span class="token builtin">uint8</span>
  Birthday     <span class="token operator">*</span>time<span class="token punctuation">.</span>Time
  MemberNumber sql<span class="token punctuation">.</span>NullString
  ActivatedAt  sql<span class="token punctuation">.</span>NullTime
  CreatedAt    time<span class="token punctuation">.</span>Time
  UpdatedAt    time<span class="token punctuation">.</span>Time
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-conventions" tabindex="-1"><a class="header-anchor" href="#_3-2-conventions" aria-hidden="true">#</a> 3.2 Conventions</h3><p>GORM 倾向于约定，而不是配置。默认情况下，GORM 使用 <code>ID</code> 作为主键，使用结构体名的 <code>蛇形复数</code> 作为表名，字段名的 <code>蛇形</code> 作为列名，并使用 <code>CreateAt</code>,<code>UpdateAt</code>字段追踪创建和更新时间</p><h4 id="_3-2-1-使用-id-作为主键" tabindex="-1"><a class="header-anchor" href="#_3-2-1-使用-id-作为主键" aria-hidden="true">#</a> 3.2.1 使用 <code>ID</code> 作为主键</h4><p>默认情况下， GORM 会使用 <code>ID</code> 作为表的主键</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">string</span> 
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用标签 <code>primaryKey</code> 将其他字段作为主键</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID   <span class="token builtin">int64</span>
	UUID <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过将多个字段设为主键，以创建复合主键，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID           <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  LanguageCode <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Code         <span class="token builtin">string</span>
  Name         <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：默认情况下，整型 <code>PrioritizedPrimaryField</code>启用了 <code>AutoIncrement</code>, 要禁用它，需要为整型字段关闭 <code>autoIncrement</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  CategoryID <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;primaryKey;autoIncrement:false&quot;\`</span>
  TypeID     <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;primaryKey;autoIncrement:false&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-复数表名" tabindex="-1"><a class="header-anchor" href="#_3-2-2-复数表名" aria-hidden="true">#</a> 3.2.2 复数表名</h4><p>GORM 使用结构体名的 <code>蛇形命名</code> 作为表名，对于结构体 <code>User</code>, 其表名为 <code>users</code></p><p>可以通过实现 <code>Tabler</code> 结构来更改默认表名：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Tabler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;profiles&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TableName</code> 会将表名重写为 <code>profiles</code></p><p><strong>注意</strong>：<code>TableName</code> 不支持动态变化，它会被缓存下来以便后续使用，想要使用动态表名可以使用<code>Scopes</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UserTable</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
    <span class="token keyword">if</span> user<span class="token punctuation">.</span>Admin <span class="token punctuation">{</span>
      <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;admin_users&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Scopes</span><span class="token punctuation">(</span><span class="token function">UserTable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-指定临时表名" tabindex="-1"><a class="header-anchor" href="#_3-2-3-指定临时表名" aria-hidden="true">#</a> 3.2.3 指定临时表名</h4><p>可以使用 <code>Table</code>方法指定临时表名，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 根据 User 的字段创建 \`deleted_users\` 表</span>
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;deleted_users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 从另一张表查询数据</span>
<span class="token keyword">var</span> deletedUsers <span class="token punctuation">[</span><span class="token punctuation">]</span>User
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;deleted_users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deletedUsers<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM deleted_users;</span>

db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;deleted_users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM deleted_users WHERE name = &#39;jinzhu&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-4-命名策略" tabindex="-1"><a class="header-anchor" href="#_3-2-4-命名策略" aria-hidden="true">#</a> 3.2.4 命名策略</h4><p>GORM 允许用户通过覆盖默认的 <code>NamingStrategy</code> 更改默认的命名约定，需要实现 <code>Namer</code> 接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">TableName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">SchemaName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">ColumnName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">JoinTableName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">RelationshipFKName</span><span class="token punctuation">(</span>Relationship<span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">CheckerName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">IndexName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的 <code>NamingStrategy</code> 也提供了几个选项</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  NamingStrategy<span class="token punctuation">:</span> schema<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">{</span>
    TablePrefix<span class="token punctuation">:</span> <span class="token string">&quot;t_&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// 表名前缀，\`User\`表为\`t_users\`</span>
    SingularTable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用单数表名，启用该选项后，\`User\` 表将是\`user\`</span>
    NameReplacer<span class="token punctuation">:</span> strings<span class="token punctuation">.</span><span class="token function">NewReplacer</span><span class="token punctuation">(</span><span class="token string">&quot;CID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 在转为数据库名称之前，使用NameReplacer更改结构/字段名称。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-5-列名" tabindex="-1"><a class="header-anchor" href="#_3-2-5-列名" aria-hidden="true">#</a> 3.2.5 列名</h4><p>根据约定，数据表的列名是使用字段名的蛇形命名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">uint</span>      <span class="token comment">// 列名是 \`id\`</span>
  Name      <span class="token builtin">string</span>    <span class="token comment">// 列名是 \`name\`</span>
  Birthday  time<span class="token punctuation">.</span>Time <span class="token comment">// 列名是 \`birthday\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time <span class="token comment">// 列名是 \`created_at\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>column</code> 标签或 <code>NamingStrategy</code> 来覆盖列名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  AnimalID <span class="token builtin">int64</span>     <span class="token string">\`gorm:&quot;column:beast_id&quot;\`</span>         <span class="token comment">// 将列名设为 \`beast_id\`</span>
  Birthday time<span class="token punctuation">.</span>Time <span class="token string">\`gorm:&quot;column:day_of_the_beast&quot;\`</span> <span class="token comment">// 将列名设为 \`day_of_the_beast\`</span>
  Age      <span class="token builtin">int64</span>     <span class="token string">\`gorm:&quot;column:age_of_the_beast&quot;\`</span> <span class="token comment">// 将列名设为 \`age_of_the_beast\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-6-时间戳追踪" tabindex="-1"><a class="header-anchor" href="#_3-2-6-时间戳追踪" aria-hidden="true">#</a> 3.2.6 时间戳追踪</h4><p><strong>CreatedAt</strong></p><p>对于有 <code>CreatedAt</code> 字段的模型，创建记录时，若该字段为零值则将其设置为当前时间</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span class="token comment">// 将 \`CreatedAt\` 设为当前时间</span>

user2 <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> CreatedAt<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span> <span class="token comment">// user2 的 \`CreatedAt\` 不会被修改</span>

<span class="token comment">// 想要修改该值，您可以使用 \`Update\`</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;CreatedAt&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UpdatedAt</strong></p><p>对于有 <code>UpadtedAt</code> 字段的模型，更新记录时，将该字段的值设置为当前时间，创建记录时，若该字段为零值，则将其值设置为当前时间</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span class="token comment">// set \`UpdatedAt\` to current time</span>

db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span> <span class="token comment">// will set \`UpdatedAt\` to current time</span>

db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UpdateColumn</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span> <span class="token comment">// \`UpdatedAt\` won&#39;t be changed</span>

user2 <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> UpdatedAt<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span> <span class="token comment">// user2&#39;s \`UpdatedAt\` won&#39;t be changed when creating</span>

user3 <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> UpdatedAt<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user3<span class="token punctuation">)</span> <span class="token comment">// user3&#39;s \`UpdatedAt\` will change to current time when updating</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-gorm-model" tabindex="-1"><a class="header-anchor" href="#_3-3-gorm-model" aria-hidden="true">#</a> 3.3 gorm.Model</h3><p>GORM 定义一个 <code>gorm.Model</code>结构体，其包括字段 <code>ID</code>,<code>CreatedAt</code>,<code>UpdatedAt</code>,<code>DeletedAt</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">uint</span>           <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  UpdatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">\`gorm:&quot;index&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将其嵌入结构体中以包含这些字段</p><h4 id="_3-4-高级选项" tabindex="-1"><a class="header-anchor" href="#_3-4-高级选项" aria-hidden="true">#</a> 3.4 高级选项</h4><h4 id="_3-4-1-字段级权限控制" tabindex="-1"><a class="header-anchor" href="#_3-4-1-字段级权限控制" aria-hidden="true">#</a> 3.4.1 字段级权限控制</h4><p>导出的字段在使用 GORM 进行 CRUD 操作时拥有全部权限，GORM 可以为使用标签控制字段的权限，如让字段只读，只写，只创建或被忽略（ GORM Migrator 创建表时，不会创建被忽略的字段）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;&lt;-:create&quot;\`</span> <span class="token comment">// 允许读和创建</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;&lt;-:update&quot;\`</span> <span class="token comment">// 允许读和更新</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;&lt;-&quot;\`</span>        <span class="token comment">// 允许读和写（创建和更新）</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;&lt;-:false&quot;\`</span>  <span class="token comment">// 允许读，禁止写</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;-&gt;&quot;\`</span>        <span class="token comment">// 只读（除非有自定义配置，否则禁止写）</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;-&gt;;&lt;-:create&quot;\`</span> <span class="token comment">// 允许读和写</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;-&gt;:false;&lt;-:create&quot;\`</span> <span class="token comment">// 仅创建（禁止从 db 读）</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;-&quot;\`</span>  <span class="token comment">// 通过 struct 读写会忽略该字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-创建-更新时间追踪" tabindex="-1"><a class="header-anchor" href="#_3-4-2-创建-更新时间追踪" aria-hidden="true">#</a> 3.4.2 创建/更新时间追踪</h4><p>GORM 约定使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 追踪创建/更新时间。如果定义了这种字段，GORM 在创建、更新时会自动填充当前时间</p><p>要使用不同名称的字段，可以配置 <code>autoCreateTime</code>、<code>autoUpdateTime</code> 标签</p><p>如果想要保存 UNIX（毫/纳）秒时间戳，而不是 time，您只需简单地将 <code>time.Time</code> 修改为 <code>int</code> 即可</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  CreatedAt time<span class="token punctuation">.</span>Time <span class="token comment">// Set to current time if it is zero on creating</span>
  UpdatedAt <span class="token builtin">int</span>       <span class="token comment">// Set to current unix seconds on updating or if it is zero on creating</span>
  Updated   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoUpdateTime:nano&quot;\`</span> <span class="token comment">// Use unix nano seconds as updating time</span>
  Updated   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoUpdateTime:milli&quot;\`</span><span class="token comment">// Use unix milli seconds as updating time</span>
  Created   <span class="token builtin">int64</span> <span class="token string">\`gorm:&quot;autoCreateTime&quot;\`</span>      <span class="token comment">// Use unix seconds as creating time</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-3-嵌入结构体" tabindex="-1"><a class="header-anchor" href="#_3-4-3-嵌入结构体" aria-hidden="true">#</a> 3.4.3 嵌入结构体</h4><p>对于匿名字段，GORM 会将其字段包含在父结构体中，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">uint</span>           <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  UpdatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">\`gorm:&quot;index&quot;\`</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于正常的结构体字段，你也可以通过标签 <code>embedded</code> 将其嵌入，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name  <span class="token builtin">string</span>
    Email <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID      <span class="token builtin">int</span>
  Author  Author <span class="token string">\`gorm:&quot;embedded&quot;\`</span>
  Upvotes <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID    <span class="token builtin">int64</span>
  Name  <span class="token builtin">string</span>
  Email <span class="token builtin">string</span>
  Upvotes  <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用标签 <code>embeddedPrefix</code> 来为 db 中的字段名添加前缀，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID      <span class="token builtin">int</span>
  Author  Author <span class="token string">\`gorm:&quot;embedded;embeddedPrefix:author_&quot;\`</span>
  Upvotes <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID          <span class="token builtin">int64</span>
  AuthorName  <span class="token builtin">string</span>
  AuthorEmail <span class="token builtin">string</span>
  Upvotes     <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-4-字段标签" tabindex="-1"><a class="header-anchor" href="#_3-4-4-字段标签" aria-hidden="true">#</a> 3.4.4 字段标签</h4><p>声明 model 时，tag 是可选的，GORM 支持以下 tag： tag 名大小写不敏感，但建议使用 <code>camelCase</code> 风格</p>`,72),k=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"标签名"),n("th",{style:{"text-align":"left"}},"说明")])],-1),m=n("tr",null,[n("td",{style:{"text-align":"left"}},"column"),n("td",{style:{"text-align":"left"}},"指定 db 列名")],-1),v=n("tr",null,[n("td",{style:{"text-align":"left"}},"type"),n("td",{style:{"text-align":"left"}},[s("列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如："),n("code",null,"not null"),s("、"),n("code",null,"size"),s(", "),n("code",null,"autoIncrement"),s("… 像 "),n("code",null,"varbinary(8)"),s(" 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如："),n("code",null,"MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT")])],-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},"size"),n("td",{style:{"text-align":"left"}},[s("指定列大小，例如："),n("code",null,"size:256")])],-1),b=n("tr",null,[n("td",{style:{"text-align":"left"}},"primaryKey"),n("td",{style:{"text-align":"left"}},"指定列为主键")],-1),h=n("tr",null,[n("td",{style:{"text-align":"left"}},"unique"),n("td",{style:{"text-align":"left"}},"指定列为唯一")],-1),f=n("tr",null,[n("td",{style:{"text-align":"left"}},"default"),n("td",{style:{"text-align":"left"}},"指定列的默认值")],-1),q=n("tr",null,[n("td",{style:{"text-align":"left"}},"precision"),n("td",{style:{"text-align":"left"}},"指定列的精度")],-1),_=n("tr",null,[n("td",{style:{"text-align":"left"}},"scale"),n("td",{style:{"text-align":"left"}},"指定列大小")],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},"not null"),n("td",{style:{"text-align":"left"}},"指定列为 NOT NULL")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},"autoIncrement"),n("td",{style:{"text-align":"left"}},"指定列为自动增长")],-1),w=n("tr",null,[n("td",{style:{"text-align":"left"}},"autoIncrementIncrement"),n("td",{style:{"text-align":"left"}},"自动步长，控制连续记录之间的间隔")],-1),N=n("tr",null,[n("td",{style:{"text-align":"left"}},"embedded"),n("td",{style:{"text-align":"left"}},"嵌套字段")],-1),C=n("tr",null,[n("td",{style:{"text-align":"left"}},"embeddedPrefix"),n("td",{style:{"text-align":"left"}},"嵌入字段的列名前缀")],-1),U=n("tr",null,[n("td",{style:{"text-align":"left"}},"autoCreateTime"),n("td",{style:{"text-align":"left"}},[s("创建时追踪当前时间，对于 "),n("code",null,"int"),s(" 字段，它会追踪秒级时间戳，您可以使用 "),n("code",null,"nano"),s("/"),n("code",null,"milli"),s(" 来追踪纳秒、毫秒时间戳，例如："),n("code",null,"autoCreateTime:nano")])],-1),D=n("tr",null,[n("td",{style:{"text-align":"left"}},"autoUpdateTime"),n("td",{style:{"text-align":"left"}},[s("创建/更新时追踪当前时间，对于 "),n("code",null,"int"),s(" 字段，它会追踪秒级时间戳，您可以使用 "),n("code",null,"nano"),s("/"),n("code",null,"milli"),s(" 来追踪纳秒、毫秒时间戳，例如："),n("code",null,"autoUpdateTime:milli")])],-1),M=n("td",{style:{"text-align":"left"}},"index",-1),S={style:{"text-align":"left"}},T={href:"https://gorm.io/zh_CN/docs/indexes.html",target:"_blank",rel:"noopener noreferrer"},A=n("tr",null,[n("td",{style:{"text-align":"left"}},"uniqueIndex"),n("td",{style:{"text-align":"left"}},[s("与 "),n("code",null,"index"),s(" 相同，但创建的是唯一索引")])],-1),O=n("td",{style:{"text-align":"left"}},"check",-1),I={style:{"text-align":"left"}},R=n("code",null,"check:age > 13",-1),L={href:"https://gorm.io/zh_CN/docs/constraints.html",target:"_blank",rel:"noopener noreferrer"},P=n("tr",null,[n("td",{style:{"text-align":"left"}},"<-"),n("td",{style:{"text-align":"left"}},[s("设置字段写入的权限， "),n("code",null,"<-:create"),s(" 只创建、"),n("code",null,"<-:update"),s(" 只更新、"),n("code",null,"<-:false"),s(" 无写入权限、"),n("code",null,"<-"),s(" 创建和更新权限")])],-1),B=n("tr",null,[n("td",{style:{"text-align":"left"}},"->"),n("td",{style:{"text-align":"left"}},[s("设置字段读的权限，"),n("code",null,"->:false"),s(" 无读权限")])],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},"-"),n("td",{style:{"text-align":"left"}},[s("忽略该字段，"),n("code",null,"-"),s(" 无读写权限")])],-1),G=n("tr",null,[n("td",{style:{"text-align":"left"}},"comment"),n("td",{style:{"text-align":"left"}},"迁移时为字段添加注释")],-1),Q=e(`<h4 id="_3-4-5-关联标签" tabindex="-1"><a class="header-anchor" href="#_3-4-5-关联标签" aria-hidden="true">#</a> 3.4.5 关联标签</h4><p>GORM 允许通过标签为关联配置外键、约束、many2many 表</p><h2 id="_4-connecting-to-database" tabindex="-1"><a class="header-anchor" href="#_4-connecting-to-database" aria-hidden="true">#</a> 4. Connecting to Database</h2><p>GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server</p><h3 id="_4-1-mysql" tabindex="-1"><a class="header-anchor" href="#_4-1-mysql" aria-hidden="true">#</a> 4.1 MySQL</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/mysql&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dsn <span class="token operator">:=</span> <span class="token string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>
  db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),z=n("code",null,"time.Time",-1),F=n("code",null,"parseTime",-1),j={href:"https://github.com/go-sql-driver/mysql#parameters",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"charset=utf8",-1),V=n("code",null,"charset=utf8mb4",-1),W={href:"https://mathiasbynens.be/notes/mysql-utf8mb4",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/go-gorm/mysql",target:"_blank",rel:"noopener noreferrer"},Z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// DSN data source name</span>
  DefaultStringSize<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token comment">// string 类型字段的默认长度</span>
  DisableDatetimePrecision<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span>
  DontSupportRenameIndex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span>
  DontSupportRenameColumn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 用 \`change\` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span>
  SkipInitializeWithVersion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 根据当前 MySQL 版本自动配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-自定义驱动" tabindex="-1"><a class="header-anchor" href="#_4-1-2-自定义驱动" aria-hidden="true">#</a> 4.1.2 自定义驱动</h4><p>GORM 允许通过 <code>DriverName</code> 选项自定义 MySQL 驱动，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token boolean">_</span> <span class="token string">&quot;example.com/my_mysql_driver&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DriverName<span class="token punctuation">:</span> <span class="token string">&quot;my_mysql_driver&quot;</span><span class="token punctuation">,</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Data Source Name，参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-3-现有的数据库连接" tabindex="-1"><a class="header-anchor" href="#_4-1-3-现有的数据库连接" aria-hidden="true">#</a> 4.1.3 现有的数据库连接</h4><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;database/sql&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mydb_dsn&quot;</span><span class="token punctuation">)</span>
gormDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  Conn<span class="token punctuation">:</span> sqlDB<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-postgresql" tabindex="-1"><a class="header-anchor" href="#_4-2-postgresql" aria-hidden="true">#</a> 4.2 PostgreSQL</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/postgres&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

dsn <span class="token operator">:=</span> <span class="token string">&quot;host=localhost user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span>
db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),J={href:"https://github.com/jackc/pgx",target:"_blank",rel:"noopener noreferrer"},X=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// https://github.com/go-gorm/postgres</span>
db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span><span class="token punctuation">,</span>
  PreferSimpleProtocol<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// disables implicit prepared statement usage</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-1-自定义驱动" tabindex="-1"><a class="header-anchor" href="#_4-2-1-自定义驱动" aria-hidden="true">#</a> 4.2.1 自定义驱动</h4><p>GORM 允许通过 <code>DriverName</code> 选项自定义 PostgreSQL 驱动，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token boolean">_</span> <span class="token string">&quot;github.com/GoogleCloudPlatform/cloudsql-proxy/proxy/dialers/postgres&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DriverName<span class="token punctuation">:</span> <span class="token string">&quot;cloudsqlpostgres&quot;</span><span class="token punctuation">,</span>
  DSN<span class="token punctuation">:</span> <span class="token string">&quot;host=project:region:instance user=postgres dbname=postgres password=password sslmode=disable&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-现有的数据库连接" tabindex="-1"><a class="header-anchor" href="#_4-2-2-现有的数据库连接" aria-hidden="true">#</a> 4.2.2 现有的数据库连接</h4><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;database/sql&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mydb_dsn&quot;</span><span class="token punctuation">)</span>
gormDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  Conn<span class="token punctuation">:</span> sqlDB<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-sqlite" tabindex="-1"><a class="header-anchor" href="#_4-3-sqlite" aria-hidden="true">#</a> 4.3 SQLite</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/sqlite&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// github.com/mattn/go-sqlite3</span>
db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),$=n("strong",null,"注意：",-1),Y=n("code",null,"file::memory:?cache=shared",-1),nn={href:"https://www.sqlite.org/inmemorydb.html",target:"_blank",rel:"noopener noreferrer"},sn=e(`<h3 id="_4-4-sql-server" tabindex="-1"><a class="header-anchor" href="#_4-4-sql-server" aria-hidden="true">#</a> 4.4 SQL Server</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/sqlserver&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// github.com/denisenkom/go-mssqldb</span>
dsn <span class="token operator">:=</span> <span class="token string">&quot;sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm&quot;</span>
db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlserver<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-clickhouse" tabindex="-1"><a class="header-anchor" href="#_4-5-clickhouse" aria-hidden="true">#</a> 4.5 Clickhouse</h3>`,3),an={href:"https://github.com/go-gorm/clickhouse",target:"_blank",rel:"noopener noreferrer"},tn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/driver/clickhouse&quot;</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dsn <span class="token operator">:=</span> <span class="token string">&quot;tcp://localhost:9000?database=gorm&amp;username=gorm&amp;password=gorm&amp;read_timeout=10&amp;write_timeout=20&quot;</span>
  db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>clickhouse<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// Auto Migrate</span>
  db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// Set table options</span>
  db<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:table_options&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ENGINE=Distributed(cluster, default, hits)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 插入</span>
  db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

  <span class="token comment">// 查询</span>
  db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

  <span class="token comment">// 批量插入</span>
  <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">}</span>
  db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-连接池" tabindex="-1"><a class="header-anchor" href="#_4-6-连接池" aria-hidden="true">#</a> 4.6 连接池</h3>`,2),en={href:"https://pkg.go.dev/database/sql",target:"_blank",rel:"noopener noreferrer"},on=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span>
sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span>
sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span>
sqlDB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pn={href:"https://gorm.io/zh_CN/docs/generic_interface.html",target:"_blank",rel:"noopener noreferrer"},cn=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),ln=n("li",null,[n("a",{href:"%5Bhttps://gorm.io%5D(https://gorm.io/)"},"gorm")],-1),un={href:"https://github.com/go-gorm/gorm/issues/4218",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"Find",-1),dn=n("code",null,"Scan",-1),kn=n("code",null,"Scan",-1),mn=n("code",null,"Find",-1),vn={href:"https://stackoverflow.com/questions/45953553/what-is-the-syntax-for-select-in-statement-for-sqlite",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://www.sqlitetutorial.net/sqlite-full-outer-join/",target:"_blank",rel:"noopener noreferrer"};function bn(hn,fn){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[s("相关代码在我的仓库找到"),n("a",r,[s("gorm-note"),t(a)])]),d,n("table",null,[k,n("tbody",null,[m,v,g,b,h,f,q,_,y,x,w,N,C,U,D,n("tr",null,[M,n("td",S,[s("根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看 "),n("a",T,[s("索引"),t(a)]),s(" 获取详情")])]),A,n("tr",null,[O,n("td",I,[s("创建检查约束，例如 "),R,s("，查看 "),n("a",L,[s("约束"),t(a)]),s(" 获取详情")])]),P,B,E,G])]),Q,n("p",null,[s("**注意：**想要正确的处理 "),z,s(" ，需要带上 "),F,s(" 参数， ("),n("a",j,[s("更多参数"),t(a)]),s(") 要支持完整的 UTF-8 编码，您需要将 "),K,s(" 更改为 "),V,s(" 查看 "),n("a",W,[s("此文章"),t(a)]),s(" 获取详情")]),n("p",null,[s("MySQl 驱动程序提供了 "),n("a",H,[s("一些高级配置"),t(a)]),s(" 可以在初始化过程中使用，例如：")]),Z,n("p",null,[s("我们使用 "),n("a",J,[s("pgx"),t(a)]),s(" 作为 postgres 的 database/sql 驱动，默认情况下，它会启用 prepared statement 缓存，你可以这样禁用它：")]),X,n("blockquote",null,[n("p",null,[$,s(" 您也可以使用 "),Y,s(" 替代文件路径。 这会告诉 SQLite 在系统内存中使用一个临时数据库。 (查看 "),n("a",nn,[s("SQLite 文档"),t(a)]),s(" 获取详情)")])]),sn,n("p",null,[n("a",an,[s("https://github.com/go-gorm/clickhouse"),t(a)])]),tn,n("p",null,[s("GORM 使用 "),n("a",en,[s("database/sql"),t(a)]),s(" 维护连接池")]),on,n("p",null,[s("查看 "),n("a",pn,[s("通用接口"),t(a)]),s(" 获取详情。")]),cn,n("ol",null,[ln,n("li",null,[n("a",un,[s("What is the difference between "),rn,s(" and "),dn,s("， Can I replace "),kn,s(" with "),mn,s(" ？"),t(a)]),s(" grom issue")]),n("li",null,[n("a",vn,[s("What is the syntax for SELECT IN statement for SQLITE?"),t(a)]),s(" stackoverflow")]),n("li",null,[n("a",gn,[s("SQLite FULL OUTER JOIN Emulation"),t(a)]),s(" sqlitetutorial")])])])}const _n=o(l,[["render",bn],["__file","01.1.html.vue"]]);export{_n as default};
