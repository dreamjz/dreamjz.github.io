import{_ as o,Z as p,$ as c,a0 as n,a1 as a,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const l={},d=t(`<h1 id="_7-6-字符串、数组和切片的应用" tabindex="-1"><a class="header-anchor" href="#_7-6-字符串、数组和切片的应用" aria-hidden="true">#</a> 7.6 字符串、数组和切片的应用</h1><h2 id="_7-6-1-从字符串生成字节切片" tabindex="-1"><a class="header-anchor" href="#_7-6-1-从字符串生成字节切片" aria-hidden="true">#</a> 7.6.1 从字符串生成字节切片</h2><ul><li><p>类型转换：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>byteslice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>copy()</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">copy</span><span class="token punctuation">(</span>dst <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> src <span class="token builtin">string</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_7-6-2-获取字符串的一部分" tabindex="-1"><a class="header-anchor" href="#_7-6-2-获取字符串的一部分" aria-hidden="true">#</a> 7.6.2 获取字符串的一部分</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>substr <span class="token operator">:=</span> str<span class="token punctuation">[</span>start<span class="token punctuation">:</span> end<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-6-3-字符串和切片的内存结构" tabindex="-1"><a class="header-anchor" href="#_7-6-3-字符串和切片的内存结构" aria-hidden="true">#</a> 7.6.3 字符串和切片的内存结构</h2><p>字符串在内存中实际上是双字结构：</p><ul><li>指向实际数据的指针</li><li>字符串长度</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230504190917279.png" alt="image-20230504190917279" tabindex="0" loading="lazy"><figcaption>image-20230504190917279</figcaption></figure><h2 id="_7-6-4-修改字符串" tabindex="-1"><a class="header-anchor" href="#_7-6-4-修改字符串" aria-hidden="true">#</a> 7.6.4 修改字符串</h2><p>Go 中的字符串是<strong>不可变</strong>的，需要将其转换成字节切片后进行修改。</p><p><a href="path/07_6_string_slice.go">07_6_string_slice.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">strsli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;HELLO&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;str: &quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
	sli <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
	<span class="token comment">// cannot change string</span>
	<span class="token comment">// sli[0] = &#39;T&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sli<span class="token punctuation">)</span>

	<span class="token comment">// convert to []byte</span>
	sb <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	sb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;T&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>str:  HELLO
HELLO
TELLO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-6-5-比较字节数组" tabindex="-1"><a class="header-anchor" href="#_7-6-5-比较字节数组" aria-hidden="true">#</a> 7.6.5 比较字节数组</h2><p><a href="path/07_6_bytes_compare.go">07_6_bytes_compare.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	la<span class="token punctuation">,</span> lb <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> la <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> lb<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
		<span class="token keyword">case</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> la <span class="token operator">&lt;</span> lb<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">case</span> la <span class="token operator">&gt;</span> lb<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-6-6-搜索及排序切片数组" tabindex="-1"><a class="header-anchor" href="#_7-6-6-搜索及排序切片数组" aria-hidden="true">#</a> 7.6.6 搜索及排序切片数组</h2>`,18),u=n("code",null,"sort",-1),r={href:"https://pkg.go.dev/sort@go1.20.4",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_7-6-7-append-常用操作" tabindex="-1"><a class="header-anchor" href="#_7-6-7-append-常用操作" aria-hidden="true">#</a> 7.6.7 append 常用操作</h2><ol><li><p>将切片 <code>b</code> 的元素追加到切片 <code>a</code> 之后：<code>a = append(a, b...)</code></p></li><li><p>复制切片 <code>a</code> 的元素到新的切片 <code>b</code> 上：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除位于索引 <code>i</code> 的元素：<code>a = append(a[:i], a[i+1:]...)</code></p></li><li><p>切除切片 <code>a</code> 中从索引 <code>i</code> 至 <code>j</code> 位置的元素：<code>a = append(a[:i], a[j:]...)</code></p></li><li><p>为切片 <code>a</code> 扩展 <code>j</code> 个元素长度：<code>a = append(a, make([]T, j)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入元素 <code>x</code>：<code>a = append(a[:i], append([]T{x}, a[i:]...)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入长度为 <code>j</code> 的新切片：<code>a = append(a[:i], append(make([]T, j), a[i:]...)...)</code></p></li><li><p>在索引 <code>i</code> 的位置插入切片 <code>b</code> 的所有元素：<code>a = append(a[:i], append(b, a[i:]...)...)</code></p></li><li><p>取出位于切片 <code>a</code> 最末尾的元素 <code>x</code>：<code>x, a = a[len(a)-1], a[:len(a)-1]</code></p></li><li><p>将元素 <code>x</code> 追加到切片 <code>a</code>：<code>a = append(a, x)</code></p></li></ol>`,2),v={href:"http://github.com/feyeleanor/slices",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"slices",-1),m={href:"http://github.com/feyeleanor/chain",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"chain",-1),g={href:"http://github.com/feyeleanor/lists",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"lists",-1),f=n("h2",{id:"_7-6-8-切片和垃圾回收",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-6-8-切片和垃圾回收","aria-hidden":"true"},"#"),a(" 7.6.8 切片和垃圾回收")],-1),x=n("p",null,"切片底层指向一个数组，只有在没有任何切片指向时，数组才会被释放。",-1),y=n("p",null,"若只需要一部分数据时，需要将其复制到新的切片中，以便释放原数组的资源。",-1);function w(L,E){const s=i("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[a("使用标准库"),u,a("来排序和搜索，详见"),n("a",r,[a("sort"),e(s)])]),k,n("p",null,[a("可以学习一下 Eleanor McHugh 编写的几个包："),n("a",v,[b,e(s)]),a("、"),n("a",m,[h,e(s)]),a(" 和 "),n("a",g,[_,e(s)])]),f,x,y])}const j=o(l,[["render",w],["__file","07.6.html.vue"]]);export{j as default};
