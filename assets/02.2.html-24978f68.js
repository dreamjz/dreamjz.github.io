import{_ as p,Z as e,$ as o,a0 as n,a1 as s,a2 as i,a3 as a,H as l}from"./framework-09afcf0b.js";const c={},u=a('<p><strong>双指针</strong>是一种常见的解题思路, 通过相反或相同的方向来扫描数组以达成解题.</p><h2 id="_2-2-1-问题06-排序数组中的两个数字之和" tabindex="-1"><a class="header-anchor" href="#_2-2-1-问题06-排序数组中的两个数字之和" aria-hidden="true">#</a> 2.2.1 问题06: 排序数组中的两个数字之和</h2><p>输入升序排列的数组和一个值k,在数组中找出两个元素之和等于k的元素的下标并返回; 假设数组中只存在一对符合条件的元素, 且单个元素不能使用两次.</p><p>例: [1, 2, 4, 6 ] 和 8, 返回[1, 3]</p><h3 id="_2-2-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_2-2-1-1-分析-题解" aria-hidden="true">#</a> 2.2.1.1 分析&amp;题解</h3><h4 id="暴力解法" tabindex="-1"><a class="header-anchor" href="#暴力解法" aria-hidden="true">#</a> 暴力解法</h4><p>遍历数组, 将元素两两匹配求和.</p>',7),r=n("p",null,[s("时间复杂度: O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"n"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"n^2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])]),s(")")],-1),k=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSumBruteForce</span><span class="token punctuation">(</span>ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>ints<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> n <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h4><p>遍历数组, 对于数字<code>i</code>, 使用二分法寻找 <code>k - i</code>.</p><p>二分查找时间复杂度: O(logn)</p><p>总体时间复杂度: O(nlogn)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSumBinarySearch</span><span class="token punctuation">(</span>ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> ints <span class="token punctuation">{</span>
		t <span class="token operator">:=</span> n <span class="token operator">-</span> ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		j <span class="token operator">:=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>ints<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> j <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	left <span class="token operator">:=</span> <span class="token number">0</span>
	right <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

	<span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
		mid <span class="token operator">:=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>

		midVal <span class="token operator">:=</span> ints<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>
		<span class="token keyword">if</span> t <span class="token operator">==</span> midVal <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> t <span class="token operator">&gt;</span> midVal <span class="token punctuation">{</span>
			left<span class="token operator">++</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> t <span class="token operator">&lt;</span> midVal <span class="token punctuation">{</span>
			right<span class="token operator">--</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable" aria-hidden="true">#</a> HashTable</h4><ol><li>将数组元素记录于哈希表中</li><li>遍历数组, 对于数字<code>i</code> , 在哈希表中寻找<code>k-i</code> (哈希表查找时间复杂度O(1))</li></ol><p>时间复杂度: O(n), 空间复杂度: O(n)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSumHashTable</span><span class="token punctuation">(</span>ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ints <span class="token punctuation">{</span>
       m<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ints <span class="token punctuation">{</span>
       <span class="token keyword">if</span> val<span class="token punctuation">,</span> isPresent <span class="token operator">:=</span> m<span class="token punctuation">[</span>n<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> isPresent <span class="token punctuation">{</span>
          <span class="token keyword">if</span> i <span class="token operator">!=</span> val <span class="token punctuation">{</span>
             <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> val<span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h4><p>由于数组是<strong>有序的</strong>, 故可以使用双指针, 假设为<strong>升序</strong>:</p><ol><li>左指针(l), 右指针(r) 分别从两端开始反向移动</li><li>计算两数之和, <ul><li>大于k: 右指针左移</li><li>小于k: 左指针右移</li><li>等于k: 返回结果</li></ul></li></ol><p>时间复杂度: O(n), 空间复杂度: O(1)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSumTwoPointer</span><span class="token punctuation">(</span>ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	left <span class="token operator">:=</span> <span class="token number">0</span>
	right <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

	<span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
		sum <span class="token operator">:=</span> ints<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> ints<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
		<span class="token keyword">if</span> sum <span class="token operator">==</span> n <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> sum <span class="token operator">&gt;</span> n <span class="token punctuation">{</span>
			right<span class="token operator">--</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> sum <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
			left<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="benchmark" tabindex="-1"><a class="header-anchor" href="#benchmark" aria-hidden="true">#</a> Benchmark</h4><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230903012750569.png" alt="image-20230903012750569" tabindex="0" loading="lazy"><figcaption>image-20230903012750569</figcaption></figure><h2 id="_2-2-2-问题07-数组中和为0的3个数字" tabindex="-1"><a class="header-anchor" href="#_2-2-2-问题07-数组中和为0的3个数字" aria-hidden="true">#</a> 2.2.2 问题07: 数组中和为0的3个数字</h2><p>输入数组, 找出数组中所有和为0的3个数字的三元组. 返回值不得包含重复的三元组</p><p>例: [-1, 0, 1, 2, -1, 4], 返回 [-1, 0, 1], [-1, -1, 2]</p><h3 id="_2-2-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_2-2-2-1-分析-题解" aria-hidden="true">#</a> 2.2.2.1 分析&amp;题解</h3><p>三数之和为0, 可将其转化为两数之和的问题, 即对于数字 k, 在数组中寻找和为 -k 的数字.</p>`,22),d=n("p",null,[s("去除重复三元组, 对于满足条件的三元组: [a, b, c], 只要原数组进行排序, 那么一定有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a"),n("mo",null,"≤"),n("mi",null,"b"),n("mo",null,"≤"),n("mi",null,"c")]),n("annotation",{encoding:"application/x-tex"},"a\\le b \\le c")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8304em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"c")])])]),s(" , 只会出现一个三元组 [a, b, c] (不会有 [a , c , b], [b, c, a]...)")],-1),m=n("h4",{id:"流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#流程","aria-hidden":"true"},"#"),s(" 流程")],-1),v=n("ol",null,[n("li",null,"将原数组进行排序, TC: O(nlogn)"),n("li",null,[s("遍历数组, 对于元素 i : "),n("ol",null,[n("li",null,"使用双指针方法找出两数之和为 -i 的元素 j 和 k"),n("li",null,"指针跳过所有的相同元素, 避免重复, 跳过相同元素 i, j 即可. (三元组 [i, j, k], 因为三者之和为0, 那么可以视作[i, j, -i-j], 只需要 i, j 不重复那么三元组就不会重复 )")])])],-1),b=n("p",null,[s("总体时间复杂度为: O(nlogn) + O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"n"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"n^2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])]),s(") 即 O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"n"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"n^2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])]),s(")")],-1),h=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// qSortArr array in ascending order</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token comment">// threeSum</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
		result <span class="token operator">=</span> <span class="token function">twoSum07</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
		<span class="token comment">// skip identical element</span>
		ie <span class="token operator">:=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ie <span class="token punctuation">{</span>
			i<span class="token operator">++</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">twoSum07</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">,</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// skip i</span>
	left<span class="token punctuation">,</span> right <span class="token operator">:=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>

	<span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
		sum <span class="token operator">:=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
		<span class="token keyword">if</span> sum <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> sum <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> sum <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token comment">// skip identical nums</span>
			le <span class="token operator">:=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
			<span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> le <span class="token punctuation">{</span>
				left<span class="token operator">++</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-3-问题08-和大于或等于k的最短子数组" tabindex="-1"><a class="header-anchor" href="#_2-2-3-问题08-和大于或等于k的最短子数组" aria-hidden="true">#</a> 2.2.3 问题08: 和大于或等于k的最短子数组</h2><p>输入一个正整<strong>数组</strong>和正整数 k , 求数组中<strong>和</strong>大于或等于 k 的<strong>连续</strong>子数组的最短长度, 若不存在则返回0</p><p>例: [5 1 4 3]和7, [4, 3] 符合条件, 那么最短长度为 2</p><h4 id="_2-2-3-1-分析" tabindex="-1"><a class="header-anchor" href="#_2-2-3-1-分析" aria-hidden="true">#</a> 2.2.3.1 分析</h4><p>子数组有一个或多个连续数字组成, 那么一个数组可以由两个指针表示.</p><p>对于子数组 sub, p1 指向第一个数字, p2 指向最后一个数字, 那么子数组就是由 p1 到 p2 之间的数字组成.</p><p>对于子数组之和, 因为元素均为正整数</p><ul><li>p1 右移时, 元素减少则<strong>和</strong>减少.</li><li>p2 右移时, 元素增加则<strong>和</strong>增加.</li></ul><p>通过一次遍历 (以 p2 进行遍历), 即可寻找出最短的符合条件的连续子数组</p><h4 id="_2-2-3-2-流程" tabindex="-1"><a class="header-anchor" href="#_2-2-3-2-流程" aria-hidden="true">#</a> 2.2.3.2 流程</h4><ol><li>指针 p1, p2 都指向第一个元素</li><li>计算指针之间的元素之和 sum: <ul><li>sum &lt; k, 需增加元素 p2 右移, 和增加</li><li>sum &gt;= k, 满足条件, 更新最小长度, p1 右移, 移除一个元素(和减小), 直到 sum &lt; k</li></ul></li><li>流程结束, 返回最小长度, 否则返回0</li></ol><p>因为两个循环中, left, right 只增加不减小且均从 0 增加到 n-1, 故时间复杂度为 O(n)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// two pointers</span>
	left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>

	minLen <span class="token operator">:=</span> <span class="token number">0</span>
	sum <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> right <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> right<span class="token operator">++</span> <span class="token punctuation">{</span>
		sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
		<span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&gt;=</span> k <span class="token punctuation">{</span>
			minLen <span class="token operator">=</span> <span class="token function">minLength</span><span class="token punctuation">(</span>minLen<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token comment">// next sub</span>
			sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
			left<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> minLen
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">minLength</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> l <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> m <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> l <span class="token operator">&lt;</span> m <span class="token punctuation">{</span>
			<span class="token keyword">return</span> l
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> m
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> l
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-4-问题09-乘积小于k的子数组个数" tabindex="-1"><a class="header-anchor" href="#_2-2-4-问题09-乘积小于k的子数组个数" aria-hidden="true">#</a> 2.2.4 问题09: 乘积小于k的子数组个数</h2><p>输入正整数组和正整数k, 输出乘积小于k的连续子数组的个数</p><p>例: [10 5 2 6] and 100, 满足条件的有 [10], [5], [2], [6], [10 5], [5 2], [2 6], [5 2 6], 输出: 8</p><h3 id="_2-2-4-1-分析" tabindex="-1"><a class="header-anchor" href="#_2-2-4-1-分析" aria-hidden="true">#</a> 2.2.4.1 分析</h3><p>和前一个问题类似, 使用双指针解决.</p><p>对于一个连续子数组 [n1 n2 ... ni], 若元素乘积小于 k, 那么其所有子数组的乘积一定小于 k 且满足条件的<strong>长度大于1</strong>的<strong>子数组</strong>个数就为 <strong>数组长度</strong></p><p>例如: [5 2 6] 和 100, 满足条件的子数组为 [5 2] [2 6] [5 2 6] 为 3 个</p><h3 id="_2-2-4-2-流程" tabindex="-1"><a class="header-anchor" href="#_2-2-4-2-流程" aria-hidden="true">#</a> 2.2.4.2 流程</h3><ol><li>指针 p1, p2 从第一个元素开始</li><li>计算元素乘积 prod : <ul><li>prod &lt; k, 子数组的个数就是数组长度, p2 右移, 积增大, 直到 prod &gt;=k</li><li>prod &gt;= k, p1 左移, 积减小</li></ul></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">numSubarrayLessThanK</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>

	prod <span class="token operator">:=</span> <span class="token number">1</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> right <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> right<span class="token operator">++</span> <span class="token punctuation">{</span>
		prod <span class="token operator">*=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
		<span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> prod <span class="token operator">&gt;=</span> k <span class="token punctuation">{</span>
			prod <span class="token operator">/=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
			left<span class="token operator">++</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
			count <span class="token operator">+=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,25),g={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function f(w,y){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,r,k,d,m,v,b,h,n("ol",null,[n("li",null,[n("a",g,[s("剑指Offer（专项突破版）"),i(t)])])])])}const _=p(c,[["render",f],["__file","02.2.html.vue"]]);export{_ as default};
