import{_ as o,Z as i,$ as c,a0 as n,a1 as s,a2 as a,a4 as l,a3 as u,H as t}from"./framework-dee406ed.js";const r={},d=n("p",null,"With arrays and structures, we save an item in memory and later refer to it by name (or by index); with linked lists, the manner in which we save information makes it more difficult to access but easier to rearrange.",-1),k=n("p",null,[s("Working with data that are organized in linked lists is called "),n("em",null,"list processing"),s(".")],-1),v=n("h2",{id:"_1-definition",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-definition","aria-hidden":"true"},"#"),s(" 1. Definition")],-1),m=n("p",null,[s("**Definition 3.3 ** "),n("em",null,"A linked list is either a null link or a link to a node that contains an item and a link to a linked list"),s(".")],-1),b=n("strong",null,"definition 3.2",-1),h=u(`<h2 id="_2-list-processing" tabindex="-1"><a class="header-anchor" href="#_2-list-processing" aria-hidden="true">#</a> 2. List Processing</h2><h3 id="_2-1-traverse" tabindex="-1"><a class="header-anchor" href="#_2-1-traverse" aria-hidden="true">#</a> 2.1 Traverse</h3><p>One of the common operations that we perform on lists is to <em>traverse</em> them: We scan through the items on the list sequentially, performing some operation on each.</p><p>For example, if <code>x</code> is a pointer to the first node of a list, the final node has a null pointer, and <code>visit</code> is a function that takes an item as an argument:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> x<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This loop is as ubiquitous in list-processing programs as is the corresponding <code>for (int i = 0; i &lt; N; i++)</code> in array-processing program.</p><h3 id="_2-2-list-reversal" tabindex="-1"><a class="header-anchor" href="#_2-2-list-reversal" aria-hidden="true">#</a> 2.2 List Reversal</h3><p>Implementation in C :</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> Link<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> item<span class="token punctuation">;</span>
    Link next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Link <span class="token function">reverse</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Link r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>Link y <span class="token operator">=</span> head<span class="token punctuation">;</span> y <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// save y to tmp node</span>
        <span class="token comment">// The variable is allocated once, when the function is called </span>
        <span class="token comment">// (https://stackoverflow.com/questions/7959573/declaring-variables-inside-loops-good-practice-or-bad-practice)</span>
        Link tmp <span class="token operator">=</span> y<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token comment">// y point to r(head of reverse list)</span>
        y<span class="token operator">-&gt;</span>next <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token comment">// move r to y</span>
        r <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token comment">// move y to next</span>
        y <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// return the new head of reverse list </span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Link x <span class="token operator">=</span> head<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> x<span class="token operator">-&gt;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_node</span><span class="token punctuation">(</span>Link node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;{item: %d, next: %p&quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>item<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list_verbose</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Link x <span class="token operator">=</span> head<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print_node</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Link <span class="token function">new_list</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Link head <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>item <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    Link x <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// create a list that item is from 0 to len-1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Link node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>item <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token comment">// add to tail of the lists</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token comment">// move x to next</span>
        x <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Link list <span class="token operator">=</span> <span class="token function">new_list</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Before: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Link reverseLink <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nAfter: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">print_list</span><span class="token punctuation">(</span>reverseLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Implementation in go:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	item <span class="token builtin">int</span>
	next <span class="token operator">*</span>Node
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> builder strings<span class="token punctuation">.</span>Builder

	builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> x <span class="token operator">:=</span> n<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
		builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">var</span> r <span class="token operator">*</span>Node
	<span class="token keyword">for</span> x <span class="token operator">:=</span> n<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
		t <span class="token operator">:=</span> x<span class="token punctuation">.</span>next
		x<span class="token punctuation">.</span>next <span class="token operator">=</span> r
		r <span class="token operator">=</span> x
		x <span class="token operator">=</span> t
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewLinkedList</span><span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	head <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span>

	x <span class="token operator">:=</span> head
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		node <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>item<span class="token punctuation">:</span> i<span class="token punctuation">}</span>

		node<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">.</span>next
		x<span class="token punctuation">.</span>next <span class="token operator">=</span> node
		x <span class="token operator">=</span> x<span class="token punctuation">.</span>next
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> head
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: ListReversal list_length&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	list <span class="token operator">:=</span> <span class="token function">NewLinkedList</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
	reverseList <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reverseList<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function reverses the links in a list, returning a pointer to the final node. To accomplish this task, we need to maintain links to three consecutive nodes in the list.</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220129162749656.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-list-insertion-sort" tabindex="-1"><a class="header-anchor" href="#_2-3-list-insertion-sort" aria-hidden="true">#</a> 2.3 List Insertion Sort</h3><p>Clang implementation:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> Link<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> item<span class="token punctuation">;</span>
  Link next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Link <span class="token function">generate_random_list</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Link head <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// head is a dummy node</span>
  Link t <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// move top node to next</span>
    t <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    t<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    t<span class="token operator">-&gt;</span>item <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// head is a dummy node</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>Link t <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> t<span class="token operator">-&gt;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_node_verbose</span><span class="token punctuation">(</span>Link node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;{Item: %d, Next: %p}&quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>item<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Link <span class="token function">insertion_sort</span><span class="token punctuation">(</span>Link inHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// dummy node</span>
  Link outHead <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>outHead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  outHead<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  <span class="token comment">// traverse input list</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>Link x <span class="token operator">=</span> inHead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Link tmp <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    Link y<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> outHead<span class="token punctuation">;</span> y<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> y <span class="token operator">=</span> y<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>item <span class="token operator">&lt;</span> y<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> y<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    y<span class="token operator">-&gt;</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// inHead is no longer to use</span>
  <span class="token comment">// release memory</span>
  <span class="token function">free</span><span class="token punctuation">(</span>inHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> outHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: ListInsertion list_length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Link list <span class="token operator">=</span> <span class="token function">generate_random_list</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_list</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Link sortedList <span class="token operator">=</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_list</span><span class="token punctuation">(</span>sortedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang implementation:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math/rand&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	item <span class="token builtin">int</span>
	next <span class="token operator">*</span>Node
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">InsertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	sortedHead <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span> x <span class="token operator">:=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
		tmp <span class="token operator">:=</span> x<span class="token punctuation">.</span>next
		<span class="token keyword">var</span> y <span class="token operator">*</span>Node
		<span class="token keyword">for</span> y <span class="token operator">=</span> sortedHead<span class="token punctuation">;</span> y<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> y <span class="token operator">=</span> y<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
			<span class="token keyword">if</span> x<span class="token punctuation">.</span>item <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>next<span class="token punctuation">.</span>item <span class="token punctuation">{</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		x<span class="token punctuation">.</span>next <span class="token operator">=</span> y<span class="token punctuation">.</span>next
		y<span class="token punctuation">.</span>next <span class="token operator">=</span> x
		x <span class="token operator">=</span> tmp
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sortedHead
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n Node<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> builder strings<span class="token punctuation">.</span>Builder

	builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> x <span class="token operator">:=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
		builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewRandomList</span><span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	head <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span>
	t <span class="token operator">:=</span> head
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		n <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>item<span class="token punctuation">:</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
		t<span class="token punctuation">.</span>next <span class="token operator">=</span> n
		t <span class="token operator">=</span> t<span class="token punctuation">.</span>next
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> head
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Usage ListInsertionSort list_length&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	list <span class="token operator">:=</span> <span class="token function">NewRandomList</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
	sortedList <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">InsertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sortedList<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220130161405161.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>We maintain a dummy node called a <em>head node</em> at the beginning of each list. We ignored the item field in a list’s head node, but maintain its link as the pointer to the node containing the first item in the list.</p><p>The program uses two lists:</p><ul><li>One to collect the random input in the first loop</li><li>Another to collect the sorted output in the second loop</li></ul><p>The primary reason to use the head node at the beginning becomes clear when we consider the process of adding the <em>first</em> node to the sorted list.</p><p>We have three options:</p><ol><li><p>Duplicate the <em>for</em> loop that finds the smallest item and set up a one-node list.</p></li><li><p>Test whether the output list is empty every time that we wish to insert a node.</p></li><li><p>Use a dummy head node whose link points to the first node on the list.</p></li></ol><p>The first option is inelegant and requires extra code; the second is also inelegant and requires extra time.</p><h2 id="_3-head-and-tail-conventions-in-linked-lists" tabindex="-1"><a class="header-anchor" href="#_3-head-and-tail-conventions-in-linked-lists" aria-hidden="true">#</a> 3. Head and tail conventions in linked lists</h2><h3 id="_3-1-circular-never-empty" tabindex="-1"><a class="header-anchor" href="#_3-1-circular-never-empty" aria-hidden="true">#</a> 3.1 Circular, never empty</h3><table><thead><tr><th>Operation</th><th>Code</th></tr></thead><tbody><tr><td><em>fist insert</em></td><td><code>head-&gt;next = head;</code></td></tr><tr><td><em>insert t after x</em></td><td><code>t-&gt;next = x-&gt;next; x-&gt;next = t;</code></td></tr><tr><td><em>delete after x</em></td><td><code>x-&gt;next = x-&gt;next-&gt;next;</code></td></tr><tr><td><em>traversal loop</em></td><td><code>t = head; do {... t = t-&gt;next; } while (t != head);</code></td></tr><tr><td><em>test if one item</em></td><td><code>if (head-&gt;next) == head</code></td></tr></tbody></table><h3 id="_3-2-head-pointer-null-tail" tabindex="-1"><a class="header-anchor" href="#_3-2-head-pointer-null-tail" aria-hidden="true">#</a> 3.2 Head pointer, null tail</h3><table><thead><tr><th>Operation</th><th>Code</th></tr></thead><tbody><tr><td><em>initialize</em></td><td><code>head = NULL</code></td></tr><tr><td><em>insert t after x</em></td><td><code>if (x == NULL){head = t; head-&gt;next = NULL;}</code><br><code>else {t-&gt;next = x-&gt;next; x-&gt;next = t;}</code></td></tr><tr><td><em>delete after x</em></td><td><code>t = x-&gt;next; x-&gt;next = t-&gt;next;</code></td></tr><tr><td><em>traversal loop</em></td><td><code>for (t = head; t != NULL; t=t-&gt;next)</code></td></tr><tr><td><em>test if empty</em></td><td><code>if (head == NULL)</code></td></tr></tbody></table><h3 id="_3-3-dummy-head-node-null-tail" tabindex="-1"><a class="header-anchor" href="#_3-3-dummy-head-node-null-tail" aria-hidden="true">#</a> 3.3 Dummy head node, null tail</h3><table><thead><tr><th>Operation</th><th>Code</th></tr></thead><tbody><tr><td><em>initialize</em></td><td><code>head = malloc(sizeof *head);</code><br><code>head-&gt;next = NULL;</code></td></tr><tr><td><em>insert t after x</em></td><td><code>t-&gt;next = x-&gt;next; x-&gt;next = t;</code></td></tr><tr><td><em>delete after x</em></td><td><code>t = x-&gt;next; x-&gt;next = t-&gt;next;</code></td></tr><tr><td><em>traversal loop</em></td><td><code>for (t = head-&gt;next; t != NULL; t = t-&gt;next)</code></td></tr><tr><td><em>test if empty</em></td><td><code>if (head-&gt;next == NULL)</code></td></tr></tbody></table><h3 id="_3-4-dummy-head-and-tail-nodes" tabindex="-1"><a class="header-anchor" href="#_3-4-dummy-head-and-tail-nodes" aria-hidden="true">#</a> 3.4 Dummy head and tail nodes</h3><table><thead><tr><th>Operation</th><th>Code</th></tr></thead><tbody><tr><td><em>initialize</em></td><td><code>head = malloc(sizeof *head);</code><br><code>z = malloc(sizeof *z)</code><br><code>head-&gt;next = z; z-&gt;next = z;</code></td></tr><tr><td><em>insert t after x</em></td><td><code>t-&gt;next = x-&gt;next; x-&gt;next = t; </code></td></tr><tr><td><em>delete after x</em></td><td><code>t = x-&gt;next; x-&gt;next = t-&gt;next;</code></td></tr><tr><td><em>traversal loop</em></td><td><code>for (t = head-&gt;next; t != z; t = t-&gt;next)</code></td></tr><tr><td><em>test if empty</em></td><td><code>if (head-&gt;next == z)</code></td></tr></tbody></table><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,36),f={href:"https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structures-dp-0201314525/dp/0201314525/ref=mt_other?_encoding=UTF8&me=&qid=",target:"_blank",rel:"noopener noreferrer"};function g(x,y){const e=t("RouterLink"),p=t("ExternalLinkIcon");return i(),c("div",null,[d,k,v,m,n("p",null,[s("This definition is more restrictive than "),a(e,{to:"/reading/en/algorithm/algorithms_in_c_part_1-4/02_data_structures/03.3.md/#Definition"},{default:l(()=>[b]),_:1}),s(", but it corresponds more closely to the mental model that we have when we write list-processing code.")]),h,n("ol",null,[n("li",null,[n("a",f,[s("Algorithms in C"),a(p)])])])])}const L=o(r,[["render",g],["__file","03.4.html.vue"]]);export{L as default};
