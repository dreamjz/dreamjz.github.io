import{_ as o,Z as p,$ as c,a0 as n,a2 as t,a1 as s,a4 as e,H as i}from"./framework-d03928c9.js";const l={},u=e('<h2 id="_4-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-2-1-概述" aria-hidden="true">#</a> 4.2.1 概述</h2><p>在计算机科学中，接口是计算机系统中多个组件共享的边界，不同的组件能够在边界上交换信息。</p><p>接口的<strong>本质</strong>是引入一个新的中间层，调用方可以通过接口与具体实现分离，解除上下游的耦合，上层的模块不再需要依赖下层的具体模块，只需要依赖一个约定好的接口。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260042299.png" alt="golang-interface" tabindex="0" loading="lazy"><figcaption>golang-interface</figcaption></figure><p>例如：</p><ol><li>可移植操作系统接口（Portable Operating System Interface，POSIX)，定义了应用程序接口和命令行等标准，为计算机软件带来了可移植性 — 只要操作系统实现了 POSIX，计算机软件就可以直接在不同操作系统上运行。</li><li>SQL ，使用 SQL 语句查询数据时，无需关心底层数据库的具体实现，只在乎 SQL 返回的结果是否符合预期。</li></ol><h3 id="隐式接口" tabindex="-1"><a class="header-anchor" href="#隐式接口" aria-hidden="true">#</a> 隐式接口</h3><p>Golang 中的接口式隐式的，即无需声明要实现的接口，只需实现接口定义的方法即可。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><p>接口在Golang中是一种类型，有两类不同的接口：</p>',10),r={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.iface",-1),k={href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"runtime.eface",-1),v=n("strong",null,"空接口",-1),b=n("code",null,"interface{}",-1),g=e(`<p>注意：空接口<strong>不是</strong>任意类型，将其他类型赋值给空接口，将会进行<strong>隐式</strong>的<strong>类型转换</strong>。</p><h3 id="指针和接口" tabindex="-1"><a class="header-anchor" href="#指针和接口" aria-hidden="true">#</a> 指针和接口</h3><p>在实现接口方法时，根据接收者不同会有两种：</p><ol><li>接收者为<strong>值</strong>类型</li><li>接收者为<strong>指针</strong>类型</li></ol><p>当实现接口的类型的<strong>变量</strong>转换成<strong>接口</strong>类型时，在调用接口方法时会有不同的情况：</p><table><thead><tr><th style="text-align:left;">变量类型\\接口方法的接收者类型</th><th>值</th><th>指针</th></tr></thead><tbody><tr><td style="text-align:left;">值类型</td><td>可</td><td>不可</td></tr><tr><td style="text-align:left;">指针类型</td><td>可</td><td>可</td></tr></tbody></table><p>可以看出，当变量<strong>转换成接口</strong>类型后：</p><ol><li>若变量是<strong>值</strong>类型，只能调用接受者为<strong>值</strong>类型的方法</li><li>若变量是<strong>指针</strong>类型，则接受者为<strong>值</strong>类型和<strong>指针</strong>类型的方法均可调用</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260057904.png" alt="golang-interface-method-receive" tabindex="0" loading="lazy"><figcaption>golang-interface-method-receive</figcaption></figure><p>产生差异的原因是：<strong>Golang 中参数的传递是 值 传递</strong>；传参时只会复制参数的值。</p><ol><li>当<strong>变量</strong>是<strong>指针</strong>类型，转换成接口类型后，<strong>接口变量</strong>中<strong>持有</strong>的是原变量的<strong>指针</strong>，在调用值类型的方法时，会自动解引用</li><li>当<strong>变量</strong>是<strong>值</strong>类型，转换成接口类型后，<strong>接口变量</strong>中<strong>持有</strong>的是原变量的<strong>拷贝</strong>，在调用<strong>指针</strong>类型方法时，无法获取原变量的指针</li></ol><h3 id="nil-和-non-nil" tabindex="-1"><a class="header-anchor" href="#nil-和-non-nil" aria-hidden="true">#</a> nil 和 non-nil</h3><p><strong>空接口不是任意类型</strong>，可以通过下例来证明：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NilOrNot</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> v <span class="token operator">==</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">NilOrNot</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>true
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>p</code>是指针类型的零值，<code>nil</code></li><li>在将<code>p</code>传给函数时，会进行隐式的类型转换，此时类型为空接口，不再和<code>nil</code>相等了</li></ul><h2 id="_4-2-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_4-2-2-数据结构" aria-hidden="true">#</a> 4.2.2 数据结构</h2><h3 id="空接口-和-type结构体" tabindex="-1"><a class="header-anchor" href="#空接口-和-type结构体" aria-hidden="true">#</a> 空接口 和 <code>_type</code>结构体</h3>`,18),h=n("strong",null,"空接口",-1),f=n("code",null,"interface{}",-1),_={href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"runtime.eface",-1),q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	_type <span class="token operator">*</span>_type
	data  unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>_type</code>：类型信息</li><li><code>data</code>：指向底层数据</li></ul><p>从数据结构可以看出，任何变量都可以转换成空接口类型。</p>`,3),C={href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime._type",-1),P=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	size       <span class="token builtin">uintptr</span>
	ptrdata    <span class="token builtin">uintptr</span>
	hash       <span class="token builtin">uint32</span>
	tflag      tflag
	align      <span class="token builtin">uint8</span>
	fieldAlign <span class="token builtin">uint8</span>
	kind       <span class="token builtin">uint8</span>
	equal      <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span>
	gcdata     <span class="token operator">*</span><span class="token builtin">byte</span>
	str        nameOff
	ptrToThis  typeOff
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>size</code>：类型占用的内存空间</li><li><code>hash</code>：快速确定类型是否相等</li><li><code>equal</code>：判断相同类型的变量是否相等</li></ul><h3 id="接口-和-itab结构体" tabindex="-1"><a class="header-anchor" href="#接口-和-itab结构体" aria-hidden="true">#</a> 接口 和 <code>itab</code>结构体</h3>`,3),X=n("strong",null,"接口",-1),w={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"runtime.iface",-1),A=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tab  <span class="token operator">*</span>itab
	data unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.itab",-1),B=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	inter <span class="token operator">*</span>interfacetype
	_type <span class="token operator">*</span>_type
	hash  <span class="token builtin">uint32</span>
	<span class="token boolean">_</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	fun   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>inter</code>：表示接口类型</li><li><code>_type</code>：表示具体类型</li><li><code>hash</code>：是<code>_type.hash</code>的拷贝，用于快速判断类型</li><li><code>fun</code>：是一个动态的数组，存储了一组函数指针。在使用时通过原始指针获取数据，所以元素数量是不确定的</li></ul><h2 id="_4-2-3-类型转换" tabindex="-1"><a class="header-anchor" href="#_4-2-3-类型转换" aria-hidden="true">#</a> 4.2.3 类型转换</h2><h3 id="指针类型-接口" tabindex="-1"><a class="header-anchor" href="#指针类型-接口" aria-hidden="true">#</a> 指针类型 -&gt; 接口</h3><p>以下列代码为例（使用<code>//go:noinline</code>禁止方法的内联编译）:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot; meow&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将其编译成汇编，然后分析和赋值语句<code>var c Duck = &amp;Cat{Name: &quot;draven&quot;}</code>相关的代码，可以分为三部分：</p><ol><li>结构体<code>Cat</code>的初始化</li><li>赋值触发的类型转换过程</li><li>调用接口的方法 <code>Quack()</code></li></ol><p><strong>结构体的初始化</strong></p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>LEAQ	type.&quot;&quot;.Cat(SB), AX                ;; AX = &amp;type.&quot;&quot;.Cat
MOVQ	AX, (SP)                           ;; SP = &amp;type.&quot;&quot;.Cat
CALL	runtime.newobject(SB)              ;; SP + 8 = &amp;Cat{}
MOVQ	8(SP), DI                          ;; DI = &amp;Cat{}
MOVQ	$6, 8(DI)                          ;; StringHeader(DI.Name).Len = 6
LEAQ	go.string.&quot;draven&quot;(SB), AX         ;; AX = &amp;&quot;draven&quot;
MOVQ	AX, (DI)                           ;; StringHeader(DI.Name).Data = &amp;&quot;draven&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),O=n("li",null,[s("获取"),n("code",null,"Cat"),s("类型的指针，将其放到栈上")],-1),L={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.newobject",-1),V=n("strong",null,"堆",-1),N=n("li",null,"将SP+8 存储到 DI 上",-1),E=n("li",null,[s("为"),n("code",null,"Cat"),s("类型的变量分别赋值其字符串长度 6 和 字符串的值的指针（因为"),n("code",null,"Cat"),s("只有一个"),n("code",null,"string"),s("类型的字段）")],-1),I=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260128270.png" alt="golang-new-struct-pointer" tabindex="0" loading="lazy"><figcaption>golang-new-struct-pointer</figcaption></figure><p><strong>类型转换</strong></p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>LEAQ	go.itab.*&quot;&quot;.Cat,&quot;&quot;.Duck(SB), AX    ;; AX = *itab(go.itab.*&quot;&quot;.Cat,&quot;&quot;.Duck)
MOVQ	DI, (SP)      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z=n("strong",null,"类型相关的",-1),j=n("code",null,"itab",-1),T=n("strong",null,"原始数据",-1),$={href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.itab",-1),H=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260134120.png",alt:"golang-struct-pointer-to-iface",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-struct-pointer-to-iface")],-1),J={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"runtime.iface",-1),U=e(`<p><strong>方法调用</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>CALL    <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span> SP<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处调用方法时，编译器进行了优化，将需要动态派发的方法调用改写成对目标方法的直接调用，以减少性能的额外开销。</p><p>若禁用编译器优化，就会看到动态派发的过程。</p><h3 id="值类型-接口" tabindex="-1"><a class="header-anchor" href="#值类型-接口" aria-hidden="true">#</a> 值类型 -&gt; 接口</h3><p>将示例代码的变量类型和方法都改为值类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c Cat<span class="token punctuation">)</span> <span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot; meow&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c Duck <span class="token operator">=</span> Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键的汇编代码依然分为三个部分：</p><ol><li>初始化<code>Cat</code>结构体</li><li>类型转换</li><li>调用方法</li></ol><p><strong>初始化变量</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>XORPS   X0<span class="token punctuation">,</span> X0                          <span class="token punctuation">;</span><span class="token punctuation">;</span> X0 <span class="token operator">=</span> <span class="token number">0</span>
MOVUPS  X0<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">32</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token function">StringHeader</span><span class="token punctuation">(</span>SP<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token number">0</span>
LEAQ    <span class="token keyword">go</span><span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span><span class="token string">&quot;draven&quot;</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> AX      <span class="token punctuation">;</span><span class="token punctuation">;</span> AX <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token string">&quot;draven&quot;</span>
MOVQ    AX<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">32</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token function">StringHeader</span><span class="token punctuation">(</span>SP<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> AX
MOVQ    $<span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">40</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token function">StringHeader</span><span class="token punctuation">(</span>SP<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Len <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处在<strong>栈</strong>上初始化结构体变量<code>Cat</code>。</p><p><strong>类型转换</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>LEAQ	<span class="token keyword">go</span><span class="token punctuation">.</span>itab<span class="token punctuation">.</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>Cat<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">Duck</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> AX     <span class="token punctuation">;</span><span class="token punctuation">;</span> AX <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">go</span><span class="token punctuation">.</span>itab<span class="token punctuation">.</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>Cat<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>Duck<span class="token punctuation">)</span>
MOVQ	AX<span class="token punctuation">,</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span>                           <span class="token punctuation">;</span><span class="token punctuation">;</span> SP <span class="token operator">=</span> AX
LEAQ	<span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">32</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX           <span class="token punctuation">;</span><span class="token punctuation">;</span> AX <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>SP<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
MOVQ	AX<span class="token punctuation">,</span> <span class="token function">8</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span>                          <span class="token punctuation">;</span><span class="token punctuation">;</span> SP <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> AX
CALL	runtime<span class="token punctuation">.</span><span class="token function">convT2I</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),Z={href:"https://draveness.me/golang/tree/runtime.convT2I",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"runtime.convT2I",-1),K=n("code",null,'go.itab."".Cat,"".Duck',-1),W=n("code",null,"Cat",-1),Y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">convT2I</span><span class="token punctuation">(</span>tab <span class="token operator">*</span>itab<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>i iface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> tab<span class="token punctuation">.</span>_type
	x <span class="token operator">:=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> x<span class="token punctuation">,</span> elem<span class="token punctuation">)</span>
	i<span class="token punctuation">.</span>tab <span class="token operator">=</span> tab
	i<span class="token punctuation">.</span>data <span class="token operator">=</span> x
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),nn=n("strong",null,"堆",-1),sn={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.iface",-1),tn={href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.itab",-1),on=n("code",null,"Cat",-1),pn=n("code",null,"Cat",-1),cn=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260147195.png" alt="golang-struct-to-iface" tabindex="0" loading="lazy"><figcaption>golang-struct-to-iface</figcaption></figure><p>此时, SP+32 位置的时原始的<code>Cat</code>类型变量，会将其拷贝到堆上（也就是发生了参数的拷贝）。</p><p><strong>方法调用</strong></p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>MOVQ	16(SP), AX ;; AX = &amp;(go.itab.&quot;&quot;.Cat,&quot;&quot;.Duck)
MOVQ	24(SP), CX ;; CX = &amp;Cat{Name: &quot;draven&quot;}
MOVQ	24(AX), AX ;; AX = AX.fun[0] = Cat.Quack
MOVQ	CX, (SP)   ;; SP = CX
CALL	AX         ;; CX.Quack()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ln=n("code",null,"MOVQ 24(AX), AX",-1),un={href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"runtime.itab",-1),dn=n("code",null,"Cat.Quack",-1),kn=n("code",null,"CALL",-1),mn=e(`<p>接口变量的第 24 字节是 <code>itab.fun</code> 数组开始的位置，由于 <code>Duck</code> 接口只包含一个方法，所以 <code>itab.fun[0]</code> 中存储的就是指向 <code>Quack</code> 方法的指针。</p><h2 id="_4-2-4-类型断言" tabindex="-1"><a class="header-anchor" href="#_4-2-4-类型断言" aria-hidden="true">#</a> 4.2.4 类型断言</h2><p>将接口转换成具体类型，要用到类型断言。类型断言有两种方式：</p><ol><li><code>v := varI.(T)</code></li><li><code>v, ok := varI.(T)</code> ，<code>ok</code>表示类型是否转换成功</li></ol><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3><p>下例表示<code>Duck</code> 接口一个非空的接口，分析从 <code>Duck</code> 转换回 <code>Cat</code> 结构体的过程：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>Cat<span class="token punctuation">:</span>
		cat <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span>
		cat<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将汇编指令分为两部分：</p><ol><li>变量的初始化</li><li>类型断言</li></ol><p><strong>变量初始化</strong></p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>00000 TEXT	&quot;&quot;.main(SB), ABIInternal, $32-0
...
00029 XORPS	X0, X0
00032 MOVUPS	X0, &quot;&quot;..autotmp_4+8(SP)
00037 LEAQ	go.string.&quot;draven&quot;(SB), AX
00044 MOVQ	AX, &quot;&quot;..autotmp_4+8(SP)
00049 MOVQ	$6, &quot;&quot;..autotmp_4+16(SP)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),vn={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.iface",-1),gn=e(`<p><strong>类型断言</strong></p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>00058 CMPL  go.itab.*&quot;&quot;.Cat,&quot;&quot;.Duck+16(SB), $593696792
                                        ;; if (c.tab.hash != 593696792) {
00068 JEQ   80                          ;;
00070 MOVQ  24(SP), BP                  ;;      BP = SP+24
00075 ADDQ  $32, SP                     ;;      SP += 32
00079 RET                               ;;      return
                                        ;; } else {
00080 LEAQ  &quot;&quot;..autotmp_4+8(SP), AX     ;;      AX = &amp;Cat{Name: &quot;draven&quot;}
00085 MOVQ  AX, (SP)                    ;;      SP = AX
00089 CALL  &quot;&quot;.(*Cat).Quack(SB)         ;;      SP.Quack()
00094 JMP   70                          ;;      ...
                                        ;;      BP = SP+24
                                        ;;      SP += 32
                                        ;;      return
                                        ;; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch语句生成的汇编指令会将目标类型的 <code>hash</code> 与接口变量中的 <code>itab.hash</code> 进行比较：</p><ul><li>若<strong>相同</strong>，则表示接口变量的具体类型是<code>Cat</code>： <ol><li>获取<code>Cat</code>结构体指针</li><li>将指针拷贝到栈顶</li><li>调用方法</li><li>恢复函数栈，返回</li></ol></li><li>若<strong>不同</strong>，直接恢复栈顶指针并返回</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260159263.png" alt="golang-interface-to-struct" tabindex="0" loading="lazy"><figcaption>golang-interface-to-struct</figcaption></figure><h3 id="空接口" tabindex="-1"><a class="header-anchor" href="#空接口" aria-hidden="true">#</a> 空接口</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>Cat<span class="token punctuation">:</span>
		cat <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span>
		cat<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),hn=n("code",null,"Cat",-1),fn={href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"runtime.eface",-1),yn={href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"runtime._type",-1),Cn=n("code",null,"eface._type",-1),Sn=n("code",null,"hash",-1),Pn=e(`<h2 id="_4-2-5-动态派发" tabindex="-1"><a class="header-anchor" href="#_4-2-5-动态派发" aria-hidden="true">#</a> 4.2.5 动态派发</h2><p>动态派发（Dynamic dispatch）是在运行期间选择具体多态操作（方法或者函数）执行的过程。</p><p>Go 接口的引入带来了动态派发特性，调用接口类型的方法时，如果编译期间不能确认接口的类型，会在运行期间决定具体调用该方法的哪个实现。</p><p>以下面的代码为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在关闭编译器的优化后，将其编译成汇编，在初始化过程之后栈上的数据如下:</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260208747.png" alt="stack-after-initialize" tabindex="0" loading="lazy"><figcaption>stack-after-initialize</figcaption></figure>`,7),Xn={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"runtime.newobject",-1),Qn={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.newobject",-1),xn=n("code",null,"Cat",-1),Dn=n("li",null,[s("P+32、SP+40 是对 SP+8 的拷贝，这两个指针都会指向堆上的 "),n("code",null,"Cat"),s(" 结构体")],-1),Bn={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"runtime.iface",-1),Ln=n("code",null,"tab",-1),Mn=n("code",null,"*Cat",-1),Vn=e(`<p><strong>动态派发</strong></p><p><code>c.Quack()</code>:</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>MOVQ	&quot;&quot;.c+48(SP), AX                    ;; AX = iface(c).tab
MOVQ	24(AX), AX                         ;; AX = iface(c).tab.fun[0] = Cat.Quack
MOVQ	&quot;&quot;.c+56(SP), CX                    ;; CX = iface(c).data
MOVQ	CX, (SP)                           ;; SP = CX = &amp;Cat{...}
CALL	AX                                 ;; SP.Quack()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Nn=n("li",null,[s("从接口变量中获取保存 "),n("code",null,"Cat.Quack"),s(" 方法指针的 "),n("code",null,"tab.func[0]")],-1),En={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.iface",-1),zn=n("li",null,[s("方法指针会被拷贝到寄存器中并通过汇编指令 "),n("code",null,"CALL"),s(" 触发")],-1),jn=e(`<p><strong>类型转换后直接调用</strong></p><p><code>c.(*Cat).Quack()</code>:</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>MOVQ	&quot;&quot;.c+56(SP), AX                    ;; AX = iface(c).data = &amp;Cat{...}
MOVQ	&quot;&quot;.c+48(SP), CX                    ;; CX = iface(c).tab
LEAQ	go.itab.*&quot;&quot;.Cat,&quot;&quot;.Duck(SB), DX    ;; DX = &amp;&amp;go.itab.*&quot;&quot;.Cat,&quot;&quot;.Duck
CMPQ	CX, DX                             ;; CMP(CX, DX)
JEQ	163
JMP	201
MOVQ	AX, &quot;&quot;..autotmp_3+24(SP)           ;; SP+24 = &amp;Cat{...}
MOVQ	AX, (SP)                           ;; SP = &amp;Cat{...}
CALL	&quot;&quot;.(*Cat).Quack(SB)                ;; SP.Quack()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类型转换结束后，直接使用<code>*Cat</code>类型调用方法。</p><p>综上可以看出，动态派发会额外执行函数查找的过程。</p><h4 id="benchmark" tabindex="-1"><a class="header-anchor" href="#benchmark" aria-hidden="true">#</a> Benchmark</h4><p>下面两个方法 <code>BenchmarkDirectCall</code> 和 <code>BenchmarkDynamicDispatch</code> 分别会调用结构体方法和接口方法，在接口上调用方法时会使用动态派发机制，以直接调用作为基准分析动态派发带来了多少额外开销：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkDirectCall</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// MOVQ	AX, &quot;&quot;.c+24(SP)</span>
		<span class="token comment">// MOVQ	AX, (SP)</span>
		<span class="token comment">// CALL	&quot;&quot;.(*Cat).Quack(SB)</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkDynamicDispatch</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">Duck</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// MOVQ	&quot;&quot;.d+56(SP), AX</span>
		<span class="token comment">// MOVQ	24(AX), AX</span>
		<span class="token comment">// MOVQ	&quot;&quot;.d+64(SP), CX</span>
		<span class="token comment">// MOVQ	CX, (SP)</span>
		<span class="token comment">// CALL	AX</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 1 个 CPU 运行上述代码，每一个基准测试都会被执行 3 次：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-gcflags</span><span class="token operator">=</span>-N <span class="token parameter variable">-benchmem</span> <span class="token parameter variable">-test.count</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-test.cpu</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-test.benchtime</span><span class="token operator">=</span>1s <span class="token parameter variable">-bench</span><span class="token operator">=</span>.
goos: darwin
goarch: amd64
pkg: github.com/golang/playground
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">3.11</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">2.94</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">3.04</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">500000000</span>	         <span class="token number">3.40</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">500000000</span>	         <span class="token number">3.79</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">500000000</span>	         <span class="token number">3.55</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用结构体方法时，每一次调用需要 ~3.03ns</li><li>使用动态派发时，每一调用需要 ~3.58ns</li></ul><p>动态派发生成的指令会带来 ~18% 左右的额外性能开销，但是在开启编译器优化后，动态派发的额外开销会降低至 ~5%，这对应用性能的整体影响就更小，所以与使用接口带来的好处相比，动态派发的额外开销往往可以忽略。</p><h4 id="值类型和指针类型" tabindex="-1"><a class="header-anchor" href="#值类型和指针类型" aria-hidden="true">#</a> 值类型和指针类型</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkDirectCall</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkDynamicDispatch</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">Duck</span><span class="token punctuation">(</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行相同的基准测试时，会得到如下所示的结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-gcflags</span><span class="token operator">=</span>-N <span class="token parameter variable">-benchmem</span> <span class="token parameter variable">-test.count</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-test.cpu</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-test.benchtime</span><span class="token operator">=</span>1s <span class="token builtin class-name">.</span>
goos: darwin
goarch: amd64
pkg: github.com/golang/playground
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">3.15</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">3.02</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDirectCall      	<span class="token number">500000000</span>	         <span class="token number">3.09</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">200000000</span>	         <span class="token number">6.92</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">200000000</span>	         <span class="token number">6.91</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
BenchmarkDynamicDispatch 	<span class="token number">200000000</span>	         <span class="token number">7.10</span> ns/op	       <span class="token number">0</span> B/op	       <span class="token number">0</span> allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以得出：</p><table><thead><tr><th style="text-align:center;">变量类型\\调用方式</th><th style="text-align:center;">直接调用</th><th>动态派发</th></tr></thead><tbody><tr><td style="text-align:center;">指针</td><td style="text-align:center;">~3.03ns</td><td>~3.58ns</td></tr><tr><td style="text-align:center;">结构体</td><td style="text-align:center;">~3.09ns</td><td>~6.98ns</td></tr></tbody></table><p>可以看到使用结构体实现接口带来的开销会大于使用指针实现，而动态派发在结构体上的表现非常差，所以应当<strong>尽量避免</strong>使用<strong>结构体</strong>类型<strong>实现接口</strong>。</p><p>使用结构体带来的巨大性能差异不只是接口带来的问题，带来性能问题<strong>主要</strong>因为 Go 语言在<strong>函数调用</strong>时是<strong>传值</strong>的，<strong>动态派发</strong>的过程只是<strong>放大</strong>了<strong>参数拷贝</strong>带来的<strong>影响</strong>。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,21),Tn={href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"};function $n(Gn,Hn){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[d,t(a)]),s(", 带有方法的接口")]),n("li",null,[n("a",k,[m,t(a)]),s(", 没有方法的接口，又称"),v,s("，"),b])]),g,n("p",null,[h,f,s("的数据结构为"),n("a",_,[y,t(a)]),s(":")]),q,n("p",null,[s("类型结构体"),n("a",C,[S,t(a)]),s("：")]),P,n("p",null,[X,s("类型的数据结构为"),n("a",w,[Q,t(a)]),s(":")]),A,n("p",null,[s("其中"),n("a",x,[D,t(a)]),s(":")]),B,n("ul",null,[O,n("li",null,[s("调用"),n("a",L,[M,t(a)]),s("在"),V,s("上为变量分配内存，并将其指针返回到SP+8上")]),N,E]),I,n("p",null,[s("接口类型的结构包含和"),z,j,s("和指向"),T,s("的指针，此处将编译期生成的"),n("a",$,[G,t(a)]),s("复制到SP上：")]),H,n("p",null,[s("此时SP~SP+16就共同组成了"),n("a",J,[R,t(a)]),s("结构体。")]),U,n("p",null,[s("此处调用 "),n("a",Z,[F,t(a)]),s("函数，以 "),K,s(" 的地址和指向 "),W,s(" 结构体的指针作为参数：")]),Y,n("p",null,[s("函数根据类型大小在"),nn,s("上分配内存并返回"),n("a",sn,[an,t(a)]),s("类型，其中包含"),n("a",tn,[en,t(a)]),s("指针和指向"),on,s("类型的指针（在堆上新分配的"),pn,s("类型，不是原变量）。")]),cn,n("p",null,[ln,s(" 从 "),n("a",un,[rn,t(a)]),s(" 结构体中取出 "),dn,s(" 方法指针作为 "),kn,s(" 指令调用时的参数。")]),mn,n("p",null,[s("因为 编译器做了优化，代码中没有"),n("a",vn,[bn,t(a)]),s(" 的构建过程.")]),gn,n("p",null,[s("如果不关闭 Go 语言编译器的优化选项，生成的汇编指令和接口的断言差不多，编译器会省略将 "),hn,s(" 结构体转换成 "),n("a",fn,[_n,t(a)]),s(" 的过程。")]),n("p",null,[s("如果禁用编译器优化，会在类型断言时不直接获取变量中具体类型的 "),n("a",yn,[qn,t(a)]),s("，而是从 "),Cn,s(" 中获取，汇编指令仍然会使用目标类型的 "),Sn,s(" 与变量的类型比较。")]),Pn,n("ul",null,[n("li",null,[s("SP 是 Cat 类型，是运行时"),n("a",Xn,[wn,t(a)]),s("的参数")]),n("li",null,[s("SP+8 是 "),n("a",Qn,[An,t(a)]),s(" 方法的返回值，即指向堆上的 "),xn,s(" 结构体的指针")]),Dn,n("li",null,[s("SP+48 ~ SP+64 是接口变量 "),n("a",Bn,[On,t(a)]),s(" 结构体，其中包含了 "),Ln,s(" 结构体指针和 "),Mn,s(" 指针")])]),Vn,n("ol",null,[Nn,n("li",null,[s("接口变量在 "),n("a",En,[In,t(a)]),s(" 中的数据会被拷贝到栈顶")]),zn]),jn,n("ol",null,[n("li",null,[n("a",Tn,[s("https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#结构体类型"),t(a)])])])])}const Rn=o(l,[["render",$n],["__file","04.2.interface.html.vue"]]);export{Rn as default};
