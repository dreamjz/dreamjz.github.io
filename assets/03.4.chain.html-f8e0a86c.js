import{_ as p,Z as o,$ as e,a0 as n,a1 as a,a2 as t,a3 as c,H as u}from"./framework-dee406ed.js";const l={},i={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeORM/day4-chain",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="_1-实现-update、delete和count" tabindex="-1"><a class="header-anchor" href="#_1-实现-update、delete和count" aria-hidden="true">#</a> 1. 实现 Update、Delete和Count</h2><h3 id="_1-1-子句生成" tabindex="-1"><a class="header-anchor" href="#_1-1-子句生成" aria-hidden="true">#</a> 1.1 子句生成</h3><p><code>clause/clause.go, generator.go</code>新增更新，删除和计数功能。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">_update</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tableName <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	m <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
		vars <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	<span class="token punctuation">)</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token string">&quot; = ?&quot;</span><span class="token punctuation">)</span>
		vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE %s SET %s&quot;</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_delete</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE FROM %s&quot;</span><span class="token punctuation">,</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_count</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">_select</span><span class="token punctuation">(</span>vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;count(*)&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>_update</code>：入参为表名和<code> map</code>，<code>map</code>存储需要修改的数据</li><li><code>_delete</code>：入参为表名</li><li><code>_count</code>：复用<code>_select</code></li></ul><h3 id="_1-2-update" tabindex="-1"><a class="header-anchor" href="#_1-2-update" aria-hidden="true">#</a> 1.2 Update</h3><p><code>session/record</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Update updates records of table</span>
<span class="token comment">// support map[string]any</span>
<span class="token comment">// kv list: string, any, string, any, ...</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>kvs <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">,</span> ok <span class="token operator">:=</span> kvs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>kvs<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">[</span>kvs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> kvs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>UPDATE<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>UPDATE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持<code>map</code>类型或者键值对列表，流程：</p><ol><li>从入参中获取map，若失败则将键值对列表转换成 map</li><li>构建 UPDATE 语句，并执行</li><li>返回执行结果</li></ol><h3 id="_1-3-delete" tabindex="-1"><a class="header-anchor" href="#_1-3-delete" aria-hidden="true">#</a> 1.3 Delete</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-count" tabindex="-1"><a class="header-anchor" href="#_1-4-count" aria-hidden="true">#</a> 1.4 Count</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>COUNT<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>COUNT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span>
	row <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> tmp <span class="token builtin">int64</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> tmp<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-链式调用-chain" tabindex="-1"><a class="header-anchor" href="#_2-链式调用-chain" aria-hidden="true">#</a> 2. 链式调用(chain)</h2><p><strong>链式调用</strong>：某个对象调用某个方法后，将该对象的引用/指针返回，即可以继续调用该对象的其他方法，是一种简化代码的编程方式，能够使代码更简洁、易读。</p><p><strong>应用场景</strong>：当某个对象需要一次调用多个方法来设置其属性时，非常适合改造为链式调用。</p><p>SQL 语句的构建过程包含多个步骤，并且可以进行自由组合，适合采用链式调用。</p><p><code>session/record.go</code>新增 Limit, Where, Order By :</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>LIMIT<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Where</span><span class="token punctuation">(</span>desc <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	<span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">OrderBy</span><span class="token punctuation">(</span>desc <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>ORDERBY<span class="token punctuation">,</span> desc<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-first-只返回一条记录" tabindex="-1"><a class="header-anchor" href="#_3-first-只返回一条记录" aria-hidden="true">#</a> 3. First 只返回一条记录</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">First</span><span class="token punctuation">(</span>val any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	dst <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
	dstSlice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">SliceOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>dstSlice<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> dstSlice<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;NOT FOUND&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	dst<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>dstSlice<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>获取传入对象的类型</li><li>构建切片</li><li>将查询结果限制为1条，并将结果写入到切片中</li><li>将切片中的数据拷贝到原对象中</li></ol><h2 id="_4-单元测试" tabindex="-1"><a class="header-anchor" href="#_4-单元测试" aria-hidden="true">#</a> 4. 单元测试</h2><p><code>session/record_test.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">TestSession_Limit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to query with limit&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestSession_Update</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;Name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;Age DESC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>

	<span class="token keyword">if</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>Age <span class="token operator">!=</span> <span class="token number">10</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to update&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">TestSession_Delete</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;Name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to delete&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestSession_Count</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	c<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;Name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> c <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to count&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,27),r={href:"https://geektutu.com/post/geeorm-day4.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=u("ExternalLinkIcon");return o(),e("div",null,[n("p",null,[n("a",i,[a("day4-chain"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",r,[a("https://geektutu.com/post/geeorm-day4.html"),t(s)])])])])}const f=p(l,[["render",d],["__file","03.4.chain.html.vue"]]);export{f as default};
