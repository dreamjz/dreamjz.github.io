import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as i}from"./framework-dee406ed.js";const l={},r=t(`<p>Golang 中的<code>panic</code>和<code>recover</code>：</p><ul><li><p><code>panic</code> 能够改变程序的控制流，调用 <code>panic</code> 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 <code>defer</code></p></li><li><p><code>recover</code> 可以中止 <code>panic</code> 造成的程序崩溃。它是一个<strong>只能</strong>在 <code>defer</code> 中发挥作用的函数，在其他作用域中调用不会发挥作用</p></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281900829.png" alt="golang-panic" tabindex="0" loading="lazy"><figcaption>golang-panic</figcaption></figure><h2 id="_5-4-1-现象" tabindex="-1"><a class="header-anchor" href="#_5-4-1-现象" aria-hidden="true">#</a> 5.4.1 现象</h2><p>使用<code>panic</code>和<code>recover</code>时，会有：</p><ul><li><code>panic</code> 只会触发当前 Goroutine 的<code>defer</code></li><li><code>recover</code> 只有在 <code>defer</code> 中调用才会生效</li><li><code>panic</code> 允许在 <code>defer</code> 中嵌套多次调用</li></ul><h3 id="跨协程失效" tabindex="-1"><a class="header-anchor" href="#跨协程失效" aria-hidden="true">#</a> 跨协程失效</h3><p><code>panic</code> 只会触发当前 Goroutine 的延迟函数调用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defer in main&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defer in goroutine&quot;</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic in goroutine&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token keyword">defer</span> in goroutine
<span class="token builtin">panic</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> in goroutine

goroutine <span class="token number">5</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span><span class="token punctuation">:</span>
main<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>main</code>函数中的<code>defer</code>没有被触发，只有<code>panic</code>所在的<code>goroutine</code>的<code>defer</code>被触发。</p>`,10),u={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.deferproc",-1),k=n("strong",null,"关联",-1),v=t(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281905137.png" alt="golang-panic-and-defers" tabindex="0" loading="lazy"><figcaption>golang-panic-and-defers</figcaption></figure><h3 id="失效的recover" tabindex="-1"><a class="header-anchor" href="#失效的recover" aria-hidden="true">#</a> 失效的<code>recover</code></h3><p><code>recover</code>只有在<code>defer</code>中才会生效：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defer in main&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic in main&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token keyword">defer</span> in main
<span class="token builtin">panic</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> in main

goroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span><span class="token punctuation">:</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码因为<code>recover</code>在<code>panic</code>调用之前被调用了，不会生效。需要在<code>defer</code>中才会生效。</p><h3 id="panic嵌套" tabindex="-1"><a class="header-anchor" href="#panic嵌套" aria-hidden="true">#</a> <code>panic</code>嵌套</h3><p><code>panic</code>可以嵌套：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;in main&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic again and again&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic again&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic once&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
in main
<span class="token builtin">panic</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> once
	<span class="token builtin">panic</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> again
	<span class="token builtin">panic</span><span class="token punctuation">:</span> <span class="token builtin">panic</span> again and again
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_5-4-2-数据结构" aria-hidden="true">#</a> 5.4.2 数据结构</h2>`,9),m=n("code",null,"panic",-1),_={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"runtime._panic",-1),f=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	argp      unsafe<span class="token punctuation">.</span>Pointer
	arg       <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	link      <span class="token operator">*</span>_panic
	recovered <span class="token builtin">bool</span>
	aborted   <span class="token builtin">bool</span>
	pc        <span class="token builtin">uintptr</span>
	sp        unsafe<span class="token punctuation">.</span>Pointer
	goexit    <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>argp</code>：指向<code>defer</code>调用时参数的指针</li><li><code>arg</code>：调用<code>panic</code>的参数</li><li><code>link</code>：指向更早调用的<code>panic</code>，形成<strong>链表</strong></li><li><code>recovered</code>：表示当前<code>panic</code>是否被恢复</li><li><code>aborted</code>：表示当前<code>panic</code>是否被终止</li></ul><h2 id="_5-4-3-panic" tabindex="-1"><a class="header-anchor" href="#_5-4-3-panic" aria-hidden="true">#</a> 5.4.3 panic</h2>`,3),h=n("code",null,"panic",-1),b=n("code",null,"panic",-1),y={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.gopanic",-1),x={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime._panic",-1),G=n("code",null,"_panic",-1),P=n("code",null,"_defer",-1),z={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime._defer",-1),V={href:"https://draveness.me/golang/tree/runtime.reflectcall",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.reflectcall",-1),B={href:"https://draveness.me/golang/tree/runtime.fatalpanic",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.fatalpanic",-1),S=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopanic</span><span class="token punctuation">(</span>e <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> p _panic
	p<span class="token punctuation">.</span>arg <span class="token operator">=</span> e
	p<span class="token punctuation">.</span>link <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic
	gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		d <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_defer
		<span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token function">reflectcall</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span>

		d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token boolean">nil</span>
		d<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
		gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d<span class="token punctuation">.</span>link

		<span class="token function">freedefer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">fatalpanic</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>_panic<span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://draveness.me/golang/tree/runtime.fatalpanic",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"runtime.fatalpanic",-1),L={href:"https://draveness.me/golang/tree/runtime.printpanics",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.printpanics",-1),C=n("code",null,"panic",-1),D=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fatalpanic</span><span class="token punctuation">(</span>msgs <span class="token operator">*</span>_panic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token function">startpanic_m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> msgs <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		atomic<span class="token punctuation">.</span><span class="token function">Xadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runningPanicDefers<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">printpanics</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">dopanic_m</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> sp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">crash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H={href:"https://draveness.me/golang/tree/runtime.exit",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"runtime.exit",-1),T={href:"https://draveness.me/golang/tree/runtime.exit",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"runtime.exit",-1),Z=n("h2",{id:"_5-4-4-recover",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-4-4-recover","aria-hidden":"true"},"#"),s(" 5.4.4 recover")],-1),F=n("code",null,"recover",-1),J={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.gorecover",-1),M=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gorecover</span><span class="token punctuation">(</span>argp <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_panic
	<span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>recovered <span class="token operator">&amp;&amp;</span> argp <span class="token operator">==</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>argp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p<span class="token punctuation">.</span>recovered <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token keyword">return</span> p<span class="token punctuation">.</span>arg
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O=n("li",null,[s("若当前 Goroutine 没有调用 "),n("code",null,"panic"),s("，那么该函数会直接返回 "),n("code",null,"nil")],-1),Q=n("code",null,"panic",-1),U={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"runtime._panic",-1),Y=n("code",null,"recovered",-1),nn={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"runtime.gorecover",-1),an={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.gopanic",-1),tn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopanic</span><span class="token punctuation">(</span>e <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 执行延迟调用函数，可能会设置 p.recovered = true</span>
		<span class="token operator">...</span>

		pc <span class="token operator">:=</span> d<span class="token punctuation">.</span>pc
		sp <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>sp<span class="token punctuation">)</span>

		<span class="token operator">...</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
			gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> p<span class="token punctuation">.</span>link
			<span class="token keyword">for</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>aborted <span class="token punctuation">{</span>
				gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>link
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				gp<span class="token punctuation">.</span>sig <span class="token operator">=</span> <span class="token number">0</span>
			<span class="token punctuation">}</span>
			gp<span class="token punctuation">.</span>sigcode0 <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>
			gp<span class="token punctuation">.</span>sigcode1 <span class="token operator">=</span> pc
			<span class="token function">mcall</span><span class="token punctuation">(</span>recovery<span class="token punctuation">)</span>
			<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;recovery failed&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),on={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.recovery",-1),cn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"runtime.deferproc",-1),rn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.deferreturn",-1),dn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferproc</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">,</span> fn <span class="token operator">*</span>funcval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token function">return0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),kn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"runtime.deferreturn",-1),mn=n("code",null,"panic",-1),_n={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.gorecover",-1),fn={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime._panic",-1),bn=n("code",null,"panic",-1),yn=n("code",null,"arg",-1),wn=n("h2",{id:"_5-4-5-小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-4-5-小结","aria-hidden":"true"},"#"),s(" 5.4.5 小结")],-1),xn=n("p",null,[n("code",null,"panic"),s("和"),n("code",null,"recover"),s("的流程如下：")],-1),qn=n("code",null,"panic",-1),Gn=n("code",null,"recover",-1),Pn={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"runtime.gopanic",-1),Nn={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime.gorecover",-1),$n=n("code",null,"defer",-1),Bn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.deferproc",-1),Sn=n("code",null,"defer",-1),jn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.deferreturn",-1),Ln={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.gopanic",-1),Cn=n("strong",null,"链表",-1),Dn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime._defer",-1),Rn={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"runtime.gorecover",-1),Xn=n("code",null,"_panic.recovered",-1),Zn=n("code",null,"panic",-1),Fn={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"runtime.gopanic",-1),Kn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"runtime._defer",-1),On=n("code",null,"pc",-1),Qn=n("code",null,"sp",-1),Un={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.recovery",-1),Yn={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},ns=n("code",null,"runtime.recovery",-1),ss=n("code",null,"pc",-1),as=n("code",null,"sp",-1),es={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"runtime.deferproc",-1),os={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},ps=n("code",null,"runtime.deferproc",-1),cs={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"runtime.deferreturn",-1),ls={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"runtime.gorecover",-1),us={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"runtime._defer",-1),ks={href:"https://draveness.me/golang/tree/runtime.fatalpanic",target:"_blank",rel:"noopener noreferrer"},vs=n("code",null,"runtime.fatalpanic",-1),ms=n("code",null,"panic",-1),_s=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),gs={href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-panic-recover/",target:"_blank",rel:"noopener noreferrer"};function fs(hs,bs){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("因为"),n("a",u,[d,e(a)]),s(" 会将延迟调用函数与调用方所在 Goroutine 进行"),k,s("，所以当程序发生崩溃时只会调用当前 Goroutine 的延迟调用函数。")]),v,n("p",null,[m,s("的数据结构由"),n("a",_,[g,e(a)]),s("表示：")]),f,n("p",null,[h,s(" 终止程序的实现原理，编译器会将关键字 "),b,s(" 转换成 "),n("a",y,[w,e(a)]),s("，函数主要流程：")]),n("ol",null,[n("li",null,[s("创建新的 "),n("a",x,[q,e(a)]),s(" 并添加到所在 Goroutine 的 "),G,s(" 链表的最前面")]),n("li",null,[s("在循环中不断从当前 Goroutine 的 "),P,s(" 中链表获取 "),n("a",z,[N,e(a)]),s(" 并调用 "),n("a",V,[$,e(a)]),s(" 运行延迟调用函数")]),n("li",null,[s("调用 "),n("a",B,[E,e(a)]),s(" 中止整个程序")])]),S,n("p",null,[n("a",j,[I,e(a)]),s(" 实现了无法被恢复的程序崩溃，它在中止程序之前会通过 "),n("a",L,[A,e(a)]),s(" 打印出全部的 "),C,s(" 消息以及调用时传入的参数：")]),D,n("p",null,[s("打印崩溃消息后会调用 "),n("a",H,[R,e(a)]),s(" 退出当前程序并返回错误码 2，程序的正常退出也是通过 "),n("a",T,[X,e(a)]),s(" 实现的。")]),Z,n("p",null,[s("编译器会将关键字 "),F,s(" 转换成 "),n("a",J,[K,e(a)]),s("：")]),M,n("ul",null,[O,n("li",null,[s("若调用了"),Q,s("，修改 "),n("a",U,[W,e(a)]),s(" 的 "),Y,s(" 字段")])]),n("p",null,[n("a",nn,[sn,e(a)]),s(" 函数中并不包含恢复程序的逻辑，程序的恢复是由 "),n("a",an,[en,e(a)]),s(" 函数负责：")]),tn,n("p",null,[n("a",on,[pn,e(a)]),s(" 在调度过程中会将函数的返回值设置成 1。")]),n("p",null,[s("当 "),n("a",cn,[ln,e(a)]),s(" 函数的返回值是 1 时，编译器生成的代码会直接跳转到调用方函数返回之前并执行 "),n("a",rn,[un,e(a)]),s("：")]),dn,n("p",null,[s("跳转到 "),n("a",kn,[vn,e(a)]),s(" 函数之后，程序就已经从 "),mn,s(" 中恢复了并执行正常的逻辑，而 "),n("a",_n,[gn,e(a)]),s(" 函数也能从 "),n("a",fn,[hn,e(a)]),s(" 结构中取出了调用 "),bn,s(" 时传入的 "),yn,s(" 参数并返回给调用方。")]),wn,xn,n("ol",null,[n("li",null,[s("编译器会负责做转换关键字的工作： "),n("ol",null,[n("li",null,[s("将 "),qn,s(" 和 "),Gn,s(" 分别转换成 "),n("a",Pn,[zn,e(a)]),s(" 和 "),n("a",Nn,[Vn,e(a)])]),n("li",null,[s("将 "),$n,s(" 转换成 "),n("a",Bn,[En,e(a)]),s(" 函数")]),n("li",null,[s("在调用 "),Sn,s(" 的函数末尾调用 "),n("a",jn,[In,e(a)]),s(" 函数")])])]),n("li",null,[s("在运行过程中遇到 "),n("a",Ln,[An,e(a)]),s(" 方法时，会从 Goroutine 的"),Cn,s("依次取出 "),n("a",Dn,[Hn,e(a)]),s(" 结构体并执行")]),n("li",null,[s("若调用延迟执行函数时遇到了 "),n("a",Rn,[Tn,e(a)]),s(" 就会将 "),Xn,s(" 标记成 true 并返回 "),Zn,s(" 的参数 "),n("ol",null,[n("li",null,[s("在这次调用结束之后，"),n("a",Fn,[Jn,e(a)]),s(" 会从 "),n("a",Kn,[Mn,e(a)]),s(" 结构体中取出程序计数器 "),On,s(" 和栈指针 "),Qn,s(" 并调用 "),n("a",Un,[Wn,e(a)]),s(" 函数进行恢复程序")]),n("li",null,[n("a",Yn,[ns,e(a)]),s(" 会根据传入的 "),ss,s(" 和 "),as,s(" 跳转回 "),n("a",es,[ts,e(a)])]),n("li",null,[s("编译器自动生成的代码会发现 "),n("a",os,[ps,e(a)]),s(" 的返回值不为 0，这时会跳回 "),n("a",cs,[is,e(a)]),s(" 并恢复到正常的执行流程")])])]),n("li",null,[s("若没有遇到 "),n("a",ls,[rs,e(a)]),s(" 就会依次遍历所有的 "),n("a",us,[ds,e(a)]),s("，并在最后调用 "),n("a",ks,[vs,e(a)]),s(" 中止程序、打印 "),ms,s(" 的参数并返回错误码 2")])]),_s,n("ol",null,[n("li",null,[n("a",gs,[s("https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-panic-recover/"),e(a)])])])])}const ws=o(l,[["render",fs],["__file","05.4.panic_recover.html.vue"]]);export{ws as default};
