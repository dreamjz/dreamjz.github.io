import{_ as o,Z as p,$ as l,a0 as n,a2 as t,a1 as s,a3 as e,H as c}from"./framework-dee406ed.js";const i={},u=e('<h2 id="_6-2-1-基本原语" tabindex="-1"><a class="header-anchor" href="#_6-2-1-基本原语" aria-hidden="true">#</a> 6.2.1 基本原语</h2><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010330458.png" alt="golang-basic-sync-primitives" tabindex="0" loading="lazy"><figcaption>golang-basic-sync-primitives</figcaption></figure><h3 id="mutex" tabindex="-1"><a class="header-anchor" href="#mutex" aria-hidden="true">#</a> Mutex</h3>',3),r={href:"https://draveness.me/golang/tree/sync.Mutex",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"sync.Mutex",-1),k=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	state <span class="token builtin">int32</span>
	sema  <span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>state</code>：当前互斥锁的<strong>状态</strong></li><li><code>sema</code>：控制锁状态的<strong>信号量</strong></li></ul><h4 id="状态" tabindex="-1"><a class="header-anchor" href="#状态" aria-hidden="true">#</a> 状态</h4><p>互斥锁的状态通过<code>state</code>的二进制位表示，默认状态所有位为0：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010332987.png" alt="golang-mutex-state" tabindex="0" loading="lazy"><figcaption>golang-mutex-state</figcaption></figure><ul><li><code>mutexLocked</code>：<strong>锁定</strong>状态</li><li><code>mutexWoken</code>：从正常模式被<strong>唤醒</strong></li><li><code>mutexStarving</code>：饥饿状态</li><li><code>waitersCount</code>：当前锁上<strong>等待</strong>的 goroutine 的<strong>个数</strong></li></ul><h4 id="正常模式和饥饿模式" tabindex="-1"><a class="header-anchor" href="#正常模式和饥饿模式" aria-hidden="true">#</a> 正常模式和饥饿模式</h4>`,7),v={href:"https://draveness.me/golang/tree/sync.Mutex",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"sync.Mutex",-1),m=e('<ol><li>正常模式</li><li>饥饿模式</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010336774.png" alt="golang-mutex-mode" tabindex="0" loading="lazy"><figcaption>golang-mutex-mode</figcaption></figure><p>在<strong>正常模式</strong>下，锁的等待者会按照<strong>先进先出 FIFO</strong>的顺序获取锁。</p><p>但是刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁，为了减少这种情况的出现，一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换<strong>饥饿模式</strong>，以保证互斥锁的公平性。</p><p>在<strong>饥饿模式</strong>中，互斥锁会直接交给等待队列最前面的 Goroutine。</p><p>新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，只会在队列的<strong>末尾</strong>等待。若一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会<strong>切换</strong>回正常模式。</p><h4 id="加锁" tabindex="-1"><a class="header-anchor" href="#加锁" aria-hidden="true">#</a> 加锁</h4>',7),h={href:"https://draveness.me/golang/tree/sync.Mutex.Lock",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"sync.Mutex.Lock",-1),b=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mutexLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span><span class="token function">lockSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=n("li",null,[s("当锁的状态是 0 时，将 "),n("code",null,"mutexLocked"),s(" 位置成 1")],-1),y={href:"https://draveness.me/golang/tree/sync.Mutex.lockSlow",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"sync.Mutex.lockSlow",-1),x={href:"https://draveness.me/golang/tree/sync.Mutex.lockSlow",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"sync.Mutex.lockSlow",-1),W=e(`<ol><li>判断当前 Goroutine 能否进入自旋</li><li>通过自旋等待互斥锁的释放</li><li>计算互斥锁的最新状态</li><li>更新互斥锁的状态并获取锁</li></ol><h5 id="判断自旋和等待释放" tabindex="-1"><a class="header-anchor" href="#判断自旋和等待释放" aria-hidden="true">#</a> 判断自旋和等待释放</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">lockSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> waitStartTime <span class="token builtin">int64</span>
	starving <span class="token operator">:=</span> <span class="token boolean">false</span>
	awoke <span class="token operator">:=</span> <span class="token boolean">false</span>
	iter <span class="token operator">:=</span> <span class="token number">0</span>
	old <span class="token operator">:=</span> m<span class="token punctuation">.</span>state
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">==</span> mutexLocked <span class="token operator">&amp;&amp;</span> <span class="token function">runtime_canSpin</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>awoke <span class="token operator">&amp;&amp;</span> old<span class="token operator">&amp;</span>mutexWoken <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> old<span class="token operator">&gt;&gt;</span>mutexWaiterShift <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
				atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> old<span class="token operator">|</span>mutexWoken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				awoke <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
			<span class="token function">runtime_doSpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			iter<span class="token operator">++</span>
			old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自旋</strong>是一种多线程同步机制，当前的进程在进入自旋的过程中会一直保持 CPU 的占用，持续检查某个条件是否为真。</p><p>在多核的 CPU 上，自旋可以避免 Goroutine 的切换，使用恰当会对性能带来很大的增益，但是使用的不恰当就会拖慢整个程序。</p><p>Goroutine 进入<strong>自旋的条件</strong>：</p>`,6),S=n("li",null,"互斥锁处于在普通模式",-1),C={href:"https://draveness.me/golang/tree/runtime.sync_runtime_canSpin",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.sync_runtime_canSpin",-1),M=n("ol",null,[n("li",null,"运行在多 CPU 的机器上"),n("li",null,[s("当前 Goroutine 为了获取该锁进入自旋的次数"),n("strong",null,"小于四次")]),n("li",null,"当前机器上至少存在一个正在运行的处理器 P 并且处理的运行队列为空")],-1),A=n("strong",null,"自旋之后",-1),R={href:"https://draveness.me/golang/tree/runtime.sync_runtime_doSpin",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.sync_runtime_doSpin",-1),U={href:"https://draveness.me/golang/tree/runtime.procyield",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.procyield",-1),I=n("code",null,"PAUSE",-1),O=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sync_runtime_doSpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">procyield</span><span class="token punctuation">(</span>active_spin_cnt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

TEXT runtime·<span class="token function">procyield</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span>NOSPLIT<span class="token punctuation">,</span>$<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span>
	MOVL	cycles<span class="token operator">+</span><span class="token function">0</span><span class="token punctuation">(</span>FP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX
again<span class="token punctuation">:</span>
	PAUSE
	SUBL	$<span class="token number">1</span><span class="token punctuation">,</span> AX
	JNZ	again
	RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="计算最新状态" tabindex="-1"><a class="header-anchor" href="#计算最新状态" aria-hidden="true">#</a> 计算最新状态</h5><p>在 goroutine 自旋之后，计算当前互斥锁最新的状态：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token builtin">new</span> <span class="token operator">:=</span> old
		<span class="token keyword">if</span> old<span class="token operator">&amp;</span>mutexStarving <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token builtin">new</span> <span class="token operator">|=</span> mutexLocked
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token builtin">new</span> <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> mutexWaiterShift
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> starving <span class="token operator">&amp;&amp;</span> old<span class="token operator">&amp;</span>mutexLocked <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token builtin">new</span> <span class="token operator">|=</span> mutexStarving
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> awoke <span class="token punctuation">{</span>
			<span class="token builtin">new</span> <span class="token operator">&amp;^=</span> mutexWoken
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="更新锁状态并获取锁" tabindex="-1"><a class="header-anchor" href="#更新锁状态并获取锁" aria-hidden="true">#</a> 更新锁状态并获取锁</h5>`,5),z={href:"https://draveness.me/golang/tree/sync/atomic.CompareAndSwapInt32",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"sync/atomic.CompareAndSwapInt32",-1),T=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span> <span class="token comment">// 通过 CAS 函数获取了锁</span>
			<span class="token punctuation">}</span>
			<span class="token operator">...</span>
			<span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> queueLifo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
			starving <span class="token operator">=</span> starving <span class="token operator">||</span> <span class="token function">runtime_nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>waitStartTime <span class="token operator">&gt;</span> starvationThresholdNs
			old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
			<span class="token keyword">if</span> old<span class="token operator">&amp;</span>mutexStarving <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				delta <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>mutexLocked <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>mutexWaiterShift<span class="token punctuation">)</span>
				<span class="token keyword">if</span> <span class="token operator">!</span>starving <span class="token operator">||</span> old<span class="token operator">&gt;&gt;</span>mutexWaiterShift <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
					delta <span class="token operator">-=</span> mutexStarving
				<span class="token punctuation">}</span>
				atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> delta<span class="token punctuation">)</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
			awoke <span class="token operator">=</span> <span class="token boolean">true</span>
			iter <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),E={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),F=n("ul",null,[n("li",null,"在正常模式下，这段代码会设置唤醒和饥饿标记、重置迭代次数并重新执行获取锁的循环"),n("li",null,"在饥饿模式下，当前 Goroutine 会获得互斥锁，若等待队列中只存在当前 Goroutine，互斥锁还会从饥饿模式中退出")],-1),V=n("h4",{id:"解锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解锁","aria-hidden":"true"},"#"),s(" 解锁")],-1),$={href:"https://draveness.me/golang/tree/sync.Mutex.Unlock",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"sync.Mutex.Unlock",-1),H=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token builtin">new</span> <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token operator">-</span>mutexLocked<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token builtin">new</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span><span class="token function">unlockSlow</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Z={href:"https://draveness.me/golang/tree/sync/atomic.AddInt32",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"sync/atomic.AddInt32",-1),Y={href:"https://draveness.me/golang/tree/sync.Mutex.unlockSlow",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"sync.Mutex.unlockSlow",-1),Q={href:"https://draveness.me/golang/tree/sync.Mutex.unlockSlow",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"sync.Mutex.unlockSlow",-1),sn=e(`<p>在正常情况下会根据当前互斥锁的状态，分别处理正常模式和饥饿模式下的互斥锁：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">unlockSlow</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">new</span><span class="token operator">+</span>mutexLocked<span class="token punctuation">)</span><span class="token operator">&amp;</span>mutexLocked <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;sync: unlock of unlocked mutex&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token builtin">new</span><span class="token operator">&amp;</span>mutexStarving <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// 正常模式</span>
		old <span class="token operator">:=</span> <span class="token builtin">new</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> old<span class="token operator">&gt;&gt;</span>mutexWaiterShift <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexWoken<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			<span class="token builtin">new</span> <span class="token operator">=</span> <span class="token punctuation">(</span>old <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>mutexWaiterShift<span class="token punctuation">)</span> <span class="token operator">|</span> mutexWoken
			<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 饥饿模式</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程如下：</p>`,3),an=n("li",null,[s("若互斥锁不存在等待者或者互斥锁的 "),n("code",null,"mutexLocked"),s("、"),n("code",null,"mutexStarving"),s("、"),n("code",null,"mutexWoken"),s(" 状态不都为 0，那么当前方法可以直接返回，不需要唤醒其他等待者")],-1),tn={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"sync.runtime_Semrelease",-1),on={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"sync.runtime_Semrelease",-1),ln=n("h4",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),s(" 小结")],-1),cn=n("p",null,[n("strong",null,"加锁"),s("过程：")],-1),un=n("li",null,[n("p",null,[s("若互斥锁处于初始化状态，会通过置位 "),n("code",null,"mutexLocked"),s(" 加锁")])],-1),rn=n("li",null,[n("p",null,[s("若互斥锁处于 "),n("code",null,"mutexLocked"),s(" 状态并且在普通模式下工作，会进入自旋，执行 30 次 "),n("code",null,"PAUSE"),s(" 指令消耗 CPU 时间等待锁的释放")])],-1),dn=n("li",null,[n("p",null,"若当前 Goroutine 等待锁的时间超过了 1ms，互斥锁就会切换到饥饿模式")],-1),kn={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),gn=n("li",null,[n("p",null,"若当前 Goroutine 是互斥锁上的最后一个等待的协程或者等待的时间小于 1ms，那么它会将互斥锁切换回正常模式")],-1),mn=n("p",null,[n("strong",null,"解锁"),s("过程：")],-1),hn=n("strong",null,"已经被解锁",-1),_n={href:"https://draveness.me/golang/tree/sync.Mutex.Unlock",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"sync.Mutex.Unlock",-1),fn=n("li",null,[s("当互斥锁处于"),n("strong",null,"饥饿模式"),s("时，将锁的所有权交给队列中的下一个等待者，等待者会负责设置 "),n("code",null,"mutexLocked"),s(" 标志位")],-1),yn=n("strong",null,"普通模式",-1),wn=n("li",null,"若没有 Goroutine 等待锁的释放或者已经有被唤醒的 Goroutine 获得了锁，会直接返回",-1),xn={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"sync.runtime_Semrelease",-1),Wn=n("h3",{id:"rwmutex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rwmutex","aria-hidden":"true"},"#"),s(" RWMutex")],-1),Sn={href:"https://draveness.me/golang/tree/sync.RWMutex",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"sync.RWMutex",-1),Ln=e('<table><thead><tr><th style="text-align:left;">\\</th><th style="text-align:left;">读</th><th>写</th></tr></thead><tbody><tr><td style="text-align:left;">读</td><td style="text-align:left;">Y</td><td>N</td></tr><tr><td style="text-align:left;">写</td><td style="text-align:left;">N</td><td>N</td></tr></tbody></table><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h4>',2),Mn={href:"https://draveness.me/golang/tree/sync.RWMutex",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"sync.RWMutex",-1),Rn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	w           Mutex
	writerSem   <span class="token builtin">uint32</span>
	readerSem   <span class="token builtin">uint32</span>
	readerCount <span class="token builtin">int32</span>
	readerWait  <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>w</code>：复用<strong>互斥锁</strong></li><li><code>writerSem</code>：写等待读信号</li><li><code>readerSem</code>：读等待写信号</li><li><code>readerWait</code>：当前操作被阻塞时，等待的读操作的个数</li></ul><h4 id="写锁" tabindex="-1"><a class="header-anchor" href="#写锁" aria-hidden="true">#</a> 写锁</h4>`,3),qn=n("strong",null,"获取写锁",-1),Un={href:"https://draveness.me/golang/tree/sync.RWMutex.Lock",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"sync.RWMutex.Lock",-1),In=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span>rwmutexMaxReaders<span class="token punctuation">)</span> <span class="token operator">+</span> rwmutexMaxReaders
	<span class="token keyword">if</span> r <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),On={href:"https://draveness.me/golang/tree/sync.Mutex",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"sync.Mutex",-1),Nn={href:"https://draveness.me/golang/tree/sync.Mutex.Lock",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"sync.Mutex.Lock",-1),Pn=n("ul",null,[n("li",null,[s("因为"),n("strong",null,"互斥锁"),s("已经被获取，其他 Goroutine 在获取写锁时会进入"),n("strong",null,"自旋"),s("或者"),n("strong",null,"休眠")])],-1),Bn={href:"https://draveness.me/golang/tree/sync/atomic.AddInt32",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"sync/atomic.AddInt32",-1),jn=n("strong",null,"阻塞",-1),Fn=n("strong",null,"读操作",-1),Vn=n("strong",null,"持有",-1),$n=n("strong",null,"读锁",-1),Xn={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),Zn=n("strong",null,"休眠",-1),Jn=n("strong",null,"等待",-1),Yn=n("strong",null,"读锁",-1),Kn=n("strong",null,"释放",-1),Qn=n("code",null,"writerSem",-1),ns=n("strong",null,"释放写锁",-1),ss={href:"https://draveness.me/golang/tree/sync.RWMutex.Unlock",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"sync.RWMutex.Unlock",-1),ts=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> rwmutexMaxReaders<span class="token punctuation">)</span>
	<span class="token keyword">if</span> r <span class="token operator">&gt;=</span> rwmutexMaxReaders <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;sync: Unlock of unlocked RWMutex&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),es={href:"https://draveness.me/golang/tree/sync/atomic.AddInt32",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"sync/atomic.AddInt32",-1),ps=n("code",null,"readerCount",-1),ls=n("li",null,"通过 for 循环释放所有因为获取读锁而陷入等待的 Goroutine",-1),cs={href:"https://draveness.me/golang/tree/sync.Mutex.Unlock",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"sync.Mutex.Unlock",-1),us=n("p",null,[s("获取写锁时会"),n("strong",null,"先阻塞写锁"),s("的获取，"),n("strong",null,"后阻塞读锁"),s("的获取，这种策略能够保证读操作不会被连续的写操作『饿死』。")],-1),rs=n("h4",{id:"读锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#读锁","aria-hidden":"true"},"#"),s(" 读锁")],-1),ds=n("strong",null,"获取读锁",-1),ks={href:"https://draveness.me/golang/tree/sync.RWMutex.RLock",target:"_blank",rel:"noopener noreferrer"},vs=n("code",null,"sync.RWMutex.RLock",-1),gs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ms=n("strong",null,"写锁",-1),hs={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),bs=n("strong",null,"休眠",-1),fs=n("li",null,"若该方法的结果为非负数，则没有 Goroutine 获得写锁，当前方法会成功返回",-1),ys=n("strong",null,"释放读锁",-1),ws={href:"https://draveness.me/golang/tree/sync.RWMutex.RUnlock",target:"_blank",rel:"noopener noreferrer"},xs=n("code",null,"sync.RWMutex.RUnlock",-1),Gs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rw<span class="token punctuation">.</span><span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ws=n("li",null,[s("减少正在读资源的 "),n("code",null,"readerCount"),s(" 整数")],-1),Ss={href:"https://draveness.me/golang/tree/sync/atomic.AddInt32",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"sync/atomic.AddInt32",-1),Ls=n("li",null,"若返回值大于等于零 — 读锁直接解锁成功",-1),Ms={href:"https://draveness.me/golang/tree/sync.RWMutex.rUnlockSlow",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"sync.RWMutex.rUnlockSlow",-1),Rs={href:"https://draveness.me/golang/tree/sync.RWMutex.rUnlockSlow",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"sync.RWMutex.rUnlockSlow",-1),Us=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span>rwmutexMaxReaders <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;sync: RUnlock of unlocked RWMutex&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>减少获取锁的写操作等待的读操作数 <code>readerWait</code></li><li>在所有读操作都被释放之后触发写操作的信号量 <code>writerSem</code>，唤醒尝试获取写锁的 Goroutine</li></ol><h4 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h4><p>获取写锁：</p>`,4),Ds={href:"https://draveness.me/golang/tree/sync.RWMutex.RUnlock",target:"_blank",rel:"noopener noreferrer"},Is=n("code",null,"sync.RWMutex.RUnlock",-1),Os=n("code",null,"readerCount",-1),zs=n("li",null,[s("将 "),n("code",null,"readerCount"),s(" 减少 "),n("code",null,"rwmutexMaxReaders"),s(" 个数以阻塞后续的读操作")],-1),Ns=n("p",null,"释放写锁：",-1),Ts=n("ul",null,[n("li",null,"会先通知所有的读操作，然后才会释放持有的互斥锁")],-1),Ps=n("h3",{id:"waitgroup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#waitgroup","aria-hidden":"true"},"#"),s(" WaitGroup")],-1),Bs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010454680.png",alt:"golang-syncgroup",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-syncgroup")],-1),Es={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},js=n("code",null,"sync.WaitGroup",-1),Fs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> WaitGroup <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	noCopy noCopy
	state1 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vs=n("code",null,"noCopy",-1),$s={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"sync.WaitGroup",-1),Hs=n("strong",null,"不会",-1),Zs=n("strong",null,"拷贝",-1),Js=n("li",null,[n("code",null,"state1"),s("：存储状态和信号量")],-1),Ys={href:"https://draveness.me/golang/tree/sync.noCopy",target:"_blank",rel:"noopener noreferrer"},Ks=n("code",null,"sync.noCopy",-1),Qs={href:"https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/copylock",target:"_blank",rel:"noopener noreferrer"},na=n("code",null,"tools/go/analysis/passes/copylock",-1),sa={href:"https://draveness.me/golang/tree/sync.noCopy",target:"_blank",rel:"noopener noreferrer"},aa=n("code",null,"sync.noCopy",-1),ta=n("code",null,"Lock",-1),ea=n("code",null,"Unlock",-1),oa=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
	yawg <span class="token operator">:=</span> wg
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>wg<span class="token punctuation">,</span> yawg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> vet proc<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> assignment copies lock value to yawg<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> call of fmt<span class="token punctuation">.</span>Println copies lock value<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">:</span> call of fmt<span class="token punctuation">.</span>Println copies lock value<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>state1</code>是总共占用 12 字节的数组，存储当前结构体的状态，在64位和32位机上表现不同：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010457639.png" alt="golang-waitgroup-state" tabindex="0" loading="lazy"><figcaption>golang-waitgroup-state</figcaption></figure><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4>`,4),pa={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},la=n("code",null,"sync.WaitGroup",-1),ca={href:"https://draveness.me/golang/tree/sync.WaitGroup.Add",target:"_blank",rel:"noopener noreferrer"},ia=n("code",null,"sync.WaitGroup.Add",-1),ua={href:"https://draveness.me/golang/tree/sync.WaitGroup.Done",target:"_blank",rel:"noopener noreferrer"},ra=n("code",null,"sync.WaitGroup.Done",-1),da={href:"https://draveness.me/golang/tree/sync.WaitGroup.Wait",target:"_blank",rel:"noopener noreferrer"},ka=n("code",null,"sync.WaitGroup.Wait",-1),va={href:"https://draveness.me/golang/tree/sync.WaitGroup.Done",target:"_blank",rel:"noopener noreferrer"},ga=n("code",null,"sync.WaitGroup.Done",-1),ma=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ha={href:"https://draveness.me/golang/tree/sync.WaitGroup.Add",target:"_blank",rel:"noopener noreferrer"},_a=n("code",null,"sync.WaitGroup.Add",-1),ba=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statep<span class="token punctuation">,</span> semap <span class="token operator">:=</span> wg<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	state <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>
	v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
	w <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
	<span class="token keyword">if</span> v <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;sync: negative WaitGroup counter&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> w <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span>statep <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> w <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span>semap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),fa={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},ya=n("code",null,"sync.WaitGroup",-1),wa=n("code",null,"counter",-1),xa=n("li",null,[s("计数器只能是"),n("strong",null,"非负数")],-1),Ga=n("li",null,"当计数器为负数就会发生程序崩溃",-1),Wa={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"sync.runtime_Semrelease",-1),Ca={href:"https://draveness.me/golang/tree/sync.WaitGroup.Wait",target:"_blank",rel:"noopener noreferrer"},La=n("code",null,"sync.WaitGroup.Wait",-1),Ma=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statep<span class="token punctuation">,</span> semap <span class="token operator">:=</span> wg<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		state <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">)</span>
		v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">,</span> state<span class="token punctuation">,</span> state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">runtime_Semacquire</span><span class="token punctuation">(</span>semap<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">+</span>statep <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;sync: WaitGroup is reused before previous Wait has returned&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Aa={href:"https://draveness.me/golang/tree/runtime.sync_runtime_Semacquire",target:"_blank",rel:"noopener noreferrer"},Ra=n("code",null,"runtime.sync_runtime_Semacquire",-1),qa=n("li",null,"计数器归零时，陷入睡眠状态的 Goroutine 会被唤醒，并且方法返回",-1),Ua=n("h4",{id:"小结-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结-2","aria-hidden":"true"},"#"),s(" 小结")],-1),Da={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},Ia=n("code",null,"sync.WaitGroup",-1),Oa={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},za=n("code",null,"sync.WaitGroup",-1),Na={href:"https://draveness.me/golang/tree/sync.WaitGroup.Wait",target:"_blank",rel:"noopener noreferrer"},Ta=n("code",null,"sync.WaitGroup.Wait",-1),Pa=n("strong",null,"返回之后",-1),Ba=n("strong",null,"重新使用",-1),Ea={href:"https://draveness.me/golang/tree/sync.WaitGroup.Done",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"sync.WaitGroup.Done",-1),Fa={href:"https://draveness.me/golang/tree/sync.WaitGroup.Add",target:"_blank",rel:"noopener noreferrer"},Va=n("code",null,"sync.WaitGroup.Add",-1),$a={href:"https://draveness.me/golang/tree/sync.WaitGroup.Add",target:"_blank",rel:"noopener noreferrer"},Xa=n("code",null,"sync.WaitGroup.Add",-1),Ha=n("strong",null,"多个",-1),Za={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},Ja=n("code",null,"sync.WaitGroup",-1),Ya=n("strong",null,"同时唤醒",-1),Ka=n("h3",{id:"once",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#once","aria-hidden":"true"},"#"),s(" Once")],-1),Qa={href:"https://draveness.me/golang/tree/sync.Once",target:"_blank",rel:"noopener noreferrer"},nt=n("code",null,"sync.Once",-1),st=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    o <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Once<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;only once&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
only once
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据结构-1" tabindex="-1"><a class="header-anchor" href="#数据结构-1" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	done <span class="token builtin">uint32</span>
	m    Mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>done</code>：表示代码是否执行过</li><li><code>m</code>：互斥锁</li></ul><h4 id="接口-1" tabindex="-1"><a class="header-anchor" href="#接口-1" aria-hidden="true">#</a> 接口</h4>`,5),at={href:"https://draveness.me/golang/tree/sync.Once.Do",target:"_blank",rel:"noopener noreferrer"},tt=n("code",null,"sync.Once.Do",-1),et=n("li",null,[s("若传入的函数"),n("strong",null,"已经执行过"),s("，会直接返回")],-1),ot={href:"https://draveness.me/golang/tree/sync.Once.doSlow",target:"_blank",rel:"noopener noreferrer"},pt=n("code",null,"sync.Once.doSlow",-1),lt=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		o<span class="token punctuation">.</span><span class="token function">doSlow</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">doSlow</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>为当前 Goroutine 获取互斥锁</li><li>执行传入的无入参函数</li><li>运行延迟函数调用，将成员变量 <code>done</code> 更新成 1</li><li>通过<code>done</code>来确保函数只会被执行一次</li></ol><h4 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h4>`,3),ct={href:"https://draveness.me/golang/tree/sync.Once.Do",target:"_blank",rel:"noopener noreferrer"},it=n("code",null,"sync.Once.Do",-1),ut={href:"https://draveness.me/golang/tree/sync.Once.Do",target:"_blank",rel:"noopener noreferrer"},rt=n("code",null,"sync.Once.Do",-1),dt={href:"https://draveness.me/golang/tree/sync.Once.Do",target:"_blank",rel:"noopener noreferrer"},kt=n("code",null,"sync.Once.Do",-1),vt=n("strong",null,"第一次",-1),gt=n("h3",{id:"cond",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cond","aria-hidden":"true"},"#"),s(" Cond")],-1),mt={href:"https://draveness.me/golang/tree/sync.Cond",target:"_blank",rel:"noopener noreferrer"},ht=n("code",null,"sync.Cond",-1),_t=e(`<p>初始化<code>Cond</code>时需要传入互斥锁：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> status <span class="token builtin">int64</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">listen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Interrupt<span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>ch
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>c <span class="token operator">*</span>sync<span class="token punctuation">.</span>Cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	atomic<span class="token punctuation">.</span><span class="token function">StoreInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">listen</span><span class="token punctuation">(</span>c <span class="token operator">*</span>sync<span class="token punctuation">.</span>Cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
listen
<span class="token operator">...</span>
listen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010514582.png" alt="golang-cond-broadcast" tabindex="0" loading="lazy"><figcaption>golang-cond-broadcast</figcaption></figure><h4 id="数据结构-2" tabindex="-1"><a class="header-anchor" href="#数据结构-2" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Cond <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	noCopy  noCopy
	L       Locker
	notify  notifyList
	checker copyChecker
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>noCopy</code> : 用于保证结构体不会在编译期间拷贝</li><li><code>copyChecker</code> ： 用于禁止运行期间发生的拷贝</li><li><code>L</code> ： 用于保护内部的 <code>notify</code> 字段，<code>Locker</code> 接口类型的变量</li><li><code>notify</code> ： Goroutine 的<strong>链表</strong>，它是实现同步机制的核心结构</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> notifyList <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	wait <span class="token builtin">uint32</span>
	notify <span class="token builtin">uint32</span>

	lock mutex
	head <span class="token operator">*</span>sudog
	tail <span class="token operator">*</span>sudog
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>head</code>：链表头</li><li><code>tail</code>：链表尾</li><li><code>wait</code>：当前正在等待的 goroutine 索引</li><li><code>notify</code>：已经通知到的 goroutine 索引</li></ul><h4 id="接口-2" tabindex="-1"><a class="header-anchor" href="#接口-2" aria-hidden="true">#</a> 接口</h4>`,9),bt={href:"https://draveness.me/golang/tree/sync.Cond.Wait",target:"_blank",rel:"noopener noreferrer"},ft=n("code",null,"sync.Cond.Wait",-1),yt={href:"https://draveness.me/golang/tree/runtime.notifyListAdd",target:"_blank",rel:"noopener noreferrer"},wt=n("code",null,"runtime.notifyListAdd",-1),xt=n("strong",null,"解锁",-1),Gt={href:"https://draveness.me/golang/tree/runtime.notifyListWait",target:"_blank",rel:"noopener noreferrer"},Wt=n("code",null,"runtime.notifyListWait",-1),St=n("strong",null,"加锁",-1),Ct=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t <span class="token operator">:=</span> <span class="token function">runtime_notifyListAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span> <span class="token comment">// runtime.notifyListAdd 的链接名</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListWait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// runtime.notifyListWait 的链接名</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">notifyListAdd</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">Xadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Lt={href:"https://draveness.me/golang/tree/runtime.notifyListWait",target:"_blank",rel:"noopener noreferrer"},Mt=n("code",null,"runtime.notifyListWait",-1),At=n("strong",null,"追加",-1),Rt=n("strong",null,"链表",-1),qt=n("strong",null,"末端",-1),Ut=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">notifyListWait</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">,</span> t <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>ticket <span class="token operator">=</span> t
	<span class="token keyword">if</span> l<span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		l<span class="token punctuation">.</span>head <span class="token operator">=</span> s
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		l<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> s
	<span class="token punctuation">}</span>
	l<span class="token punctuation">.</span>tail <span class="token operator">=</span> s
	<span class="token function">goparkunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> waitReasonSyncCondWait<span class="token punctuation">,</span> traceEvGoBlockCond<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token function">releaseSudog</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Dt={href:"https://draveness.me/golang/tree/runtime.goparkunlock",target:"_blank",rel:"noopener noreferrer"},It=n("code",null,"runtime.goparkunlock",-1),Ot=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010519804.png",alt:"golang-cond-notifylist",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-cond-notifylist")],-1),zt={href:"https://draveness.me/golang/tree/sync.Cond.Signal",target:"_blank",rel:"noopener noreferrer"},Nt=n("code",null,"sync.Cond.Signal",-1),Tt={href:"https://draveness.me/golang/tree/sync.Cond.Broadcast",target:"_blank",rel:"noopener noreferrer"},Pt=n("code",null,"sync.Cond.Broadcast",-1),Bt={href:"https://draveness.me/golang/tree/sync.Cond.Signal",target:"_blank",rel:"noopener noreferrer"},Et=n("code",null,"sync.Cond.Signal",-1),jt=n("strong",null,"队列最前面",-1),Ft={href:"https://draveness.me/golang/tree/sync.Cond.Broadcast",target:"_blank",rel:"noopener noreferrer"},Vt=n("code",null,"sync.Cond.Broadcast",-1),$t=n("strong",null,"队列",-1),Xt=n("strong",null,"全部",-1),Ht=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListNotifyOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListNotifyAll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Zt={href:"https://draveness.me/golang/tree/runtime.notifyListNotifyOne",target:"_blank",rel:"noopener noreferrer"},Jt=n("code",null,"runtime.notifyListNotifyOne",-1),Yt={href:"https://draveness.me/golang/tree/sync.notifyList",target:"_blank",rel:"noopener noreferrer"},Kt=n("code",null,"sync.notifyList",-1),Qt=n("code",null,"sudog.ticket == l.notify",-1),ne={href:"https://draveness.me/golang/tree/runtime.readyWithTime",target:"_blank",rel:"noopener noreferrer"},se=n("code",null,"runtime.readyWithTime",-1),ae=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">notifyListNotifyOne</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> l<span class="token punctuation">.</span>notify
	atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> p<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sudog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>head<span class="token punctuation">;</span> s <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> p<span class="token punctuation">,</span> s <span class="token operator">=</span> s<span class="token punctuation">,</span> s<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span>ticket <span class="token operator">==</span> t <span class="token punctuation">{</span>
			n <span class="token operator">:=</span> s<span class="token punctuation">.</span>next
			<span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				p<span class="token punctuation">.</span>next <span class="token operator">=</span> n
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				l<span class="token punctuation">.</span>head <span class="token operator">=</span> n
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				l<span class="token punctuation">.</span>tail <span class="token operator">=</span> p
			<span class="token punctuation">}</span>
			s<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token function">readyWithTime</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),te={href:"https://draveness.me/golang/tree/runtime.notifyListNotifyAll",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"runtime.notifyListNotifyAll",-1),oe={href:"https://draveness.me/golang/tree/runtime.readyWithTime",target:"_blank",rel:"noopener noreferrer"},pe=n("code",null,"runtime.readyWithTime",-1),le=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">notifyListNotifyAll</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> l<span class="token punctuation">.</span>head
	l<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">nil</span>
	l<span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token boolean">nil</span>

	atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> s <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		next <span class="token operator">:=</span> s<span class="token punctuation">.</span>next
		s<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token function">readyWithTime</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
		s <span class="token operator">=</span> next
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Goroutine 的<strong>唤醒顺序</strong>也是按照<strong>加入队列</strong>的<strong>先后顺序</strong>，先加入的会先被唤醒，而后加入的可能 Goroutine 需要等待调度器的调度。</p><h4 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h4>`,3),ce={href:"https://draveness.me/golang/tree/sync.Cond",target:"_blank",rel:"noopener noreferrer"},ie=n("code",null,"sync.Cond",-1),ue={href:"https://draveness.me/golang/tree/sync.Cond.Wait",target:"_blank",rel:"noopener noreferrer"},re=n("code",null,"sync.Cond.Wait",-1),de={href:"https://draveness.me/golang/tree/sync.Cond.Signal",target:"_blank",rel:"noopener noreferrer"},ke=n("code",null,"sync.Cond.Signal",-1),ve=n("strong",null,"唤醒",-1),ge=n("strong",null,"队列最前面",-1),me=n("strong",null,"等待最久",-1),he={href:"https://draveness.me/golang/tree/sync.Cond.Broadcast",target:"_blank",rel:"noopener noreferrer"},_e=n("code",null,"sync.Cond.Broadcast",-1),be=n("strong",null,"广播通知",-1),fe=n("strong",null,"全部",-1),ye=n("h2",{id:"_6-2-2-扩展原语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-2-2-扩展原语","aria-hidden":"true"},"#"),s(" 6.2.2 扩展原语")],-1),we=n("h3",{id:"errgroup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#errgroup","aria-hidden":"true"},"#"),s(" ErrGroup")],-1),xe={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group",target:"_blank",rel:"noopener noreferrer"},Ge=n("code",null,"golang/sync/errgroup.Group",-1),We=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> g errgroup<span class="token punctuation">.</span>Group
<span class="token keyword">var</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;http://www.golang.org/&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;http://www.google.com/&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> urls <span class="token punctuation">{</span>
    url <span class="token operator">:=</span> urls<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    g<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Successfully fetched all URLs.&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Se={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group.Go",target:"_blank",rel:"noopener noreferrer"},Ce=n("code",null,"golang/sync/errgroup.Group.Go",-1),Le={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group.Wait",target:"_blank",rel:"noopener noreferrer"},Me=n("code",null,"golang/sync/errgroup.Group.Wait",-1),Ae=n("ul",null,[n("li",null,"若返回错误，这一组 Goroutine 最少返回一个错误"),n("li",null,"若返回空值，所有 Goroutine 都成功执行")],-1),Re=e(`<h4 id="数据结构-3" tabindex="-1"><a class="header-anchor" href="#数据结构-3" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg sync<span class="token punctuation">.</span>WaitGroup

	errOnce sync<span class="token punctuation">.</span>Once
	err     <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),qe=n("code",null,"cancel",-1),Ue={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},De=n("code",null,"context.Context",-1),Ie=n("li",null,[n("code",null,"wg"),s("：用于等待一组 Goroutine 完成子任务的同步原语")],-1),Oe=n("li",null,[n("code",null,"errOnce"),s("：用于保证只接收一个子任务返回的错误")],-1),ze=n("h4",{id:"接口-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#接口-3","aria-hidden":"true"},"#"),s(" 接口")],-1),Ne={href:"https://draveness.me/golang/tree/golang/sync/errgroup.WithContext",target:"_blank",rel:"noopener noreferrer"},Te=n("code",null,"golang/sync/errgroup.WithContext",-1),Pe={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group",target:"_blank",rel:"noopener noreferrer"},Be=n("code",null,"golang/sync/errgroup.Group",-1),Ee=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">WithContext</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Group<span class="token punctuation">,</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Group<span class="token punctuation">{</span>cancel<span class="token punctuation">:</span> cancel<span class="token punctuation">}</span><span class="token punctuation">,</span> ctx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),je={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group.Go",target:"_blank",rel:"noopener noreferrer"},Fe=n("code",null,"golang/sync/errgroup.Group.Go",-1),Ve={href:"https://draveness.me/golang/tree/sync.WaitGroup.Add",target:"_blank",rel:"noopener noreferrer"},$e=n("code",null,"sync.WaitGroup.Add",-1),Xe=n("li",null,"创建新的 Goroutine 并运行子任务",-1),He=n("li",null,[s("返回错误时及时调用 "),n("code",null,"cancel"),s(" 并对 "),n("code",null,"err"),s(" 赋值，只有最早返回的错误才会被上游感知到，后续的错误都会被舍弃")],-1),Ze=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Go</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> g<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			g<span class="token punctuation">.</span>errOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				g<span class="token punctuation">.</span>err <span class="token operator">=</span> err
				<span class="token keyword">if</span> g<span class="token punctuation">.</span>cancel <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					g<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>cancel <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		g<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> g<span class="token punctuation">.</span>err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h4><p>使用是需要注意：</p>`,3),Je={href:"https://draveness.me/golang/tree/golang/sync/errgroup.Group",target:"_blank",rel:"noopener noreferrer"},Ye=n("code",null,"golang/sync/errgroup.Group",-1),Ke={href:"https://draveness.me/golang/tree/context.Context",target:"_blank",rel:"noopener noreferrer"},Qe=n("code",null,"context.Context",-1),no=n("code",null,"cancel",-1),so=n("li",null,"只有第一个出现的错误才会被返回，剩余的错误会被直接丢弃",-1),ao=n("h3",{id:"semaphore",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#semaphore","aria-hidden":"true"},"#"),s(" Semaphore")],-1),to={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted",target:"_blank",rel:"noopener noreferrer"},eo=n("code",null,"golang/sync/semaphore.Weighted",-1),oo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.NewWeighted",target:"_blank",rel:"noopener noreferrer"},po=n("code",null,"golang/sync/semaphore.NewWeighted",-1),lo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Acquire",target:"_blank",rel:"noopener noreferrer"},co=n("code",null,"golang/sync/semaphore.Weighted.Acquire",-1),io={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.TryAcquire",target:"_blank",rel:"noopener noreferrer"},uo=n("code",null,"golang/sync/semaphore.Weighted.TryAcquire",-1),ro=n("code",null,"false",-1),ko={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Release",target:"_blank",rel:"noopener noreferrer"},vo=n("code",null,"golang/sync/semaphore.Weighted.Release",-1),go=e(`<h4 id="数据结构-4" tabindex="-1"><a class="header-anchor" href="#数据结构-4" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewWeighted</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Weighted <span class="token punctuation">{</span>
	w <span class="token operator">:=</span> <span class="token operator">&amp;</span>Weighted<span class="token punctuation">{</span>size<span class="token punctuation">:</span> n<span class="token punctuation">}</span>
	<span class="token keyword">return</span> w
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Weighted <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	size    <span class="token builtin">int64</span>
	cur     <span class="token builtin">int64</span>
	mu      sync<span class="token punctuation">.</span>Mutex
	waiters list<span class="token punctuation">.</span>List
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>waiters</code>：等待获取资源的 Goroutine</p></li><li><p><code>size</code>：信号量的上限</p></li><li><p><code>cur</code>：计数器，范围[0, size]</p></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010751175.png" alt="golang-semaphore" tabindex="0" loading="lazy"><figcaption>golang-semaphore</figcaption></figure><h4 id="获取" tabindex="-1"><a class="header-anchor" href="#获取" aria-hidden="true">#</a> 获取</h4>`,5),mo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Acquire",target:"_blank",rel:"noopener noreferrer"},ho=n("code",null,"golang/sync/semaphore.Weighted.Acquire",-1),_o=n("li",null,"当信号量中剩余的资源大于获取的资源并且没有等待的 Goroutine 时，会直接获取信号量",-1),bo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted",target:"_blank",rel:"noopener noreferrer"},fo=n("code",null,"golang/sync/semaphore.Weighted",-1),yo=n("li",null,[s("遇到其他情况时会将当前 Goroutine 加入到等待列表并通过 "),n("code",null,"select"),s(" 等待调度器唤醒当前 Goroutine，Goroutine 被唤醒后会获取信号量")],-1),wo=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Acquire</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">&gt;=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token operator">...</span>
	ready <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	w <span class="token operator">:=</span> waiter<span class="token punctuation">{</span>n<span class="token punctuation">:</span> n<span class="token punctuation">,</span> ready<span class="token punctuation">:</span> ready<span class="token punctuation">}</span>
	elem <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span>
			err <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> err
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.TryAcquire",target:"_blank",rel:"noopener noreferrer"},Go=n("code",null,"golang/sync/semaphore.Weighted.TryAcquire",-1),Wo=n("code",null,"true",-1),So=n("code",null,"false",-1),Co=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">TryAcquire</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	success <span class="token operator">:=</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">&gt;=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
	<span class="token keyword">if</span> success <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> success
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="释放" tabindex="-1"><a class="header-anchor" href="#释放" aria-hidden="true">#</a> 释放</h4>`,2),Lo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Release",target:"_blank",rel:"noopener noreferrer"},Mo=n("code",null,"golang/sync/semaphore.Weighted.Release",-1),Ao=n("code",null,"waiters",-1),Ro=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Release</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>cur <span class="token operator">-=</span> n
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		next <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		w <span class="token operator">:=</span> next<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>waiter<span class="token punctuation">)</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> w<span class="token punctuation">.</span>n <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> w<span class="token punctuation">.</span>n
		s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
		<span class="token function">close</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>ready<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h4><p>使用时注意：</p>`,3),qo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Acquire",target:"_blank",rel:"noopener noreferrer"},Uo=n("code",null,"golang/sync/semaphore.Weighted.Acquire",-1),Do={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.TryAcquire",target:"_blank",rel:"noopener noreferrer"},Io=n("code",null,"golang/sync/semaphore.Weighted.TryAcquire",-1),Oo={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Release",target:"_blank",rel:"noopener noreferrer"},zo=n("code",null,"golang/sync/semaphore.Weighted.Release",-1),No={href:"https://draveness.me/golang/tree/golang/sync/semaphore.Weighted.Release",target:"_blank",rel:"noopener noreferrer"},To=n("code",null,"golang/sync/semaphore.Weighted.Release",-1),Po=n("h3",{id:"singleflight",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#singleflight","aria-hidden":"true"},"#"),s(" SingleFlight")],-1),Bo={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group",target:"_blank",rel:"noopener noreferrer"},Eo=n("code",null,"golang/sync/singleflight.Group",-1),jo=n("p",null,"常见的使用场景是：我们在使用 Redis 对数据库中的数据进行缓存，发生缓存击穿时，大量的流量都会打到数据库上进而影响服务的尾延时。",-1),Fo=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010755387.png",alt:"golang-query-without-single-flight",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-query-without-single-flight")],-1),Vo={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group",target:"_blank",rel:"noopener noreferrer"},$o=n("code",null,"golang/sync/singleflight.Group",-1),Xo=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010755019.png" alt="golang-extension-single-flight" tabindex="0" loading="lazy"><figcaption>golang-extension-single-flight</figcaption></figure><p>在资源的获取非常昂贵时（例如：访问缓存、数据库），就很适合使用。</p><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> service <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    requestGroup singleflight<span class="token punctuation">.</span>Group
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> request Request<span class="token punctuation">)</span> <span class="token punctuation">(</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> requestGroup<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token comment">// select * from tables</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rows<span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">{</span>
        rows<span class="token punctuation">:</span> rows<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu sync<span class="token punctuation">.</span>Mutex
	m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call
<span class="token punctuation">}</span>

<span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	wg sync<span class="token punctuation">.</span>WaitGroup

	val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	err <span class="token builtin">error</span>

	dups  <span class="token builtin">int</span>
	chans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> Result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>mu</code>：互斥锁</li><li><code>m</code>：哈希表，<code>call</code>保存当前调用的信息</li></ul>`,7),Ho={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},Zo=n("code",null,"golang/sync/singleflight.call",-1),Jo=n("code",null,"val",-1),Yo=n("code",null,"err",-1),Ko={href:"https://draveness.me/golang/tree/sync.WaitGroup.Wait",target:"_blank",rel:"noopener noreferrer"},Qo=n("code",null,"sync.WaitGroup.Wait",-1),np=n("code",null,"dups",-1),sp=n("code",null,"chans",-1),ap=n("h4",{id:"接口-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#接口-4","aria-hidden":"true"},"#"),s(" 接口")],-1),tp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.Do",target:"_blank",rel:"noopener noreferrer"},ep=n("code",null,"golang/sync/singleflight.Group.Do",-1),op={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.DoChan",target:"_blank",rel:"noopener noreferrer"},pp=n("code",null,"golang/sync/singleflight.Group.DoChan",-1),lp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.Do",target:"_blank",rel:"noopener noreferrer"},cp=n("code",null,"golang/sync/singleflight.Group.Do",-1),ip={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},up=n("code",null,"golang/sync/singleflight.call",-1),rp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},dp=n("code",null,"golang/sync/singleflight.call",-1),kp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},vp=n("code",null,"golang/sync/singleflight.call",-1),gp={href:"https://draveness.me/golang/tree/sync.WaitGroup",target:"_blank",rel:"noopener noreferrer"},mp=n("code",null,"sync.WaitGroup",-1),hp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},_p=n("code",null,"golang/sync/singleflight.call",-1),bp=n("li",null,"释放持有的互斥锁",-1),fp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.doCall",target:"_blank",rel:"noopener noreferrer"},yp=n("code",null,"golang/sync/singleflight.Group.doCall",-1),wp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.call",target:"_blank",rel:"noopener noreferrer"},xp=n("code",null,"golang/sync/singleflight.call",-1),Gp=n("li",null,[s("增加 "),n("code",null,"dups"),s(" 计数器，它表示当前重复的调用次数")],-1),Wp=n("li",null,"释放持有的互斥锁",-1),Sp={href:"https://draveness.me/golang/tree/sync.WaitGroup.Wait",target:"_blank",rel:"noopener noreferrer"},Cp=n("code",null,"sync.WaitGroup.Wait",-1),Lp=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">,</span> shared <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>dups<span class="token operator">++</span>
		g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	g<span class="token punctuation">.</span><span class="token function">doCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">doCall</span><span class="token punctuation">(</span>c <span class="token operator">*</span>call<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>chans <span class="token punctuation">{</span>
		ch <span class="token operator">&lt;-</span> Result<span class="token punctuation">{</span>c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>doCall</code>的流程如下：</p>`,3),Mp=n("li",null,[s("运行传入的函数 "),n("code",null,"fn"),s("，该函数的返回值会赋值给 "),n("code",null,"c.val"),s(" 和 "),n("code",null,"c.err"),s("；")],-1),Ap={href:"https://draveness.me/golang/tree/sync.WaitGroup.Done",target:"_blank",rel:"noopener noreferrer"},Rp=n("code",null,"sync.WaitGroup.Done",-1),qp=n("code",null,"call",-1),Up={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.DoChan",target:"_blank",rel:"noopener noreferrer"},Dp=n("code",null,"golang/sync/singleflight.Group.DoChan",-1),Ip=n("h4",{id:"小结-7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结-7","aria-hidden":"true"},"#"),s(" 小结")],-1),Op={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group",target:"_blank",rel:"noopener noreferrer"},zp=n("code",null,"golang/sync/singleflight.Group",-1),Np={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.Do",target:"_blank",rel:"noopener noreferrer"},Tp=n("code",null,"golang/sync/singleflight.Group.Do",-1),Pp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.DoChan",target:"_blank",rel:"noopener noreferrer"},Bp=n("code",null,"golang/sync/singleflight.Group.DoChan",-1),Ep={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group.Forget",target:"_blank",rel:"noopener noreferrer"},jp=n("code",null,"golang/sync/singleflight.Group.Forget",-1),Fp={href:"https://draveness.me/golang/tree/golang/sync/singleflight.Group",target:"_blank",rel:"noopener noreferrer"},Vp=n("code",null,"golang/sync/singleflight.Group",-1),$p=n("li",null,"一旦调用的函数返回了错误，所有在等待的 Goroutine 也都会接收到同样的错误",-1),Xp=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Hp={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/",target:"_blank",rel:"noopener noreferrer"};function Zp(Jp,Yp){const a=c("ExternalLinkIcon");return p(),l("div",null,[u,n("p",null,[n("a",r,[d,t(a)]),s("：")]),k,n("p",null,[n("a",v,[g,t(a)]),s("由两种模式：")]),m,n("p",null,[s("加锁"),n("a",h,[_,t(a)]),s("：")]),b,n("ul",null,[f,n("li",null,[s("状态不是 0 时，"),n("a",y,[w,t(a)]),s("通过自旋（Spinnig）等方式等待锁的释放")])]),n("p",null,[n("a",x,[G,t(a)]),s("的流程如下：")]),W,n("ol",null,[S,n("li",null,[n("a",C,[L,t(a)]),s("函数返回值为 true： "),M])]),n("p",null,[s("进入"),A,s("，调用"),n("a",R,[q,t(a)]),s("和 "),n("a",U,[D,t(a)]),s("执行 30 次的 "),I,s(" 指令，该指令只会占用 CPU 并消耗 CPU 时间：")]),O,n("p",null,[s("然后使用 CAS 函数"),n("a",z,[N,t(a)]),s("更新状态：")]),T,n("p",null,[s("若没有获取锁，则调用 "),n("a",P,[B,t(a)]),s(" 通过信号量保证资源不会被两个 Goroutine 获取。")]),n("p",null,[n("a",E,[j,t(a)]),s("会在方法中不断尝试获取锁并陷入休眠等待信号量的释放，一旦当前 Goroutine 可以获取信号量，就会立刻返回：")]),F,V,n("p",null,[n("a",$,[X,t(a)]),s("：")]),H,n("ul",null,[n("li",null,[s("若该"),n("a",Z,[J,t(a)]),s("返回的新状态等于 0，当前 Goroutine 就成功解锁")]),n("li",null,[s("若该函数返回的新状态不等于 0，则调用"),n("a",Y,[K,t(a)]),s("开始慢解锁")])]),n("p",null,[n("a",Q,[nn,t(a)]),s("先校验锁状态的合法性 — 若当前互斥锁已经被解锁过了会直接抛出异常。")]),sn,n("ul",null,[n("li",null,[s("正常模式下： "),n("ul",null,[an,n("li",null,[s("若互斥锁存在等待者，会通过 "),n("a",tn,[en,t(a)]),s(" 唤醒等待者并移交锁的所有权")])])]),n("li",null,[s("饥饿模式下： 直接调用 "),n("a",on,[pn,t(a)]),s(" 将当前锁交给下一个正在尝试获取锁的等待者，等待者被唤醒后会得到锁，在这时互斥锁还不会退出饥饿状态")])]),ln,cn,n("ul",null,[un,rn,dn,n("li",null,[n("p",null,[s("互斥锁在正常情况下会通过 "),n("a",kn,[vn,t(a)]),s(" 将尝试获取锁的 Goroutine 切换至休眠状态，等待锁的持有者唤醒")])]),gn]),mn,n("ul",null,[n("li",null,[s("当互斥锁"),hn,s("时，调用 "),n("a",_n,[bn,t(a)]),s(" 会直接抛出异常")]),fn,n("li",null,[s("当互斥锁处于"),yn,s("时： "),n("ul",null,[wn,n("li",null,[s("其他情况下会通过 "),n("a",xn,[Gn,t(a)]),s(" 唤醒对应的 Goroutine")])])])]),Wn,n("p",null,[n("a",Sn,[Cn,t(a)]),s("是细粒度的互斥锁，不限制资源的并发读，但是读写、写写操作无法并行执行；适用于读多写少的情景。")]),Ln,n("p",null,[n("a",Mn,[An,t(a)]),s("：")]),Rn,n("p",null,[qn,s("，调用"),n("a",Un,[Dn,t(a)]),s("：")]),In,n("ol",null,[n("li",null,[s("调用结构体持有的 "),n("a",On,[zn,t(a)]),s(" 结构体的 "),n("a",Nn,[Tn,t(a)]),s(" 阻塞后续的写操作： "),Pn]),n("li",null,[s("调用 "),n("a",Bn,[En,t(a)]),s(" 函数"),jn,s("后续的"),Fn]),n("li",null,[s("若仍然有其他 Goroutine "),Vn,s("互斥锁的"),$n,s("，该 Goroutine 会调用"),n("a",Xn,[Hn,t(a)]),s("进入"),Zn,s("状态"),Jn,s("所有"),Yn,s("所有者执行结束后"),Kn,s(),Qn,s(" 信号量将当前协程唤醒")])]),n("p",null,[ns,s("，调用"),n("a",ss,[as,t(a)]),s("：")]),ts,n("ol",null,[n("li",null,[s("调用 "),n("a",es,[os,t(a)]),s(" 函数将 "),ps,s(" 变回正数，释放读锁")]),ls,n("li",null,[s("调用 "),n("a",cs,[is,t(a)]),s(" 释放写锁")])]),us,rs,n("p",null,[ds,s("，"),n("a",ks,[vs,t(a)]),s("：")]),gs,n("ol",null,[n("li",null,[s("若该方法返回负数， 则表示其他 Goroutine 获得了"),ms,s("，当前 Goroutine 就会调用 "),n("a",hs,[_s,t(a)]),s(" 陷入"),bs,s("等待锁的释放")]),fs]),n("p",null,[ys,s("，"),n("a",ws,[xs,t(a)]),s("：")]),Gs,n("ol",null,[Ws,n("li",null,[s("根据 "),n("a",Ss,[Cs,t(a)]),s(" 的返回值不同会分别进行处理： "),n("ul",null,[Ls,n("li",null,[s("若返回值小于零 — 有一个正在执行的写操作，在这时会调用"),n("a",Ms,[As,t(a)]),s(" 方法")])])])]),n("p",null,[n("a",Rs,[qs,t(a)]),s("：")]),Us,n("ul",null,[n("li",null,[s("每次 "),n("a",Ds,[Is,t(a)]),s(" 都会将 "),Os,s(" 其减一，归零时该 Goroutine 会获得写锁")]),zs]),Ns,Ts,Ps,Bs,n("p",null,[n("a",Es,[js,t(a)]),s("：")]),Fs,n("ul",null,[n("li",null,[Vs,s("：保证 "),n("a",$s,[Xs,t(a)]),s(),Hs,s("被通过再赋值的方式"),Zs]),Js]),n("p",null,[n("a",Ys,[Ks,t(a)]),s(" 是一个特殊的私有结构体，"),n("a",Qs,[na,t(a)]),s(" 包中的分析器会在编译期间检查被拷贝的变量中是否包含 "),n("a",sa,[aa,t(a)]),s(" 或者实现了 "),ta,s(" 和 "),ea,s(" 方法，若包含该结构体或者实现了对应的方法就会报出以下错误：")]),oa,n("p",null,[n("a",pa,[la,t(a)]),s("有三个导出方法:")]),n("ol",null,[n("li",null,[n("a",ca,[ia,t(a)])]),n("li",null,[n("a",ua,[ra,t(a)])]),n("li",null,[n("a",da,[ka,t(a)])])]),n("p",null,[n("a",va,[ga,t(a)]),s("：")]),ma,n("p",null,[n("a",ha,[_a,t(a)]),s(":")]),ba,n("p",null,[s("更新 "),n("a",fa,[ya,t(a)]),s(" 中的计数器 "),wa,s("：")]),n("ul",null,[xa,Ga,n("li",null,[s("当计数器归零时，通过 "),n("a",Wa,[Sa,t(a)]),s(" 唤醒处于等待状态的 Goroutine")])]),n("p",null,[n("a",Ca,[La,t(a)]),s("：")]),Ma,n("ul",null,[n("li",null,[s("在计数器大于 0 并且不存在等待的 Goroutine 时，调用 "),n("a",Aa,[Ra,t(a)]),s(" 陷入睡眠")]),qa]),Ua,n("p",null,[s("对于"),n("a",Da,[Ia,t(a)]),s("：")]),n("ul",null,[n("li",null,[n("a",Oa,[za,t(a)]),s(" 必须在 "),n("a",Na,[Ta,t(a)]),s(" 方法"),Pa,s("才能被"),Ba]),n("li",null,[n("a",Ea,[ja,t(a)]),s("只是对 "),n("a",Fa,[Va,t(a)]),s(" 方法的简单封装，")]),n("li",null,[s("可以向 "),n("a",$a,[Xa,t(a)]),s(" 方法传入任意负数（需要保证计数器非负）快速将计数器归零以唤醒等待的 Goroutine")]),n("li",null,[s("可以同时有"),Ha,s(" Goroutine 等待当前 "),n("a",Za,[Ja,t(a)]),s(" 计数器的归零，这些 Goroutine 会被"),Ya])]),Ka,n("p",null,[n("a",Qa,[nt,t(a)]),s("可以保证在 Go 程序运行期间的某段代码只会执行一次：")]),st,n("p",null,[s("只有一个导出的"),n("a",at,[tt,t(a)]),s("，接收一个入参为空的函数：")]),n("ul",null,[et,n("li",null,[s("若传入的函数没有执行过，会调用 "),n("a",ot,[pt,t(a)]),s(" 执行传入的函数")])]),lt,n("p",null,[s("使用"),n("a",ct,[it,t(a)]),s("时：")]),n("ul",null,[n("li",null,[n("a",ut,[rt,t(a)]),s(" 方法中传入的函数只会被执行一次")]),n("li",null,[s("两次调用 "),n("a",dt,[kt,t(a)]),s(" 方法传入不同的函数只会执行"),vt,s("调传入的函数")])]),gt,n("p",null,[n("a",mt,[ht,t(a)]),s("可以让一组的 Goroutine 都在满足特定条件时被唤醒。")]),_t,n("p",null,[n("a",bt,[ft,t(a)]),s("会将当前 Goroutine 陷入休眠状态，执行过程分成以下两个步骤：")]),n("ol",null,[n("li",null,[s("调用 "),n("a",yt,[wt,t(a)]),s(" 将等待计数器加一并"),xt]),n("li",null,[s("调用 "),n("a",Gt,[Wt,t(a)]),s(" 等待其他 Goroutine 的唤醒并"),St])]),Ct,n("p",null,[n("a",Lt,[Mt,t(a)]),s("获取当前 Goroutine 并将它"),At,s("到 Goroutine 通知"),Rt,s("的最"),qt,s(":")]),Ut,n("p",null,[s("然后调用"),n("a",Dt,[It,t(a)]),s("将当前 Goroutine 陷入休眠，直接让出当前处理器的使用权并等待调度器的唤醒。")]),Ot,n("p",null,[n("a",zt,[Nt,t(a)]),s("和 "),n("a",Tt,[Pt,t(a)]),s("用于唤醒休眠的 Goroutine ：")]),n("ul",null,[n("li",null,[n("a",Bt,[Et,t(a)]),s(" 方法会唤醒"),jt,s("的 Goroutine")]),n("li",null,[n("a",Ft,[Vt,t(a)]),s(" 方法会唤醒"),$t,s("中"),Xt,s("的 Goroutine")])]),Ht,n("p",null,[n("a",Zt,[Jt,t(a)]),s("从 "),n("a",Yt,[Kt,t(a)]),s(" 链表中找到满足 "),Qt,s(" 条件的 Goroutine 并通过 "),n("a",ne,[se,t(a)]),s(" 唤醒：")]),ae,n("p",null,[n("a",te,[ee,t(a)]),s(" 会依次通过 "),n("a",oe,[pe,t(a)]),s(" 唤醒链表中 Goroutine：")]),le,n("p",null,[s("使用"),n("a",ce,[ie,t(a)]),s("时：")]),n("ul",null,[n("li",null,[n("a",ue,[re,t(a)]),s(" 在调用之前一定要使用获取互斥锁，否则会触发程序崩溃")]),n("li",null,[n("a",de,[ke,t(a)]),s(),ve,s("的 Goroutine 都是"),ge,s("、"),me,s("的 Goroutine")]),n("li",null,[n("a",he,[_e,t(a)]),s("按照一定顺序"),be,s("等待的"),fe,s(" Goroutine")])]),ye,we,n("p",null,[n("a",xe,[Ge,t(a)]),s("在一组 Goroutine 中提供了同步、错误传播以及上下文取消的功能，例如：")]),We,n("ul",null,[n("li",null,[n("a",Se,[Ce,t(a)]),s("创建一个 Goroutine 并在其中执行传入的函数")]),n("li",null,[n("a",Le,[Me,t(a)]),s("等待所有 Goroutine 全部返回: "),Ae])]),Re,n("ul",null,[n("li",null,[qe,s("：创建 "),n("a",Ue,[De,t(a)]),s(" 时返回的取消函数，用于在多个 Goroutine 之间同步取消信号")]),Ie,Oe]),ze,n("p",null,[n("a",Ne,[Te,t(a)]),s("创建新的 "),n("a",Pe,[Be,t(a)]),s(" 结构体：")]),Ee,n("p",null,[n("a",je,[Fe,t(a)]),s("用于运行新的子任务，执行流程如下：")]),n("ol",null,[n("li",null,[s("调用 "),n("a",Ve,[$e,t(a)]),s(" 增加待处理的任务")]),Xe,He]),Ze,n("ul",null,[n("li",null,[n("a",Je,[Ye,t(a)]),s(" 在出现错误或者等待结束后会调用 "),n("a",Ke,[Qe,t(a)]),s(" 的 "),no,s(" 方法同步取消信号")]),so]),ao,n("p",null,[n("a",to,[eo,t(a)]),s("实现了带权重的信号量，有四个导出方法：")]),n("ol",null,[n("li",null,[n("a",oo,[po,t(a)]),s(" 创建新的信号量")]),n("li",null,[n("a",lo,[co,t(a)]),s(" 阻塞地获取指定权重的资源，若当前没有空闲资源，会陷入休眠等待")]),n("li",null,[n("a",io,[uo,t(a)]),s(" 非阻塞地获取指定权重的资源，若当前没有空闲资源，会直接返回 "),ro]),n("li",null,[n("a",ko,[vo,t(a)]),s(" 用于释放指定权重的资源")])]),go,n("p",null,[n("a",mo,[ho,t(a)]),s("用于获取指定权重的资源，其中包含三种不同情况：")]),n("ol",null,[_o,n("li",null,[s("当需要获取的信号量大于 "),n("a",bo,[fo,t(a)]),s(" 的上限时，由于不可能满足条件会直接返回错误")]),yo]),wo,n("p",null,[n("a",xo,[Go,t(a)]),s("非阻塞地判断当前信号量是否有充足的资源，若有充足的资源会直接立刻返回 "),Wo,s("，否则会返回 "),So,s("：")]),Co,n("p",null,[n("a",Lo,[Mo,t(a)]),s("从头到尾遍历 "),Ao,s(" 列表中全部的等待者，若释放资源后的信号量有充足的剩余资源就会通过 Channel 唤起指定的 Goroutine：")]),Ro,n("ul",null,[n("li",null,[n("a",qo,[Uo,t(a)]),s(" 和 "),n("a",Do,[Io,t(a)]),s(" 都可以用于获取资源，前者会阻塞地获取信号量，后者会非阻塞地获取信号量")]),n("li",null,[n("a",Oo,[zo,t(a)]),s(" 方法会按照先进先出的顺序唤醒可以被唤醒的 Goroutine")]),n("li",null,[s("若一个 Goroutine 获取了较多地资源，由于 "),n("a",No,[To,t(a)]),s(" 的释放策略可能会等待比较长的时间")])]),Po,n("p",null,[n("a",Bo,[Eo,t(a)]),s("能够在一个服务中抑制对下游的多次重复请求。")]),jo,Fo,n("p",null,[n("a",Vo,[$o,t(a)]),s("能够限制对同一个键值对的多次重复请求，减少对下游的瞬时流量。")]),Xo,n("p",null,[n("a",Ho,[Zo,t(a)]),s(" 结构体中的 "),Jo,s(" 和 "),Yo,s(" 字段都只会在执行传入的函数时赋值一次并在 "),n("a",Ko,[Qo,t(a)]),s(" 返回时被读取；"),np,s(" 和 "),sp,s(" 两个字段分别存储了抑制的请求数量以及用于同步结果的 Channel。")]),ap,n("ul",null,[n("li",null,[n("a",tp,[ep,t(a)]),s("： 同步等待的方法")]),n("li",null,[n("a",op,[pp,t(a)]),s("： 返回 Channel 异步等待的方法")])]),n("p",null,[s("调用"),n("a",lp,[cp,t(a)]),s("时都会获取互斥锁，随后判断是否已经存在键对应的 "),n("a",ip,[up,t(a)]),s("：")]),n("ol",null,[n("li",null,[s("当不存在对应的 "),n("a",rp,[dp,t(a)]),s(" 时： "),n("ol",null,[n("li",null,[s("初始化一个新的 "),n("a",kp,[vp,t(a)]),s(" 指针")]),n("li",null,[s("增加 "),n("a",gp,[mp,t(a)]),s(" 持有的计数器")]),n("li",null,[s("将 "),n("a",hp,[_p,t(a)]),s(" 指针添加到映射表")]),bp,n("li",null,[s("阻塞地调用 "),n("a",fp,[yp,t(a)]),s(" 方法等待结果的返回")])])]),n("li",null,[s("当存在对应的 "),n("a",wp,[xp,t(a)]),s(" 时： "),n("ol",null,[Gp,Wp,n("li",null,[s("通过 "),n("a",Sp,[Cp,t(a)]),s(" 等待请求的返回")])])])]),Lp,n("ol",null,[Mp,n("li",null,[s("调用 "),n("a",Ap,[Rp,t(a)]),s(" 方法通知所有等待结果的 Goroutine — 当前函数已经执行完成，可以从 "),qp,s(" 结构体中取出返回值并返回了；")]),n("li",null,[s("获取持有的互斥锁并通过管道将信息同步给使用 "),n("a",Up,[Dp,t(a)]),s(" 方法的 Goroutine")])]),Ip,n("p",null,[s("当需要减少对下游的相同请求时，可以使用 "),n("a",Op,[zp,t(a)]),s(" 来增加吞吐量和服务质量，使用时注意：")]),n("ul",null,[n("li",null,[n("a",Np,[Tp,t(a)]),s(" 和 "),n("a",Pp,[Bp,t(a)]),s(" 一个用于同步阻塞调用传入的函数，一个用于异步调用传入的参数并通过 Channel 接收函数的返回值")]),n("li",null,[n("a",Ep,[jp,t(a)]),s(" 可以通知 "),n("a",Fp,[Vp,t(a)]),s(" 在持有的映射表中删除某个键，接下来对该键的调用就不会等待前面的函数返回了")]),$p]),Xp,n("ol",null,[n("li",null,[n("a",Hp,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/"),t(a)])])])])}const Qp=o(i,[["render",Zp],["__file","06.2.sync-primitives.html.vue"]]);export{Qp as default};
