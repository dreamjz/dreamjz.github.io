import{_ as t,Y as o,Z as p,$ as n,a0 as a,a1 as e,a2 as c,F as i}from"./framework-d955655f.js";const l={},u=c(`<h2 id="_1-题目描述" tabindex="-1"><a class="header-anchor" href="#_1-题目描述" aria-hidden="true">#</a> 1. 题目描述</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请在该数组中找出 和为目标值 <code>target</code> 的 两个 整数，并返回其数组下标。</p><ul><li>每种输入只会对应一个答案</li><li>数组中同一元素不会在答案中重复出现</li><li>可按任意顺序返回答案</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1]

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-分析" tabindex="-1"><a class="header-anchor" href="#_2-分析" aria-hidden="true">#</a> 2. 分析</h2><p>题中要求返回两数之和为 <code>target</code>，即 <code>nums[i] + nums[j] = target</code>，那么我们的目标是固定一个数字 <code>nums[i]</code>，在数组中寻找 <code>target - nums[j]</code>。</p><h2 id="_3-题解" tabindex="-1"><a class="header-anchor" href="#_3-题解" aria-hidden="true">#</a> 3. 题解</h2><h3 id="_3-1-暴力枚举" tabindex="-1"><a class="header-anchor" href="#_3-1-暴力枚举" aria-hidden="true">#</a> 3.1 暴力枚举</h3><p>枚举数组中的每一个数 <code>x</code>，寻找数组中是否存在 <code>target - x</code>。当遍历正个数组需找时，需要注意每一个位于 <code>x</code> 之前的元素已经和 <code>x</code> 匹配过，无需在进行匹配。因为一个元素不能用两次，所以只需要在 <code>x</code> 之后寻找即可。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> x <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析：</p><ul><li>时间复杂度：<em>O(N<sup>2</sup>)</em>，N 为数组元素数量。最坏情况下，任意两个数都要被匹配一次</li><li>空间复杂度：<em>O(1)</em>。</li></ul><h3 id="_3-2-哈希表" tabindex="-1"><a class="header-anchor" href="#_3-2-哈希表" aria-hidden="true">#</a> 3.2 哈希表</h3><p>使用哈希表可以将寻找 <code>target - x</code> 的时间复杂度从 <em>O(N)</em> 降低到 <em>O(1)</em>。</p><p>创建一个哈希表，对于每一个 <code>x</code> ，首先查询哈希表中是否存在 <code>target - x</code> ，然后将 <code>x</code> 插入哈希表中，可以保证 <code>x</code> 不和自己匹配。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    hashTable <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">if</span> j<span class="token punctuation">,</span> ok <span class="token operator">:=</span> hashTable<span class="token punctuation">[</span>target <span class="token operator">-</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        hashTable<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span> 	   
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析：</p><ul><li>时间复杂度：<em>O(N)</em>，N 为数组元素数量。对于每个元素 <code>x</code>，寻找 <code>target - x</code> 的复杂度为 <em>O(1)</em></li><li>空间复杂度：<em>O(N)</em>，N 为数组元素数量。主要是哈希表开销</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,19),d={href:"https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=i("ExternalLinkIcon");return o(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",d,[a("leetcode 题解"),e(s)])]),n("li",null,[n("a",r,[a("两数之和"),e(s)])])])])}const h=t(l,[["render",k],["__file","1_Two_Sum.html.vue"]]);export{h as default};
