import{_ as o,Z as p,$ as i,a0 as s,a1 as n,a2 as e,a3 as t,H as c}from"./framework-09afcf0b.js";const l={},r={href:"https://en.wikipedia.org/wiki/Computer_science",target:"_blank",rel:"noopener noreferrer"},u=s("strong",null,"counting sort",-1),d={href:"https://en.wikipedia.org/wiki/Algorithm",target:"_blank",rel:"noopener noreferrer"},k={href:"https://en.wikipedia.org/wiki/Sorting_algorithm",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Integer",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Integer_sorting",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"Its running time is linear in the number of items and the difference between the maximum key value and the minimum key value, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items.",-1),h=t(`<p>计数排序是一种线性排序算法. 若数组长度为<code>n</code>, 数组元素的最大最小差值为<code>k</code>, 对于<code>k</code><strong>远小于</strong><code>n</code>的场景, 计数排序法的时间复杂度优于其他排序(快速, 归并等).</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">countingSortTmp</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// get max/min number</span>
	maxN<span class="token punctuation">,</span> minN <span class="token operator">:=</span> math<span class="token punctuation">.</span>MinInt<span class="token punctuation">,</span> math<span class="token punctuation">.</span>MaxInt
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
		maxN <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxN<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		minN <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minN<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// count numbers</span>
	cnt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> maxN<span class="token operator">-</span>minN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
		cnt<span class="token punctuation">[</span>n<span class="token operator">-</span>minN<span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// rewrite array</span>
	idx <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> minN<span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> maxN<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> cnt<span class="token punctuation">[</span>n<span class="token operator">-</span>minN<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> n
			idx<span class="token operator">++</span>
			cnt<span class="token punctuation">[</span>n<span class="token operator">-</span>minN<span class="token punctuation">]</span><span class="token operator">--</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> nums
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度: O(n+k), 数组长度<code>n</code>, 最大最小差值<code>k</code>.</p><p>空间复杂度: O(k)</p><p>当<code>k</code>很小时, 效率很高. 当k很大时效率可能不如其他算法.</p><h2 id="_12-2-1-问题75-数组相对排序" tabindex="-1"><a class="header-anchor" href="#_12-2-1-问题75-数组相对排序" aria-hidden="true">#</a> 12.2.1 问题75: 数组相对排序</h2>`,6),g={href:"https://leetcode.cn/problems/0H97ZC/",target:"_blank",rel:"noopener noreferrer"},f=t(`<blockquote><p>给定两个数组，<code>arr1</code> 和 <code>arr2</code>，</p><ul><li><code>arr2</code> 中的元素各不相同</li><li><code>arr2</code> 中的每个元素都出现在 <code>arr1</code> 中</li></ul><p>对 <code>arr1</code> 中的元素进行排序，使 <code>arr1</code> 中项的相对顺序和 <code>arr2</code> 中的相对顺序相同。未在 <code>arr2</code> 中出现过的元素需要按照升序放在 <code>arr1</code> 的末尾。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
输出：[2,2,2,1,4,3,3,9,6,7,19]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li><li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li><li><code>arr2</code> 中的元素 <code>arr2[i]</code> 各不相同</li><li><code>arr2</code> 中的每个元素 <code>arr2[i]</code> 都出现在 <code>arr1</code> 中</li></ul></blockquote><h3 id="_12-2-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_12-2-1-1-分析-题解" aria-hidden="true">#</a> 12.2.1.1 分析&amp;题解</h3><p>数组中的数字都在[0, 1000]范围中, 可以使用计数排序.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">relativeSortArray</span><span class="token punctuation">(</span>arr1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> arr2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token comment">// count num in arr1</span>
    cnt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> arr1 <span class="token punctuation">{</span>
        cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// rewrite arr1</span>
    idx <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token comment">// write num in arr2 first</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> arr2 <span class="token punctuation">{</span>
        <span class="token keyword">for</span> cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            arr1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> n
            idx<span class="token operator">++</span>
            cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// write the rest</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> cnt <span class="token punctuation">{</span>
        <span class="token keyword">for</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            arr1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> i
            idx<span class="token operator">++</span>
            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> arr1
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,5),_={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://en.wikipedia.org/wiki/Counting_sort",target:"_blank",rel:"noopener noreferrer"};function y(x,N){const a=c("ExternalLinkIcon");return p(),i("div",null,[s("blockquote",null,[s("p",null,[n("In "),s("a",r,[n("computer science"),e(a)]),n(", "),u,n(" is an "),s("a",d,[n("algorithm"),e(a)]),n(" for "),s("a",k,[n("sorting"),e(a)]),n(" a collection of objects according to keys that are small positive "),s("a",m,[n("integers"),e(a)]),n("; that is, it is an "),s("a",v,[n("integer sorting"),e(a)]),n(" algorithm. It operates by counting the number of objects that possess distinct key values and applying prefix sum on those counts to determine the positions of each key value in the output sequence.")]),b]),h,s("p",null,[s("a",g,[n("LCR 075. 数组的相对排序"),e(a)])]),f,s("ol",null,[s("li",null,[s("a",_,[n("剑指Offer（专项突破版）"),e(a)])]),s("li",null,[s("a",w,[n("Counting Sort"),e(a)]),n(" wiki")])])])}const C=o(l,[["render",y],["__file","12.2.html.vue"]]);export{C as default};
