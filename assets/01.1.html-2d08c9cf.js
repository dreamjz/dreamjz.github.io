import{_ as o,Y as p,Z as c,$ as n,a0 as s,a1 as t,a2 as e,F as i}from"./framework-d955655f.js";const u={},l=e(`<p>Blazing fast, structured, leveled logging in Go.</p><p>示例代码参见<a href="">zap</a></p><h2 id="_1-quick-start" tabindex="-1"><a class="header-anchor" href="#_1-quick-start" aria-hidden="true">#</a> 1. Quick Start</h2><h3 id="_1-1-installation" tabindex="-1"><a class="header-anchor" href="#_1-1-installation" aria-hidden="true">#</a> 1.1 Installation</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> go.uber.org/zap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-sugared-logger" tabindex="-1"><a class="header-anchor" href="#_1-2-sugared-logger" aria-hidden="true">#</a> 1.2 Sugared Logger</h3><p>In contexts where performance is nice, but not critical, use the <code>SugaredLogger</code>.</p><p>It’s 4-10x faster than other structured logging packages and includes both structured and <code>printf</code>-style APIs.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">,</span> err <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t initialize zap logger: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sugar <span class="token operator">:=</span> logger<span class="token punctuation">.</span><span class="token function">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	url <span class="token operator">:=</span> <span class="token string">&quot;Example URL&quot;</span>
	sugar<span class="token punctuation">.</span><span class="token function">Infow</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch URL&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span>
		<span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	sugar<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to fetch URL %s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>logger.Sync()</code>: flushes buffer, if any</li><li><code>sugar.Infow()</code>: Structured context as loosely typed key-value pairs</li></ul><h3 id="_1-3-logger" tabindex="-1"><a class="header-anchor" href="#_1-3-logger" aria-hidden="true">#</a> 1.3 Logger</h3><p>When performance and type safety are critical, use the <code>Logger</code> . It’s even faster than the <code>SugaredLogger</code> and allocates far less, but it only supported structured logging</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">,</span> err <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t initialize zap logger: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	url <span class="token operator">:=</span> <span class="token string">&quot;example url&quot;</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch URL&quot;</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-overview" tabindex="-1"><a class="header-anchor" href="#_2-overview" aria-hidden="true">#</a> 2. Overview</h2><p>Package zap provides fast, structured, leveled logging.</p><p>For application that log in the hot path, reflection-based serialization and string formatting are prohibitively expensive - they are CPU-intensive and make many small allocations. Put differently, using json.Marhshal and fmt.Fprintf to log tons of interface{} makes your application slow.</p><p>Zap takes a different approach. It includes a reflection-free, zero-allocation JSON encoder, and the base Logger strives to avoid serialization overhead and allocations wherever possible. By building the high-level SugaredLogger on that foundation, zap let users choose when they need to count every allocation and when they’d prefer a more familiar, loosely typed API.</p><h3 id="_2-1-choosing-a-logger" tabindex="-1"><a class="header-anchor" href="#_2-1-choosing-a-logger" aria-hidden="true">#</a> 2.1 Choosing a Logger</h3><p>In contexts where performance is nice, but not critical, use the SugaredLogger. It’s 4-10x faster than other structured logging packages and supports both structured and printf-style loggin. Like log15 and go-kit, the SugaredLogger’s structured logging APIs are loosely typed and accept a variadic number of key-value paires.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>sugar <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> sugar<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
sugar<span class="token punctuation">.</span><span class="token function">Infow</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch URL&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
sugar<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch URL: %s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, loggers are unbuffered. However, since zap’s low-level APIs allow buffering, calling Sync before letting your process exit is a good habit.</p><p>In the rare contexts where every microsecond and every allocation matter, use the Logger. It’s even faster than the SugaredLogger and allocates far less, but it only supports strongly-typed, structured logging.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch URL&quot;</span><span class="token punctuation">,</span>
  zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Choosing between the Logger and SugaredLogger doesn’t need to an application-wide decision: converting between the two is simple and inexpensive.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
suger <span class="token operator">:=</span> logger<span class="token punctuation">.</span><span class="token function">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
plain <span class="token operator">:=</span> sugar<span class="token punctuation">.</span><span class="token function">Desugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-configuring-zap" tabindex="-1"><a class="header-anchor" href="#_2-2-configuring-zap" aria-hidden="true">#</a> 2.2 Configuring Zap</h3><p>The simplest way to build a Logger is to use zap’s opinionated presets: NewExample, NewProduction, and NewDevelopment. These presets build a logger with a single function call:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>logger<span class="token punctuation">,</span> err <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t initialize zap logger: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Presets are fine for small projects, but larger projects and organizations naturally require a bit more customization. For most users, zap’s Config struct strikes the right balance between flexibility and convenience.</p>`,29),r={href:"http://go.uber.org/zap/zapcore",target:"_blank",rel:"noopener noreferrer"},d=n("h3",{id:"_2-3-extending-zap",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-extending-zap","aria-hidden":"true"},"#"),s(" 2.3 Extending Zap")],-1),k={href:"http://go.uber.org/zap/zapcore",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>Similarly, package authors can use the high-performance Encoder and Core implementations in the zapcore package to build their own loggers.</p><h2 id="_3-examples" tabindex="-1"><a class="header-anchor" href="#_3-examples" aria-hidden="true">#</a> 3. Examples</h2><h3 id="_3-1-presets" tabindex="-1"><a class="header-anchor" href="#_3-1-presets" aria-hidden="true">#</a> 3.1 Presets</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;go.uber.org/zap&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Using zap&#39;s preset constructors is the simplest way to get a feel for the</span>
	<span class="token comment">// package, but they don&#39;t allow much customization.</span>
	logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// or NewProduction, or NewDevelopment</span>
	<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://example.com&quot;</span>

	<span class="token comment">// In most circumstances, use the SugaredLogger. It&#39;s 4-10x faster than most</span>
	<span class="token comment">// other structured logging packages and has a familiar, loosely-typed API.</span>
	sugar <span class="token operator">:=</span> logger<span class="token punctuation">.</span><span class="token function">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sugar<span class="token punctuation">.</span><span class="token function">Infow</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to fetch URL.&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// Structured context as loosely typed key-value pairs.</span>
		<span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span>
		<span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	sugar<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to fetch URL: %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>

	<span class="token comment">// In the unusual situations where every microsecond matters, use the</span>
	<span class="token comment">// Logger. It&#39;s even faster than the SugaredLogger, but only supports</span>
	<span class="token comment">// structured logging.</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to fetch URL.&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// Structured context as strongly typed fields.</span>
		zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;Failed to fetch URL.&quot;,&quot;url&quot;:&quot;http://example.com&quot;,&quot;attempt&quot;:3,&quot;backoff&quot;:&quot;1s&quot;}
{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;Failed to fetch URL: http://example.com&quot;}
{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;Failed to fetch URL.&quot;,&quot;url&quot;:&quot;http://example.com&quot;,&quot;attempt&quot;:3,&quot;backoff&quot;:&quot;1s&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种预设的区别：</p><ul><li><p><code>NewDevelopment</code>: builds a development Logger that writes DebugLevel and above logs to standard error in a human-friendly format.</p><p>It&#39;s a shortcut for NewDevelopmentConfig().Build(...Option).</p></li><li><p><code>NewExample</code>: builds a Logger that&#39;s designed for use in zap&#39;s testable examples. It writes DebugLevel and above logs to standard out as JSON, but omits the timestamp and calling function to keep example output short and deterministic</p></li><li><p><code>NewProduction</code>: builds a sensible production Logger that writes InfoLevel and above logs to standard error as JSON.</p><p>It&#39;s a shortcut for NewProductionConfig().Build(...Option).</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	url <span class="token operator">:=</span> <span class="token string">&quot;example&quot;</span>
	devLogger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> devLogger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	devLogger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch url&quot;</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>

	exampleLogger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> exampleLogger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	exampleLogger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch url&quot;</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>

	prodLogger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> prodLogger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	prodLogger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;failed to fetch url&quot;</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;attempt&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zap<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;backoff&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2021-12-20T11:15:52.398+0800    INFO    presets/main.go:13      failed to fetch url     {&quot;url&quot;: &quot;example&quot;, &quot;attempt&quot;: 3, &quot;backoff&quot;: &quot;1s&quot;}
{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;failed to fetch url&quot;,&quot;url&quot;:&quot;example&quot;,&quot;attempt&quot;:3,&quot;backoff&quot;:&quot;1s&quot;}
{&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1639970152.3984973,&quot;caller&quot;:&quot;presets/main.go:27&quot;,&quot;msg&quot;:&quot;failed to fetch url&quot;,&quot;url&quot;:&quot;example&quot;,&quot;attempt&quot;:3,&quot;backoff&quot;:1}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-basic-configuration" tabindex="-1"><a class="header-anchor" href="#_3-2-basic-configuration" aria-hidden="true">#</a> 3.2 Basic Configuration</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/json&quot;</span>

	<span class="token string">&quot;go.uber.org/zap&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// For some users, the presets offered by the NewProduction, NewDevelopment,</span>
	<span class="token comment">// and NewExample constructors won&#39;t be appropriate. For most of those</span>
	<span class="token comment">// users, the bundled Config struct offers the right balance of flexibility</span>
	<span class="token comment">// and convenience. (For more complex needs, see the AdvancedConfiguration</span>
	<span class="token comment">// example.)</span>
	<span class="token comment">//</span>
	<span class="token comment">// See the documentation for Config and zapcore.EncoderConfig for all the</span>
	<span class="token comment">// available options.</span>
	rawJSON <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">\`{
	  &quot;level&quot;: &quot;debug&quot;,
	  &quot;encoding&quot;: &quot;json&quot;,
	  &quot;outputPaths&quot;: [&quot;stdout&quot;, &quot;/tmp/logs&quot;],
	  &quot;errorOutputPaths&quot;: [&quot;stderr&quot;],
	  &quot;initialFields&quot;: {&quot;foo&quot;: &quot;bar&quot;},
	  &quot;encoderConfig&quot;: {
	    &quot;messageKey&quot;: &quot;message&quot;,
	    &quot;levelKey&quot;: &quot;level&quot;,
	    &quot;levelEncoder&quot;: &quot;lowercase&quot;
	  }
	}\`</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> cfg zap<span class="token punctuation">.</span>Config
	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>rawJSON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	logger<span class="token punctuation">,</span> err <span class="token operator">:=</span> cfg<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;logger construction succeeded&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-advanced-configuration" tabindex="-1"><a class="header-anchor" href="#_3-3-advanced-configuration" aria-hidden="true">#</a> 3.3 Advanced Configuration</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;go.uber.org/zap&quot;</span>
	<span class="token string">&quot;go.uber.org/zap/zapcore&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// The bundled Config struct only supports the most common configuration</span>
	<span class="token comment">// options. More complex needs, like splitting logs between multiple files</span>
	<span class="token comment">// or writing to non-file outputs, require use of the zapcore package.</span>
	<span class="token comment">//</span>
	<span class="token comment">// In this example, imagine we&#39;re both sending our logs to Kafka and writing</span>
	<span class="token comment">// them to the console. We&#39;d like to encode the console output and the Kafka</span>
	<span class="token comment">// topics differently, and we&#39;d also like special treatment for</span>
	<span class="token comment">// high-priority logs.</span>

	<span class="token comment">// First, define our level-handling logic.</span>
	highPriority <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">LevelEnablerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>lvl zapcore<span class="token punctuation">.</span>Level<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> lvl <span class="token operator">&gt;=</span> zapcore<span class="token punctuation">.</span>ErrorLevel
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	lowPriority <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">LevelEnablerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>lvl zapcore<span class="token punctuation">.</span>Level<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> lvl <span class="token operator">&lt;</span> zapcore<span class="token punctuation">.</span>ErrorLevel
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// Assume that we have clients for two Kafka topics. The clients implement</span>
	<span class="token comment">// zapcore.WriteSyncer and are safe for concurrent use. (If they only</span>
	<span class="token comment">// implement io.Writer, we can use zapcore.AddSync to add a no-op Sync</span>
	<span class="token comment">// method. If they&#39;re not safe for concurrent use, we can add a protecting</span>
	<span class="token comment">// mutex with zapcore.Lock.)</span>
	topicDebugging <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">AddSync</span><span class="token punctuation">(</span>ioutil<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span>
	topicErrors <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">AddSync</span><span class="token punctuation">(</span>ioutil<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span>

	<span class="token comment">// High-priority output should also go to standard error, and low-priority</span>
	<span class="token comment">// output should also go to standard out.</span>
	consoleDebugging <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>
	consoleErrors <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span>

	<span class="token comment">// Optimize the Kafka output for machine consumption and the console output</span>
	<span class="token comment">// for human operators.</span>
	kafkaEncoder <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewJSONEncoder</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">NewProductionEncoderConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	consoleEncoder <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewConsoleEncoder</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">NewDevelopmentEncoderConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Join the outputs, encoders, and level-handling functions into</span>
	<span class="token comment">// zapcore.Cores, then tee the four cores together.</span>
	core <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewTee</span><span class="token punctuation">(</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>kafkaEncoder<span class="token punctuation">,</span> topicErrors<span class="token punctuation">,</span> highPriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>consoleEncoder<span class="token punctuation">,</span> consoleErrors<span class="token punctuation">,</span> highPriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>kafkaEncoder<span class="token punctuation">,</span> topicDebugging<span class="token punctuation">,</span> lowPriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>consoleEncoder<span class="token punctuation">,</span> consoleDebugging<span class="token punctuation">,</span> lowPriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>

	<span class="token comment">// From a zapcore.Core, it&#39;s easy to construct a Logger.</span>
	logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;constructed a logger&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-log-rotation" tabindex="-1"><a class="header-anchor" href="#_4-log-rotation" aria-hidden="true">#</a> 4. Log rotation</h2>`,14),m={href:"https://godoc.org/gopkg.in/natefinch/lumberjack.v2",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"gopkg.in/natefinch/lumberjack.v2",-1),b=n("code",null,"zapcore.WriteSyncer",-1),f=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> gopkg.in/natefinch/lumberjack.v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10000</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// lumberjack.Logger is already safe for concurrent use, so we don&#39;t need to</span>
	<span class="token comment">// lock it.</span>
	w <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">AddSync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lumberjack<span class="token punctuation">.</span>Logger<span class="token punctuation">{</span>
		Filename<span class="token punctuation">:</span>   <span class="token string">&quot;./logs/foo.log&quot;</span><span class="token punctuation">,</span>
		MaxSize<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// megabytes</span>
		MaxBackups<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
		MaxAge<span class="token punctuation">:</span>     <span class="token number">28</span><span class="token punctuation">,</span> <span class="token comment">// days</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	consoleSyncer <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>

	fileEncoder <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewJSONEncoder</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">NewDevelopmentEncoderConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	consoleEncoder <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewConsoleEncoder</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">NewDevelopmentEncoderConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">//syncer := zapcore.NewMultiWriteSyncer(w)</span>
	<span class="token comment">//core := zapcore.NewCore(</span>
	<span class="token comment">//	zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig()),</span>
	<span class="token comment">//	syncer,</span>
	<span class="token comment">//	zap.InfoLevel,</span>
	<span class="token comment">//)</span>
	core <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewTee</span><span class="token punctuation">(</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>fileEncoder<span class="token punctuation">,</span> w<span class="token punctuation">,</span> zap<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span><span class="token punctuation">,</span>
		zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>consoleEncoder<span class="token punctuation">,</span> consoleSyncer<span class="token punctuation">,</span> zap<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;log rotation: &quot;</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If MaxBackups and MaxAge are both 0, no old log files will be deleted.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,4),h={href:"https://pkg.go.dev/go.uber.org/zap#section-readme",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/uber-go/zap/blob/master/FAQ.md",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/natefinch/lumberjack",target:"_blank",rel:"noopener noreferrer"};function y(z,x){const a=i("ExternalLinkIcon");return p(),c("div",null,[l,n("p",null,[s("More unusual configurations ( splitting output between files, sending logs to a message queue, etc.) are possible, but require direct use of "),n("a",r,[s("go.uber.org/zap/zapcore"),t(a)]),s(".")]),d,n("p",null,[s("The zap package itself is a relatively thin wrapper around the interface in "),n("a",k,[s("go.uber.org/zap/zapcore"),t(a)]),s(". Extending zap to support a new encoding ( e.g. BSON), a new log sink ( e.g. Kafka), or something more exotic (perhaps an exception aggregation service, like Sentry or Rollbar ) typically requires implementing the zapcore.Encoder, zapcore.WriteSyncer, or zapcore.Core interfaces.")]),v,n("p",null,[s("Zap doesn’t natively support rotating log files. It’s easy to integrate a log rotation package like "),n("a",m,[g,t(a)]),s(" as a "),b]),f,n("ol",null,[n("li",null,[n("a",h,[s("zap"),t(a)]),s(" docs")]),n("li",null,[n("a",q,[s("FAQ"),t(a)]),s(" zap FAQ")]),n("li",null,[n("a",w,[s("lumberjack"),t(a)]),s(" github repo")])])])}const _=o(u,[["render",y],["__file","01.1.html.vue"]]);export{_ as default};
