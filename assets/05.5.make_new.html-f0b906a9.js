import{_ as p,Z as o,$ as c,a0 as n,a2 as t,a1 as s,a4 as e,H as l}from"./framework-d03928c9.js";const i={},u=e('<p><code>make</code>和<code>new</code>都用于初始化变量：</p><ul><li><code>make</code> 的作用是初始化内置的数据结构 <ul><li>切片</li><li>哈希表</li><li>Channel</li></ul></li><li><code>new</code>的作用是根据传入的类型<strong>分配</strong>一片<strong>内存</strong>空间并<strong>返回</strong>指向这片内存空间的<strong>指针</strong></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281924334.png" alt="golang-make-and-new" tabindex="0" loading="lazy"><figcaption>golang-make-and-new</figcaption></figure><h2 id="_5-5-1-make" tabindex="-1"><a class="header-anchor" href="#_5-5-1-make" aria-hidden="true">#</a> 5.5.1 make</h2><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281948014.png" alt="golang-make-typecheck" tabindex="0" loading="lazy"><figcaption>golang-make-typecheck</figcaption></figure><p>编译期会将<code>make</code>转换成<code>OMAKE</code>节点，并根据参数不同，转换成：</p><ul><li><code>OMAKESLICE</code>：初始化slice</li><li><code>OMAKEMAP</code>：初始化哈希表</li><li><code>OMAKECHAN</code>：初始化channel</li></ul><h2 id="_5-5-2-new" tabindex="-1"><a class="header-anchor" href="#_5-5-2-new" aria-hidden="true">#</a> 5.5.2 new</h2><p>编译期会在中间代码生成阶段使用两个函数处理：</p>',9),r={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.callnew",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"cmd/compile/internal/gc.callnew",-1),d=n("code",null,"ONEWOBJ",-1),m={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.expr",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"cmd/compile/internal/gc.state.expr",-1),g=n("li",null,[s("如果申请的空间为 0，就会返回一个表示空指针的 "),n("code",null,"zerobase"),s(" 变量")],-1),b={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"runtime.newobject",-1),f=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">callnew</span><span class="token punctuation">(</span>t <span class="token operator">*</span>types<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	n <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>ONEWOBJ<span class="token punctuation">,</span> <span class="token function">typename</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">expr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ONEWOBJ<span class="token punctuation">:</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">newValue1A</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpAddr<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> zerobaseSym<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sb<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		typ <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
		vv <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">rtcall</span><span class="token punctuation">(</span>newobject<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>n<span class="token punctuation">.</span>Type<span class="token punctuation">}</span><span class="token punctuation">,</span> typ<span class="token punctuation">)</span>
		<span class="token keyword">return</span> vv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，无论是直接使用 <code>new</code>，还是使用 <code>var</code> 初始化变量，它们在编译器看来都是 <code>ONEW</code> 和 <code>ODCL</code> 节点。</p>`,2),_={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkstmt",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"cmd/compile/internal/gc.walkstmt",-1),y={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"runtime.newobject",-1),O=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkstmt</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ODCL<span class="token punctuation">:</span>
		v <span class="token operator">:=</span> n<span class="token punctuation">.</span>Left
		<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> PAUTOHEAP <span class="token punctuation">{</span>
			<span class="token keyword">if</span> prealloc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				prealloc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">callnew</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			nn <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> v<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Param<span class="token punctuation">.</span>Heapaddr<span class="token punctuation">,</span> prealloc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
			nn<span class="token punctuation">.</span><span class="token function">SetColas</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
			nn <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>nn<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token function">walkstmt</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> ONEW<span class="token punctuation">:</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Esc <span class="token operator">==</span> EscNone <span class="token punctuation">{</span>
			r <span class="token operator">:=</span> <span class="token function">temp</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			r <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			r <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
			init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
			r <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			r <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
			n <span class="token operator">=</span> r
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			n <span class="token operator">=</span> <span class="token function">callnew</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果通过 <code>var</code> 或者 <code>new</code> 创建的变量不需要在当前作用域外生存，例如不用作为返回值返回给调用方，那么就不需要初始化在堆上。</p>`,2),E={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.newobject",-1),A={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.mallocgc",-1),T=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newobject</span><span class="token punctuation">(</span>typ <span class="token operator">*</span>_type<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>typ<span class="token punctuation">.</span>size<span class="token punctuation">,</span> typ<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-5-3-小结" tabindex="-1"><a class="header-anchor" href="#_5-5-3-小结" aria-hidden="true">#</a> 5.5.3 小结</h2><p><code>make</code> 和 <code>new</code> 关键字的实现原理：</p><ul><li><code>make</code> 关键字的作用是创建切片、哈希表和 Channel 等内置的数据结构</li><li><code>new</code> 的作用是为类型申请一片内存空间，并返回指向这片内存的指针</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,5),C={href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/",target:"_blank",rel:"noopener noreferrer"};function S(z,L){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[k,t(a)]),s(" 会将关键字转换成 "),d,s(" 类型的节点")]),n("li",null,[n("a",m,[v,t(a)]),s(" 会根据申请空间的大小分两种情况处理： "),n("ol",null,[g,n("li",null,[s("在遇到其他情况时会将关键字转换成 "),n("a",b,[h,t(a)]),s(" 函数")])])])]),f,n("p",null,[s("如果变量会逃逸到堆上，这些节点在这一阶段都会被 "),n("a",_,[w,t(a)]),s(" 转换成通过 "),n("a",y,[x,t(a)]),s(" 函数并在堆上申请内存：")]),O,n("p",null,[n("a",E,[N,t(a)]),s(" 函数会获取传入类型占用空间的大小，调用 "),n("a",A,[j,t(a)]),s(" 在堆上申请一片内存空间并返回指向这片内存空间的指针：")]),T,n("ol",null,[n("li",null,[n("a",C,[s("https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/"),t(a)])])])])}const V=p(i,[["render",S],["__file","05.5.make_new.html.vue"]]);export{V as default};
