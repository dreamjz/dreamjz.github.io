import{_ as e,Z as p,$ as o,a0 as n,a1 as s,a2 as t,a4 as c,H as i}from"./framework-d03928c9.js";const l={},u=n("h2",{id:"_4-1-1-调用惯例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-1-1-调用惯例","aria-hidden":"true"},"#"),s(" 4.1.1 调用惯例")],-1),r=n("h3",{id:"c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c","aria-hidden":"true"},"#"),s(" C")],-1),d={href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer"},m=c(`<p>以<code>gcc</code>编译器为例（备注：我用的是windows的版本，原书使用linux）：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309252038761.png" alt="image-20230925203832811" tabindex="0" loading="lazy"><figcaption>image-20230925203832811</figcaption></figure><p>C代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译之后：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>main:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	$2, %esi  // 设置第二个参数
	movl	$1, %edi  // 设置第一个参数
	call	my_function
	movl	%eax, -4(%rbp)
my_function:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)    // 取出第一个参数，放到栈上
	movl	%esi, -8(%rbp)    // 取出第二个参数，放到栈上
	movl	-8(%rbp), %eax    // eax = esi = 1
	movl	-4(%rbp), %edx    // edx = edi = 2
	addl	%edx, %eax        // eax = eax + edx = 1 + 2 = 3
	popq	%rbp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以看出调用过程如下：</p><ol><li>在 <code>my_function</code> 调用前，调用方 <code>main</code> 函数将 <code>my_function</code> 的两个参数分别存到 edi 和 esi 寄存器中</li><li>在 <code>my_function</code> 调用时，它会将寄存器 edi 和 esi 中的数据存储到 eax 和 edx 两个寄存器中，随后通过汇编指令 <code>addl</code> 计算两个入参之和</li><li>在 <code>my_function</code> 调用后，使用寄存器 eax 传递返回值，<code>main</code> 函数将 <code>my_function</code> 的返回值存储到栈上的 <code>i</code> 变量中</li></ol><p>若将参数增加到8个:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg8<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2 <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> arg8<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的汇编代码会发生改变：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>main:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp     // 为参数传递申请 16 字节的栈空间
	movl	$8, 8(%rsp)   // 传递第 8 个参数
	movl	$7, (%rsp)    // 传递第 7 个参数
	movl	$6, %r9d
	movl	$5, %r8d
	movl	$4, %ecx
	movl	$3, %edx
	movl	$2, %esi
	movl	$1, %edi
	call	my_function
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main</code> 函数调用 <code>my_function</code> 时，前六个参数会使用 edi、esi、edx、ecx、r8d 和 r9d 六个寄存器传递。</p><p>寄存器的使用顺序也是调用惯例的一部分，函数的第一个参数一定会使用 edi 寄存器，第二个参数使用 esi 寄存器，以此类推。</p><p>可以看到第7,8个参数没有使用寄存器来存储，而是使用栈：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309252148185.png" alt="c-function-call-stack" tabindex="0" loading="lazy"><figcaption>c-function-call-stack</figcaption></figure><p>上图中 rbp 寄存器会存储函数调用栈的基址指针，即属于 <code>main</code> 函数的栈空间的起始位置，而另一个寄存器 rsp 存储的是 <code>main</code> 函数调用栈结束的位置，这两个寄存器共同表示了函数的栈空间。</p><p>在调用 <code>my_function</code> 之前，<code>main</code> 函数通过 <code>subq $16, %rsp</code> 指令分配了 16 个字节的栈地址，随后将第六个以上的参数按照从右到左的顺序存入栈中，即第八个和第七个，余下的六个参数会通过寄存器传递，接下来运行的 <code>call my_function</code> 指令会调用</p><p><code>my_function</code> 函数：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>my_function:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)    // rbp-4 = edi = 1
	movl	%esi, -8(%rbp)    // rbp-8 = esi = 2
	...
	movl	-8(%rbp), %eax    // eax = 2
	movl	-4(%rbp), %edx    // edx = 1
	addl	%eax, %edx        // edx = eax + edx = 3
	...
	movl	16(%rbp), %eax    // eax = 7
	addl	%eax, %edx        // edx = eax + edx = 28
	movl	24(%rbp), %eax    // eax = 8
	addl	%edx, %eax        // edx = eax + edx = 36
	popq	%rbp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所述，C语言的函数调用参数都是通过<strong>寄存器</strong>和<strong>栈</strong>来传递的：</p><ul><li>参数个数<strong>小于等于</strong> 6 个，会按照顺序使用寄存器edi、esi、edx、ecx、r8d 和 r9d传递参数</li><li>参数个数<strong>大于</strong> 6个，超过 6 个的部分将会通过<strong>从右至左</strong>的顺序入栈</li></ul><p>函数的返回值是通过寄存器 eax传递的，因为只使用了一个寄存器存储返回值，所以C的函数不能同时返回多个值。</p><h3 id="go" tabindex="-1"><a class="header-anchor" href="#go" aria-hidden="true">#</a> Go</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>go tool compile -S -N -l main.go</code>（若不使用<code>-N -l</code>编译器会进行优化，代码有很大差别，<code>-N disable optimizations</code>，禁用优化，<code>-l disable inlining</code>；编译出来的<code>main.o</code>无法直接阅读，需要使用<code>go tool objdump main.o</code>转化成可读文本）</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>&quot;&quot;.main STEXT size=68 args=0x0 locals=0x28
 (main.go:7)	MOVQ	(TLS), CX
 (main.go:7)	CMPQ	SP, 16(CX)
 (main.go:7)	JLS	61
 (main.go:7)	SUBQ	$40, SP      // 分配 40 字节栈空间
 (main.go:7)	MOVQ	BP, 32(SP)   // 将基址指针存储到栈上
 (main.go:7)	LEAQ	32(SP), BP
 (main.go:8)	MOVQ	$66, (SP)    // 第一个参数
 (main.go:8)	MOVQ	$77, 8(SP)   // 第二个参数
 (main.go:8)	CALL	&quot;&quot;.myFunction(SB)
 (main.go:9)	MOVQ	32(SP), BP
 (main.go:9)	ADDQ	$40, SP
 (main.go:9)	RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以得出<code>main</code> 函数调用 <code>myFunction</code> 之前的栈</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309252213012.png" alt="golang-function-call-stack-before-calling" tabindex="0" loading="lazy"><figcaption>golang-function-call-stack-before-calling</figcaption></figure><p><code>main</code> 函数通过 <code>SUBQ $40, SP</code> 指令一共在栈上分配了 40 字节的内存空间：</p><table><thead><tr><th>空间</th><th>大小</th><th>作用</th></tr></thead><tbody><tr><td>SP+32 ~ BP</td><td>8 字节</td><td><code>main</code> 函数的栈基址指针</td></tr><tr><td>SP+16 ~ SP+32</td><td>16 字节</td><td>函数 <code>myFunction</code> 的两个返回值</td></tr><tr><td>SP ~ SP+16</td><td>16 字节</td><td>函数 <code>myFunction</code> 的两个参数</td></tr></tbody></table><p>Go 的函数参数也是<strong>从右到左</strong>入栈，之后调用汇编指令 <code>CALL &quot;&quot;.myFunction(SB)</code>，这个指令首先会将 <code>main</code> 的返回地址存入栈中，然后改变当前的栈指针 SP 并执行 <code>myFunction</code> 的汇编指令：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>&quot;&quot;.myFunction STEXT nosplit size=49 args=0x20 locals=0x0
(main.go:3)	MOVQ	$0, &quot;&quot;.~r2+24(SP) // 初始化第一个返回值
(main.go:3)	MOVQ	$0, &quot;&quot;.~r3+32(SP) // 初始化第二个返回值
(main.go:4)	MOVQ	&quot;&quot;.a+8(SP), AX    // AX = 66
(main.go:4)	ADDQ	&quot;&quot;.b+16(SP), AX   // AX = AX + 77 = 143
(main.go:4)	MOVQ	AX, &quot;&quot;.~r2+24(SP) // (24)SP = AX = 143
(main.go:4)	MOVQ	&quot;&quot;.a+8(SP), AX    // AX = 66
(main.go:4)	SUBQ	&quot;&quot;.b+16(SP), AX   // AX = AX - 77 = -11
(main.go:4)	MOVQ	AX, &quot;&quot;.~r3+32(SP) // (32)SP = AX = -11
(main.go:4)	RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前函数在执行时首先会将 <code>main</code> 函数中预留的两个返回值地址置成 <code>int</code> 类型的默认值 0，然后根据栈的相对位置获取参数并进行加减操作并将值存回栈中，在 <code>myFunction</code> 函数返回之间，栈中的数据如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309252215346.png" alt="golang-function-call-stack-before-return" tabindex="0" loading="lazy"><figcaption>golang-function-call-stack-before-return</figcaption></figure><p>在 <code>myFunction</code> 返回后，<code>main</code> 函数会通过以下的指令来恢复栈基址指针并销毁已经失去作用的 40 字节栈内存：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>(main.go:9)    MOVQ    32(SP), BP
(main.go:9)    ADDQ    $40, SP
(main.go:9)    RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="两种方式的对比" tabindex="-1"><a class="header-anchor" href="#两种方式的对比" aria-hidden="true">#</a> 两种方式的对比</h3><p>C 语言和 Go 语言在设计函数的调用惯例时选择了不同的实现：</p><ul><li>C 同时使用寄存器和栈传递参数，使用 eax 寄存器传递返回值</li><li>Go 使用栈传递参数和返回值</li></ul><p>这两种设计的优点和缺点：</p><ul><li>C 语言的方式能够极大地减少函数调用的额外开销，但是也增加了实现的复杂度； <ul><li>CPU 访问栈的开销比访问寄存器高几十倍；</li><li>需要单独处理函数参数过多的情况；</li></ul></li><li>Go 语言的方式能够降低实现的复杂度并支持多返回值，但是牺牲了函数调用的性能； <ul><li>不需要考虑超过寄存器数量的参数应该如何传递；</li><li>不需要考虑不同架构上的寄存器差异；</li><li>函数入参和出参的内存空间需要在栈上进行分配；</li></ul></li></ul><h2 id="_4-1-2-参数传递" tabindex="-1"><a class="header-anchor" href="#_4-1-2-参数传递" aria-hidden="true">#</a> 4.1.2 参数传递</h2><p>不同的语言函数参数传递选择的方案不同，一般分为两种：</p><ul><li>传<strong>值</strong>：函数调用时会对参数进行拷贝，调用方和被调用方持有不相关的两份数据</li><li>传<strong>引用</strong>：函数调用传递参数的指针，被调用方和调用方对数据的更改会相互影响</li></ul><p>Golang 中的函数只有<strong>值传递</strong>的方式，<strong>无论是传递基本类型、结构体还是指针，都会对传递的参数进行拷贝</strong>。</p><h3 id="整型和数组" tabindex="-1"><a class="header-anchor" href="#整型和数组" aria-hidden="true">#</a> 整型和数组</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> arr <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;in my_funciton - i=(%d, %p) arr=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">30</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;before calling - i=(%d, %p) arr=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>
	<span class="token function">myFunction</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;after  calling - i=(%d, %p) arr=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
before calling <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0b8</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0d0</span><span class="token punctuation">)</span>
in my_funciton <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0xc00001c100</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c110</span><span class="token punctuation">)</span>
after  calling <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0b8</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0d0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若在函数中修改参数的值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> arr <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">=</span> <span class="token number">29</span>
	arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;in my_funciton - i=(%d, %p) arr=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
before calling <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0b8</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0d0</span><span class="token punctuation">)</span>
in my_funciton <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">0xc00001c100</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c110</span><span class="token punctuation">)</span>
after  calling <span class="token operator">-</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0b8</span><span class="token punctuation">)</span> arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">66</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xc00001c0d0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上可以看出，<strong>Go 语言的整型和数组类型都是值传递的</strong>。</p><p>若数组非常的大，那么会对性能造成影响。</p><h3 id="结构体和指针" tabindex="-1"><a class="header-anchor" href="#结构体和指针" aria-hidden="true">#</a> 结构体和指针</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">type</span> MyStruct <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        i <span class="token builtin">int</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>a MyStruct<span class="token punctuation">,</span> b <span class="token operator">*</span>MyStruct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">31</span>
        b<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">41</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;in my_function - a=(%d, %p) b=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">:=</span> MyStruct<span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>
        b <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyStruct<span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;before calling - a=(%d, %p) b=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
        <span class="token function">myFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;after calling  - a=(%d, %p) b=(%v, %p)\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>before calling - <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span>, 0xc00001c0b8<span class="token punctuation">)</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">}</span>, 0xc00000a028<span class="token punctuation">)</span>
<span class="token keyword">in</span> my_function - <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">}</span>, 0xc00001c0f0<span class="token punctuation">)</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">{</span><span class="token number">41</span><span class="token punctuation">}</span>, 0xc00000a038<span class="token punctuation">)</span>
after calling  - <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span>, 0xc00001c0b8<span class="token punctuation">)</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">{</span><span class="token number">41</span><span class="token punctuation">}</span>, 0xc00000a028<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出：</p><ul><li>传递结构体时，拷贝结构体的所有内容</li><li>传递结构体的指针时，拷贝结构体的指针</li></ul><p>因为结构体在内存中是连续的，修改代码简单分析结构体的内存布局：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>ms <span class="token operator">*</span>MyStruct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ptr <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// 指针移动</span>
		c <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>c <span class="token operator">+=</span> i <span class="token operator">+</span> <span class="token number">1</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%p] %d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ms <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyStruct<span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span>
	<span class="token function">myFunc</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%p] %+v&quot;</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token operator">*</span>ms<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[0xc00001c0d0] 11
[0xc00001c0d8] 22
[0xc00001c0d0] {i:11 j:22}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码：</p><ol><li>获取变量<code>ms</code>的指针</li><li>将<code>ms</code>指针转换成<code>*int</code>型，此时指针指向第一个字段<code>i</code></li><li>再将指针移动 8 个字节（因为操作系统64位，int 型8个字节），此时指向第二个字段</li></ol><p>若将其编译成汇编：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>  main.go:8             0xd26                   48c7042400000000        MOVQ $0x0, 0(SP)
  main.go:9             0xd2e                   488b442418              MOVQ 0x18(SP), AX 
  main.go:9             0xd33                   48890424                MOVQ AX, 0(SP)
  main.go:9             0xd37                   488b6c2408              MOVQ 0x8(SP), BP
  main.go:9             0xd3c                   4883c410                ADDQ $0x10, SP
  main.go:9             0xd40                   c3                      RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当参数是指针时，复制引用，然后将复制后的指针作为返回值传递回调用方。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309252250109.png" alt="golang-pointer-as-argument" tabindex="0" loading="lazy"><figcaption>golang-pointer-as-argument</figcaption></figure><p>综上，对于结构体和指针都是<strong>值传递</strong>的形式。</p><p>所以在面对比较大的数组或结构体时，应使用指针作为函数参数，避免出现数据拷贝而影响性能。</p><h3 id="_4-1-3-小结" tabindex="-1"><a class="header-anchor" href="#_4-1-3-小结" aria-hidden="true">#</a> 4.1.3 小结</h3><p>Golang 的函数调用：</p><ol><li>函数<strong>参数</strong>按照<strong>从右至左</strong>的顺序入栈</li><li>函数的<strong>返回值</strong>通过<strong>栈</strong>传递，并由<strong>调用者</strong>预先分配空间</li><li>函数的参数都是<strong>值传递</strong>，函数参数会进行复制</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,72),v={href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-function-call/",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,r,n("p",null,[s("使用 "),n("a",d,[s("gcc"),t(a)]),s("或者 "),n("a",k,[s("clang"),t(a)]),s(" 将 C 语言编译成汇编代码是分析其调用惯例的最好方法，从汇编语言中可以了解函数调用的具体过程。")]),m,n("ol",null,[n("li",null,[n("a",v,[s("https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-function-call/"),t(a)])])])])}const h=e(l,[["render",b],["__file","04.1.function.html.vue"]]);export{h as default};
