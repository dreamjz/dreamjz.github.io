const l=JSON.parse('{"key":"v-5208c422","path":"/note/typescript/quick_start.html","title":"Typescript Quick Start","lang":"zh-CN","frontmatter":{"title":"Typescript Quick Start","date":"2023-05-15T00:00:00.000Z","order":1,"category":["Note","Frontend","TypeScript"],"tag":["Tutorial"]},"headers":[{"level":2,"title":"1. Introduction","slug":"_1-introduction","link":"#_1-introduction","children":[]},{"level":2,"title":"2. Compiler","slug":"_2-compiler","link":"#_2-compiler","children":[{"level":3,"title":"2.1 Installation","slug":"_2-1-installation","link":"#_2-1-installation","children":[]},{"level":3,"title":"2.2 Configuration","slug":"_2-2-configuration","link":"#_2-2-configuration","children":[]},{"level":3,"title":"2.3 Run code in command line","slug":"_2-3-run-code-in-command-line","link":"#_2-3-run-code-in-command-line","children":[]}]},{"level":2,"title":"3. Syntax","slug":"_3-syntax","link":"#_3-syntax","children":[{"level":3,"title":"3.1 Hello World","slug":"_3-1-hello-world","link":"#_3-1-hello-world","children":[]},{"level":3,"title":"3.2 Comment","slug":"_3-2-comment","link":"#_3-2-comment","children":[]}]},{"level":2,"title":"4. Variable","slug":"_4-variable","link":"#_4-variable","children":[{"level":3,"title":"4.1 命名规则","slug":"_4-1-命名规则","link":"#_4-1-命名规则","children":[]},{"level":3,"title":"4.2 声明","slug":"_4-2-声明","link":"#_4-2-声明","children":[]},{"level":3,"title":"4.3 作用域","slug":"_4-3-作用域","link":"#_4-3-作用域","children":[]}]},{"level":2,"title":"5. Operator","slug":"_5-operator","link":"#_5-operator","children":[{"level":3,"title":"5.1 算术运算符","slug":"_5-1-算术运算符","link":"#_5-1-算术运算符","children":[]},{"level":3,"title":"5.2 关系运算","slug":"_5-2-关系运算","link":"#_5-2-关系运算","children":[]},{"level":3,"title":"5.3 逻辑运算","slug":"_5-3-逻辑运算","link":"#_5-3-逻辑运算","children":[]},{"level":3,"title":"5.4 位运算","slug":"_5-4-位运算","link":"#_5-4-位运算","children":[]},{"level":3,"title":"5.5 赋值运算符","slug":"_5-5-赋值运算符","link":"#_5-5-赋值运算符","children":[]},{"level":3,"title":"5.6 三元运算符","slug":"_5-6-三元运算符","link":"#_5-6-三元运算符","children":[]},{"level":3,"title":"5.7 类型运算符","slug":"_5-7-类型运算符","link":"#_5-7-类型运算符","children":[]}]},{"level":2,"title":"6. Type","slug":"_6-type","link":"#_6-type","children":[{"level":3,"title":"6.1 never","slug":"_6-1-never","link":"#_6-1-never","children":[]},{"level":3,"title":"6.2 enum","slug":"_6-2-enum","link":"#_6-2-enum","children":[]}]},{"level":2,"title":"7. Control flow statements","slug":"_7-control-flow-statements","link":"#_7-control-flow-statements","children":[{"level":3,"title":"7.1 if-else","slug":"_7-1-if-else","link":"#_7-1-if-else","children":[]},{"level":3,"title":"7.2 switch","slug":"_7-2-switch","link":"#_7-2-switch","children":[]},{"level":3,"title":"7.3 Loop","slug":"_7-3-loop","link":"#_7-3-loop","children":[]}]},{"level":2,"title":"8. Function","slug":"_8-function","link":"#_8-function","children":[{"level":3,"title":"8.1 定义","slug":"_8-1-定义","link":"#_8-1-定义","children":[]},{"level":3,"title":"8.2  可选参数","slug":"_8-2-可选参数","link":"#_8-2-可选参数","children":[]},{"level":3,"title":"8.3 参数默认值","slug":"_8-3-参数默认值","link":"#_8-3-参数默认值","children":[]},{"level":3,"title":"8.4 变长参数","slug":"_8-4-变长参数","link":"#_8-4-变长参数","children":[]},{"level":3,"title":"8.5 匿名函数","slug":"_8-5-匿名函数","link":"#_8-5-匿名函数","children":[]},{"level":3,"title":"8.6 构造函数","slug":"_8-6-构造函数","link":"#_8-6-构造函数","children":[]},{"level":3,"title":"8.7 Lambda 函数","slug":"_8-7-lambda-函数","link":"#_8-7-lambda-函数","children":[]},{"level":3,"title":"8.8 函数重载","slug":"_8-8-函数重载","link":"#_8-8-函数重载","children":[]}]},{"level":2,"title":"9. Array","slug":"_9-array","link":"#_9-array","children":[{"level":3,"title":"9.1 声明","slug":"_9-1-声明","link":"#_9-1-声明","children":[]},{"level":3,"title":"9.2 初始化","slug":"_9-2-初始化","link":"#_9-2-初始化","children":[]},{"level":3,"title":"9.3 Array 对象","slug":"_9-3-array-对象","link":"#_9-3-array-对象","children":[]},{"level":3,"title":"9.4 解构","slug":"_9-4-解构","link":"#_9-4-解构","children":[]},{"level":3,"title":"9.5 多维数组","slug":"_9-5-多维数组","link":"#_9-5-多维数组","children":[]}]},{"level":2,"title":"10. Map","slug":"_10-map","link":"#_10-map","children":[]},{"level":2,"title":"11. Tuple","slug":"_11-tuple","link":"#_11-tuple","children":[]},{"level":2,"title":"12. Union Types","slug":"_12-union-types","link":"#_12-union-types","children":[]},{"level":2,"title":"13. Interface","slug":"_13-interface","link":"#_13-interface","children":[{"level":3,"title":"13.1 继承","slug":"_13-1-继承","link":"#_13-1-继承","children":[]}]},{"level":2,"title":"14. Class","slug":"_14-class","link":"#_14-class","children":[{"level":3,"title":"14.1 实例化","slug":"_14-1-实例化","link":"#_14-1-实例化","children":[]},{"level":3,"title":"14.2 类的继承","slug":"_14-2-类的继承","link":"#_14-2-类的继承","children":[]},{"level":3,"title":"14.3 继承类的方法重写","slug":"_14-3-继承类的方法重写","link":"#_14-3-继承类的方法重写","children":[]},{"level":3,"title":"14.4 static","slug":"_14-4-static","link":"#_14-4-static","children":[]},{"level":3,"title":"14.5 访问控制修饰符","slug":"_14-5-访问控制修饰符","link":"#_14-5-访问控制修饰符","children":[]},{"level":3,"title":"14.6 类和接口","slug":"_14-6-类和接口","link":"#_14-6-类和接口","children":[]}]},{"level":2,"title":"15. Namespace","slug":"_15-namespace","link":"#_15-namespace","children":[]},{"level":2,"title":"16. Moudule","slug":"_16-moudule","link":"#_16-moudule","children":[]},{"level":2,"title":"17. 声明文件","slug":"_17-声明文件","link":"#_17-声明文件","children":[{"level":3,"title":"声明文件","slug":"声明文件","link":"#声明文件","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1684319235000},"readingTime":{"minutes":12.62,"words":3786},"filePathRelative":"note/typescript/quick_start.md","localizedDate":"2023年5月15日","excerpt":"<h2> 1. Introduction</h2>\\n<p>TypeScript is a syntactic superset of JavaScript that adds <strong>static typing</strong>.</p>\\n<p>TypeScript uses <strong>compile time type checking</strong>, which means it checks if the specified types match before running the code, not while running the code.</p>\\n<h2> 2. Compiler</h2>"}');export{l as data};
