import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as l}from"./framework-09afcf0b.js";const i={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day5-http",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="_1-支持-http-需要什么" tabindex="-1"><a class="header-anchor" href="#_1-支持-http-需要什么" aria-hidden="true">#</a> 1. 支持 HTTP 需要什么</h2><p>Web 开发中，经常使用 HTTP 协议中的 HEAD、GET、POST 等方式发送请求，等待响应。但 RPC 的消息格式与标准的 HTTP 协议并不兼容，在这种情况下，就需要一个协议的转换过程。HTTP 协议的 CONNECT 方法恰好提供了这个能力，CONNECT 一般用于代理服务。</p><p>假设浏览器与服务器之间的 HTTPS 通信都是加密的，浏览器通过代理服务器发起 HTTPS 请求时，由于请求的站点地址和端口号都是加密保存在 HTTPS 请求报文头中的，代理服务器如何知道往哪里发送请求呢？</p><p>为了解决这个问题，浏览器通过 HTTP 明文形式向代理服务器发送一个 CONNECT 请求告诉代理服务器目标地址和端口，代理服务器接收到这个请求后，会在对应端口与目标站点建立一个 TCP 连接，连接建立成功后返回 HTTP 200 状态码告诉浏览器与该站点的加密通道已经完成。接下来代理服务器仅需透传浏览器和服务器之间的加密数据包即可，代理服务器无需解析 HTTPS 报文。</p><p>举一个简单例子：</p><ol><li>浏览器向代理服务器发送 CONNECT 请求。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONNECT geektutu.com:443 HTTP/1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>代理服务器返回 HTTP 200 状态码表示连接已经建立。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP/1.0 200 Connection Established
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>之后浏览器和服务器开始 HTTPS 握手并交换加密数据，代理服务器只负责传输彼此的数据包，并不能读取具体数据内容（代理服务器也可以选择安装可信根证书解密 HTTPS 报文）。</li></ol><p>事实上，这个过程其实是通过代理服务器将 HTTP 协议转换为 HTTPS 协议的过程。对 RPC 服务端来，需要做的是将 HTTP 协议转换为 RPC 协议，对客户端来说，需要新增通过 HTTP CONNECT 请求创建连接的逻辑。</p><h2 id="_2-服务端支持-http" tabindex="-1"><a class="header-anchor" href="#_2-服务端支持-http" aria-hidden="true">#</a> 2. 服务端支持 HTTP</h2><p>通信流程如下：</p><ol><li>客户端向 RPC 服务器发送 CONNECT 请求</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONNECT 10.0.0.1:9999/_geerpc_ HTTP/1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>RPC 服务器返回 HTTP 200 状态码表示连接建立。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP/1.0 200 Connected to Gee RPC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>客户端使用创建好的连接发送 RPC 报文，先发送 Option，再发送 N 个请求报文，服务端处理 RPC 请求并响应。</li></ol><p><code>geerpc/server.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	connected        <span class="token operator">=</span> <span class="token string">&quot;200 Connected to Gee RPC&quot;</span>
	defaultRPCPath   <span class="token operator">=</span> <span class="token string">&quot;/geerpc&quot;</span>
	defaultDebugPath <span class="token operator">=</span> <span class="token string">&quot;/geerpc/debug&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> http<span class="token punctuation">.</span>Handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// ServeHTTP implements  http.Handler that answers RPC requests.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">!=</span> http<span class="token punctuation">.</span>MethodConnect <span class="token punctuation">{</span>
		w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">)</span>
		w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;405 must CONNECT\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	conn<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> w<span class="token punctuation">.</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Hijacker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hijack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc hijacking&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">&quot;HTTP/1.0&quot;</span><span class="token operator">+</span>connected<span class="token operator">+</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span>
	server<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// HandleHTTP registers an HTTP handler for RPC messages on rpcPath.</span>
<span class="token comment">// It is still necessary to invoke http.Serve(), typically in a go statement.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultRPCPath<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// HandleHTTP is a convenient approach for default server to register HTTP handlers</span>
<span class="token keyword">func</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	DefaultServer<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>w.(http.Hijacker).Hijack()</code>：Hijack lets the caller take over the connection. After a call to Hijack the HTTP server library will not do anything else with the connection.</li></ul><h2 id="_3-客户端支持-http" tabindex="-1"><a class="header-anchor" href="#_3-客户端支持-http" aria-hidden="true">#</a> 3. 客户端支持 HTTP</h2><p><code>geerpc/client.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// NewHTTPClient new a Client instance via HTTP as transport protocol</span>
<span class="token keyword">func</span> <span class="token function">NewHTTPClient</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;CONNECT %s HTTP/1.0\\n\\n&quot;</span><span class="token punctuation">,</span> defaultRPCPath<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Require successful HTTP response</span>
	<span class="token comment">// before switching to RPC protocol.</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ReadResponse</span><span class="token punctuation">(</span>bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>
		Method<span class="token punctuation">:</span> http<span class="token punctuation">.</span>MethodConnect<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> resp<span class="token punctuation">.</span>Status <span class="token operator">==</span> connected <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;unexpected HTTP response: &quot;</span> <span class="token operator">+</span> resp<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token comment">// DialHTTP connects to an HTTP RPC server at the specified network address</span>
<span class="token comment">// listening on the default HTTP RPC path.</span>
<span class="token keyword">func</span> <span class="token function">DialHTTP</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>NewHTTPClient<span class="token punctuation">,</span> network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将不同的协议整合成统一的接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// XDial calls different functions to connect to a RPC server</span>
<span class="token comment">// according the first parameter rpcAddr.</span>
<span class="token comment">// rpcAddr is a general format (protocol@addr) to represent a rpc server</span>
<span class="token comment">// eg, http@10.0.0.1:7001, tcp@10.0.0.1:9999, unix@/tmp/geerpc.sock</span>
<span class="token keyword">func</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client err: wrong format &#39;%s&#39;, expect protocol@addr&quot;</span><span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	protocol<span class="token punctuation">,</span> addr <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">switch</span> protocol <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">// tcp, unix or other transport protocol</span>
		<span class="token keyword">return</span> <span class="token function">Dial</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-debug-页面" tabindex="-1"><a class="header-anchor" href="#_4-debug-页面" aria-hidden="true">#</a> 4. Debug 页面</h2><p>支持HTTP之后，通过<code>/geeprc</code>路径访问RPC服务，在其他的路径可以支持日志、统计信息等服务。</p><p>例如：在<code>/geerpc/debug</code>展示服务统计视图</p><p><code>geerpc/debug.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> geerpc

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;html/template&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> debugText <span class="token operator">=</span> <span class="token string">\`&lt;html&gt;
	&lt;body&gt;
	&lt;title&gt;GeeRPC Services&lt;/title&gt;
	{{range .}}
	&lt;hr&gt;
	Service {{.Name}}
	&lt;hr&gt;
		&lt;table&gt;
		&lt;th align=center&gt;Method&lt;/th&gt;&lt;th align=center&gt;Calls&lt;/th&gt;
		{{range $name, $mtype := .Method}}
			&lt;tr&gt;
			&lt;td align=left font=fixed&gt;{{$name}}({{$mtype.ArgType}}, {{$mtype.ReplyType}}) error&lt;/td&gt;
			&lt;td align=center&gt;{{$mtype.NumCalls}}&lt;/td&gt;
			&lt;/tr&gt;
		{{end}}
		&lt;/table&gt;
	{{end}}
	&lt;/body&gt;
	&lt;/html&gt;\`</span>

<span class="token keyword">var</span> debug <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;RPC debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>debugText<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> debugHTTP <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>Server
<span class="token punctuation">}</span>

<span class="token keyword">type</span> debugService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name   <span class="token builtin">string</span>
	Method <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType
<span class="token punctuation">}</span>

<span class="token comment">// Runs at /geeprc/debug</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>server debugHTTP<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Build a sorted version of the data.</span>
	<span class="token keyword">var</span> services <span class="token punctuation">[</span><span class="token punctuation">]</span>debugService
	server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>namei<span class="token punctuation">,</span> svci <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		svc <span class="token operator">:=</span> svci<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>service<span class="token punctuation">)</span>
		services <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>services<span class="token punctuation">,</span> debugService<span class="token punctuation">{</span>
			Name<span class="token punctuation">:</span>   namei<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			Method<span class="token punctuation">:</span> svc<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> debug<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> services<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;rpc: error executing template:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册debug路由</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultRPCPath<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server path:&quot;</span><span class="token punctuation">,</span> defaultRPCPath<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultDebugPath<span class="token punctuation">,</span> debugHTTP<span class="token punctuation">{</span>server<span class="token punctuation">}</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc server debug path:&quot;</span><span class="token punctuation">,</span> defaultDebugPath<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-demo" tabindex="-1"><a class="header-anchor" href="#_5-demo" aria-hidden="true">#</a> 5. Demo</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;geerpc&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Foo <span class="token builtin">int</span>

<span class="token keyword">type</span> Args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> foo Foo
	<span class="token keyword">if</span> err <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;register error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// pick free port</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:0&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;network error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	geerpc<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start rpc server on&quot;</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	addr <span class="token operator">&lt;-</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		client<span class="token punctuation">,</span> err <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Create Client err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				args <span class="token operator">:=</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">}</span>
				<span class="token keyword">var</span> reply <span class="token builtin">int</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;call Foo.Sum error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,36),k={href:"https://geektutu.com/post/geerpc-day5.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=l("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[n("a",u,[a("day5-http"),t(s)])]),r,n("ol",null,[n("li",null,[n("a",k,[a("https://geektutu.com/post/geerpc-day5.html"),t(s)])])])])}const g=p(i,[["render",d],["__file","04.5.http.html.vue"]]);export{g as default};
