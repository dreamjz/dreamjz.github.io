import{_ as p,X as o,Y as l,Z as n,$ as s,a0 as t,a1 as e,F as c}from"./framework-8cb7ec75.js";const i={},u=e('<h2 id="_3-1-数组实现原理" tabindex="-1"><a class="header-anchor" href="#_3-1-数组实现原理" aria-hidden="true">#</a> 3.1 数组实现原理</h2><p><strong>数组</strong> 是 Go 语言基本数据类型之一，通常用<strong>元素类型</strong>和<strong>最大能存储的元素个数</strong>来描述。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>数组由两种初始化方式：</p><ol><li><strong>显式指定数组大小</strong>：<code>arr := [3]int{1, 2, 3}</code></li><li>使用 <strong><code>[...]T</code></strong> 在编译期推导数组大小：<code>arr := [...]int{1, 2, 3}</code>；此种方式将在编译器被转换成第一种形式；</li></ol><p>对于由字面量组成的数组，根据数组元素数量不同，编译器会做出两种不同的优化：</p><ol><li>若元素个数<strong>小于或等于</strong> 4 个，所有的变量将会在栈上初始化；</li><li>若元素个数<strong>大于</strong> 4 个，变量会在<strong>静态存储区</strong>初始化然后<strong>拷贝</strong>到<strong>栈</strong>上。</li></ol><p>若使用<strong>字面量</strong>或<strong>常量</strong>访问数组元素，Go 语言会在编译期间的静态类型检查中判断是否越界：</p><ol><li>访问数组的索引是<strong>非整数</strong>时，报错 “non-integer array index %v”；</li><li>访问数组的索引是<strong>负数</strong>时，报错 “invalid array index %v (index must be non-negative)” ；</li><li>访问数组的索引<strong>越界</strong>时，报错 “invalid array index %v (out of bounds for %d-element array)”；</li></ol>',9),r=n("strong",null,"变量",-1),d={href:"https://draveness.me/golang/tree/runtime.panicIndex",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"runtime.panicIndex",-1),m=n("h2",{id:"_3-2-切片的实现原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-切片的实现原理","aria-hidden":"true"},"#"),s(" 3.2 切片的实现原理")],-1),g=n("strong",null,"切片",-1),v={href:"https://draveness.me/golang/tree/reflect.SliceHeader",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"reflect.SliceHeader",-1),h=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Data <span class="token builtin">uintptr</span>
    Len <span class="token builtin">int</span>
    Cap <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Data</code>：指向数组的<strong>指针</strong>；</li><li><code>Len</code>：当前切片的<strong>长度</strong>；</li><li><code>Cap</code>：当前切片<strong>容量</strong>，即 <code>Data</code> 数组的大小；</li></ul><p>切片引入了一个<strong>抽象层</strong>，可以在运行期间修改其长度和范围，当底层数组长度不足时会发生扩容，此时底层的数组会发生变化，但是对使用者来说是不可见的。使用者只需和切片打交道即可。</p><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h3><p>切片的<strong>初始化</strong>有三种初始化方式：</p>`,5),_=n("ol",null,[n("li",null,[n("p",null,[s("通过"),n("strong",null,"下标"),s("的方式获取数组或切片的一部分："),n("code",null,"arr[0:3] or slice[0:3]"),s("，是三种方法中最为底层的一种；")])]),n("li",null,[n("p",null,[s("使用"),n("strong",null,"字面量"),s("初始化："),n("code",null,"slice := []int{1, 2, 3}"),s(" ，底层会先创建数组然后再使用 "),n("code",null,"[:]"),s(" 方式获取切片；")])]),n("li",null,[n("p",null,[s("使用 "),n("strong",null,"make"),s(" 关键字："),n("code",null,"slice := make([]int, 3)"),s("； 在"),n("strong",null,"编译期"),s("的类型检查期间，会保证 "),n("code",null,"cap"),s(" 大于或等于 "),n("code",null,"len"),s("；除了校验参数，还会根据下列条件采用不同方式初始化：")]),n("ol",null,[n("li",null,"切片的大小和容量是否足够小；"),n("li",null,"切片是否发生了逃逸，最终在堆上初始化；")]),n("p",null,[s("当切片发生"),n("strong",null,"逃逸"),s("或者"),n("strong",null,"非常大"),s("时，此时会在"),n("strong",null,"堆"),s("上初始化；若"),n("strong",null,"不发生逃逸"),s("并且"),n("strong",null,"非常小"),s("时，"),n("code",null,"make([]int, 3, 4)"),s(" 会被转换成如下代码：")]),n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" arr "),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(`
n `),n("span",{class:"token operator"},":="),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},":"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"上述代码初始化数组并通过下标的方式获得对应的切片。"),n("p",null,[s("在"),n("strong",null,"运行时"),s("，首先会计算切片占用内存空间并在"),n("strong",null,"堆"),s("上申请一片连续，并按如下方式计算：")]),n("p",null,[s("​ "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"内存空间"),n("mo",null,"="),n("mtext",null,"切片中元素大小"),n("mo",null,"×"),n("mtext",null,"切片容量")]),n("annotation",{encoding:"application/x-tex"},"\\text{内存空间} = \\text{切片中元素大小} \\times \\text{切片容量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"内存空间")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片中元素大小")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片容量")])])])]),s("​")]),n("p",null,"创建切片的过程中如果发生了以下错误将直接触发运行时错误并崩溃："),n("ol",null,[n("li",null,"内存空间打下发生溢出；"),n("li",null,"申请的内存大于最大可分配内存；"),n("li",null,"传入的长度小于 0 或长度大于容量；")]),n("p",null,"最后申请内存时，若遇到比较小的对象会直接初始化在 Go 调度器中的 P 结构中，而大于 32 KB 的对象会在堆上初始化。")])],-1),f=e('<h3 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h3><p><strong>访问</strong>切片的长度、容量或元素，以及将 <code>range</code> 关键字转换成更简单的循环，均在<strong>编译期</strong>完成。</p><h3 id="追加和扩容" tabindex="-1"><a class="header-anchor" href="#追加和扩容" aria-hidden="true">#</a> 追加和扩容</h3><p>使用 <code>append</code>时，会由两种情况：</p><ol><li>新切片不需要赋值回原变量</li><li>新切片赋值回原变量</li></ol><p>最大的区别在于<strong>覆盖原变量</strong>则无需担心切片发生<strong>拷贝</strong>而影响性能。</p>',6),y={href:"https://draveness.me/golang/tree/runtime.growslice",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"runtime.growslice",-1),w=n("strong",null,"切片扩容",-1),q=e("<p><strong>运行时</strong>根据切片的容量选择不同的策略：</p><ol><li>若<strong>期望容量大于</strong>当前容量的<strong>两倍</strong>则会使用期望容量；</li><li>若当前切片的<strong>长度</strong>小于 1024 就会将容量翻倍；</li><li>若当前切片的<strong>长度</strong>大于 1024 则会每次增加 25% 的容量，直到大于期望容量；</li></ol>",2),L=n("strong",null,"对齐内存",-1),B={href:"https://draveness.me/golang/tree/runtime.class_to_size",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"runtime.class_to_size",-1),I=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> class_to_size <span class="token operator">=</span> <span class="token punctuation">[</span>_NumSizeClasses<span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">appendTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------ Int64 8 Byte ------------------------&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
	arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Arr: %v, Len: %d, Cap: %d\\n&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------ Int32 4 Byte ------------------------&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> arr2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span>
	arr2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Arr: %v, Len: %d, Cap: %d\\n&quot;</span><span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------ Int16 2 Byte ------------------------&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> arr3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int16</span>
	arr3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Arr: %v, Len: %d, Cap: %d\\n&quot;</span><span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------ Int8 1 Byte ------------------------&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> arr4 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int8</span>
	arr4 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Arr: %v, Len: %d, Cap: %d\\n&quot;</span><span class="token punctuation">,</span> arr4<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
------------------------ Int64 8 Byte ------------------------
Arr: [1 2 3 4 5], Len: 5, Cap: 6
------------------------ Int32 4 Byte ------------------------
Arr: [1 2 3 4 5], Len: 5, Cap: 6
------------------------ Int16 2 Byte ------------------------
Arr: [1 2 3 4 5], Len: 5, Cap: 8
------------------------ Int8 1 Byte -------------------------
Arr: [1 2 3 4 5], Len: 5, Cap: 8
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=n("ul",null,[n("li",null,[s("期望容量为 5 ，大于当前容量的两倍（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0"),n("mo",null,"×"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"0 \\times 2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"0"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2")])])]),s("），扩容容量即为 5；")]),n("li",null,[s("期望分配内存 40 ("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"5"),n("mo",null,"×"),n("mn",null,"8")]),n("annotation",{encoding:"application/x-tex"},"5 \\times 8")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"8")])])]),s(")；")]),n("li",null,[s("元素大小等于 "),n("code",null,"sys.PtrSize"),s(" ，此时向上取整到 48 字节；")]),n("li",null,[s("最后新切片容量为 6 ("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"48"),n("mo",null,"÷"),n("mn",null,"6")]),n("annotation",{encoding:"application/x-tex"},"48 \\div 6")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"48"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"6")])])]),s(")")])],-1),z=n("h3",{id:"拷贝切片",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#拷贝切片","aria-hidden":"true"},"#"),s(" 拷贝切片")],-1),P=n("p",null,[s("使用 "),n("code",null,"copy(a, b)"),s(" 进行切片的拷贝时，分为两种情况：")],-1),A=e(`<p><code>copy</code> 在<strong>编译期</strong>间调用，则 <code>copy(a, b)</code>会被转换成如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> a<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> b<span class="token punctuation">.</span>ptr <span class="token punctuation">{</span>
    <span class="token function">memmove</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> b<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> n<span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.memmove",-1),j=n("code",null,"copy",-1),V=n("strong",null,"运行时",-1),D=n("code",null,"go copy(a, b)",-1),E={href:"https://draveness.me/golang/tree/runtime.slicecopy",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.slicecopy",-1),H=n("code",null,"copy",-1),T=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicecopy</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> fm slice<span class="token punctuation">,</span> width <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> fm<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> to<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	n <span class="token operator">:=</span> fm<span class="token punctuation">.</span><span class="token builtin">len</span>
	<span class="token keyword">if</span> to<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
		n <span class="token operator">=</span> to<span class="token punctuation">.</span><span class="token builtin">len</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> width <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>

	size <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> width
	<span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fm<span class="token punctuation">.</span>array<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>array<span class="token punctuation">,</span> fm<span class="token punctuation">.</span>array<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F=n("strong",null,"编译期",-1),K=n("strong",null,"运行时",-1),X={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.memmove",-1),Z=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-02-20-golang-slice-copy.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),$={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"runtime.memmove",-1);function O(Q,R){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("若使用"),r,s("访问数组元素时，编译器在 SSA 代码生成期间，插入运行时方法 "),n("a",d,[k,t(a)]),s(" 以防止发生越界错误，并触发 Panic。")]),m,n("p",null,[s("运行时的"),g,s("可由 "),n("a",v,[b,t(a)]),s(" 结构体表示：")]),h,_,f,n("p",null,[s("当切片容量不足时，会调用 "),n("a",y,[x,t(a)]),s(" 函数为"),w,s("（为切片分配新的内存空间并拷贝原切片元素的过程）。")]),q,n("p",null,[s("上述过程确定切片的大致容量，之后会根据切片的元素大小"),L,s("，当元素所占字节大小为 1、8 或 2 的倍数时，将待申请的内存按数组 "),n("a",B,[C,t(a)]),s(" 向上取整，可以提高内存分配效率并减少碎片：")]),I,M,z,P,n("ol",null,[n("li",null,[A,n("p",null,[s("上述代码中的 "),n("a",S,[N,t(a)]),s(" 会负责拷贝内存。")])]),n("li",null,[n("p",null,[j,s(" 在"),V,s("调用，如 "),D,s(" 编译器会使用 "),n("a",E,[G,t(a)]),s(" 替换运行期间调用的 "),H,s("：")]),T])]),n("p",null,[s("无论是"),F,s("间还是"),K,s("拷贝，都会通过 "),n("a",X,[Y,t(a)]),s(" 将整块内存的内容拷贝到目标的内存区域中：")]),Z,n("p",null,[s("相较于依次拷贝元素，"),n("a",$,[J,t(a)]),s(" 能够提供更好的性能。需要注意的是，整块拷贝内存仍会占用非常多的资源，在大切片上执行拷贝时要注意对性能的影响。")])])}const W=p(i,[["render",O],["__file","summary.html.vue"]]);export{W as default};
