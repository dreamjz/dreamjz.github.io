import{_ as n,Y as s,Z as a,a2 as t}from"./framework-d955655f.js";const e={},p=t(`<h2 id="_1-goalng-安全读写共享变量方式" tabindex="-1"><a class="header-anchor" href="#_1-goalng-安全读写共享变量方式" aria-hidden="true">#</a> 1. Goalng 安全读写共享变量方式</h2><ul><li>sync.Mutex 加锁</li><li>channel</li><li>atomic</li></ul><h2 id="_2-channel-有无缓冲的区别" tabindex="-1"><a class="header-anchor" href="#_2-channel-有无缓冲的区别" aria-hidden="true">#</a> 2. Channel 有无缓冲的区别</h2><ul><li>无缓冲：<code>make(chan T)</code>， 发送和接收是<strong>同步</strong>的 <ul><li>发送阻塞，直到数据被接收</li><li>接收阻塞，直到读取到数据</li></ul></li><li>有缓冲：<code>make(chan T, buf_size)</code>，发送和接收<strong>不同步</strong><ul><li>缓冲区<strong>满</strong>时，发送阻塞</li><li>缓冲区<strong>空</strong>时，接收阻塞</li></ul></li></ul><h2 id="_3-gmp-模型" tabindex="-1"><a class="header-anchor" href="#_3-gmp-模型" aria-hidden="true">#</a> 3. GMP 模型</h2><h3 id="gmp-流程" tabindex="-1"><a class="header-anchor" href="#gmp-流程" aria-hidden="true">#</a> GMP 流程</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/a4vWtvRWGQ.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>创建一个 G</li><li>加入队列： <ol><li>优先加入 P 的<strong>本地队列</strong>；</li><li>本地队列已满则加入<strong>全局队列</strong>；</li></ol></li><li>M 和 P <strong>一对一</strong>绑定，M 从 P 的<strong>本地队列</strong>获取 G 运行： <ol><li>若本地队列为<strong>空</strong>，则从<strong>全局队列</strong>获取；</li><li>若全局队列为<strong>空</strong>，则从其他的 MP 组合中<strong>偷取</strong>一半数量的 G 来运行；</li></ol></li><li>M 执行 G 若发生<strong>阻塞</strong>，则当前的 M 和 P 会解绑 (detach)，然后<strong>创建</strong> 或 <strong>唤醒</strong> 一个 M 与 P 绑定。</li></ol><h3 id="自旋" tabindex="-1"><a class="header-anchor" href="#自旋" aria-hidden="true">#</a> 自旋</h3><p>当 MP 组合无法获取 G 执行时，M 将进入<strong>自旋</strong>状态。</p><h3 id="休眠" tabindex="-1"><a class="header-anchor" href="#休眠" aria-hidden="true">#</a> 休眠</h3><p>当 M 一段时间内没有获取 P 与之绑定时，M 将进入<strong>休眠</strong>状态。</p><h2 id="_4-常用并发控制" tabindex="-1"><a class="header-anchor" href="#_4-常用并发控制" aria-hidden="true">#</a> 4. 常用并发控制</h2><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><p>使用无缓冲通道，其发送和接收是同步的，需要发送方和接收方都准备好才能完成发送和接收的操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start working&quot;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
        ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
   
    <span class="token operator">&lt;-</span>ch
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;finished&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 main goroutine 运行到 <code>&lt;-ch</code> 接收 channel 的值时，若 channel 中没有数据，则会阻塞直到有值。</p><h3 id="sync-waitgroup" tabindex="-1"><a class="header-anchor" href="#sync-waitgroup" aria-hidden="true">#</a> sync.WaitGroup</h3><p><code>WaitGroup</code> 主要有三个方法：</p><ul><li><code>func (wg *WaitGroup) Add(delta int)</code>：给 counter 增加 delta；</li><li><code>func (wg *WaitGroup) Done()</code>：给 counter 增加 -1，等价于 <code>Add(-1)</code>；</li><li><code>func (wg *WaitGroup) Wait()</code>：阻塞，直到 counter 为 0；</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">mainTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Main goroutine done&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mainTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token function">task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;main task done&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">task</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d, &quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4, 2, 3, 0, 1, 
main task done
Main goroutine done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Main 协程会等待 <code>mainTask</code> 的完成，而执行 <code>mainTask</code> 的协程会等待 <code>task</code> 的协程完成。</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h3><p>context 适用于多个 goroutine 的管理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">watch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;Watcher-1&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">watch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;Watcher-2&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">watch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;Watcher-3&quot;</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Main: stop watching&quot;</span><span class="token punctuation">)</span>
	<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">watch</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;watching...&quot;</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Watcher-1 watching...
Watcher-2 watching...
Watcher-3 watching...
Watcher-3 watching...
Watcher-2 watching...
Watcher-1 watching...
Watcher-2 watching...
Watcher-3 watching...
Watcher-1 watching...
Main: stop watching
Watcher-2 done
Watcher-3 done
Watcher-1 done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行 <code>cancel</code> 函数后，所有基于此 Context 及其衍生 Context 都将收到通知。</p><h2 id="_5-slice-为-nil-和-empty-slice" tabindex="-1"><a class="header-anchor" href="#_5-slice-为-nil-和-empty-slice" aria-hidden="true">#</a> 5. Slice 为 nil 和 empty Slice</h2><p>Slice 的值为 nil，表示没有为此变量分配内存。</p><p>Slice 是空的，表示其底层数组没有元素，但是已经分配的内存。</p><h2 id="_6-进程-线程-协程" tabindex="-1"><a class="header-anchor" href="#_6-进程-线程-协程" aria-hidden="true">#</a> 6. 进程 线程 协程</h2><h3 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h3><p>进程是系统进行<strong>资源分配</strong>和调度的基本单位，每个进程有自己独立的内存空间。</p><p>进程通信需要<strong>进程间通讯</strong>来进行。</p><p>进程上下文切换的开销较大（栈、寄存器、虚拟内存、文件句柄等）。</p><h3 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h3><p>线程是<strong>程序执行</strong>的最小单位，属于<strong>内核态</strong>。</p><p>线程通信通过共享内存（程序计数器、寄存器、栈等）。</p><p>线程上下文开销较小。</p><p>线程占用内存为几 MiB。</p><h3 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h3><p>协程是<strong>用户态</strong>的轻量级线程。</p><p>协程的调度和上下文切换由用户控制，不涉及内核态和用户态的切换，开销很小。</p><p>协程占用内存为几 KiB。</p><h2 id="_7-数据竞争-data-race-如何解决" tabindex="-1"><a class="header-anchor" href="#_7-数据竞争-data-race-如何解决" aria-hidden="true">#</a> 7. 数据竞争 (Data Race) 如何解决</h2><p>数据竞争可以通过 <code>sync.Mutex</code> 加锁或 <code>channel</code> 解决。</p><p><code>go run/build -race</code> 可以进行数据竞争的分析。</p><h2 id="_8-channel" tabindex="-1"><a class="header-anchor" href="#_8-channel" aria-hidden="true">#</a> 8. Channel</h2><p>Channel 用于 go 协程间的通讯。</p><p>Channel 发送和接收都是原子性的，保证了并发安全。</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>Channel 是一个队列，遵循先进先出原则，负责协程之间的通信。</p><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h4><p>通过 var 声明或 make 创建的 channel 变量是一个存储在函数栈上的指针，占用 8 个字节，指向堆上的 Channel 结构体。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hchan.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 closed   <span class="token builtin">uint32</span>   <span class="token comment">// channel是否关闭的标志</span>
 elemtype <span class="token operator">*</span>_type   <span class="token comment">// channel中的元素类型</span>
 
 <span class="token comment">// channel分为无缓冲和有缓冲两种。</span>
 <span class="token comment">// 对于有缓冲的channel存储数据，使用了 ring buffer（环形缓冲区) 来缓存写入的数据，本质是循环数组</span>
 <span class="token comment">// 为啥是循环数组？普通数组不行吗，普通数组容量固定更适合指定的空间，弹出元素时，普通数组需要全部都前移</span>
 <span class="token comment">// 当下标超过数组容量后会回到第一个位置，所以需要有两个字段记录当前读和写的下标位置</span>
 buf      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指向底层循环数组的指针（环形缓冲区）</span>
 qcount   <span class="token builtin">uint</span>           <span class="token comment">// 循环数组中的元素数量</span>
 dataqsiz <span class="token builtin">uint</span>           <span class="token comment">// 循环数组的长度</span>
 elemsize <span class="token builtin">uint16</span>                 <span class="token comment">// 元素的大小</span>
 sendx    <span class="token builtin">uint</span>           <span class="token comment">// 下一次写下标的位置</span>
 recvx    <span class="token builtin">uint</span>           <span class="token comment">// 下一次读下标的位置</span>
  
 <span class="token comment">// 尝试读取channel或向channel写入数据而被阻塞的goroutine</span>
 recvq    waitq  <span class="token comment">// 读等待队列</span>
 sendq    waitq  <span class="token comment">// 写等待队列</span>

 lock mutex <span class="token comment">//互斥锁，保证读写channel时不存在并发竞争问题</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Channel 的主要组成部分：</p><ul><li>用于保存 goroutine 之间传递数据的循环数组：buf；</li><li>用于记录循环数组当前发送和接收数据的下标：sendx 和 recvx；</li><li>用于保存该 chan 发送和接收数据被阻塞的 goroutine 队列：sendq 和 recvq；</li><li>保证 channel 写入和读取数据时线程安全的锁：lock；</li></ul><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><p>Channel 有两种类型：无缓冲和有缓冲；</p><p>Channel 有3种模式：写操作模式（单向）、读操作模式（单向）、读写操作模式（双向）</p><table><thead><tr><th></th><th>写操作模式</th><th>读操作模式</th><th>读写操作模式</th></tr></thead><tbody><tr><td>创建</td><td>make(chan&lt;- int)</td><td>make(&lt;-chan int)</td><td>make(chan int)</td></tr></tbody></table><p>Channel 有3种状态：未初始化、正常、关闭</p><table><thead><tr><th>操作</th><th>未初始化</th><th>关闭</th><th>正常</th></tr></thead><tbody><tr><td>关闭</td><td>panic</td><td>panic</td><td>正常关闭</td></tr><tr><td>发送</td><td>永远阻塞导致死锁</td><td>panic</td><td>阻塞或发送成功</td></tr><tr><td>接收</td><td>永远阻塞导致死锁</td><td>缓冲区为空则为零值，否则可以继续读</td><td>阻塞或成功接收</td></tr></tbody></table><ul><li>channel 不能多次关闭，会导致 panic</li><li>多个协程监听同一个 channel，channel 上的数据<strong>可能随机被一个goroutine 取走进行消费</strong></li><li>多个协程监听 同一个 channel，channel 被关闭，<strong>所有协程都能收到退出信号</strong></li></ul><h4 id="如何实现线程安全" tabindex="-1"><a class="header-anchor" href="#如何实现线程安全" aria-hidden="true">#</a> 如何实现线程安全</h4><p>channel 底层实现中，hchan 结构中使用 sync.Mutex 锁保证数据的读写安全。在对循环数组 buf 中的数据进行入队和出队操作时，必须获取互斥锁，才能操作 channel 数据。</p><h4 id="如何控制并发顺序" tabindex="-1"><a class="header-anchor" href="#如何控制并发顺序" aria-hidden="true">#</a> 如何控制并发顺序</h4><p><strong>多个 goroutine并发执行，每个 goroutine 抢到处理器的时间点不一致，无法保证 goroutine 的执行顺序</strong></p><p>可以使用 channel 传递信息，从而控制并发执行顺序</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	ch3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch1 <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">go</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token string">&quot;goroutine1&quot;</span><span class="token punctuation">,</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token string">&quot;goroutine2&quot;</span><span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token string">&quot;goroutine3&quot;</span><span class="token punctuation">,</span> ch3<span class="token punctuation">,</span> ch1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Duration: %s&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">doTask</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> inCh <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> outCh <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>inCh<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
		outCh <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="死锁场景" tabindex="-1"><a class="header-anchor" href="#死锁场景" aria-hidden="true">#</a> 死锁场景</h4><p>出现死锁：</p><ul><li>单个协程永久阻塞；</li><li>多个协程，由于竞争资源或因通信造成阻塞；</li></ul><p>场景：</p><ul><li>无缓存 channel 只写不读；</li><li>无缓存 channel 协程阻塞导致子协程无法执行；</li><li>有缓存 channel 写入超过缓冲区数量；</li><li>空读；</li><li>多个协程互相等待；</li></ul><ol><li><p>无缓存 channel 只写不读</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>无缓存 channel 读在写之后</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">&lt;-</span>ch
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Read&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有缓存的 channel 写入超过缓冲区数量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token number">0</span>
	ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
	ch <span class="token operator">&lt;-</span> <span class="token number">2</span>
	ch <span class="token operator">&lt;-</span> <span class="token number">3</span> <span class="token comment">// block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>空读</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>ch
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>相互等待</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>
			ch2 <span class="token operator">&lt;-</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span>
			ch1 <span class="token operator">&lt;-</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="channel-的关闭" tabindex="-1"><a class="header-anchor" href="#channel-的关闭" aria-hidden="true">#</a> channel 的关闭</h4><p>通道关闭原则</p><ul><li>不要在数据接收方或有多个发送者的情况下关闭通道，即让一个唯一的通道发送者关闭通道。</li></ul><p>优雅的关闭通道</p><ol><li>M 个接收者和一个发送者，发送者通过关闭用来传输数据的通道来传递发送结束信号；</li><li>一个接收者和 N 个发送者，接收者关闭额外的信号通道来通知发送者关闭通道；注意此时发送通道并未关闭，之后未使用的通道将会被回收；</li><li>M 个接收者和一个发送者，采用中间调解者（缓冲为 1 的 channel），发送者或接收者中的任何一个都可以向中间调解者发送信号来关闭通道；</li></ol><h2 id="_9-gc" tabindex="-1"><a class="header-anchor" href="#_9-gc" aria-hidden="true">#</a> 9. GC</h2><p>三色标记法：</p><ul><li>白色：不确定对象</li><li>灰色：存活对象，子对象待处理</li><li>黑色：存活对象</li></ul><p>写屏障 (Write Barrier)：</p><p>当对象新增或更新时，将其着色为灰色。</p><p>流程：</p><ol><li>标记准备 (Mark Setup, 需STW)， 打开写屏障</li><li>使用三色标记 (Marking，并发)</li><li>标记结束 (Mark Termination, 需 STW)，关闭写屏障</li><li>清理 (Sweeping，并发)</li></ol><h2 id="_10-gc-触发条件" tabindex="-1"><a class="header-anchor" href="#_10-gc-触发条件" aria-hidden="true">#</a> 10. GC 触发条件</h2><ul><li>主动触发，调用 <code>rumtime.GC</code></li><li>被动触发： <ul><li>用系统监控，当超过两分钟没有产生任何 GC 时，强制触发 GC</li><li>使用步调（Pacing）算法，其核心思想是控制内存增长的比例</li></ul></li></ul><h2 id="_11-栈空间管理" tabindex="-1"><a class="header-anchor" href="#_11-栈空间管理" aria-hidden="true">#</a> 11. 栈空间管理</h2><p>Golang 分配内存有两个地方：</p><ul><li>堆：动态分配内存；</li><li>栈：采用<strong>连续栈</strong>以减少内存碎片的产生，运行时会自动执行栈扩容；</li></ul><h2 id="_12-golang-锁" tabindex="-1"><a class="header-anchor" href="#_12-golang-锁" aria-hidden="true">#</a> 12. Golang 锁</h2><ul><li>互斥锁 <code>sync.Mutex</code></li><li>读写锁 <code>sync.RWMutext</code></li><li><code>sync.Map</code></li></ul><h2 id="_13-defer" tabindex="-1"><a class="header-anchor" href="#_13-defer" aria-hidden="true">#</a> 13. defer</h2><ol><li><p>函数中的多个 defer 按照 后进先出(LIFO) 的顺序执行。</p></li><li><p>return 不是原子操作，会被拆分为：</p><ul><li>创建一个临时变量保存返回值 （若为有名的返回值则不会）， 给返回值赋值 (rval)</li><li>调用 defer</li><li>返回给调用者 (ret)</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">increase2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">increase</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ret<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">increase2</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		n<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先给返回值赋值, ret = n (<code>increase</code>); 创建临时变量并赋值 n (<code>increase2</code>)</li><li>调用 defer , ret++; n++</li><li>返回ret，为 2 ; 返回 1，因为 defer 中的计算未影响返回值</li></ul></li><li><p>defer 底层使用<strong>链表</strong>实现。</p></li></ol><h2 id="_14-select" tabindex="-1"><a class="header-anchor" href="#_14-select" aria-hidden="true">#</a> 14. select</h2><p>golang 的 select 实现了和 select, poll, epoll 相似的功能：监听多个描述符的读写等事件，一旦某个描述符就绪，则将发生的事情通知给关心的程序去处理。</p><p>select有个重点，就是为了监听事件执行的公平性，引入了pollorder，lockorder来确保公平性，同时case的执行也是随机性。会有很多考题考这个随机性。 而且selelct这种写法，配合for，可以将channel的阻塞式写法，变成非阻塞式（其实就是for循环，不停select，看看有没有事件就绪）。</p><h2 id="_15-go-中原子操作和-cas" tabindex="-1"><a class="header-anchor" href="#_15-go-中原子操作和-cas" aria-hidden="true">#</a> 15. Go 中原子操作和 CAS</h2><p>CAS (Compare and Swap)，为原子操作的一种，将内存中的值和指定数据进行比较，当数值一样时将内存中的数据替换为新的值。</p><p>Go中的CAS操作是借用了CPU提供的原子性指令来实现。CAS操作修改共享变量时候不需要对共享变量加锁，而是通过类似乐观锁的方式进行检查，<strong>本质还是不断的占用CPU 资源换取加锁带来的开销</strong>（比如上下文切换开销）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;sync/atomic&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	counter <span class="token builtin">int32</span>          <span class="token comment">//计数器</span>
	wg      sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">//信号量</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	threadNum <span class="token operator">:=</span> <span class="token number">5</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>threadNum<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">incCounter</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">incCounter</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	spinNum <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 原子操作</span>
		old <span class="token operator">:=</span> counter
		ok <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">,</span> old<span class="token punctuation">,</span> old<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			spinNum<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread,%d,spinnum,%d\\n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> spinNum<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-内存逃逸" tabindex="-1"><a class="header-anchor" href="#_16-内存逃逸" aria-hidden="true">#</a> 16. 内存逃逸</h2><p>内存逃逸的五种情况:</p><ol><li>发送指针的指针或值包含了指针到<code>channel</code> 中，由于在编译阶段无法确定其作用域与传递的路径，所以一般都会逃逸到堆上分配。</li><li>slices 中的值是指针的指针或包含指针字段。一个例子是类似<code>[]*string</code> 的类型。这总是导致 slice 的逃逸。即使切片的底层存储数组仍可能位于堆栈上，数据的引用也会转移到堆中。</li><li>slice 由于 append 操作超出其容量，因此会导致 slice 重新分配。这种情况下，由于在编译时 slice 的初始大小的已知情况下，将会在栈上分配。如果 slice 的底层存储必须基于仅在运行时数据进行扩展，则它将分配在堆上。</li><li>调用接口类型的方法。接口类型的方法调用是动态调度,实际使用的具体实现只能在运行时确定。考虑一个接口类型为 io.Reader 的变量 r。对 r.Read(b) 的调用将导致 r 的值和字节片b的后续转义并因此分配到堆上。</li><li>尽管能够符合分配到栈的场景，但是其大小不能够在在编译时候确定的情况，也会分配到堆上.</li></ol><p>有效的避免上述的五种逃逸的情况,就可以避免内存逃逸.</p><h2 id="_17-go-对象的内存分配" tabindex="-1"><a class="header-anchor" href="#_17-go-对象的内存分配" aria-hidden="true">#</a> 17. Go 对象的内存分配</h2><p>Go的内存分配原则:</p><p>Go在程序启动的时候，会先向操作系统申请一块内存（注意这时还只是一段虚拟的地址空间，并不会真正地分配内存），切成小块后自己进行管理。</p><h2 id="_18-栈和堆" tabindex="-1"><a class="header-anchor" href="#_18-栈和堆" aria-hidden="true">#</a> 18. 栈和堆</h2><p>栈和堆只是虚拟内存上2块不同功能的内存区域：</p><ul><li>栈在高地址，从高地址向低地址增长。</li><li>堆在低地址，从低地址向高地址增长。</li></ul><p>栈和堆相比优势：</p><ul><li>栈的内存管理简单，分配比堆上快。</li><li>栈的内存不需要回收，而堆需要，无论是主动free，还是被动的垃圾回收，这都需要花费额外的CPU。</li><li>栈上的内存有更好的局部性，堆上内存访问就不那么友好了，CPU访问的2块数据可能在不同的页上，CPU访问数据的时间可能就上去了。</li></ul><h2 id="_19-堆内存分配" tabindex="-1"><a class="header-anchor" href="#_19-堆内存分配" aria-hidden="true">#</a> 19. 堆内存分配</h2><p>堆内存管理中主要是三部分</p><ol><li><p>分配内存块</p></li><li><p>回收内存块,</p></li><li><p>组织内存块。</p></li></ol><h2 id="_20-defer-中的变量" tabindex="-1"><a class="header-anchor" href="#_20-defer-中的变量" aria-hidden="true">#</a> 20. defer 中的变量</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token number">1</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A1:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	a<span class="token operator">++</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A2:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	a<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A2: 3
A1: 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>defer 调用的函数的参数值在<strong>定义</strong>时确定，而函数<strong>内部</strong>的值需要在<strong>执行</strong>时确定。</p><h2 id="_21-new-和-make" tabindex="-1"><a class="header-anchor" href="#_21-new-和-make" aria-hidden="true">#</a> 21. new 和 make</h2><ul><li><p>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；</p></li><li><p>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s1 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment">// S1: *[]int, S2: []int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;S1: %T, S2: %T\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>new 分配的空间被清零。make 分配空间后，会进行初始化；</p></li></ul><h2 id="_22-g0" tabindex="-1"><a class="header-anchor" href="#_22-g0" aria-hidden="true">#</a> 22. G0</h2><p>G0 用于：</p><ul><li>寻找其他普通的 G 来执行</li><li>创建 G</li><li>垃圾回收相关</li><li>等等</li></ul>`,130),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","golang.html.vue"]]);export{d as default};
