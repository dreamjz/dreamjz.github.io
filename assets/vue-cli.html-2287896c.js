import{_ as o,Z as p,$ as i,a0 as n,a1 as s,a2 as e,a3 as t,H as c}from"./framework-09afcf0b.js";const l={},r=t('<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li><p>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</p></li><li><p>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。</p></li><li><p>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：</p><ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li><p>一个丰富的官方插件集合，集成了前端生态中最好的工具。</p></li><li><p>一套完全图形化的创建和管理 Vue.js 项目的用户界面</p></li></ul><h2 id="_2-组件" tabindex="-1"><a class="header-anchor" href="#_2-组件" aria-hidden="true">#</a> 2. 组件</h2><p>Vue CLI 有几个独立的部分：</p><ul><li>CLI</li><li>CLI 服务</li><li>CLI 插件</li></ul><h3 id="_2-1-cli" tabindex="-1"><a class="header-anchor" href="#_2-1-cli" aria-hidden="true">#</a> 2.1 CLI</h3><p>CLI (<code>@vue/cli</code>) 是一个全局安装的 npm 包，提供了终端里的 <code>vue</code> 命令。它可以通过 <code>vue create</code> 快速搭建一个新项目，或者直接通过 <code>vue serve</code> 构建新想法的原型。你也可以通过 <code>vue ui</code> 通过一套图形化界面管理你的所有项目。我们会在接下来的指南中逐章节深入介绍</p><h3 id="_2-2-cli-服务" tabindex="-1"><a class="header-anchor" href="#_2-2-cli-服务" aria-hidden="true">#</a> 2.2 CLI 服务</h3><p>CLI 服务 (<code>@vue/cli-service</code>) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 <code>@vue/cli</code> 创建的项目中。</p>',10),d={href:"http://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},v=t(`<ul><li>加载其它 CLI 插件的核心服务；</li><li>一个针对绝大部分应用优化过的内部的 webpack 配置；</li><li>项目内部的 <code>vue-cli-service</code> 命令，提供 <code>serve</code>、<code>build</code> 和 <code>inspect</code> 命令</li></ul><h3 id="_2-3-cli-插件" tabindex="-1"><a class="header-anchor" href="#_2-3-cli-插件" aria-hidden="true">#</a> 2.3 CLI 插件</h3><p>CLI 插件是向你的 Vue 项目提供可选功能的 npm 包，例如 Babel/TypeScript 转译、ESLint 集成、单元测试和 end-to-end 测试等。Vue CLI 插件的名字以 <code>@vue/cli-plugin-</code> (内建插件) 或 <code>vue-cli-plugin-</code> (社区插件) 开头，非常容易使用。</p><p>当你在项目内部运行 <code>vue-cli-service</code> 命令时，它会自动解析并加载 <code>package.json</code> 中列出的所有 CLI 插件。</p><p>插件可以作为项目创建过程的一部分，或在后期加入到项目中。它们也可以被归成一组可复用的 preset</p><h2 id="_3-安装" tabindex="-1"><a class="header-anchor" href="#_3-安装" aria-hidden="true">#</a> 3. 安装</h2><p>可以使用下列任一命令安装这个新的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli
<span class="token comment"># OR</span>
<span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装之后查看版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我使用 yarn 全局安装后，提示无法找到命令(OS:Manjaro,SHELL:zsh)，需要将 <code>$HOME/.yarn/bin</code>添加加到<code>PATH</code>环境变量:</p><p>在<code>$HOME/.zshrc</code>中添加</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token environment constant">$HOME</span>/.yarn/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-1-升级" tabindex="-1"><a class="header-anchor" href="#_3-1-升级" aria-hidden="true">#</a> 3.1 升级</h3><p>升级全局的 Vue CLI 包，运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> update <span class="token parameter variable">-g</span> @vue/cli
<span class="token comment"># OR</span>
<span class="token function">yarn</span> global upgrade <span class="token parameter variable">--latest</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-项目依赖" tabindex="-1"><a class="header-anchor" href="#_3-2-项目依赖" aria-hidden="true">#</a> 3.2 项目依赖</h3><p>上面列出来的命令是用于升级全局的 Vue CLI。如需升级项目中的 Vue CLI 相关模块（以 <code>@vue/cli-plugin-</code> 或 <code>vue-cli-plugin-</code> 开头），请在项目目录下运行 <code>vue upgrade</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用法： upgrade [options] [plugin-name]

（试用）升级 Vue CLI 服务及插件

选项：
  -t, --to &lt;version&gt;    升级 &lt;plugin-name&gt; 到指定的版本
  -f, --from &lt;version&gt;  跳过本地版本检测，默认插件是从此处指定的版本升级上来
  -r, --registry &lt;url&gt;  使用指定的 registry 地址安装依赖
  --all                 升级所有的插件
  --next                检查插件新版本时，包括 alpha/beta/rc 版本在内
  -h, --help            输出帮助内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-快速原型开发" tabindex="-1"><a class="header-anchor" href="#_4-快速原型开发" aria-hidden="true">#</a> 4. 快速原型开发</h2><p>可以使用 <code>vue serve</code> 和 <code>vue build</code> 命令对单个 <code>*.vue</code> 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli-service-global
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue serve</code> 的缺点就是它需要安装全局依赖，这使得它在不同机器上的一致性不能得到保证。因此这只适用于快速原型开发</p><h4 id="_4-1-vue-serve" tabindex="-1"><a class="header-anchor" href="#_4-1-vue-serve" aria-hidden="true">#</a> 4.1 vue serve</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Usage: serve [options] [entry]

在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器


Options:

  -o, --open  打开浏览器
  -c, --copy  将本地 URL 复制到剪切板
  -h, --help  输出用法信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你所需要的仅仅是一个 <code>App.vue</code> 文件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在这个 <code>App.vue</code> 文件所在的目录下运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue serve</code> 使用了和 <code>vue create</code> 创建的项目相同的默认设置 (webpack、Babel、PostCSS 和 ESLint)。它会在当前目录自动推导入口文件——入口可以是 <code>main.js</code>、<code>index.js</code>、<code>App.vue</code> 或 <code>app.vue</code> 中的一个。你也可以显式地指定入口文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue serve MyComponent.vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要，你还可以提供一个 <code>index.html</code>、<code>package.json</code>、安装并使用本地依赖、甚至通过相应的配置文件配置 Babel、PostCSS 和 ESLint</p><h4 id="_4-2-vue-build" tabindex="-1"><a class="header-anchor" href="#_4-2-vue-build" aria-hidden="true">#</a> 4.2 vue build</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Usage: build [options] [entry]

在生产环境模式下零配置构建一个 .js 或 .vue 文件


Options:

  -t, --target &lt;target&gt;  构建目标 (app | lib | wc | wc-async, 默认值：app)
  -n, --name &lt;name&gt;      库的名字或 Web Components 组件的名字 (默认值：入口文件名)
  -d, --dest &lt;dir&gt;       输出目录 (默认值：dist)
  -h, --help             输出用法信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>vue build</code> 将目标文件构建成一个生产环境的包并用来部署：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue build MyComponent.vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue build</code> 也提供了将组件构建成为一个库或一个 Web Components 组件的能力</p><h2 id="_5-创建一个项目" tabindex="-1"><a class="header-anchor" href="#_5-创建一个项目" aria-hidden="true">#</a> 5. 创建一个项目</h2><h4 id="_5-1-vue-create" tabindex="-1"><a class="header-anchor" href="#_5-1-vue-create" aria-hidden="true">#</a> 5.1 vue create</h4><p>使用<code>vue create </code>来创建一个新项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue create</code> 命令有一些可选项，你可以通过运行以下命令进行探索：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create <span class="token parameter variable">--help</span>
用法：create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">&gt;</span>

创建一个由 <span class="token variable"><span class="token variable">\`</span>vue-cli-service<span class="token variable">\`</span></span> 提供支持的新项目


选项：

  -p, <span class="token parameter variable">--preset</span> <span class="token operator">&lt;</span>presetName<span class="token operator">&gt;</span>       忽略提示符并使用已保存的或远程的预设选项
  -d, <span class="token parameter variable">--default</span>                   忽略提示符并使用默认预设选项
  -i, <span class="token parameter variable">--inlinePreset</span> <span class="token operator">&lt;</span>json<span class="token operator">&gt;</span>       忽略提示符并使用内联的 JSON 字符串预设选项
  -m, <span class="token parameter variable">--packageManager</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>  在安装依赖时使用指定的 <span class="token function">npm</span> 客户端
  -r, <span class="token parameter variable">--registry</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>            在安装依赖时使用指定的 <span class="token function">npm</span> registry
  -g, <span class="token parameter variable">--git</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>             强制 / 跳过 <span class="token function">git</span> 初始化，并可选的指定初始化提交信息
  -n, --no-git                    跳过 <span class="token function">git</span> 初始化
  -f, <span class="token parameter variable">--force</span>                     覆写目标目录可能存在的配置
  -c, <span class="token parameter variable">--clone</span>                     使用 <span class="token function">git</span> clone 获取远程预设选项
  -x, <span class="token parameter variable">--proxy</span>                     使用指定的代理创建项目
  -b, <span class="token parameter variable">--bare</span>                      创建项目时省略默认组件中的新手指导信息
  -h, <span class="token parameter variable">--help</span>                      输出使用帮助信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-使用-gui-界面" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-gui-界面" aria-hidden="true">#</a> 5.2 使用 GUI 界面</h4><p>你也可以通过 <code>vue ui</code> 命令以图形化界面创建和管理项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程</p><h2 id="_6-插件和-preset" tabindex="-1"><a class="header-anchor" href="#_6-插件和-preset" aria-hidden="true">#</a> 6. 插件和 Preset</h2><h3 id="_6-1-插件" tabindex="-1"><a class="header-anchor" href="#_6-1-插件" aria-hidden="true">#</a> 6.1 插件</h3><p>Vue CLI 使用了一套基于插件的架构。如果你查阅一个新创建项目的 <code>package.json</code>，就会发现依赖都是以 <code>@vue/cli-plugin-</code> 开头的。插件可以修改 webpack 的内部配置，也可以向 <code>vue-cli-service</code> 注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的</p><h4 id="_6-1-1-现有项目中安装插件" tabindex="-1"><a class="header-anchor" href="#_6-1-1-现有项目中安装插件" aria-hidden="true">#</a> 6.1.1 现有项目中安装插件</h4><p>每个 CLI 插件都会包含一个 (用来创建文件的) 生成器和一个 (用来调整 webpack 核心配置和注入命令的) 运行时插件。当你使用 <code>vue create</code> 来创建一个新项目的时候，有些插件会根据你选择的特性被预安装好。如果你想在一个已经被创建好的项目中安装一个插件，可以使用 <code>vue add</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue <span class="token function">add</span> eslint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue add</code> 的设计意图是为了安装和调用 Vue CLI 插件。这不意味着替换掉普通的 npm 包。对于这些普通的 npm 包，你仍然需要选用包管理器。</p><p>这个命令将 <code>@vue/eslint</code> 解析为完整的包名 <code>@vue/cli-plugin-eslint</code>，然后从 npm 安装它，调用它的生成器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这个和之前的用法等价</span>
vue <span class="token function">add</span> cli-plugin-eslint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不带 <code>@vue</code> 前缀，该命令会换作解析一个 unscoped 的包。例如以下命令会安装第三方插件 <code>vue-cli-plugin-apollo</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装并调用 vue-cli-plugin-apollo</span>
vue <span class="token function">add</span> apollo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以基于一个指定的 scope 使用第三方插件。例如如果一个插件名为 <code>@foo/vue-cli-plugin-bar</code>，你可以这样添加它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue <span class="token function">add</span> @foo/bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以向被安装的插件传递生成器选项 (这样做会跳过命令提示)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue <span class="token function">add</span> eslint <span class="token parameter variable">--config</span> airbnb <span class="token parameter variable">--lintOn</span> save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一个插件已经被安装，你可以使用 <code>vue invoke</code> 命令跳过安装过程，只调用它的生成器。这个命令会接受和 <code>vue add</code> 相同的参数。</p><p>如果出于一些原因你的插件列在了该项目之外的其它 <code>package.json</code> 文件里，你可以在自己项目的 <code>package.json</code> 里设置 <code>vuePlugins.resolveFrom</code> 选项指向包含其它 <code>package.json</code> 的文件夹。</p><p>例如，如果你有一个 <code>.config/package.json</code> 文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;vuePlugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;resolveFrom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.config&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-2-项目本地的插件" tabindex="-1"><a class="header-anchor" href="#_6-1-2-项目本地的插件" aria-hidden="true">#</a> 6.1.2 项目本地的插件</h4><p>如果你需要在项目里直接访问插件 API 而不需要创建一个完整的插件，你可以在 <code>package.json</code> 文件中使用 <code>vuePlugins.service</code> 选项：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;vuePlugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;service&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;my-commands.js&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个文件都需要暴露一个函数，接受插件 API 作为第一个参数</p><p>你也可以通过 <code>vuePlugins.ui</code> 选项添加像 UI 插件一样工作的文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;vuePlugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ui&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;my-ui.js&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-preset" tabindex="-1"><a class="header-anchor" href="#_6-2-preset" aria-hidden="true">#</a> 6.2 Preset</h3><p>一个 Vue CLI preset 是一个包含创建新项目所需预定义选项和插件的 JSON 对象，让用户无需在命令提示中选择它们。</p><p>在 <code>vue create</code> 过程中保存的 preset 会被放在你的 home 目录下的一个配置文件中 (<code>~/.vuerc</code>)。你可以通过直接编辑这个文件来调整、添加、删除保存好的 preset。</p><p>这里有一个 preset 的示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useConfigFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cssPreprocessor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sass&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vue/cli-plugin-babel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-plugin-eslint&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token string">&quot;airbnb&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;lintOn&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-plugin-router&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-plugin-vuex&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Preset 的数据会被插件生成器用来生成相应的项目文件。除了上述这些字段，你也可以为集成工具添加配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useConfigFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;configs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;postcss&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslintConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;jest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些额外的配置将会根据 <code>useConfigFiles</code> 的值被合并到 <code>package.json</code> 或相应的配置文件中。例如，当 <code>&quot;useConfigFiles&quot;: true</code> 的时候，<code>configs</code> 的值将会被合并到 <code>vue.config.js</code> 中。</p><h4 id="_6-2-1-preset-插件的版本管理" tabindex="-1"><a class="header-anchor" href="#_6-2-1-preset-插件的版本管理" aria-hidden="true">#</a> 6.2.1 Preset 插件的版本管理</h4><p>你可以显式地指定用到的插件的版本：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vue/cli-plugin-eslint&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.0.0&quot;</span>
      <span class="token comment">// ... 该插件的其它选项</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意对于官方插件来说这不是必须的——当被忽略时，CLI 会自动使用 registry 中最新的版本。不过<strong>我们推荐为 preset 列出的所有第三方插件提供显式的版本范围</strong>。</p><h4 id="_6-2-2-允许插件的命令提示" tabindex="-1"><a class="header-anchor" href="#_6-2-2-允许插件的命令提示" aria-hidden="true">#</a> 6.2.2 允许插件的命令提示</h4><p>每个插件在项目创建的过程中都可以注入它自己的命令提示，不过当你使用了一个 preset，这些命令提示就会被跳过，因为 Vue CLI 假设所有的插件选项都已经在 preset 中声明过了。</p><p>在有些情况下你可能希望 preset 只声明需要的插件，同时让用户通过插件注入的命令提示来保留一些灵活性。</p><p>对于这种场景你可以在插件选项中指定 <code>&quot;prompts&quot;: true</code> 来允许注入命令提示：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vue/cli-plugin-eslint&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 让用户选取他们自己的 ESLint config</span>
      <span class="token property">&quot;prompts&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-3-远程-preset" tabindex="-1"><a class="header-anchor" href="#_6-2-3-远程-preset" aria-hidden="true">#</a> 6.2.3 远程 Preset</h4><p>你可以通过发布 git repo 将一个 preset 分享给其他开发者。这个 repo 应该包含以下文件：</p>`,91),m=n("li",null,[n("code",null,"preset.json"),s(": 包含 preset 数据的主要文件（必需）。")],-1),k=n("code",null,"generator.js",-1),b={href:"https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#generator",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"prompts.js",-1),g={href:"https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AF%B9%E8%AF%9D",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>发布 repo 后，你就可以在创建项目的时候通过 <code>--preset</code> 选项使用这个远程的 preset 了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从 GitHub repo 使用 preset</span>
vue create <span class="token parameter variable">--preset</span> username/repo my-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>GitLab 和 BitBucket 也是支持的。如果要从私有 repo 获取，请确保使用 <code>--clone</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create <span class="token parameter variable">--preset</span> gitlab:username/repo <span class="token parameter variable">--clone</span> my-project
vue create <span class="token parameter variable">--preset</span> bitbucket:username/repo <span class="token parameter variable">--clone</span> my-project

<span class="token comment"># 私有服务器</span>
vue create <span class="token parameter variable">--preset</span> gitlab:my-gitlab-server.com:group/projectname <span class="token parameter variable">--clone</span> my-project
vue create <span class="token parameter variable">--preset</span> direct:ssh://git@my-gitlab-server.com/group/projectname.git <span class="token parameter variable">--clone</span> my-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-4-加载文件系统中的-preset" tabindex="-1"><a class="header-anchor" href="#_6-2-4-加载文件系统中的-preset" aria-hidden="true">#</a> 6.2.4 加载文件系统中的 Preset</h4><p>当开发一个远程 preset 的时候，你必须不厌其烦的向远程 repo 发出 push 进行反复测试。为了简化这个流程，你也可以直接在本地测试 preset。如果 <code>--preset</code> 选项的值是一个相对或绝对文件路径，或是以 <code>.json</code> 结尾，则 Vue CLI 会加载本地的 preset：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ./my-preset 应当是一个包含 preset.json 的文件夹</span>
vue create <span class="token parameter variable">--preset</span> ./my-preset my-project

<span class="token comment"># 或者，直接使用当前工作目录下的 json 文件：</span>
vue create <span class="token parameter variable">--preset</span> my-preset.json my-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-cli-服务" tabindex="-1"><a class="header-anchor" href="#_7-cli-服务" aria-hidden="true">#</a> 7. CLI 服务</h2><h3 id="_7-1-使用命令" tabindex="-1"><a class="header-anchor" href="#_7-1-使用命令" aria-hidden="true">#</a> 7.1 使用命令</h3><p>在一个 Vue CLI 项目中，<code>@vue/cli-service</code>安装了名为 <code>vue-cli-service</code>的命令，可以在 npm scripts 中以 <code>vue-cli-service</code>，或者从终端中以<code>./node_modules/.bin/vue-cli-service</code>访问这个命令</p><p>使用 preset 项目的<code>package.json</code>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 npm 或 yarn 调用这些 script</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run serve
<span class="token comment"># OR</span>
<span class="token function">yarn</span> serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),f={href:"https://github.com/npm/npx",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vue-cli-service serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-2-vue-cli-service-serve" tabindex="-1"><a class="header-anchor" href="#_7-2-vue-cli-service-serve" aria-hidden="true">#</a> 7.2 vue-cli-service serve</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用法：vue-cli-service serve [options] [entry]

选项：

  --open    在服务器启动时打开浏览器
  --copy    在服务器启动时将 URL 复制到剪切版
  --mode    指定环境模式 (默认值：development)
  --host    指定 host (默认值：0.0.0.0)
  --port    指定 port (默认值：8080)
  --https   使用 https (默认值：false)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vue-cli-service serve</code>命令会启动一个开发服务器(基于<code>webpack-dev-server</code>)并附带开相机用的模块热重载(Module-Replacement)</p><p>除了通过命令行参数，可以使用<code>vue.config.js</code>中的<code>devServer</code>配置开发服务器</p><p>命令行参数 <code>[entry]</code> 将被指定为唯一入口，而非额外的追加入口。尝试使用 <code>[entry]</code> 覆盖 <code>config.pages</code> 中的 <code>entry</code> 将可能引发错误</p><h3 id="_7-3-vue-cli-service-build" tabindex="-1"><a class="header-anchor" href="#_7-3-vue-cli-service-build" aria-hidden="true">#</a> 7.3 vue-cli-service build</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用法：vue-cli-service build [options] [entry|pattern]

选项：

  --mode        指定环境模式 (默认值：production)
  --dest        指定输出目录 (默认值：dist)
  --modern      面向现代浏览器带自动回退地构建应用
  --target      app | lib | wc | wc-async (默认值：app)
  --name        库或 Web Components 模式下的名字 (默认值：package.json 中的 &quot;name&quot; 字段或入口文件名)
  --no-clean    在构建项目之前不清除目标目录
  --report      生成 report.html 以帮助分析包内容
  --report-json 生成 report.json 以帮助分析包内容
  --watch       监听文件变化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vue-cli-service build</code>会在<code>dist/</code> 目录产生一个可用于生产环境的包，带有 JS/CSS/HTML 的压缩，和为了更好的缓存而做的自动的 vendor chunk spliting, 它的 chunk manifest 会内联在 HTML 中</p>`,9),y=n("code",null,"--modern",-1),j={href:"https://cli.vuejs.org/zh/guide/browser-compatibility.html#%E7%8E%B0%E4%BB%A3%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("code",null,"--target"),s(": 允许你将项目中的任何组件以一个库或 Web Components 组件的方式进行构建")],-1),q=n("li",null,[n("code",null,"--report"),s(" 和 "),n("code",null,"--report-json"),s("：会根据构建统计生成报告，它会帮助你分析包中包含的模块们的大小")],-1),E=t(`<h3 id="_7-4-vue-cli-service-inspect" tabindex="-1"><a class="header-anchor" href="#_7-4-vue-cli-service-inspect" aria-hidden="true">#</a> 7.4 vue-cli-service inspect</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用法：vue-cli-service inspect [options] [...paths]

选项：

  --mode    指定环境模式 (默认值：development)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>vue-cli-service inspect</code> 来审查一个 Vue CLI 项目的 webpack config</p><h3 id="_7-5-查看所有的可用命令" tabindex="-1"><a class="header-anchor" href="#_7-5-查看所有的可用命令" aria-hidden="true">#</a> 7.5 查看所有的可用命令</h3><p>有些 CLI 插件会向 <code>vue-cli-service</code> 注入额外的命令。例如 <code>@vue/cli-plugin-eslint</code> 会注入 <code>vue-cli-service lint</code> 命令。你可以运行以下命令查看所有注入的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vue-cli-service <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以这样学习每个命令可用的选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vue-cli-service <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-6-缓存和并行处理" tabindex="-1"><a class="header-anchor" href="#_7-6-缓存和并行处理" aria-hidden="true">#</a> 7.6 缓存和并行处理</h3><ul><li><code>cache-loader</code> 会默认为 Vue/Babel/TypeScript 编译开启。文件会缓存在 <code>node_modules/.cache</code> 中——如果遇到了编译方面的问题，记得先删掉缓存目录之后再试试看</li><li><code>thread-loader</code> 会在多核 CPU 的机器上为 Babel/TypeScript 转译开启</li></ul><h3 id="_7-7-git-hook" tabindex="-1"><a class="header-anchor" href="#_7-7-git-hook" aria-hidden="true">#</a> 7.7 Git Hook</h3>`,11),S=n("code",null,"@vue/cli-service",-1),C={href:"https://github.com/yyx990803/yorkie",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"package.json",-1),P=n("code",null,"gitHooks",-1),V=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;gitHooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue-cli-service lint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;git add&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-8-配置时无需-eject" tabindex="-1"><a class="header-anchor" href="#_7-8-配置时无需-eject" aria-hidden="true">#</a> 7.8 配置时无需 Eject</h3><p>通过 <code>vue create</code> 创建的项目无需额外的配置就已经可以跑起来了。插件的设计也是可以相互共存的，所以绝大多数情况下，你只需要在交互式命令提示中选取需要的功能即可</p><h2 id="_8-浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#_8-浏览器兼容性" aria-hidden="true">#</a> 8. 浏览器兼容性</h2><h3 id="_8-1-browserslist" tabindex="-1"><a class="header-anchor" href="#_8-1-browserslist" aria-hidden="true">#</a> 8.1 browserslist</h3>`,5),A=n("code",null,"package.json",-1),I=n("code",null,"browserslist",-1),O=n("code",null,".browserslistrc",-1),R={href:"https://new.babeljs.io/docs/en/next/babel-preset-env.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/postcss/autoprefixer",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/ai/browserslist",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"_8-3-polyfill",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-3-polyfill","aria-hidden":"true"},"#"),s(" 8.3 Polyfill")],-1),W=n("p",null,[n("strong",null,"useBuiltIns: 'usage'")],-1),D={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"@babel/preset-env",-1),T=n("code",null,"browserslist",-1),z={href:"https://new.babeljs.io/docs/en/next/babel-preset-env.html#usebuiltins-usage",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"useBuiltIns: 'usage'",-1),F=n("code",null,"@babel/preset-env",-1),$=n("strong",null,"如果其中一个依赖需要特殊的 polyfill，默认情况下 Babel 无法将其检测出来。",-1),J=n("p",null,"如果有依赖需要 polyfill，你有几种选择：",-1),G=n("strong",null,"如果该依赖基于一个目标环境不支持的 ES 版本撰写:",-1),Y=n("code",null,"vue.config.js",-1),Q={href:"https://cli.vuejs.org/zh/config/#transpiledependencies",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"transpileDependencies",-1),X=n("strong",null,"如果该依赖交付了 ES5 代码并显式地列出了需要的 polyfill:",-1),Z=n("code",null,"@vue/babel-preset-app",-1),nn={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app#polyfills",target:"_blank",rel:"noopener noreferrer"},sn=n("strong",null,[s("注意 "),n("code",null,"es.promise"),s(" 将被默认包含，因为现在的库依赖 Promise 是非常普遍的。")],-1),an=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;@vue/app&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">polyfills</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;es.promise&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;es.symbol&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p><p>我们推荐以这种方式添加 polyfill 而不是在源代码中直接导入它们，因为如果这里列出的 polyfill 在 <code>browserslist</code> 的目标中不需要，则它会被自动排除。</p>`,3),en=n("li",null,[n("p",null,[n("strong",null,[s("如果该依赖交付 ES5 代码，但使用了 ES6+ 特性且没有显式地列出需要的 polyfill (例如 Vuetify)：**请使用 "),n("code",null,"useBuiltIns: 'entry'"),s(" 然后在入口文件添加 "),n("code",null,"import 'core-js/stable'; import 'regenerator-runtime/runtime';"),s("。这会根据 "),n("code",null,"browserslist"),s(" 目标导入**所有")]),s(" polyfill，这样你就不用再担心依赖的 polyfill 问题了，但是因为包含了一些没有用到的 polyfill 所以最终的包大小可能会增加。")])],-1),tn=n("h3",{id:"_8-3-构建库或是-web-component-时的-polyfills",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-3-构建库或是-web-component-时的-polyfills","aria-hidden":"true"},"#"),s(" 8.3 构建库或是 Web Component 时的 Polyfills")],-1),on={href:"https://cli.vuejs.org/zh/guide/build-targets.html",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"@vue/babel-preset-app",-1),cn=n("code",null,"useBuiltIns: false",-1),ln=t(`<h3 id="_8-5-现代模式" tabindex="-1"><a class="header-anchor" href="#_8-5-现代模式" aria-hidden="true">#</a> 8.5 现代模式</h3><p>有了 Babel 我们可以兼顾所有最新的 ES2015+ 语言特性，但也意味着我们需要交付转译和 polyfill 后的包以支持旧浏览器。这些转译后的包通常都比原生的 ES2015+ 代码会更冗长，运行更慢。现如今绝大多数现代浏览器都已经支持了原生的 ES2015，所以因为要支持更老的浏览器而为它们交付笨重的代码是一种浪费。</p><p>Vue CLI 提供了一个“现代模式”帮你解决这个问题。以如下命令为生产环境构建：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue-cli-service build <span class="token parameter variable">--modern</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),rn={href:"https://jakearchibald.com/2017/es-modules-in-browsers/",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/",target:"_blank",rel:"noopener noreferrer"},un=t(`<ul><li>现代版的包会通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 在被支持的浏览器中加载；它们还会使用 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 进行预加载。</li><li>旧版的包会通过 <code>&lt;script nomodule&gt;</code> 加载，并会被支持 ES modules 的浏览器忽略。</li><li>一个针对 Safari 10 中 <code>&lt;script nomodule&gt;</code> 的修复会被自动注入。</li></ul><p>对于一个 Hello World 应用来说，现代版的包已经小了 16%。在生产环境下，现代版的包通常都会表现出显著的解析速度和运算速度，从而改善应用的加载性能。</p><p><strong>提示</strong></p><p>需要配合始终开启的 CORS 进行加载。这意味着你的服务器必须返回诸如 Access-Control-Allow-Origin: * 的有效的 CORS 头。如果你想要通过认证来获取脚本，可使将 crossorigin 选项设置为 use-credentials。</p><p>同时，现代浏览器使用一段内联脚本来避免 Safari 10 重复加载脚本包，所以如果你在使用一套严格的 CSP，你需要这样显性地允许内联脚本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Security-Policy: script-src &#39;self&#39; &#39;sha256-4RS22DYeB7U14dra4KcQYxmwt5HkOInieXK1NUMBmQI=&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_9-html-和静态资源" tabindex="-1"><a class="header-anchor" href="#_9-html-和静态资源" aria-hidden="true">#</a> 9. HTML 和静态资源</h2><h3 id="_9-1-html" tabindex="-1"><a class="header-anchor" href="#_9-1-html" aria-hidden="true">#</a> 9.1 HTML</h3><h4 id="_9-1-1-index-文件" tabindex="-1"><a class="header-anchor" href="#_9-1-1-index-文件" aria-hidden="true">#</a> 9.1.1 Index 文件</h4>`,9),vn=n("code",null,"public/index.html",-1),mn={href:"https://github.com/jantimon/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},kn=n("p",null,[s("Vue CLI 也会自动注入 resource hint ("),n("code",null,"preload/prefetch"),s("、manifest 和图标链接 (当用到 PWA 插件时) 以及构建过程中处理的 JavaScript 和 CSS 文件的资源链接")],-1),bn=n("h4",{id:"_9-1-2-差值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-2-差值","aria-hidden":"true"},"#"),s(" 9.1.2 差值")],-1),hn={href:"https://lodash.com/docs/4.17.10#template",target:"_blank",rel:"noopener noreferrer"},gn=n("ul",null,[n("li",null,[n("code",null,"<%= VALUE %>"),s(": 用作不转义插值")]),n("li",null,[n("code",null,"<%- VALUE %>"),s(": 用作 HTML 转义插值")]),n("li",null,[n("code",null,"<% expression %>"),s(": 用于描述 js 流程控制")])],-1),_n={href:"https://github.com/jantimon/html-webpack-plugin#writing-your-own-templates",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"html-webpack-plugin",-1),xn={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#using-env-variables-in-client-side-code",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"BASE_URL",-1),jn=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= BASE_URL %&gt;favicon.ico<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-1-3-preload" tabindex="-1"><a class="header-anchor" href="#_9-1-3-preload" aria-hidden="true">#</a> 9.1.3 Preload</h4>`,2),wn={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content",target:"_blank",rel:"noopener noreferrer"},qn=n("p",null,"默认情况下，一个 Vue CLI 应用会为所有初始化渲染需要的文件自动生成 preload 提示。",-1),En={href:"https://github.com/vuejs/preload-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"chainWebpack",-1),Cn=n("code",null,"config.plugin('preload')",-1),Ln=n("h4",{id:"_9-1-4-prefetch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-4-prefetch","aria-hidden":"true"},"#"),s(" 9.1.4 Prefetch")],-1),Pn={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://webpack.js.org/guides/code-splitting/#dynamic-imports",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"import()",-1),In={href:"https://github.com/vuejs/preload-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"chainWebpack",-1),Rn=n("code",null,"config.plugin('prefetch')",-1),Nn=t(`<p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 移除 prefetch 插件</span>
    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;prefetch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 或者</span>
    <span class="token comment">// 修改它的选项：</span>
    config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">&#39;prefetch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fileBlacklist <span class="token operator">=</span> options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fileBlacklist <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fileBlacklist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">myasyncRoute(.)+?\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> options<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 prefetch 插件被禁用时，你可以通过 webpack 的内联注释手动选定要提前获取的代码区块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&#39;./someAsyncComponent.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>webpack 的运行时会在父级区块被加载之后注入 prefetch 链接</p><p><strong>tips</strong></p><p>Prefetch 链接将会消耗带宽。如果你的应用很大且有很多 async chunk，而用户主要使用的是对带宽较敏感的移动端，那么你可能需要关掉 prefetch 链接并手动选择要提前获取的代码区块</p><h4 id="_9-1-5-不生成-index" tabindex="-1"><a class="header-anchor" href="#_9-1-5-不生成-index" aria-hidden="true">#</a> 9.1.5 不生成 index</h4><p>当基于已有的后端使用 Vue CLI 时，可能不需要生成<code>index.html</code>, 这样生成的资源可以用于一个服务端渲染的页面，可以像 <code>vue.config.js</code>加入以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 去掉文件名中的 hash</span>
  <span class="token literal-property property">filenameHashing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 删除 HTML 相关的 webpack 插件</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;preload&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;prefetch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而这样做并不是很推荐，因为：</p>`,11),Bn=n("li",null,"硬编码的文件名不利于实现高效率的缓存控制。",-1),Un=n("li",null,"硬编码的文件名也无法很好的进行 code-splitting (代码分段)，因为无法用变化的文件名生成额外的 JavaScript 文件。",-1),Wn={href:"https://cli.vuejs.org/zh/guide/browser-compatibility.html#%E7%8E%B0%E4%BB%A3%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://cli.vuejs.org/zh/config/#indexpath",target:"_blank",rel:"noopener noreferrer"},Mn=n("h4",{id:"_9-1-6-构建一个多页应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-6-构建一个多页应用","aria-hidden":"true"},"#"),s(" 9.1.6 构建一个多页应用")],-1),Tn={href:"https://cli.vuejs.org/zh/config/#pages",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"vue.config.js",-1),Hn=n("code",null,"pages",-1),Fn=t(`<h3 id="_9-2-处理静态资源" tabindex="-1"><a class="header-anchor" href="#_9-2-处理静态资源" aria-hidden="true">#</a> 9.2 处理静态资源</h3><p>静态资源可以通过两种方式进行处理：</p><ul><li>在 JavaScript 被导入或在 template/CSS 中通过相对路径被引用。这类引用会被 webpack 处理。</li><li>放置在 <code>public</code> 目录下或通过绝对路径被引用。这类资源将会直接被拷贝，而不会经过 webpack 的处理</li></ul><h4 id="_9-6-1-从相对路径导入" tabindex="-1"><a class="header-anchor" href="#_9-6-1-从相对路径导入" aria-hidden="true">#</a> 9.6.1 从相对路径导入</h4><p>当你在 JavaScript、CSS 或 <code>*.vue</code> 文件中使用相对路径 (必须以 <code>.</code> 开头) 引用一个静态资源时，该资源将会被包含进入 webpack 的依赖图中。在其编译过程中，所有诸如 <code>&lt;img src=&quot;...&quot;&gt;</code>、<code>background: url(...)</code> 和 CSS <code>@import</code> 的资源 URL <strong>都会被解析为一个模块依赖</strong>。</p><p>例如，<code>url(./image.png)</code> 会被翻译为 <code>require(&#39;./image.png&#39;)</code>，而：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./image.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会被编译到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./image.png&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在其内部，我们通过 <code>file-loader</code> 用版本哈希值和正确的公共基础路径来决定最终的文件路径，再用 <code>url-loader</code> 将小于 4kb 的资源内联，以减少 HTTP 请求的数量。</p>`,10),$n={href:"https://cli.vuejs.org/zh/config/#chainwebpack",target:"_blank",rel:"noopener noreferrer"},Jn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;images&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-6-2-url-转换规则" tabindex="-1"><a class="header-anchor" href="#_9-6-2-url-转换规则" aria-hidden="true">#</a> 9.6.2 URL 转换规则</h4><ul><li><p>如果 URL 是一个绝对路径 (例如 <code>/images/foo.png</code>)，它将会被保留不变。</p></li><li><p>如果 URL 以 <code>.</code> 开头，它会作为一个相对模块请求被解释且基于你的文件系统中的目录结构进行解析。</p></li><li><p>如果 URL 以 <code>~</code> 开头，其后的任何内容都会作为一个模块请求被解析。这意味着你甚至可以引用 Node 模块中的资源：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>~some-npm-package/foo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果 URL 以 <code>@</code> 开头，它也会作为一个模块请求被解析。它的用处在于 Vue CLI 默认会设置一个指向 <code>&lt;projectRoot&gt;/src</code> 的别名 <code>@</code></p></li></ul><h4 id="_9-6-3-public-文件夹" tabindex="-1"><a class="header-anchor" href="#_9-6-3-public-文件夹" aria-hidden="true">#</a> 9.6.3 <code>public</code> 文件夹</h4><p>任何放置在 <code>public</code> 文件夹的静态资源将会被简单复制，而不经过 webpack, 需要通过绝对路径引用它们</p><p>推荐将资源作为模块依赖图的一部分导入，这样将会通过 webpack 处理：</p><ul><li>脚本和样式表会被压缩且打包在一起，从而避免额外的网络请求</li><li>文件丢失会直接在编译时报错，而不是到了用户端才产生 404 错误</li><li>最终生成的文件名包含了内容哈希，因此你不必担心浏览器会缓存它们的老版本</li></ul>`,7),Gn=n("code",null,"public",-1),Yn=n("strong",null,"应急手段",-1),Qn={href:"https://cli.vuejs.org/zh/config/#publicpath",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<ul><li><p>在 <code>public/index.html</code> 或其它通过 <code>html-webpack-plugin</code> 用作模板的 HTML 文件中，你需要通过 <code>&lt;%= BASE_URL %&gt;</code> 设置链接前缀：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= BASE_URL %&gt;favicon.ico<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在模板中，你首先需要向你的组件传入基础 URL：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`\${publicPath}my-image.png\`<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>何时该使用 pulic 文件夹</strong></p><ul><li>你需要在构建输出中指定一个文件的名字。</li><li>你有上千个图片，需要动态引用它们的路径。</li><li>有些库可能和 webpack 不兼容，这时你除了将其用一个独立的 <code>&lt;script&gt;</code> 标签引入没有别的选择</li></ul><h2 id="_10-css" tabindex="-1"><a class="header-anchor" href="#_10-css" aria-hidden="true">#</a> 10. CSS</h2>`,4),Xn={href:"http://postcss.org/",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://sass-lang.com/",target:"_blank",rel:"noopener noreferrer"},ss={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},as={href:"http://stylus-lang.com/",target:"_blank",rel:"noopener noreferrer"},es=n("h3",{id:"_10-1-引用静态资源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-1-引用静态资源","aria-hidden":"true"},"#"),s(" 10.1 引用静态资源")],-1),ts={href:"https://github.com/webpack-contrib/css-loader",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"url()",-1),ps=n("code",null,"~",-1),is=t(`<h3 id="_10-2-预处理器" tabindex="-1"><a class="header-anchor" href="#_10-2-预处理器" aria-hidden="true">#</a> 10.2 预处理器</h3><p>你可以在创建项目的时候选择预处理器 (Sass/Less/Stylus)。如果当时没有选好，内置的 webpack 仍然会被预配置为可以完成所有的处理。你也可以手动安装相应的 webpack loader：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Sass</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> sass-loader sass

<span class="token comment"># Less</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> less-loader <span class="token function">less</span>

<span class="token comment"># Stylus</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> stylus-loader stylus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你就可以导入相应的文件类型，或在 <code>*.vue</code> 文件中这样来使用：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
$<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-自动化导入" tabindex="-1"><a class="header-anchor" href="#_10-2-1-自动化导入" aria-hidden="true">#</a> 10.2.1 自动化导入</h4>`,6),cs={href:"https://github.com/yenshih/style-resources-loader",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"./src/styles/imports.styl",-1),rs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;vue-modules&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;normal-modules&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;normal&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    types<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token function">addStyleResource</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;stylus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addStyleResource</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rule
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;style-resource&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;style-resources-loader&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/styles/imports.styl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ds={href:"https://www.npmjs.com/package/vue-cli-plugin-style-resources-loader",target:"_blank",rel:"noopener noreferrer"},us=n("h3",{id:"_10-3-postcss",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-3-postcss","aria-hidden":"true"},"#"),s(" 10.3 PostCSS")],-1),vs=n("p",null,"Vue CLI 内部使用了 PostCSS。",-1),ms=n("code",null,".postcssrc",-1),ks={href:"https://github.com/michael-ciniawsky/postcss-load-config",target:"_blank",rel:"noopener noreferrer"},bs=n("code",null,"vue.config.js",-1),hs=n("code",null,"css.loaderOptions.postcss",-1),gs={href:"https://github.com/postcss/postcss-loader",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/postcss/autoprefixer",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"package.json",-1),xs={href:"https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist",target:"_blank",rel:"noopener noreferrer"},ys=n("p",null,"** CSS 中浏览器前缀规则的注意事项**",-1),js=n("p",null,[s("在生产环境构建中，Vue CLI 会优化 CSS 并基于目标浏览器抛弃不必要的浏览器前缀规则。因为默认开启了 "),n("code",null,"autoprefixer"),s("，你只使用无前缀的 CSS 规则即可")],-1),ws=n("h3",{id:"_10-4-css-modules",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-4-css-modules","aria-hidden":"true"},"#"),s(" 10.4 CSS Modules")],-1),qs=n("code",null,"<style module>",-1),Es={href:"https://vue-loader.vuejs.org/zh/guide/css-modules.html",target:"_blank",rel:"noopener noreferrer"},Ss=n("code",null,"*.vue",-1),Cs=t(`<p>如果想在 JavaScript 中作为 CSS Modules 导入 CSS 或其它预处理文件，该文件应该以 <code>.module.(css|less|sass|scss|styl)</code> 结尾：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./foo.module.css&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 所有支持的预处理器都一样工作</span>
<span class="token keyword">import</span> sassStyles <span class="token keyword">from</span> <span class="token string">&#39;./foo.module.scss&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想去掉文件名中的 <code>.module</code>，可以设置 <code>vue.config.js</code> 中的 <code>css.requireModuleExtension</code> 为 <code>false</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">requireModuleExtension</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望自定义生成的 CSS Modules 模块的类名，可以通过 <code>vue.config.js</code> 中的 <code>css.loaderOptions.css</code> 选项来实现。所有的 <code>css-loader</code> 选项在这里都是支持的，例如 <code>localIdentName</code> 和 <code>camelCase</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意：以下配置在 Vue CLI v4 与 v3 之间存在差异。</span>
        <span class="token comment">// Vue CLI v3 用户可参考 css-loader v1 文档</span>
        <span class="token comment">// https://github.com/webpack-contrib/css-loader/tree/v1.0.1</span>
        <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">localIdentName</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[hash]&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">localsConvention</span><span class="token operator">:</span> <span class="token string">&#39;camelCaseOnly&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-5-向预处理器-loader-传递选项" tabindex="-1"><a class="header-anchor" href="#_10-5-向预处理器-loader-传递选项" aria-hidden="true">#</a> 10.5 向预处理器 Loader 传递选项</h3><p>有的时候你想要向 webpack 的预处理器 loader 传递选项。你可以使用 <code>vue.config.js</code> 中的 <code>css.loaderOptions</code> 选项。比如你可以这样向所有 Sass/Less 样式传入共享的全局变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 给 sass-loader 传递选项</span>
      <span class="token literal-property property">sass</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// @/ 是 src/ 的别名</span>
        <span class="token comment">// 所以这里假设你有 \`src/variables.sass\` 这个文件</span>
        <span class="token comment">// 注意：在 sass-loader v8 中，这个选项名是 &quot;prependData&quot;</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &quot;~@/variables.sass&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 默认情况下 \`sass\` 选项会同时对 \`sass\` 和 \`scss\` 语法同时生效</span>
      <span class="token comment">// 因为 \`scss\` 语法在内部也是由 sass-loader 处理的</span>
      <span class="token comment">// 但是在配置 \`prependData\` 选项的时候</span>
      <span class="token comment">// \`scss\` 语法会要求语句结尾必须有分号，\`sass\` 则要求必须没有分号</span>
      <span class="token comment">// 在这种情况下，我们可以使用 \`scss\` 选项，对 \`scss\` 语法进行单独配置</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &quot;~@/variables.scss&quot;;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 给 less-loader 传递 Less.js 相关选项</span>
      <span class="token literal-property property">less</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// http://lesscss.org/usage/#less-options-strict-units \`Global Variables\`</span>
        <span class="token comment">// \`primary\` is global variables fields name</span>
        <span class="token literal-property property">globalVars</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Loader 可以通过 <code>loaderOptions</code> 配置，包括：</p>`,10),Ls={href:"https://github.com/webpack-contrib/css-loader",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://github.com/postcss/postcss-loader",target:"_blank",rel:"noopener noreferrer"},Vs={href:"https://github.com/webpack-contrib/sass-loader",target:"_blank",rel:"noopener noreferrer"},As={href:"https://github.com/webpack-contrib/less-loader",target:"_blank",rel:"noopener noreferrer"},Is={href:"https://github.com/shama/stylus-loader",target:"_blank",rel:"noopener noreferrer"},Os=t(`<p><strong>tips</strong></p><p>这样做比使用 <code>chainWebpack</code> 手动指定 loader 更推荐，因为这些选项需要应用在使用了相应 loader 的多个地方</p><h2 id="_11-webpack" tabindex="-1"><a class="header-anchor" href="#_11-webpack" aria-hidden="true">#</a> 11. Webpack</h2><h3 id="_11-1-简单配置" tabindex="-1"><a class="header-anchor" href="#_11-1-简单配置" aria-hidden="true">#</a> 11.1 简单配置</h3><p>调整 webpack 配置最简单的方式就是在 <code>vue.config.js</code> 中的 <code>configureWebpack</code> 选项提供一个对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MyAwesomeWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Rs={href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"},Ns=t(`<p>警告</p><p>有些 webpack 选项是基于 <code>vue.config.js</code> 中的值设置的，所以不能直接修改。例如你应该修改 <code>vue.config.js</code> 中的 <code>outputDir</code> 选项而不是修改 <code>output.path</code>；你应该修改 <code>vue.config.js</code> 中的 <code>publicPath</code> 选项而不是修改 <code>output.publicPath</code>。这样做是因为 <code>vue.config.js</code> 中的值会被用在配置里的多个地方，以确保所有的部分都能正常工作在一起。</p><p>如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 为生产环境修改配置...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 为开发环境修改配置...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-链式操作-高级" tabindex="-1"><a class="header-anchor" href="#_11-2-链式操作-高级" aria-hidden="true">#</a> 11.2 链式操作 (高级)</h3>`,5),Bs={href:"https://github.com/mozilla-neutrino/webpack-chain",target:"_blank",rel:"noopener noreferrer"},Us=n("p",null,[s("它允许我们更细粒度的控制其内部配置。接下来有一些常见的在 "),n("code",null,"vue.config.js"),s(" 中的 "),n("code",null,"chainWebpack"),s(" 修改的例子。")],-1),Ws=n("p",null,"提示",-1),Ds={href:"https://cli.vuejs.org/zh/guide/webpack.html#%E5%AE%A1%E6%9F%A5%E9%A1%B9%E7%9B%AE%E7%9A%84-webpack-%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},Ms=t(`<h4 id="_11-2-1-修改-loader-选项" tabindex="-1"><a class="header-anchor" href="#_11-2-1-修改-loader-选项" aria-hidden="true">#</a> 11.2.1 修改 Loader 选项</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;vue-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 修改它的选项...</span>
        <span class="token keyword">return</span> options<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p>`,3),Ts={href:"https://cli.vuejs.org/zh/config/#css-loaderoptions",target:"_blank",rel:"noopener noreferrer"},zs=n("code",null,"css.loaderOptions",-1),Hs=t(`<h4 id="_11-2-2-添加一个新的-loader" tabindex="-1"><a class="header-anchor" href="#_11-2-2-添加一个新的-loader" aria-hidden="true">#</a> 11.2.2 添加一个新的 Loader</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// GraphQL Loader</span>
    config<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;graphql&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.graphql$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;graphql-tag/loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;graphql-tag/loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 你还可以再添加一个 loader</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;other-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;other-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-3-替换一个规则里的-loader" tabindex="-1"><a class="header-anchor" href="#_11-2-3-替换一个规则里的-loader" aria-hidden="true">#</a> 11.2.3 替换一个规则里的 Loader</h4>`,3),Fs={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-service/lib/config/base.js",target:"_blank",rel:"noopener noreferrer"},$s=n("code",null,"vue-svg-loader",-1),Js=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> svgRule <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 清除已有的所有 loader。</span>
    <span class="token comment">// 如果你不这样做，接下来的 loader 会附加在该规则现有的 loader 之后。</span>
    svgRule<span class="token punctuation">.</span>uses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加要替换的 loader</span>
    svgRule<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;vue-svg-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;vue-svg-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-4-修改插件选项" tabindex="-1"><a class="header-anchor" href="#_11-2-4-修改插件选项" aria-hidden="true">#</a> 11.2.4 修改插件选项</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token comment">/* 传递给 html-webpack-plugin&#39;s 构造函数的新参数 */</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Gs={href:"https://github.com/mozilla-neutrino/webpack-chain#getting-started",target:"_blank",rel:"noopener noreferrer"},Ys={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-service/lib/config",target:"_blank",rel:"noopener noreferrer"},Qs=n("code",null,"index.html",-1),Ks=n("em",null,"/Users/username/proj/public/index.html",-1),Xs=n("em",null,"/Users/username/proj/app/templates/index.html",-1),Zs={href:"https://github.com/jantimon/html-webpack-plugin#options",target:"_blank",rel:"noopener noreferrer"},na=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>template <span class="token operator">=</span> <span class="token string">&#39;/Users/username/proj/app/templates/index.html&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> args<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过接下来要讨论的工具 <strong><code>vue inspect</code></strong> 来确认变更。</p><h3 id="_11-3-审查项目的-webpack-配置" tabindex="-1"><a class="header-anchor" href="#_11-3-审查项目的-webpack-配置" aria-hidden="true">#</a> 11.3 审查项目的 webpack 配置</h3><p>因为 <code>@vue/cli-service</code> 对 webpack 配置进行了抽象，所以理解配置中包含的东西会比较困难，尤其是当你打算自行对其调整的时候。</p><p><code>vue-cli-service</code> 暴露了 <code>inspect</code> 命令用于审查解析好的 webpack 配置。那个全局的 <code>vue</code> 可执行程序同样提供了 <code>inspect</code> 命令，这个命令只是简单的把 <code>vue-cli-service inspect</code> 代理到了你的项目中。</p><p>该命令会将解析出来的 webpack 配置、包括链式访问规则和插件的提示打印到 stdout。</p><p>你可以将其输出重定向到一个文件以便进行查阅：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue inspect <span class="token operator">&gt;</span> output.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意它输出的并不是一个有效的 webpack 配置文件，而是一个用于审查的被序列化的格式。</p><p>你也可以通过指定一个路径来审查配置的一小部分：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 只审查第一条规则</span>
vue inspect module.rules.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者指向一个规则或插件的名字：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue inspect <span class="token parameter variable">--rule</span> vue
vue inspect <span class="token parameter variable">--plugin</span> html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，你可以列出所有规则和插件的名字：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue inspect <span class="token parameter variable">--rules</span>
vue inspect <span class="token parameter variable">--plugins</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-4-以一个文件的方式使用解析好的配置" tabindex="-1"><a class="header-anchor" href="#_11-4-以一个文件的方式使用解析好的配置" aria-hidden="true">#</a> 11.4 以一个文件的方式使用解析好的配置</h3><p>有些外部工具可能需要通过一个文件访问解析好的 webpack 配置，比如那些需要提供 webpack 配置路径的 IDE 或 CLI。在这种情况下你可以使用如下路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;projectRoot&gt;/node_modules/@vue/cli-service/webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该文件会动态解析并输出 <code>vue-cli-service</code> 命令中使用的相同的 webpack 配置，包括那些来自插件甚至是你自定义的配置。</p><h2 id="_12-模式和环境变量" tabindex="-1"><a class="header-anchor" href="#_12-模式和环境变量" aria-hidden="true">#</a> 12. 模式和环境变量</h2><h3 id="_12-1-模式" tabindex="-1"><a class="header-anchor" href="#_12-1-模式" aria-hidden="true">#</a> 12.1 模式</h3><p>默认情况下，Vue CLI 项目由三个模式：</p><ul><li><code>development</code>: 用于 <code>vue-cli-service serve</code></li><li><code>test</code>: 用于 <code>vue-cli-service test:uint</code></li><li><code>prodution</code>: 用于 <code>vue-cli-service build</code> 和 <code>vue-cli-service test:e2e</code></li></ul><p>可以通过传递 <code>--mode</code> 选项参数为命令行覆写默认的模式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue-cli-service build <span class="token parameter variable">--mode</span> development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当运行 <code>vue-cli-service</code> 命令时，所有的环境变量都从对应的环境文件中载入，若文件中不包含 <code>NODE_ENV</code> 变量，其值将取决于模式,例如，在 <code>production</code> 模式下被设置为 <code>&quot;production&quot;</code>，在 <code>test</code> 模式下被设置为 <code>&quot;test&quot;</code>，默认则是 <code>&quot;development&quot;</code></p><p><code>NODE_ENV</code> 将决定您的应用运行的模式，是开发，生产还是测试，因此也决定了创建哪种 webpack 配置。</p><p>例如通过将 <code>NODE_ENV</code> 设置为 <code>&quot;test&quot;</code>，Vue CLI 会创建一个优化过后的，并且旨在用于单元测试的 webpack 配置，它并不会处理图片以及一些对单元测试非必需的其他资源。</p><p>同理，<code>NODE_ENV=development</code> 创建一个 webpack 配置，该配置启用热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p><p>当你运行 <code>vue-cli-service build</code> 命令时，无论你要部署到哪个环境，应该始终把 <code>NODE_ENV</code> 设置为 <code>&quot;production&quot;</code> 来获取可用于部署的应用程序</p><p><strong>tips</strong></p><p>如果在环境中有默认的 <code>NODE_ENV</code>，你应该移除它或在运行 <code>vue-cli-service</code> 命令的时候明确地设置 <code>NODE_ENV</code></p><h3 id="_12-2-环境变量" tabindex="-1"><a class="header-anchor" href="#_12-2-环境变量" aria-hidden="true">#</a> 12.2 环境变量</h3><p>可以在你的项目根目录中放置下列文件来指定环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.env                <span class="token comment"># 在所有的环境中被载入</span>
.env.local          <span class="token comment"># 在所有的环境中被载入，但会被 git 忽略</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>         <span class="token comment"># 只在指定的模式中被载入</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>.local   <span class="token comment"># 只在指定的模式中被载入，但会被 git 忽略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个环境文件只包含环境变量的 key-value</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FOO=bar
VUE_APP_NOT_SECRET_CODE=some_value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tips</strong></p><p>不要在你的应用程序中存储任何机密信息（例如私有 API 密钥）！</p><p>环境变量会随着构建打包嵌入到输出代码，意味着任何人都有机会能够看到它</p><p>只有 <code>NODE_ENV</code>，<code>BASE_URL</code> 和以 <code>VUE_APP_</code> 开头的变量将通过 <code>webpack.DefinePlugin</code> 静态地嵌入到<em>客户端侧</em>的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥</p>`,41),sa={href:"https://github.com/motdotla/dotenv#rules",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://github.com/motdotla/dotenv-expand",target:"_blank",rel:"noopener noreferrer"},ea=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">FOO</span><span class="token operator">=</span>foo
<span class="token assign-left variable">BAR</span><span class="token operator">=</span>bar

<span class="token assign-left variable">CONCAT</span><span class="token operator">=</span><span class="token variable">$FOO</span><span class="token variable">$BAR</span> <span class="token comment"># CONCAT=foobar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被载入的变量将会对 <code>vue-cli-service</code> 的所有命令、插件和依赖可用</p><p><strong>环境文件加载优先级</strong></p><p>为一个特定模式准备的环境文件 (例如 <code>.env.production</code>) 将会比一般的环境文件 (例如 <code>.env</code>) 拥有更高的优先级</p><p>此外，Vue CLI 启动时已经存在的环境变量拥有最高优先级，并不会被 <code>.env</code> 文件覆写</p><p><code>.env</code> 环境文件是通过运行 <code>vue-cli-service</code> 命令载入的，因此环境文件发生变化，你需要重启服务</p><p>示例：<strong>Staging</strong> 模式</p><p>假设我们有一个应用包含以下 <code>.env</code> 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VUE_APP_TITLE=My App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和 <code>.env.staging</code> 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NODE_ENV=production
VUE_APP_TITLE=My App (staging)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vue-cli-service build</code> 会加载可能存在的 <code>.env</code>、<code>.env.production</code> 和 <code>.env.production.local</code> 文件然后构建出生产环境应用。</li><li><code>vue-cli-service build --mode staging</code> 会在 staging 模式下加载可能存在的 <code>.env</code>、<code>.env.staging</code> 和 <code>.env.staging.local</code> 文件然后构建出生产环境应用。</li></ul><p>这两种情况下，根据 <code>NODE_ENV</code>，构建出的应用都是生产环境应用，但是在 staging 版本中，<code>p<wbr>rocess.env.VUE_APP_TITLE</code> 被覆写成了另一个值</p><h3 id="_12-3-在客户端侧代码中使用环境变量" tabindex="-1"><a class="header-anchor" href="#_12-3-在客户端侧代码中使用环境变量" aria-hidden="true">#</a> 12.3 在客户端侧代码中使用环境变量</h3><p>只有以 <code>VUE_APP_</code> 开头的变量会被 <code>webpack.DefinePlugin</code> 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在构建过程中，<code>p<wbr>rocess.env.VUE_APP_SECRET</code> 将会被相应的值所取代。在 <code>VUE_APP_SECRET=secret</code> 的情况下，它会被替换为 <code>&quot;secret&quot;</code>。</p><p>除了 <code>VUE_APP_*</code> 变量之外，在你的应用代码中始终可用的还有两个特殊的变量：</p>`,18),ta=n("code",null,"NODE_ENV",-1),oa=n("code",null,'"development"',-1),pa=n("code",null,'"production"',-1),ia=n("code",null,'"test"',-1),ca={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},la=n("li",null,[n("code",null,"BASE_URL"),s(" - 会和 "),n("code",null,"vue.config.js"),s(" 中的 "),n("code",null,"publicPath"),s(" 选项相符，即你的应用会部署到的基础路径。")],-1),ra=n("code",null,"public/index.html",-1),da={href:"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E6%8F%92%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},ua=t(`<p><strong>tips</strong></p><p>你可以在 <code>vue.config.js</code> 文件中计算环境变量。它们仍然需要以 <code>VUE_APP_</code> 前缀开头。这可以用于版本信息:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_VERSION</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// config</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-4-本地环境" tabindex="-1"><a class="header-anchor" href="#_12-4-本地环境" aria-hidden="true">#</a> 12.4 本地环境</h3><p>有的时候你可能有一些不应该提交到代码仓库中的变量，尤其是当你的项目托管在公共仓库时。这种情况下你应该使用一个 <code>.env.local</code> 文件取而代之。本地环境文件默认会被忽略，且出现在 <code>.gitignore</code> 中。</p><p><code>.local</code> 也可以加在指定模式的环境文件上，比如 <code>.env.development.local</code> 将会在 development 模式下被载入，且被 git 忽略</p><h2 id="_13-构建目标" tabindex="-1"><a class="header-anchor" href="#_13-构建目标" aria-hidden="true">#</a> 13. 构建目标</h2><p>当你运行 <code>vue-cli-service build</code> 时，你可以通过 <code>--target</code> 选项指定不同的构建目标。它允许你将相同的源代码根据不同的用例生成不同的构建</p><h3 id="_13-1-应用" tabindex="-1"><a class="header-anchor" href="#_13-1-应用" aria-hidden="true">#</a> 13.1 应用</h3><p>应用模式是默认的模式。在这个模式中：</p><ul><li><code>index.html</code> 会带有注入的资源和 resource hint</li><li>第三方库会被分到一个独立包以便更好的缓存</li><li>小于 4kb 的静态资源会被内联在 JavaScript 中</li><li><code>public</code> 中的静态资源会被复制到输出目录中</li></ul><h3 id="_13-2-库" tabindex="-1"><a class="header-anchor" href="#_13-2-库" aria-hidden="true">#</a> 13.2 库</h3><p>关于 IE 兼容性的提醒</p>`,13),va=n("code",null,"publicPath",-1),ma={href:"https://github.com/vuejs/vue-cli/blob/dev/packages/@vue/cli-service/lib/commands/build/setPublicPath.js",target:"_blank",rel:"noopener noreferrer"},ka=n("code",null,"document.currentScript",-1),ba={href:"https://www.npmjs.com/package/current-script-polyfill",target:"_blank",rel:"noopener noreferrer"},ha=t(`<p>注意对 Vue 的依赖</p><p>在库模式中，Vue 是<em>外置的</em>。这意味着包中不会有 Vue，即便你在代码中导入了 Vue。如果这个库会通过一个打包器使用，它将尝试通过打包器以依赖的方式加载 Vue；否则就会回退到一个全局的 <code>Vue</code> 变量。</p><p>要避免此行为，可以在<code>build</code>命令中添加<code>--inline-vue</code>标志。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue-cli-service build --target lib --inline-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以通过下面的命令将一个单独的入口构建为一个库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue-cli-service build --target lib --name myLib [entry]
File                     Size                     Gzipped

dist/myLib.umd.min.js    13.28 kb                 8.42 kb
dist/myLib.umd.js        20.95 kb                 10.22 kb
dist/myLib.common.js     20.57 kb                 10.09 kb
dist/myLib.css           0.33 kb                  0.23 kb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个入口可以是一个 <code>.js</code> 或一个 <code>.vue</code> 文件。如果没有指定入口，则会使用 <code>src/App.vue</code>。</p><p>构建一个库会输出：</p><ul><li><code>dist/myLib.common.js</code>：一个给打包器用的 CommonJS 包 (不幸的是，webpack 目前还并没有支持 ES modules 输出格式的包)</li><li><code>dist/myLib.umd.js</code>：一个直接给浏览器或 AMD loader 使用的 UMD 包</li><li><code>dist/myLib.umd.min.js</code>：压缩后的 UMD 构建版本</li><li><code>dist/myLib.css</code>：提取出来的 CSS 文件 (可以通过在 <code>vue.config.js</code> 中设置 <code>css: { extract: false }</code> 强制内联)</li></ul><p>警告</p><p>如果你在开发一个库或多项目仓库 (monorepo)，请注意导入 CSS <strong>是具有副作用的</strong>。请确保在 <code>package.json</code> 中<strong>移除</strong> <code>&quot;sideEffects&quot;: false</code>，否则 CSS 代码块会在生产环境构建时被 webpack 丢掉。</p><h4 id="_13-2-1-vue-vs-js-ts-入口文件" tabindex="-1"><a class="header-anchor" href="#_13-2-1-vue-vs-js-ts-入口文件" aria-hidden="true">#</a> 13.2.1 Vue vs. JS/TS 入口文件</h4><p>当使用一个 <code>.vue</code> 文件作为入口时，你的库会直接暴露这个 Vue 组件本身，因为组件始终是默认导出的内容。</p><p>然而，当你使用一个 <code>.js</code> 或 <code>.ts</code> 文件作为入口时，它可能会包含具名导出，所以库会暴露为一个模块。也就是说你的库必须在 UMD 构建中通过 <code>window.yourLib.default</code> 访问，或在 CommonJS 构建中通过 <code>const myLib = require(&#39;mylib&#39;).default</code> 访问。如果你没有任何具名导出并希望直接暴露默认导出，你可以在 <code>vue.config.js</code> 中使用以下 webpack 配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">libraryExport</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-3-web-components-组件" tabindex="-1"><a class="header-anchor" href="#_13-3-web-components-组件" aria-hidden="true">#</a> 13.3 Web Components 组件</h3><p>兼容性提示</p>`,17),ga={href:"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-web-component-wrapper/README.md#%E5%85%BC%E5%AE%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},_a=t(`<p>注意对 Vue 的依赖</p><p>在 Web Components 模式中，Vue 是<em>外置的</em>。这意味着包中不会有 Vue，即便你在代码中导入了 Vue。这里的包会假设在页面中已经有一个可用的全局变量 <code>Vue</code>。</p><p>你可以通过下面的命令将一个单独的入口构建为一个 Web Components 组件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue-cli-service build --target wc --name my-element [entry]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意这里的入口应该是一个 <code>*.vue</code> 文件。Vue CLI 将会把这个组件自动包裹并注册为 Web Components 组件，无需在 <code>main.js</code> 里自行注册。也可以在开发时把 <code>main.js</code> 作为 demo app 单独使用。</p>`,5),fa=n("code",null,"<my-element>",-1),xa=n("code",null,"@vue/web-component-wrapper",-1),ya={href:"https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-web-component-wrapper/README.md",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"@vue/web-component-wrapper",-1),wa=t(`<p><strong>注意这个包依赖了在页面上全局可用的 <code>Vue</code>。</strong></p><p>这个模式允许你的组件的使用者以一个普通 DOM 元素的方式使用这个 Vue 组件：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path/to/my-element.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 可在普通 HTML 中或者其它任何框架中使用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-3-1-注册多个-web-components-组件的包" tabindex="-1"><a class="header-anchor" href="#_13-3-1-注册多个-web-components-组件的包" aria-hidden="true">#</a> 13.3.1 注册多个 Web Components 组件的包</h4><p>当你构建一个 Web Components 组件包的时候，你也可以使用一个 glob 表达式作为入口指定多个组件目标：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue-cli-service build --target wc --name foo &#39;src/components/*.vue&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你构建多个 web component 时，<code>--name</code> 将会用于设置前缀，同时自定义元素的名称会由组件的文件名推导得出。比如一个名为 <code>HelloWorld.vue</code> 的组件携带 <code>--name foo</code> 将会生成的自定义元素名为 <code>&lt;foo-hello-world&gt;</code>。</p><h4 id="_13-3-2-异步-web-components-组件" tabindex="-1"><a class="header-anchor" href="#_13-3-2-异步-web-components-组件" aria-hidden="true">#</a> 13.3.2 异步 Web Components 组件</h4><p>当指定多个 Web Components 组件作为目标时，这个包可能会变得非常大，并且用户可能只想使用你的包中注册的一部分组件。这时异步 Web Components 模式会生成一个 code-split 的包，带一个只提供所有组件共享的运行时，并预先注册所有的自定义组件小入口文件。一个组件真正的实现只会在页面中用到自定义元素相应的一个实例时按需获取：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue-cli-service build --target wc-async --name foo &#39;src/components/*.vue&#39;
File                Size                        Gzipped

dist/foo.0.min.js    12.80 kb                    8.09 kb
dist/foo.min.js      7.45 kb                     3.17 kb
dist/foo.1.min.js    2.91 kb                     1.02 kb
dist/foo.js          22.51 kb                    6.67 kb
dist/foo.0.js        17.27 kb                    8.83 kb
dist/foo.1.js        5.24 kb                     1.64 kb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在用户在该页面上只需要引入 Vue 和这个入口文件即可：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path/to/foo.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- foo-one 的实现的 chunk 会在用到的时候自动获取 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo-one</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo-one</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-4-在构建时使用-vuex" tabindex="-1"><a class="header-anchor" href="#_13-4-在构建时使用-vuex" aria-hidden="true">#</a> 13.4 在构建时使用 vuex</h4>`,13),qa={href:"https://cli.vuejs.org/zh/guide/build-targets.html#web-components-%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"main.js",-1),Ca=n("code",null,"entry-wc.js",-1),La={href:"https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/commands/build/resolveWcEntry.js",target:"_blank",rel:"noopener noreferrer"},Pa=t(`<p>因此，要在 Web Components 组件的目标中使用 vuex ，你需要在 <code>App.vue</code> 中初始化存储 (store):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-部署" tabindex="-1"><a class="header-anchor" href="#_14-部署" aria-hidden="true">#</a> 14. 部署</h2><p>如果你用 Vue CLI 处理静态资源并和后端框架一起作为部署的一部分，那么你需要的仅仅是确保 Vue CLI 生成的构建文件在正确的位置，并遵循后端框架的发布方式即可。</p>`,4),Va=n("code",null,"dist",-1),Aa={href:"https://cli.vuejs.org/zh/config/#publicpath",target:"_blank",rel:"noopener noreferrer"},Ia=n("h3",{id:"_14-1-本地预览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-1-本地预览","aria-hidden":"true"},"#"),s(" 14.1 本地预览")],-1),Oa=n("code",null,"dist",-1),Ra=n("code",null,"publicPath",-1),Na=n("code",null,"file://",-1),Ba=n("code",null,"dist/index.html",-1),Ua={href:"https://github.com/zeit/serve",target:"_blank",rel:"noopener noreferrer"},Wa=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> serve
<span class="token comment"># -s 参数的意思是将其架设在 Single-Page Application 模式下</span>
<span class="token comment"># 这个模式会处理即将提到的路由问题</span>
serve <span class="token parameter variable">-s</span> dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2-使用-history-pushstate-的路由" tabindex="-1"><a class="header-anchor" href="#_14-2-使用-history-pushstate-的路由" aria-hidden="true">#</a> 14.2 使用 <code>history.pushState</code> 的路由</h3><p>如果你在 <code>history</code> 模式下使用 Vue Router，是无法搭配简单的静态文件服务器的。例如，如果你使用 Vue Router 为 <code>/todos/42/</code> 定义了一个路由，开发服务器已经配置了相应的 <code>localhost:3000/todos/42</code> 响应，但是一个为生产环境构建架设的简单的静态服务器会却会返回 404。</p>`,3),Da=n("code",null,"index.html",-1),Ma={href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"},Ta=n("h3",{id:"_14-3-cors",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-3-cors","aria-hidden":"true"},"#"),s(" 14.3 CORS")],-1),za={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS",target:"_blank",rel:"noopener noreferrer"},Ha=n("h3",{id:"_14-4-pwa",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-4-pwa","aria-hidden":"true"},"#"),s(" 14.4 PWA")],-1),Fa={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"},$a=t(`<h3 id="_14-5-github-pages" tabindex="-1"><a class="header-anchor" href="#_14-5-github-pages" aria-hidden="true">#</a> 14.5 GitHub Pages</h3><ol><li><p>在 <code>vue.config.js</code> 中设置正确的 <code>publicPath</code>。</p><p>如果打算将项目部署到 <code>https://&lt;USERNAME&gt;.github.io/</code> 上, <code>publicPath</code> 将默认被设为 <code>&quot;/&quot;</code>，你可以忽略这个参数。</p><p>如果打算将项目部署到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code> 上 (即仓库地址为 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>)，可将 <code>publicPath</code> 设为 <code>&quot;/&lt;REPO&gt;/&quot;</code>。举个例子，如果仓库名字为“my-project”，那么 <code>vue.config.js</code> 的内容应如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;/my-project/&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目目录下，创建内容如下的 <code>deploy.sh</code> (可以适当地取消注释) 并运行它以进行部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 当发生错误时中止脚本</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 构建</span>
<span class="token function">npm</span> run build

<span class="token comment"># cd 到构建输出的目录下</span>
<span class="token builtin class-name">cd</span> dist

<span class="token comment"># 部署到自定义域域名</span>
<span class="token comment"># echo &#39;www.example.com&#39; &gt; CNAME</span>

<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span>

<span class="token comment"># 部署到 https://&lt;USERNAME&gt;.github.io</span>
<span class="token comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span>

<span class="token comment"># 部署到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span>
<span class="token comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span>

<span class="token builtin class-name">cd</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_14-6-doker-nginx" tabindex="-1"><a class="header-anchor" href="#_14-6-doker-nginx" aria-hidden="true">#</a> 14.6 Doker(Nginx)</h3><p>在 Docker 容器中使用 Nginx 部署你的应用。</p>`,4),Ja={href:"https://www.docker.com/get-started",target:"_blank",rel:"noopener noreferrer"},Ga=t(`<li><p>在项目根目录创建 <code>Dockerfile</code> 文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:10</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./ /app</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm install &amp;&amp; npm run build</span>

<span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">0</span></span> /app/dist /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> nginx.conf /etc/nginx/nginx.conf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目根目录创建 <code>.dockerignore</code> 文件</p><p>设置 <code>.dockerignore</code> 文件能防止 <code>node_modules</code> 和其他中间构建产物被复制到镜像中导致构建问题。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>**/node_modules
**/dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),Ya=n("p",null,[s("在项目根目录创建 "),n("code",null,"nginx.conf"),s(" 文件")],-1),Qa=n("code",null,"Nginx",-1),Ka={href:"https://www.nginx.com/resources/wiki/start/topics/examples/full/",target:"_blank",rel:"noopener noreferrer"},Xa=t(`<p>下面是一个简单的 <code>Nginx</code> 设置文件，它会在 <code>80</code> 端口上提供你的 Vue 项目。<code>页面未找到</code> / <code>404</code> 错误使用的是 <code>index.html</code>，这让我们可以使用基于 <code>pushState()</code> 的路由。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                    &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  server {
    listen       80;
    server_name  localhost;
    location / {
      root   /app;
      index  index.html;
      try_files $uri $uri/ /index.html;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Za=t(`<li><p>构建你的 Docker 镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token builtin class-name">.</span> <span class="token parameter variable">-t</span> my-app
<span class="token comment"># Sending build context to Docker daemon  884.7kB</span>
<span class="token comment"># ...</span>
<span class="token comment"># Successfully built 4b00e5ee82ae</span>
<span class="token comment"># Successfully tagged my-app:latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),ne=n("p",null,"运行你的 Docker 镜像",-1),se=n("code",null,"Nginx",-1),ae={href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"},ee=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 my-app
<span class="token function">curl</span> localhost:8080
<span class="token comment"># &lt;!DOCTYPE html&gt;&lt;html lang=en&gt;...&lt;/html&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),te=n("h3",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),oe={href:"https://cli.vuejs.org/zh/guide/cli-service.html",target:"_blank",rel:"noopener noreferrer"};function pe(ie,ce){const a=c("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[s("CLI 服务是构建于 "),n("a",d,[s("webpack"),e(a)]),s(" 和 "),n("a",u,[s("webpack-dev-server"),e(a)]),s(" 之上的。它包含了：")]),v,n("ul",null,[m,n("li",null,[k,s(": 一个可以注入或是修改项目中文件的 "),n("a",b,[s("Generator"),e(a)]),s("。")]),n("li",null,[h,s(" 一个可以通过命令行对话为 generator 收集选项的 "),n("a",g,[s("prompts 文件"),e(a)]),s("。")])]),_,n("p",null,[s("如果你可以使用 "),n("a",f,[s("npx"),e(a)]),s(" (最新版的 npm 应该已经自带)，也可以直接这样调用命令：")]),x,n("ul",null,[n("li",null,[y,s(": 使用"),n("a",j,[s("现代模式"),e(a)]),s("构建应用，为现代浏览器交付原生支持的 ES2015 代码，并生成一个兼容老浏览器的包用来自动回退")]),w,q]),E,n("p",null,[s("在安装之后，"),S,s(" 也会安装 "),n("a",C,[s("yorkie"),e(a)]),s("，它会让你在 "),L,s(" 的 "),P,s(" 字段中方便地指定 Git hook：")]),V,n("p",null,[s("你会发现有 "),A,s(" 文件里的 "),I,s(" 字段 (或一个单独的 "),O,s(" 文件)，指定了项目的目标浏览器的范围。这个值会被 "),n("a",R,[s("@babel/preset-env"),e(a)]),s(" 和 "),n("a",N,[s("Autoprefixer"),e(a)]),s(" 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。")]),n("p",null,[s("现在查阅"),n("a",B,[s("这里"),e(a)]),s("了解如何指定浏览器范围。")]),U,W,n("p",null,[s("一个默认的 Vue CLI 项目会使用 "),n("a",D,[s("@vue/babel-preset-app"),e(a)]),s("，它通过 "),M,s(" 和 "),T,s(" 配置来决定项目需要的 polyfill。")]),n("p",null,[s("默认情况下，它会把 "),n("a",z,[H,e(a)]),s(" 传递给 "),F,s("，这样它会根据源代码中出现的语言特性自动检测需要的 polyfill。这确保了最终包里 polyfill 数量的最小化。然而，这也意味着"),$]),J,n("ol",null,[n("li",null,[n("p",null,[G,s(" 将其添加到 "),Y,s(" 中的 "),n("a",Q,[K,e(a)]),s(" 选项。这会为该依赖同时开启语法转换和根据使用情况检测 polyfill。")])]),n("li",null,[n("p",null,[X,s(" 你可以使用 "),Z,s(" 的 "),n("a",nn,[s("polyfills"),e(a)]),s(" 选项预包含所需要的 polyfill。"),sn]),an]),en]),tn,n("p",null,[s("当使用 Vue CLI 来"),n("a",on,[s("构建一个库或是 Web Component"),e(a)]),s(" 时，推荐给 "),pn,s(" 传入 "),cn,s(" 选项。这能够确保你的库或是组件不包含不必要的 polyfills。通常来说，打包 polyfills 应当是最终使用你的库的应用的责任。")]),ln,n("p",null,[s("Vue CLI 会产生两个应用的版本：一个现代版的包，面向支持 "),n("a",rn,[s("ES modules"),e(a)]),s(" 的现代浏览器，另一个旧版的包，面向不支持的旧浏览器。")]),n("p",null,[s("最酷的是这里没有特殊的部署要求。其生成的 HTML 文件会自动使用 "),n("a",dn,[s("Phillip Walton 精彩的博文"),e(a)]),s("中讨论到的技术：")]),un,n("p",null,[vn,s(" 文件是一个会被"),n("a",mn,[s("html-webpack-plugin "),e(a)]),s("处理的模板，在构建过程中资源链接会被自动注入")]),kn,bn,n("p",null,[s("因为 index 文件被用作模板，可以使用 "),n("a",hn,[s("lodash template "),e(a)]),s(" :")]),gn,n("p",null,[s("除了"),n("a",_n,[s("被 "),fn,s(" 暴露的默认值"),e(a)]),s("之外，所有"),n("a",xn,[s("客户端环境变量"),e(a)]),s("也可以直接使用。例如，"),yn,s(" 的用法：")]),jn,n("p",null,[n("a",wn,[s("``"),e(a)]),s(" 是一种 resource hint，用来指定页面加载后很快会被用到的资源，所以在页面加载的过程中，我们希望在浏览器开始主体渲染之前尽早 preload。")]),qn,n("p",null,[s("这些提示会被 "),n("a",En,[s("@vue/preload-webpack-plugin"),e(a)]),s(" 注入，并且可以通过 "),Sn,s(" 的 "),Cn,s(" 进行修改和删除")]),Ln,n("p",null,[n("a",Pn,[s("``"),e(a)]),s(" 是一种 resource hint，用来告诉浏览器在页面加载完成后，利用空闲时间提前获取用户未来可能会访问的内容。")]),n("p",null,[s("默认情况下，一个 Vue CLI 应用会为所有作为 async chunk 生成的 JavaScript 文件 ("),n("a",Vn,[s("通过动态 "),An,s(" 按需 code splitting"),e(a)]),s(" 的产物) 自动生成 prefetch 提示。")]),n("p",null,[s("这些提示会被 "),n("a",In,[s("@vue/preload-webpack-plugin"),e(a)]),s(" 注入，并且可以通过 "),On,s(" 的 "),Rn,s(" 进行修改和删除。")]),Nn,n("ul",null,[Bn,Un,n("li",null,[s("硬编码的文件名无法在"),n("a",Wn,[s("现代模式"),e(a)]),s("下工作。")])]),n("p",null,[s("你应该考虑换用 "),n("a",Dn,[s("indexPath"),e(a)]),s(" 选项将生成的 HTML 用作一个服务端框架的视图模板")]),Mn,n("p",null,[s("不是每个应用都需要是一个单页应用。Vue CLI 支持使用 "),n("a",Tn,[zn,s(" 中的 "),Hn,s(" 选项"),e(a)]),s("构建一个多页面的应用。构建好的应用将会在不同的入口之间高效共享通用的 chunk 以获得最佳的加载性能")]),Fn,n("p",null,[s("你可以通过 "),n("a",$n,[s("chainWebpack"),e(a)]),s(" 调整内联文件的大小限制。例如，下列代码会将其限制设置为 10kb：")]),Jn,n("p",null,[Gn,s(" 目录提供的是一个"),Yn,s("，当你通过绝对路径引用它时，留意应用将会部署到哪里。如果你的应用没有部署在域名的根部，那么你需要为你的 URL 配置 "),n("a",Qn,[s("publicPath"),e(a)]),s(" 前缀:")]),Kn,n("p",null,[s("Vue CLI 项目天生支持 "),n("a",Xn,[s("PostCSS"),e(a)]),s("、"),n("a",Zn,[s("CSS Modules"),e(a)]),s(" 和包含 "),n("a",ns,[s("Sass"),e(a)]),s("、"),n("a",ss,[s("Less"),e(a)]),s("、"),n("a",as,[s("Stylus"),e(a)]),s(" 在内的预处理器")]),es,n("p",null,[s("所有编译后的 CSS 都会通过 "),n("a",ts,[s("css-loader"),e(a)]),s(" 来解析其中的 "),os,s(" 引用，并将这些引用作为模块请求来处理。这意味着你可以根据本地的文件结构用相对路径来引用静态资源。另外要注意的是如果你想要引用一个 npm 依赖中的文件，或是想要用 webpack alias，则需要在路径前加上 "),ps,s(" 的前缀来避免歧义")]),is,n("p",null,[s("如果你想自动化导入文件 (用于颜色、变量、mixin……)，你可以使用 "),n("a",cs,[s("style-resources-loader"),e(a)]),s("。这里有一个关于 Stylus 的在每个单文件组件和 Stylus 文件中导入 "),ls,s(" 的例子：")]),rs,n("p",null,[s("也可以选择使用 "),n("a",ds,[s("vue-cli-plugin-style-resources-loader"),e(a)])]),us,vs,n("p",null,[s("你可以通过 "),ms,s(" 或任何 "),n("a",ks,[s("postcss-load-config"),e(a)]),s(" 支持的配置源来配置 PostCSS。也可以通过 "),bs,s(" 中的 "),hs,s(" 配置 "),n("a",gs,[s("postcss-loader"),e(a)]),s("。")]),n("p",null,[s("我们默认开启了 "),n("a",_s,[s("autoprefixer"),e(a)]),s("。如果要配置目标浏览器，可使用 "),fs,s(" 的 "),n("a",xs,[s("browserslist"),e(a)]),s(" 字段")]),ys,js,ws,n("p",null,[s("你可以通过 "),qs,s(" 以开箱即用的方式"),n("a",Es,[s("在 "),Ss,s(" 文件中使用 CSS Modules"),e(a)]),s("。")]),Cs,n("ul",null,[n("li",null,[n("a",Ls,[s("css-loader"),e(a)])]),n("li",null,[n("a",Ps,[s("postcss-loader"),e(a)])]),n("li",null,[n("a",Vs,[s("sass-loader"),e(a)])]),n("li",null,[n("a",As,[s("less-loader"),e(a)])]),n("li",null,[n("a",Is,[s("stylus-loader"),e(a)])])]),Os,n("p",null,[s("该对象将会被 "),n("a",Rs,[s("webpack-merge"),e(a)]),s(" 合并入最终的 webpack 配置。")]),Ns,n("p",null,[s("Vue CLI 内部的 webpack 配置是通过 "),n("a",Bs,[s("webpack-chain"),e(a)]),s(" 维护的。这个库提供了一个 webpack 原始配置的上层抽象，使其可以定义具名的 loader 规则和具名插件，并有机会在后期进入这些规则并对它们的选项进行修改。")]),Us,Ws,n("p",null,[s("当你打算链式访问特定的 loader 时，"),n("a",Ds,[s("vue inspect"),e(a)]),s(" 会非常有帮助。")]),Ms,n("p",null,[s("对于 CSS 相关 loader 来说，我们推荐使用 "),n("a",Ts,[s("css.loaderOptions"),e(a)]),s(" 而不是直接链式指定 loader。这是因为每种 CSS 文件类型都有多个规则，而 "),zs,s(" 可以确保你通过一个地方影响所有的规则。")]),Hs,n("p",null,[s("如果你想要替换一个已有的"),n("a",Fs,[s("基础 loader"),e(a)]),s("，例如为内联的 SVG 文件使用 "),$s,s(" 而不是加载这个文件：")]),Js,n("p",null,[s("你需要熟悉 "),n("a",Gs,[s("webpack-chain 的 API"),e(a)]),s(" 并"),n("a",Ys,[s("阅读一些源码"),e(a)]),s("以便了解如何最大程度利用好这个选项，但是比起直接修改 webpack 配置，它的表达能力更强，也更为安全。")]),n("p",null,[s("比方说你想要将 "),Qs,s(" 默认的路径从 "),Ks,s(" 改为 "),Xs,s("。通过参考 "),n("a",Zs,[s("html-webpack-plugin"),e(a)]),s(" 你能看到一个可以传入的选项列表。我们可以在下列配置中传入一个新的模板路径来改变它：")]),na,n("p",null,[s("想要了解解析环境文件规则的细节，请参考 "),n("a",sa,[s("dotenv"),e(a)]),s("。我们也使用 "),n("a",aa,[s("dotenv-expand"),e(a)]),s(" 来实现变量扩展 (Vue CLI 3.5+ 支持)。例如：")]),ea,n("ul",null,[n("li",null,[ta,s(" - 会是 "),oa,s("、"),pa,s(" 或 "),ia,s(" 中的一个。具体的值取决于应用运行的"),n("a",ca,[s("模式"),e(a)]),s("。")]),la]),n("p",null,[s("所有解析出来的环境变量都可以在 "),ra,s(" 中以 "),n("a",da,[s("HTML 插值"),e(a)]),s("中介绍的方式使用")]),ua,n("p",null,[s("在库模式中，项目的 "),va,s(" 是根据主文件的加载路径"),n("a",ma,[s("动态设置"),e(a)]),s("的（用以支持动态的资源加载能力）。但是这个功能用到了 "),ka,s("，而 IE 浏览器并不支持这一特性。所以如果网站需要支持 IE 的话，建议使用库之前先在页面上引入 "),n("a",ba,[s("current-script-polyfill"),e(a)]),s("。")]),ha,n("p",null,[s("Web Components 模式不支持 IE11 及更低版本。"),n("a",ga,[s("更多细节"),e(a)])]),_a,n("p",null,[s("该构建将会产生一个单独的 JavaScript 文件 (及其压缩后的版本) 将所有的东西都内联起来。当这个脚本被引入网页时，会注册自定义组件 "),fa,s("，其使用 "),xa,s(" 包裹了目标的 Vue 组件。这个包裹器会自动代理属性、特性、事件和插槽。请查阅 "),n("a",ya,[ja,s(" 的文档"),e(a)]),s("了解更多细节。")]),wa,n("p",null,[s("在构建 "),n("a",qa,[s("Web Components 组件"),e(a)]),s("或"),n("a",Ea,[s("库"),e(a)]),s("时，入口点不是 "),Sa,s(" ，而是 "),Ca,s(" 文件，该文件由此生成： "),n("a",La,[s("https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/commands/build/resolveWcEntry.js"),e(a)])]),Pa,n("p",null,[s("如果你独立于后端部署前端应用——也就是说后端暴露一个前端可访问的 API，然后前端实际上是纯静态应用。那么你可以将 "),Va,s(" 目录里构建的内容部署到任何静态文件服务器中，但要确保正确的 "),n("a",Aa,[s("publicPath"),e(a)])]),Ia,n("p",null,[Oa,s(" 目录需要启动一个 HTTP 服务器来访问 (除非你已经将 "),Ra,s(" 配置为了一个相对的值)，所以以 "),Na,s(" 协议直接打开 "),Ba,s(" 是不会工作的。在本地预览生产环境构建最简单的方式就是使用一个 Node.js 静态文件服务器，例如 "),n("a",Ua,[s("serve"),e(a)]),s("：")]),Wa,n("p",null,[s("为了解决这个问题，你需要配置生产环境服务器，将任何没有匹配到静态文件的请求回退到 "),Da,s("。Vue Router 的文档提供了"),n("a",Ma,[s("常用服务器配置指引"),e(a)])]),Ta,n("p",null,[s("如果前端静态内容是部署在与后端 API 不同的域名上，你需要适当地配置 "),n("a",za,[s("CORS"),e(a)])]),Ha,n("p",null,[s("如果你使用了 PWA 插件，那么应用必须架设在 HTTPS 上，这样 "),n("a",Fa,[s("Service Worker"),e(a)]),s(" 才能被正确注册")]),$a,n("ol",null,[n("li",null,[n("p",null,[s("安装 "),n("a",Ja,[s("Docker"),e(a)])])]),Ga,n("li",null,[Ya,n("p",null,[Qa,s(" 是一个能在 Docker 容器中运行的 HTTP(s) 服务器。它使用配置文件决定如何提供内容、要监听的端口等。参阅 "),n("a",Ka,[s("Nginx 设置文档"),e(a)]),s(" 以了解所有可能的设置选项。")]),Xa]),Za,n("li",null,[ne,n("p",null,[s("这个例子基于官方 "),se,s(" 镜像，因此已经设置了日志重定向并关闭了自我守护进程。它也提供了其他有利于 Nginx 在 Docker 容器中运行的默认设置。更多信息参阅 "),n("a",ae,[s("Nginx Docker 仓库"),e(a)]),s("。")]),ee])]),te,n("ol",null,[n("li",null,[n("a",oe,[s("vue-cli"),e(a)]),s(" vue docs")])])])}const re=o(l,[["render",pe],["__file","vue-cli.html.vue"]]);export{re as default};
