const n=JSON.parse('{"key":"v-36a24142","path":"/note/golang/open-source-books/the-way-to-go/10/10.1.html","title":"10.1 结构体","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"结构体的内存布局","slug":"结构体的内存布局","link":"#结构体的内存布局","children":[]},{"level":2,"title":"递归结构体","slug":"递归结构体","link":"#递归结构体","children":[]}],"git":{"updatedTime":1684038853000},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"note/golang/open-source-books/the-way-to-go/10/10.1.md","excerpt":"<h1> 10.1 结构体</h1>\\n<ul>\\n<li>\\n<p><strong>定义</strong>：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> identifier <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n    field1 type1\\n    field2 type2\\n    <span class=\\"token operator\\">...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><code>new()</code>：为结构体变量分配内存并返回指针</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> t <span class=\\"token operator\\">*</span>T\\nt <span class=\\"token operator\\">=</span> <span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span>T<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>结构体变量中的字段值为对应类型的零值</p>\\n</li>\\n<li>\\n<p><strong>声明</strong>：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> t T\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>声明也会为变量分配内存，结构体变量中的字段值为对应类型的零值</p>\\n</li>\\n<li>\\n<p><strong>初始化</strong>：可以使用字面量初始化\\n例如：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Interval <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n    start <span class=\\"token builtin\\">int</span>\\n    end   <span class=\\"token builtin\\">int</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>按顺序给出值：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>intr <span class=\\"token operator\\">:=</span> Interval<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>指定字段</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>intr <span class=\\"token operator\\">:=</span> Interval<span class=\\"token punctuation\\">{</span>end<span class=\\"token punctuation\\">:</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">:</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>忽略字段</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>intr <span class=\\"token operator\\">:=</span> Interval<span class=\\"token punctuation\\">{</span>end<span class=\\"token punctuation\\">:</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>"}');export{n as data};
