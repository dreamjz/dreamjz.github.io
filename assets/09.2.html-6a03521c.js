import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as i}from"./framework-dee406ed.js";const l={},u=n("p",null,"堆的特点是最大/小值位于顶部, 获取最值的时间复杂度为O(1). 插入和删除操作时间复杂度为O(logn).",-1),d=n("p",null,"堆可以用于求动态数据集合中的最值:",-1),r=n("ul",null,[n("li",null,"最大堆: 获取数据集合中最小的k个元素"),n("li",null,"最小堆: 获取数据集合中最大的k个元素")],-1),k=n("h2",{id:"_9-2-1-问题59-数据流的第k大数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-2-1-问题59-数据流的第k大数字","aria-hidden":"true"},"#"),s(" 9.2.1 问题59: 数据流的第k大数字")],-1),v={href:"https://leetcode.cn/problems/jBjn9C/",target:"_blank",rel:"noopener noreferrer"},m=p(`<blockquote><p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p><p>请实现 <code>KthLargest</code> 类：</p><ul><li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li><li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li></ul><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
输出：
[null, 4, 5, 5, 8, 8]

解释：
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= 10^4</code></li><li><code>0 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>-10^4 &lt;= val &lt;= 10^4</code></li><li>最多调用 <code>add</code> 方法 <code>10^4</code> 次</li><li>题目数据保证，在查找第 <code>k</code> 大元素时，数组中至少有 <code>k</code> 个元素</li></ul></blockquote><h3 id="_9-2-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_9-2-1-1-分析-题解" aria-hidden="true">#</a> 9.2.1.1 分析&amp;题解</h3><p>找出k个最大数字, 那么第k大的数字就是k个数中最小的那个.</p><p>可以将k个数字放入堆中, 对于最小堆和新节点:</p><ol><li>堆中元素数目小于k, 直接插入</li><li>堆已满: <ol><li>新节点大于堆顶元素, 删除堆顶元素, 插入新节点</li><li>新节点小于等于, 则不做任何操作</li></ol></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> KthLargest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	minHeap <span class="token operator">*</span>minIntHeap
	size    <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>k <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> KthLargest <span class="token punctuation">{</span>
	mh <span class="token operator">:=</span> <span class="token operator">&amp;</span>minIntHeap<span class="token punctuation">{</span><span class="token punctuation">}</span>
	kl <span class="token operator">:=</span> <span class="token operator">&amp;</span>KthLargest<span class="token punctuation">{</span>
		minHeap<span class="token punctuation">:</span> mh<span class="token punctuation">,</span>
		size<span class="token punctuation">:</span>    k<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
		kl<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">*</span>kl
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>KthLargest<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> kl<span class="token punctuation">.</span>size <span class="token punctuation">{</span>
		heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> val <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
		heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">)</span>
		heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>kl<span class="token punctuation">.</span>minHeap<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 最小堆</span>
<span class="token keyword">type</span> minIntHeap <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mh minIntHeap<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mh minIntHeap<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> mh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mh<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mh minIntHeap<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mh<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mh<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> mh<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mh <span class="token operator">*</span>minIntHeap<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>mh <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mh <span class="token operator">*</span>minIntHeap<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token operator">*</span>mh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-2-2-问题60-出现频率最高的k个数字" tabindex="-1"><a class="header-anchor" href="#_9-2-2-问题60-出现频率最高的k个数字" aria-hidden="true">#</a> 9.2.2 问题60: 出现频率最高的k个数字</h2>`,7),b={href:"https://leetcode.cn/problems/g5c51o/",target:"_blank",rel:"noopener noreferrer"},h=p(`<blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请返回其中出现频率前 <code>k</code> 高的元素。可以按 <strong>任意顺序</strong> 返回答案。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1], k = 1
输出: [1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li><li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li></ul><p>**进阶：**所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code> 是数组大小。</p></blockquote><h3 id="_9-2-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_9-2-2-1-分析-题解" aria-hidden="true">#</a> 9.2.2.1 分析&amp;题解</h3><p>需要统计频次, 可以使用哈希表(数字, 次数), 扫描一次之后就能记录所有的数字出现频次.</p><p>再次扫描哈希表, 之后使用最小堆来存储次数最大的k个数字即可.</p><p>TC: O(nlogk), k 为最小堆长度</p><p>SC: O(n), 需要一个哈希表和一个最小堆</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
		m<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>

	pq <span class="token operator">:=</span> <span class="token operator">&amp;</span>PriorityQueue<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> n<span class="token punctuation">,</span> fre <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		nf <span class="token operator">:=</span> <span class="token operator">&amp;</span>numFre<span class="token punctuation">{</span>
			val<span class="token punctuation">:</span> n<span class="token punctuation">,</span>
			fre<span class="token punctuation">:</span> fre<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> pq<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token punctuation">{</span>
			heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> nf<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nf<span class="token punctuation">.</span>fre <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fre <span class="token punctuation">{</span>
			heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span>
			heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> nf<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> nf <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>pq <span class="token punctuation">{</span>
		res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nf<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">type</span> numFre <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	val   <span class="token builtin">int</span>
	fre   <span class="token builtin">int</span>
	index <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> PriorityQueue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>numFre

<span class="token keyword">func</span> <span class="token punctuation">(</span>pq PriorityQueue<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pq PriorityQueue<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fre <span class="token operator">&lt;</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fre
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pq PriorityQueue<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i
	pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> j
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pq <span class="token operator">*</span>PriorityQueue<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	idx <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span>
	nf <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>numFre<span class="token punctuation">)</span>
	nf<span class="token punctuation">.</span>index <span class="token operator">=</span> idx
	<span class="token operator">*</span>pq <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">,</span> nf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pq <span class="token operator">*</span>PriorityQueue<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// avoid memory leak</span>
	x<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token comment">// for safety</span>
	<span class="token operator">*</span>pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>pq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-2-3-问题61-和最小的k对数" tabindex="-1"><a class="header-anchor" href="#_9-2-3-问题61-和最小的k对数" aria-hidden="true">#</a> 9.2.3 问题61: 和最小的k对数</h2>`,8),f={href:"https://leetcode.cn/problems/qn8gGX/",target:"_blank",rel:"noopener noreferrer"},g=p(`<blockquote><p>给定两个以升序排列的整数数组 <code>nums1</code> 和 <code>nums2</code> , 以及一个整数 <code>k</code> 。</p><p>定义一对值 <code>(u,v)</code>，其中第一个元素来自 <code>nums1</code>，第二个元素来自 <code>nums2</code> 。</p><p>请找到和最小的 <code>k</code> 个数对 <code>(u1,v1)</code>, <code> (u2,v2)</code> ... <code>(uk,vk)</code> 。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
    [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出: [1,1],[1,1]
解释: 返回序列中的前 2 对数：
     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums1 = [1,2], nums2 = [3], k = 3 
输出: [1,3],[2,3]
解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= nums1[i], nums2[i] &lt;= 10^9</code></li><li><code>nums1</code>, <code>nums2</code> 均为升序排列</li><li><code>1 &lt;= k &lt;= 1000</code></li></ul></blockquote><h3 id="_9-2-3-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_9-2-3-1-分析-题解" aria-hidden="true">#</a> 9.2.3.1 分析&amp;题解</h3><p>// TODO: 2023-09-13</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,4),y={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function _(x,q){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,d,r,k,n("p",null,[n("a",v,[s("LCR 059. 数据流中的第 K 大元素"),t(a)])]),m,n("p",null,[n("a",b,[s("LCR 060. 前 K 个高频元素"),t(a)])]),h,n("p",null,[n("a",f,[s("LCR 061. 查找和最小的 K 对数字"),t(a)])]),g,n("ol",null,[n("li",null,[n("a",y,[s("剑指Offer（专项突破版）"),t(a)])])])])}const L=e(l,[["render",_],["__file","09.2.html.vue"]]);export{L as default};
