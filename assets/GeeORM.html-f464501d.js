import{_ as a,Z as t,$ as p,a0 as n,a1 as e,a2 as o,a4 as c,H as l}from"./framework-d03928c9.js";const i={},u=c(`<h2 id="_1-核心思想" tabindex="-1"><a class="header-anchor" href="#_1-核心思想" aria-hidden="true">#</a> 1. 核心思想</h2><h3 id="_1-1-标准库-database-sql" tabindex="-1"><a class="header-anchor" href="#_1-1-标准库-database-sql" aria-hidden="true">#</a> 1.1 标准库 <code>database/sql</code></h3><p>SQL 语句的执行是对标准库方法的封装：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sql<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-反射-reflect" tabindex="-1"><a class="header-anchor" href="#_1-2-反射-reflect" aria-hidden="true">#</a> 1.2 反射 <code>reflect</code></h3><p>ORM 对象关系映射，因为对象结构和表结构是未知的，所以使用反射机制进行处理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Schema <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Model      any
	Name       <span class="token builtin">string</span>
	Fields     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
	FieldNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	fieldMap   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>dst any<span class="token punctuation">,</span> d dialect<span class="token punctuation">.</span>Dialect<span class="token punctuation">)</span> <span class="token operator">*</span>Schema <span class="token punctuation">{</span>
	modelType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	schema <span class="token operator">:=</span> <span class="token operator">&amp;</span>Schema<span class="token punctuation">{</span>
		Model<span class="token punctuation">:</span>    dst<span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span>     modelType<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		fieldMap<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> modelType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		f <span class="token operator">:=</span> modelType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>f<span class="token punctuation">.</span>Anonymous <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			field <span class="token operator">:=</span> <span class="token operator">&amp;</span>Field<span class="token punctuation">{</span>
				Name<span class="token punctuation">:</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
				Type<span class="token punctuation">:</span> d<span class="token punctuation">.</span><span class="token function">DataTypeOf</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;geeorm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				field<span class="token punctuation">.</span>Tag <span class="token operator">=</span> v
			<span class="token punctuation">}</span>
			schema<span class="token punctuation">.</span>Fields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>Fields<span class="token punctuation">,</span> field<span class="token punctuation">)</span>
			schema<span class="token punctuation">.</span>FieldNames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			schema<span class="token punctuation">.</span>fieldMap<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> field
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> schema
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-设计" tabindex="-1"><a class="header-anchor" href="#_2-设计" aria-hidden="true">#</a> 2. 设计</h2><h3 id="_2-1-分级-log" tabindex="-1"><a class="header-anchor" href="#_2-1-分级-log" aria-hidden="true">#</a> 2.1 分级 Log</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	InfoLevel <span class="token operator">=</span> <span class="token boolean">iota</span>
	ErrorLevel
	Disabled
<span class="token punctuation">)</span>

<span class="token comment">// SetLevel set log level for logger</span>
<span class="token keyword">func</span> <span class="token function">SetLevel</span><span class="token punctuation">(</span>level <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> logger <span class="token operator">:=</span> <span class="token keyword">range</span> loggers <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> ErrorLevel <span class="token operator">&lt;</span> level <span class="token punctuation">{</span>
		errorLog<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> InfoLevel <span class="token operator">&lt;</span> level <span class="token punctuation">{</span>
		infoLog<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过设置的<code>level</code>来决定哪些级别的<code>log</code>的输出被抛弃（设置为<code>io.Discard</code>）。</p><h3 id="_2-2-会话-session" tabindex="-1"><a class="header-anchor" href="#_2-2-会话-session" aria-hidden="true">#</a> 2.2 会话 Session</h3><p>Session 用于和数据库交互，调用标准库执行 SQL 语句。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	dialect  dialect<span class="token punctuation">.</span>Dialect
	tx       <span class="token operator">*</span>sql<span class="token punctuation">.</span>Tx
	refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema
	clause   clause<span class="token punctuation">.</span>Clause
	sql      strings<span class="token punctuation">.</span>Builder
	sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span>any
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>db</code>：标准库<code>sql.DB</code>实例</li><li><code>dialect</code>：不同数据库的 Dialect</li><li><code>tx</code>：标准库<code>sql.Tx</code>实例，支持事务</li><li><code>refTable</code>：对应的表结构</li><li><code>clause</code>：SQL 子语句</li><li><code>sql</code>：待执行的 SQL 语句</li><li><code>sqlVars</code>：待执行的 SQL 语句参数</li></ul><h3 id="_2-3-engine" tabindex="-1"><a class="header-anchor" href="#_2-3-engine" aria-hidden="true">#</a> 2.3 Engine</h3><p>框架的入口，用于和数据库交互前的准备工作（建立/测试连接）和交互后的收尾工作（关闭连接）。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db      <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	dialect dialect<span class="token punctuation">.</span>Dialect
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewEngine</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Engine<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// Send ping to make sure the database connection is alive</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// make sure the specific dialect exists</span>
	d<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dialect<span class="token punctuation">.</span><span class="token function">GetDialect</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;dialect %s Not Found&quot;</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> DialectNotFoundErr
	<span class="token punctuation">}</span>

	e <span class="token operator">:=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">,</span> dialect<span class="token punctuation">:</span> d<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Connect database success&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> e<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NewEngine</code>流程：</p><ol><li>建立数据库连接</li><li>发送 Ping 检测连接</li><li>获取是否有配置数据 Dialect</li></ol><h3 id="_2-4-dialect" tabindex="-1"><a class="header-anchor" href="#_2-4-dialect" aria-hidden="true">#</a> 2.4 Dialect</h3><p>不同的数据库，其 SQL 语句，数据类型可能有所不同。可以针对每种数据库的不同之处设置对应的 Dialect。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> dialectsMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Dialect<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> Dialect <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">DataTypeOf</span><span class="token punctuation">(</span>typ reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">TableExistSQL</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">RegisterDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> dialect Dialect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> dialect
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">GetDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Dialect<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dialect<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
	<span class="token keyword">return</span> dialect<span class="token punctuation">,</span> ok
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Dialect</code>：接口 <ol><li><code>DataTpyeOF</code>：通过 Golang 类型获取对应的数据库类型</li><li><code>TabelExistsSQL</code>：获取数据库的表是否存在的查询语句</li></ol></li><li><code>dialectMap</code>：存储数据对应的 Dialect</li><li><code>RegisterDialect</code>：注册 Dialect</li><li><code>GetDialect</code>：通过数据库类型获取 Dialect</li></ul><h3 id="_2-5-schema" tabindex="-1"><a class="header-anchor" href="#_2-5-schema" aria-hidden="true">#</a> 2.5 Schema</h3><p>Schema 表示数据库的表结构，用于建立对象和表结构的映射(ORM)。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Schema <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Model      any
	Name       <span class="token builtin">string</span>
	Fields     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
	FieldNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	fieldMap   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Model</code>：对象实例</li><li><code>Name</code>：表名/结构体名</li><li><code>Fields</code>：结构体字段列表</li><li><code>FieldNames</code>：结构体字段名/表字段名 列表</li><li><code>fieldMap</code>：用于通过字段名快速获取字段</li></ul><h4 id="session-复用" tabindex="-1"><a class="header-anchor" href="#session-复用" aria-hidden="true">#</a> Session 复用</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>sqlVars <span class="token operator">=</span> <span class="token boolean">nil</span>
    s<span class="token punctuation">.</span>clause <span class="token operator">=</span> clause<span class="token punctuation">.</span>Clause<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sql<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行完成一次 SQL 语句之后，重置 Session 的状态，可以执行其他的 SQL。复用 Session 可以避免创建过多的实例并简化代码。</p><h3 id="_2-6-clause" tabindex="-1"><a class="header-anchor" href="#_2-6-clause" aria-hidden="true">#</a> 2.6 Clause</h3><p>SQL 语句可以拆分为多个子句(clause)，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">FROM</span> table_name
    <span class="token keyword">WHERE</span> <span class="token punctuation">[</span> conditions <span class="token punctuation">]</span>
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> col1
    <span class="token keyword">HAVING</span> <span class="token punctuation">[</span> conditions <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以拆分为:</p><ol><li>SELECT Clause：<code>SELECT col1, col2, ... FROM table_name </code></li><li>WHERE Clause：<code>WHERE conditions </code></li><li>GROUP BY Clause：<code>GROUP BY col1 </code></li><li>HAVING Clause：<code>HAVING conditions</code></li></ol><p>通过不同的 clause 之间的组合，可以构成完整的 SQL 语句。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Clause <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	sql     <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span>
	sqlVars <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Type <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	INSERT Type <span class="token operator">=</span> <span class="token boolean">iota</span>
	VALUES
	SELECT
	LIMIT
	WHERE
	ORDERBY
	UPDATE
	DELETE
	COUNT
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Clause</code>：子句 <ol><li><code>sql</code>：子句类型对应的 SQL 语句</li><li><code>sqlVars</code>：子句类型对应的 SQL 参数</li></ol></li><li><code>Type</code>：子句类型，通过常量预设</li></ul><h4 id="clause-生成函数" tabindex="-1"><a class="header-anchor" href="#clause-生成函数" aria-hidden="true">#</a> Clause 生成函数</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> generator <span class="token keyword">func</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>

<span class="token keyword">var</span> generators <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	generators <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator<span class="token punctuation">)</span>
	generators<span class="token punctuation">[</span>INSERT<span class="token punctuation">]</span> <span class="token operator">=</span> _insert
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_insert</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// INSERT INTO $tableName ($fields)</span>
	tableName <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO %s (%v)&quot;</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>generators</code>：全局变量，子句类型对应的SQL生成函数</li><li><code>_insert</code>：生成 INSERT 语句</li></ul><h3 id="_2-7-链式调用" tabindex="-1"><a class="header-anchor" href="#_2-7-链式调用" aria-hidden="true">#</a> 2.7 链式调用</h3><p>链式调用是一种简化代码的编程方式，能够使代码更简洁、易读。</p><p>原理： 某个对象调用某个方法后，将该对象的引用/指针返回，即可以继续调用该对象的其他方法。</p><p>SQL 语句由多个子语句构成，可以通过链式调用组合成完整的 SQL 语句。</p><p>Session 负责和数据交互，那么其构建 SQL 语句的函数返回值可以设置为<code>*Session</code>类型以支持链式调用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Where</span><span class="token punctuation">(</span>desc <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	<span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>vals any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">CallMethod</span><span class="token punctuation">(</span>BeforeQuery<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	dstSlice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token punctuation">)</span>
	dstType <span class="token operator">:=</span> dstSlice<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dstType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>ORDERBY<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>LIMIT<span class="token punctuation">)</span>
	rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dst <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dstType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> fieldVals <span class="token punctuation">[</span><span class="token punctuation">]</span>any
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> table<span class="token punctuation">.</span>FieldNames <span class="token punctuation">{</span>
			fieldVals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fieldVals<span class="token punctuation">,</span> dst<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>fieldVals<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span><span class="token function">CallMethod</span><span class="token punctuation">(</span>AfterQuery<span class="token punctuation">,</span> dst<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		dstSlice<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>dstSlice<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gee.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;Age &gt; 18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-hook" tabindex="-1"><a class="header-anchor" href="#_2-8-hook" aria-hidden="true">#</a> 2.8 Hook</h3><p>钩子函数，主要思想是提前在可能增加功能的地方埋好(预设)一个钩子，当我们需要重新修改或者增加这个地方的逻辑的时候，把扩展的类或者方法挂载到这个点即可。</p><p>对于 SQL 执行来说，CRUD 操作适合于添加钩子函数。例如：在查询结束后，对查询结果中的信息进行脱敏处理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    BeforeQuery  <span class="token operator">=</span> <span class="token string">&quot;BeforeQuery&quot;</span>
    AfterQuery   <span class="token operator">=</span> <span class="token string">&quot;AfterQuery&quot;</span>
    BeforeUpdate <span class="token operator">=</span> <span class="token string">&quot;BeforeUpdate&quot;</span>
    AfterUpdate  <span class="token operator">=</span> <span class="token string">&quot;AfterUpdate&quot;</span>
    BeforeDelete <span class="token operator">=</span> <span class="token string">&quot;BeforeDelete&quot;</span>
    AfterDelete  <span class="token operator">=</span> <span class="token string">&quot;AfterDelete&quot;</span>
    BeforeInsert <span class="token operator">=</span> <span class="token string">&quot;BeforeInsert&quot;</span>
    AfterInsert  <span class="token operator">=</span> <span class="token string">&quot;AfterInsert&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// CallMethod calls the registered hooks</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">CallMethod</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> fm reflect<span class="token punctuation">.</span>Value
    <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       fm <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       fm <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    param <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> fm<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> v <span class="token operator">:=</span> fm<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
             log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>钩子函数约定的类型为：<code>Hook_name (s *Session) error</code></p><p><code>CallMethod</code>流程：</p><ol><li>通过反射获取对象实现的钩子函数</li><li>获取钩子函数入参，并调用</li><li>返回执行结果</li></ol><h3 id="_2-9-事务支持" tabindex="-1"><a class="header-anchor" href="#_2-9-事务支持" aria-hidden="true">#</a> 2.9 事务支持</h3><p>事务的 ACID：</p><ol><li>原子性(Atomicity)：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么全部不执行。</li><li>一致性(Consistency): 几个并行执行的事务，其执行结果必须与按某一顺序 串行执行的结果相一致。</li><li>隔离性(Isolation)：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。</li><li>持久性(Durability)：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障。</li></ol><p>对事物的支持使用标准库<code>database/sql.Tx</code>即可：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	tx       <span class="token operator">*</span>sql<span class="token punctuation">.</span>Tx
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;transaction begin&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;transaction commit&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;transaction rollback&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动化接口" tabindex="-1"><a class="header-anchor" href="#自动化接口" aria-hidden="true">#</a> 自动化接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> TxFunc <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Transaction</span><span class="token punctuation">(</span>f TxFunc<span class="token punctuation">)</span> <span class="token punctuation">(</span>res any<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token function">panic</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// re-throw panic after rollback</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// err is non-nil</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// err is nil; if Commit returns error, update err</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户只需要将所有的操作放到一个回调函数中，作为入参传递给 <code>engine.Transaction()</code>，发生任何错误，自动回滚，如果没有错误发生，则提交。</p><h3 id="_2-10-数据库迁移" tabindex="-1"><a class="header-anchor" href="#_2-10-数据库迁移" aria-hidden="true">#</a> 2.10 数据库迁移</h3><p>支持数据库迁移，当结构体发生改变时，可以同步更改表结构。</p><p>不同的数据库，迁移方式不同，以 SQLite 为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// return a - b</span>
<span class="token keyword">func</span> <span class="token function">difference</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	setB <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>
		setB<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	diff <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> setB<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			diff <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> diff
<span class="token punctuation">}</span>

<span class="token comment">// Migrate table</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Migrate</span><span class="token punctuation">(</span>value any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;table %s doesn&#39;t exist, creat table&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		rows<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM %s LIMIT 1&quot;</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		columns<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		addCols <span class="token operator">:=</span> <span class="token function">difference</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> columns<span class="token punctuation">)</span>
		delCols <span class="token operator">:=</span> <span class="token function">difference</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;add cols %v, deleted cols %v&quot;</span><span class="token punctuation">,</span> addCols<span class="token punctuation">,</span> delCols<span class="token punctuation">)</span>

		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> col <span class="token operator">:=</span> <span class="token keyword">range</span> addCols <span class="token punctuation">{</span>
			f <span class="token operator">:=</span> table<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>
			sqlStr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ALTER TABLE %s ADD COLUMN %s %s;&quot;</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>delCols<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		tmp <span class="token operator">:=</span> <span class="token string">&quot;tmp_&quot;</span> <span class="token operator">+</span> table<span class="token punctuation">.</span>Name
		fieldStr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE %s AS SELECT %s FROM %s;&quot;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> fieldStr<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;DROP TABLE %s;&quot;</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ALTER TABLE %s RENAME TO %s;&quot;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>找出需要删除/新增的字段</li><li>创建新表，迁移数据，删除旧表</li><li>将新表改名为原表名</li></ol><h2 id="_3-流程" tabindex="-1"><a class="header-anchor" href="#_3-流程" aria-hidden="true">#</a> 3. 流程</h2><p>连接数据库并执行 SQL 的流程如下：</p><ol><li>连接数据库</li><li>创建会话 Session</li><li>通过不同子句 Clause 组合成完整的 SQL</li><li>执行 SQL 并获取结果</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,74),k={href:"https://geektutu.com/post/gee.html",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",k,[e("七天用Go从零实现系列"),o(s)])])])])}const b=a(i,[["render",r],["__file","GeeORM.html.vue"]]);export{b as default};
