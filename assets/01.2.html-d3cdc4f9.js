import{_ as o,Z as l,$ as p,a0 as s,a1 as n,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const c={},d=s("p",null,"链表提供了高效的节点重排能力，顺序性的节点访问方式以及可以通过增删节点来灵活调整链表的长度。",-1),r=s("p",null,"当一个列表键包含了数量较多或元素都是长度较长的字符串时，Redis 会使用链表作为其底层实现。",-1),u=s("p",null,"除了列表键之外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis 服务器本身还使用链表来保存多个客户端的状态信息，以及使用链表来构建客户端输出缓冲区 (output buffer)。",-1),k=s("h2",{id:"_2-1-链表和链表节点的实现",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-1-链表和链表节点的实现","aria-hidden":"true"},"#"),n(" 2.1 链表和链表节点的实现")],-1),v={href:"https://github.com/redis/redis/blob/d96f47cf06b1cc24b82109e0e87ac5428517525a/src/adlist.h",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 前置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>
    <span class="token comment">// 后置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token comment">// 节点值</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个 listNode 可以通过 prev 和 next 指针组成双端链表。</p>`,2),b={href:"https://github.com/redis/redis/blob/d96f47cf06b1cc24b82109e0e87ac5428517525a/src/adlist.h",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
	<span class="token comment">// 表头节点</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>
    <span class="token comment">// 表尾节点</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token comment">// 链表节点数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>
    <span class="token comment">// 节点复制函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点值释放函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点值对比函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>list 结构为链表提供了表头指针 head、表尾指针 tail、链表长度计数器 len 以及三个实现多台链表所需的特定函数：</p><ul><li>dup 函数用于复制链表节点所保存的值</li><li>free 函数用于释放链表节点所保存的值</li><li>match 函数用于对比链表节点所保存的值和输入值是否相等</li></ul><p>Redis 链表实现了以下特性：</p><ul><li>双端：链表节点带有 prev 和 next 指针，获取某个节点的前置和后置节点的时间复杂度都是 <em>O(1)</em></li><li>无环： 表头节点的 prev 和表尾节点的 next 均指向 NULL，对链表的访问以 NULL 为终点</li><li>带表头和表尾指针：通过 list.head 和 list.tail 访问表头和表尾指针的时间复杂度为 <em>O(1)</em></li><li>多态： 链表节点使用 void* 指针保存节点值，并且可以通过 dup、free、match 为节点值设置类型特定函数，所以链表可以用于保存不同类型的值</li></ul><h2 id="_2-2-总结" tabindex="-1"><a class="header-anchor" href="#_2-2-总结" aria-hidden="true">#</a> 2.2 总结</h2><ul><li>链表被广泛用于实现 Redis 各种功能，例如列表键、发布与订阅、慢查询、监视器等</li><li>每个链表节点由一个 listNode 结构表示，每个节点都前置和后置节点的指针，Redis 实现的是双端链表</li><li>每个链表由 list 结构表示，这个结构带有表头和表尾节点指针，链表长度等信息</li><li>因链表表头节点的前置节点和表尾节点的后置节点均指向 NULL，故Redis 的链表是无环链表</li><li>通过为链表设置不同的类型特定函数，Redis 链表可以用于保存各种不同的类型的值</li></ul>`,7);function _(f,y){const a=i("ExternalLinkIcon");return l(),p("div",null,[d,r,u,k,s("p",null,[n("每个链表节点使用一个 "),s("a",v,[n("adlist.h/listNode"),e(a)]),n(" 结构表示：")]),m,s("p",null,[n("Redis 使用 "),s("a",b,[n("adlist.h/list"),e(a)]),n(" 来持有链表：")]),h])}const N=o(c,[["render",_],["__file","01.2.html.vue"]]);export{N as default};
