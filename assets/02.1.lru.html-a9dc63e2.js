import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as l}from"./framework-09afcf0b.js";const i={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeCache/day1-lru",target:"_blank",rel:"noopener noreferrer"},k=c(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\\DAY1-LRU
│  go.mod
│  
└─lru
        lru.go
        lru_test.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-缓存淘汰算法" tabindex="-1"><a class="header-anchor" href="#_1-缓存淘汰算法" aria-hidden="true">#</a> 1. 缓存淘汰算法</h2><p>缓存数据全部存储在内存之中，内存资源是有限的，需要在特定的场合下删除某些数据以释放资源。</p><h3 id="_1-1-fifo-first-in-first-out" tabindex="-1"><a class="header-anchor" href="#_1-1-fifo-first-in-first-out" aria-hidden="true">#</a> 1.1 FIFO(First In First Out)</h3><p>FIFO（先入先出）策略，最先加入缓存的数据最先被删除。使用队列即可实现。</p><p>缺点：某些数据虽然较早加入缓存，但是使用频率比较高，若被删除则会导致<strong>缓存命中率</strong>降低。</p><h3 id="_1-2-lfu-least-frequently-used" tabindex="-1"><a class="header-anchor" href="#_1-2-lfu-least-frequently-used" aria-hidden="true">#</a> 1.2 LFU(Least Frequently Used)</h3><p>最不经常使用（最少使用），淘汰缓存中访问频率最低的数据。</p><p>优点：缓存命中率高</p><p>缺点：</p><ol><li>需要额外内存，维护每个记录的访问次数</li><li>访问模式发生变化，需要较长时间适应，收到历史数据影响较大</li></ol><h3 id="_1-3-lru-least-recently-used" tabindex="-1"><a class="header-anchor" href="#_1-3-lru-least-recently-used" aria-hidden="true">#</a> 1.3 LRU(Least Recently Used)</h3><p>最近最少使用，相对平衡的算法。若数据最近被访问，则未来被访问的概率就更高。</p><h2 id="_2-lru-算法实现" tabindex="-1"><a class="header-anchor" href="#_2-lru-算法实现" aria-hidden="true">#</a> 2. LRU 算法实现</h2><h3 id="_2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-数据结构" aria-hidden="true">#</a> 2.1 数据结构</h3><p>LRU 算法数据结构为<strong>哈希表</strong>和<strong>双向链表</strong>的组合。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310101346858.jpeg" alt="implement lru algorithm with golang" tabindex="0" loading="lazy"><figcaption>implement lru algorithm with golang</figcaption></figure><ul><li>哈希表存储键值对(key, value)，查找操作时间复杂度 O(1)</li><li>值(value)之间相连形成双向链表 <ul><li>移动节点到队尾（首）时间复杂度为 O(1)</li><li>新增节点到队尾（首）时间复杂度为 O(1)</li><li>删除节点复杂度为 O(1)</li></ul></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Cache is LRU cache. It is not safe for concurrent cases.</span>
<span class="token keyword">type</span> Cache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	maxBytes <span class="token builtin">int64</span>
	nBytes   <span class="token builtin">int64</span>
	dl       <span class="token operator">*</span>list<span class="token punctuation">.</span>List <span class="token comment">// doubly linked list</span>
    cache    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element
	<span class="token comment">// optional and executed when an entry is purged</span>
	OnEvicted <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	key   <span class="token builtin">string</span>
	value Value
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Value <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Cache</code>： <ol><li><code>maxBytes</code>：允许使用的最大内存</li><li><code>nBytes</code>：当前已使用的内存</li><li><code>dl</code>：标准库的双向链表<code>list.List</code></li><li><code>cache</code>：LRU 缓存</li><li><code>OnEvicted</code>：删除数据时的回调函数</li></ol></li><li><code>entry</code>：双向链表节点的数据类型</li><li><code>Value</code>：接口，定义值的通用类型； <ul><li><code>Len</code>：返回值占用的内存大小</li></ul></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>maxBytes <span class="token builtin">int64</span><span class="token punctuation">,</span> onEvicted <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> Value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cache <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Cache<span class="token punctuation">{</span>
		maxBytes<span class="token punctuation">:</span>  maxBytes<span class="token punctuation">,</span>
		dl<span class="token punctuation">:</span>        list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		cache<span class="token punctuation">:</span>     <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">,</span>
		OnEvicted<span class="token punctuation">:</span> onEvicted<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Len return the number of cache entries</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>New</code>用于实例化<code>Cache</code>，<code>Len</code>获取节点数量。</p><h3 id="_2-2-查找" tabindex="-1"><a class="header-anchor" href="#_2-2-查找" aria-hidden="true">#</a> 2.2 查找</h3><p>此处约定<strong>队尾</strong>节点为<strong>最近最少使用</strong>的节点。</p><p>查找操作流程：</p><ol><li>通过 key 寻找对应的节点</li><li>将节点移动至队首</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Get find key&#39;s value</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Value<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ele<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
		kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span>
		<span class="token keyword">return</span> kv<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-删除" tabindex="-1"><a class="header-anchor" href="#_2-3-删除" aria-hidden="true">#</a> 2.3 删除</h3><p>删除最近最少使用的节点，即队首节点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token comment">// RemoveOldest remove the oldest item</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ele <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
		kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cache<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>nBytes <span class="token operator">-=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> c<span class="token punctuation">.</span>OnEvicted <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">OnEvicted</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取队首节点并删除</li><li>从哈希表中删除对应的键值对</li><li>更新使用的内存大小</li><li>若存在回调函数，则调用</li></ul><h3 id="_2-4-插入-更新" tabindex="-1"><a class="header-anchor" href="#_2-4-插入-更新" aria-hidden="true">#</a> 2.4 插入/更新</h3><p>若键值对存在，则更新，否则插入。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Add adds a value to the cache.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ele<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
		kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>nBytes <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int64</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		kv<span class="token punctuation">.</span>val <span class="token operator">=</span> val
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>dl<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entry<span class="token punctuation">{</span>key<span class="token punctuation">,</span> val<span class="token punctuation">}</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ele
		c<span class="token punctuation">.</span>nBytes <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> c<span class="token punctuation">.</span>maxBytes <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>maxBytes <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>nBytes <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查找 key： <ul><li>若不存在 <ol><li>将节点添加至队首</li><li>键值对添加至哈希表</li><li>更新使用的内存大小</li></ol></li><li>存在 <ol><li>将节点移动至队首</li><li>修改哈希表的 value</li><li>更新使用的内存大小</li></ol></li></ul></li><li>若使用的内存大小超过限制，则删除队尾节点（最近最少使用）; <code>maxBytes</code>为 0 表示无限制</li></ul><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><h3 id="_3-1-测试新增和获取" tabindex="-1"><a class="header-anchor" href="#_3-1-测试新增和获取" aria-hidden="true">#</a> 3.1 测试新增和获取</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> String <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s String<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestGet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token operator">||</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;1234&quot;</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cache hit key1=1234 failed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cache miss key2 failed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-测试缓存淘汰" tabindex="-1"><a class="header-anchor" href="#_3-2-测试缓存淘汰" aria-hidden="true">#</a> 3.2 测试缓存淘汰</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestRemoveoldest</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3 <span class="token operator">:=</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k3&quot;</span>
	v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token operator">:=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v3&quot;</span>
	<span class="token builtin">cap</span> <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>k1 <span class="token operator">+</span> k2 <span class="token operator">+</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span>
	lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k3<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> lru<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Removeoldest key1 failed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-测试回调函数" tabindex="-1"><a class="header-anchor" href="#_3-3-测试回调函数" aria-hidden="true">#</a> 3.3 测试回调函数</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestOnEvicted</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	keys <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	callback <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;k3&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;k3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;k4&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;k4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	expect <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k2&quot;</span><span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Call OnEvicted failed, expect keys equals to %s&quot;</span><span class="token punctuation">,</span> expect<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,43),r={href:"https://geektutu.com/post/geecache-day1.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=l("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[n("a",u,[a("https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeCache/day1-lru"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",r,[a("https://geektutu.com/post/geecache-day1.html"),t(s)])])])])}const g=p(i,[["render",d],["__file","02.1.lru.html.vue"]]);export{g as default};
