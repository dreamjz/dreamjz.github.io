import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as l}from"./framework-09afcf0b.js";const i={},u=e(`<p>和数组不同，切片是动态的，向切片中添加元素其会在容量不足时自动扩容。</p><p>切片声明只需要元素类型即可：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),r={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/types/type.go#L581",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"cmd/compile/internal/types.NewSlice",-1),d=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/types/type.go</span>

<span class="token comment">// NewSlice returns the slice Type with element type elem.</span>
<span class="token keyword">func</span> <span class="token function">NewSlice</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t <span class="token operator">:=</span> elem<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>slice<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> elem <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;elem mismatch&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> t
	<span class="token punctuation">}</span>

	t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TSLICE<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> Slice<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">}</span>
	elem<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>slice <span class="token operator">=</span> t
	<span class="token keyword">if</span> elem<span class="token punctuation">.</span><span class="token function">HasTParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">SetHasTParam</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/types/type.go</span>

<span class="token comment">// Slice contains Type fields specific to slice types.</span>
<span class="token keyword">type</span> Slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Elem <span class="token operator">*</span>Type <span class="token comment">// element type</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片内的元素类型在编译期就已确定，存储在<code>Type.Extra</code>字段中以帮助程序在运行时动态获取。</p><h2 id="_3-2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_3-2-1-数据结构" aria-hidden="true">#</a> 3.2.1 数据结构</h2><p><strong>编译期</strong>的切片是<a href="(https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/types/type.go#L425)"><code>cmd/compile/internal/types.Slice</code></a> 类型的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/types/type.go</span>

<span class="token comment">// Slice contains Type fields specific to slice types.</span>
<span class="token keyword">type</span> Slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Elem <span class="token operator">*</span>Type <span class="token comment">// element type</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m=n("strong",null,"运行时",-1),v={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/reflect/value.go#L2348",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"reflect.SliceHeader",-1),g=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 </span>

<span class="token comment">// SliceHeader is the runtime representation of a slice.</span>
<span class="token comment">// It cannot be used safely or portably and its representation may</span>
<span class="token comment">// change in a later release.</span>
<span class="token comment">// Moreover, the Data field is not sufficient to guarantee the data</span>
<span class="token comment">// it references will not be garbage collected, so programs must keep</span>
<span class="token comment">// a separate, correctly typed pointer to the underlying data.</span>
<span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
	Cap  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Data</code>: 指向<strong>数组</strong>的<strong>指针</strong></li><li><code>Len</code>: 当前切片的<strong>长度</strong></li><li><code>Cap</code>: 当前切片的<strong>容量</strong></li></ul><p><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309231949532.png" alt="golang-slice-struct" loading="lazy">切片引入了一个<strong>抽象层</strong>，提供了对数组部分片段的引用。对于上层来说，无需关心底层数组的变化，只需关注切片的操作即可。</p><p>和数组不同，数组内存固定且连续在编译期即可确定操作的内存位置，而切片是动态的，操作需要依赖运行时。</p><h2 id="_3-2-2-初始化" tabindex="-1"><a class="header-anchor" href="#_3-2-2-初始化" aria-hidden="true">#</a> 3.2.2 初始化</h2><p>Golang 包含三种初始化切片的方式：</p><ul><li>通过索引（下标）获取数组或切片的一部分</li><li>通过字面量初始化新的切片</li><li>通过关键字<code>make</code>创建切片</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> or slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用索引-下标" tabindex="-1"><a class="header-anchor" href="#使用索引-下标" aria-hidden="true">#</a> 使用索引（下标）</h3><p>使用下标初始化是最<strong>底层</strong>的操作，其他操作最后会使用下标初始化。</p><p>编译器将语句转换成<code>OpSliceMake</code>操作，将如下代码编译成 SSA 中间代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
    s <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>decompose builtin</code> 部分：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b4<span class="token punctuation">:</span>
v1 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> InitMem <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span>
v3 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> SB <span class="token operator">&lt;</span><span class="token builtin">uintptr</span><span class="token operator">&gt;</span>
v6 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Addr <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token builtin">uint8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token keyword">type</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span> v3
v7 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> StaticLECall <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">{</span>AuxCall<span class="token punctuation">{</span>runtime<span class="token punctuation">.</span>newobject<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> v6 v1
v8 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> SelectN <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> v7
v9 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> SelectN <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> v7 <span class="token punctuation">(</span>s<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v10 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Addr <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token punctuation">.</span><span class="token punctuation">.</span>stmp_0<span class="token punctuation">}</span> v3
v11 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> Move <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> v9 v10 v8
v12 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v15 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v22 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int64</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
v25 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> SliceMake <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v9 v12 v15
v26 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">=</span> MakeResult <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>mem<span class="token operator">&gt;</span> v25 v11
Ret v26 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span>
name <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v9
name s<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v9
name s<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v12
name s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以看出，<code>SliceMake</code> 接受四个参数：元素类型，数组指针，长度和容量。使用下标创建切片并<strong>不会拷贝</strong>数组或切片中的数据，而是构造了<strong>指向相同数组</strong>的新切片，所以改变新切片会影响原切片。</p><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><p>使用字面量时，和数组类似，编译器会将其展开成如下流程：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 使用 []int{1,2,3} 初始化</span>
<span class="token keyword">var</span> vstat <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
vstat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
vstat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
vstat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">var</span> vauto <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token operator">*</span>vauto <span class="token operator">=</span> vstat
slice <span class="token operator">:=</span> vauto<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>推断数组长度，并创建新数组</li><li>将字面量数据存入数组</li><li>创建指向数组的指针</li><li>将静态存储区的数组<code>vstat</code>赋值给指针<code>vatuo</code>所在的地址</li><li>通过<code>[:]</code>获取指向<code>vauto</code>的切片</li></ol><p>第 5 步使用的是下标初始化。</p><h3 id="关键字-make" tabindex="-1"><a class="header-anchor" href="#关键字-make" aria-hidden="true">#</a> 关键字 make</h3>`,21),h=n("code",null,"make",-1),f={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/typecheck/typecheck.go#L478",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"cmd/compile/internal/typecheck.typecheck1",-1),y=n("code",null,"make",-1),w=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/typecheck/typecheck.go </span>

<span class="token comment">// typecheck1 should ONLY be called from typecheck.</span>
<span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token keyword">case</span> ir<span class="token punctuation">.</span>OMAKE<span class="token punctuation">:</span>
		n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">tcMake</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// No return n here!</span>
	<span class="token comment">// Individual cases can type-assert n, introducing a new one.</span>
	<span class="token comment">// Each must execute its own return n.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/typecheck/func.go#L747",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"cmd/compile/internal/typecheck.tcMake",-1),E=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/typecheck/func.go</span>

<span class="token comment">// tcMake typechecks an OMAKE node.</span>
<span class="token keyword">func</span> <span class="token function">tcMake</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    i <span class="token operator">:=</span> <span class="token number">1</span>
    <span class="token operator">...</span>
    <span class="token keyword">case</span> types<span class="token punctuation">.</span>TSLICE<span class="token punctuation">:</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;missing len argument to make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>

		l <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		i<span class="token operator">++</span>
		l <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
		<span class="token keyword">var</span> r ir<span class="token punctuation">.</span>Node
		<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			r <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			i<span class="token operator">++</span>
			r <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>GTR<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;len larger than cap in make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
		nn <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">NewMakeExpr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OMAKESLICE<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数主要进行如下操作：</p><ul><li>检查<code>len</code>是否传入</li><li>保证<code>len</code>小于等于<code>cap</code></li><li>并将节点转化为<code>ir.OMAKESLICE</code></li></ul>`,3),L={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/walk/expr.go#L24",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"cmd/compile/internal/walk.walkExpr",-1),C=e(`<ul><li>切片的长度和容量是否足够小</li><li>切片是否发生了逃逸，最终在堆上初始化</li></ul><h4 id="切片-不会发生逃逸-且-非常小" tabindex="-1"><a class="header-anchor" href="#切片-不会发生逃逸-且-非常小" aria-hidden="true">#</a> 切片 不会发生逃逸 且 非常小</h4><p>例如：<code>make([]int, 3, 4)</code>会直接转化成如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>
n <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述操作都会在编译期完成，编译器会在栈或静态存储区中创建数组并将<code>[:3]</code>转换成<code>OpSliceMake</code>操作。</p><h4 id="切片-会发生逃逸-或-非常大" tabindex="-1"><a class="header-anchor" href="#切片-会发生逃逸-或-非常大" aria-hidden="true">#</a> 切片 会发生逃逸 或 非常大</h4>`,6),N={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/slice.go#L83",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.makeslice",-1),I=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 runtime/slice.go</span>

<span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
		<span class="token comment">// NOTE: Produce a &#39;len out of range&#39; error instead of a</span>
		<span class="token comment">// &#39;cap out of range&#39; error when someone does make([]T, bignumber).</span>
		<span class="token comment">// &#39;cap out of range&#39; is true too, but since the cap is only being</span>
		<span class="token comment">// supplied implicitly, saying len is clearer.</span>
		<span class="token comment">// See golang.org/issue/4085.</span>
		mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要操作是计算切片占用的内存空间并在堆上申请一片连续内存，计算占用空间公式如下:</p>`,2),z=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"内存空间大小"),n("mo",null,"="),n("mtext",null,"切片元素大小"),n("mo",null,"×"),n("mtext",null,"切片容量")]),n("annotation",{encoding:"application/x-tex"},"\\text{内存空间大小} = \\text{切片元素大小} \\times \\text{切片容量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"内存空间大小")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片元素大小")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片容量")])])])])],-1),O=e(`<p>其次检查如下错误并触发 panic：</p><ul><li>内存空间溢出</li><li>申请内存大于最大可分配内存</li><li>长度小于 0 或长度小于容量</li></ul><h2 id="_3-2-3-访问元素" tabindex="-1"><a class="header-anchor" href="#_3-2-3-访问元素" aria-hidden="true">#</a> 3.2.3 访问元素</h2><p>获取长度和容量被视作两种特殊操作：<code>OLEN</code>和 <code>OCAP</code>，在 SSA 生成阶段会被转换成<code>OpSliceLen</code>和<code>OpSliceCap</code>。</p><p>访问切片中的字段<strong>可能</strong>会触发<code>decompose builtin</code> 阶段的优化，<code>len(a)</code>或<code>cap(a)</code>某些<strong>情况</strong>下直接替换成长度和容量，无需在运行时获取。</p><p>访问元素使用的<code>OINDEX</code>在编译期间转换成对地址的直接访问。</p><p>此外，<code>range</code>也将被转换成更简单的循环。</p><h2 id="_3-2-4-追加和扩容" tabindex="-1"><a class="header-anchor" href="#_3-2-4-追加和扩容" aria-hidden="true">#</a> 3.2.4 追加和扩容</h2><h3 id="追加" tabindex="-1"><a class="header-anchor" href="#追加" aria-hidden="true">#</a> 追加</h3><p>使用<code>append</code>向切片中添加新元素，有两种不同情况：</p><ul><li>返回值不会覆盖原变量</li><li>返回值覆盖原变量</li></ul><p><strong>若返回值不会覆盖原变量</strong>， 则进入如下流程</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// append(slice, 1, 2, 3)</span>
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> slice
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">if</span> newlen <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
    ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
    newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">return</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结构切片</li><li>若追加后容量大于当前容量，进行扩容</li><li>追加新元素</li></ul><p><strong>若返回值覆盖原变量</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// slice = append(slice, 1, 2, 3)</span>
a <span class="token operator">:=</span> <span class="token operator">&amp;</span>slice
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> slice
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newlen<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   newptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> newcap <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
   <span class="token function">vardef</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
   <span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">=</span> newcap
   <span class="token operator">*</span>a<span class="token punctuation">.</span>ptr <span class="token operator">=</span> newptr
<span class="token punctuation">}</span>
newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> newlen
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程和之前类似，但不会创建新的切片结构体，而是在原切片上直接修改。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232214365.png" alt="golang-slice-append" tabindex="0" loading="lazy"><figcaption>golang-slice-append</figcaption></figure><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h3>`,19),A={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/slice.go#L162",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime/slice.growSlice",-1),q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 runtime/slice.go</span>

<span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
	doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
	<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
		newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>
			newcap <span class="token operator">=</span> doublecap
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
			<span class="token comment">// and prevent an infinite loop.</span>
			<span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Set newcap to the requested cap when</span>
			<span class="token comment">// the newcap calculation overflowed.</span>
			<span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩容前确认新的容量，然后根据当前容量选择不同的策略扩容：</p><ul><li>若期望容量大于当前容量的两倍，使用<strong>期望容量</strong></li><li>若当前容量小于 <strong>1024</strong>，新容量为原容量的<strong>两倍</strong></li><li>若当前容量大于 <strong>1024</strong>，原容量每次增加 <strong>25%</strong>，直到<strong>大于</strong>期望容量</li></ul>`,3),H=n("strong",null,"大致容量",-1),P=n("strong",null,"内存对齐",-1),V={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/msize.go#L13",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.roundupsize",-1),D={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/sizeclasses.go#L93",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.class_to_size ",-1),R=n("strong",null,"分配效率",-1),G=e(`<p>例如:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>期望分配的内存为 40Ｂ，向上取整为48Ｂ，此时容量就是 48/8 = 6。</p><h2 id="_3-2-5-拷贝" tabindex="-1"><a class="header-anchor" href="#_3-2-5-拷贝" aria-hidden="true">#</a> 3.2.5 拷贝</h2><h4 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期" aria-hidden="true">#</a> 编译期</h4><p>若<code>copy(a, b)</code>不在运行时被调用，那么在编译期会被转换成如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> a<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> b<span class="token punctuation">.</span>ptr <span class="token punctuation">{</span>
    <span class="token function">memmove</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> b<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> n<span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h4>`,8),U=n("code",null,"copy(a, b)",-1),F=n("code",null,"go copy(a, b)",-1),X={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/slice.go#L284",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.slicecopy",-1),Z=n("code",null,"copy",-1),$={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/memmove_386.s",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"runtime.memmove",-1),Q=n("strong",null,"整块内存",-1),W=e('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232243466.png" alt="golang-slice-copy" tabindex="0" loading="lazy"><figcaption>golang-slice-copy</figcaption></figure><h2 id="_3-2-6-小结" tabindex="-1"><a class="header-anchor" href="#_3-2-6-小结" aria-hidden="true">#</a> 3.2.6 小结</h2><p>切片很多功能都是由运行时实现的。</p><p>注意大切片扩容或复制时会发生大规模的内存拷贝，要减少此类操作避免影响性能。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',5),nn={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/golang/go/tree/release-branch.go1.17",target:"_blank",rel:"noopener noreferrer"};function an(tn,en){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("切片在编译期间生成的类型只包含元素类型，"),n("a",r,[k,t(a)])]),d,n("p",null,[m,s("的切片类型由 "),n("a",v,[b,t(a)])]),g,n("p",null,[s("使用"),h,s("时，需要传入长度和容量（可选），编译期使用"),n("a",f,[_,t(a)]),s("校验"),y,s("的参数：")]),w,n("p",null,[n("a",x,[S,t(a)])]),E,n("p",null,[s("节点转化之后，"),n("a",L,[M,t(a)]),s(" 会根据两个条件转化节点")]),C,n("p",null,[s("运行时"),n("a",N,[T,t(a)]),s(" 在堆上初始化切片：")]),I,z,O,n("p",null,[s("扩容时调用"),n("a",A,[j,t(a)])]),q,n("p",null,[s("上述代码段计算的只是"),H,s("，后序需要进行根据元素大小进行"),P,s("，内存对齐函数"),n("a",V,[B,t(a)]),s("会根据数组"),n("a",D,[K,t(a)]),s("向上取整，使用该数组的整数可以提高内存的"),R,s("并减少碎片。")]),G,n("p",null,[s("若"),U,s("在运行时发生（如："),F,s("），则会使用 "),n("a",X,[Y,t(a)]),s("替换"),Z,s("操作。")]),n("p",null,[s("两种拷贝方式都会用到函数"),n("a",$,[J,t(a)]),s("将"),Q,s("拷贝到目标内存区域中，比依次拷贝元素有着更好的性能。")]),W,n("ol",null,[n("li",null,[n("a",nn,[s("https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/"),t(a)])]),n("li",null,[n("a",sn,[s("https://github.com/golang/go/tree/release-branch.go1.17"),t(a)])])])])}const on=p(i,[["render",an],["__file","3.2.slice.html.vue"]]);export{on as default};
