import{_ as p,Y as t,Z as c,$ as n,a0 as s,a1 as o,a2 as a,F as i}from"./framework-d955655f.js";const l={},u=a(`<h2 id="_1-benchmark-基准测试" tabindex="-1"><a class="header-anchor" href="#_1-benchmark-基准测试" aria-hidden="true">#</a> 1. Benchmark 基准测试</h2><p>Go 标准库的 <code>testing</code> 框架提供了基准测试 (benchmark) 的能力，可以很容易对某一段代码进行测试。</p><p>性能测试易受环境影响，所以需要保证测试环境的稳定。</p><h2 id="_2-benchmark" tabindex="-1"><a class="header-anchor" href="#_2-benchmark" aria-hidden="true">#</a> 2. Benchmark</h2><h3 id="_2-1-计算第-n-个斐波那契数" tabindex="-1"><a class="header-anchor" href="#_2-1-计算第-n-个斐波那契数" aria-hidden="true">#</a> 2.1 计算第 N 个斐波那契数</h3><p>新增 <code>fib.go</code> 实现函数 <code>fib</code> 用于计算第 N 个斐波那契数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>fib_test.go</code> 中添加测试用例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Benchmark 和单元测试一样，位于 <code>_test.go</code> 文件中；</li><li>函数名以 <code>Benchmark</code> 开头，参数为 <code>*testing.B</code>；</li></ul><h3 id="_2-2-基准测试" tabindex="-1"><a class="header-anchor" href="#_2-2-基准测试" aria-hidden="true">#</a> 2.2 基准测试</h3><p><code>go test [module_name/package_name]</code> 可用于执行指定 package 内的所有测试用例。</p><ul><li>运行当前 package 用例： <code>go test .</code>；</li><li>运行子 package 用例：<code>go test module_name/package_name</code> or <code>go test ./package_name</code>；</li><li>递归运行所有的 package 测试用例：<code>go test ./...</code> or <code>go test module_name/...</code></li></ul><p>但是 <code>go test</code> 默认不运行 benchmark 用例，需要使用参数 <code>-bench regexp</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行当前目录的所有 benchmark</span>
$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;.&#39;</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 执行当前目录以 Fib 开头的 benchmark</span>
$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;^Fib&#39;</span> 
<span class="token comment"># 执行当前目录以 Fib 结尾的 benchmark</span>
$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib$&#39;</span>
<span class="token comment"># 执行当前目录包含 Fib 的 benchmark</span>
$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span>

goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib-8               <span class="token number">208</span>           <span class="token number">5652927</span> ns/op
PASS
ok      benchmark-example/fib   <span class="token number">1</span>.759s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>BenchmarkFib-8</code>：测试函数名，<code>8</code> 为 <code>GOMAXPROCS</code>，默认为 CPU 核数，可通过 <code>-cpu </code> 设置，如 <code>-cpu 1,2,4</code>；</li><li><code>208</code>：表示执行次数，即 <code>b.N</code>；</li><li><code>5652927 ns/op</code>：表示每次执行耗时；</li></ul><h3 id="_2-3-测试次数" tabindex="-1"><a class="header-anchor" href="#_2-3-测试次数" aria-hidden="true">#</a> 2.3 测试次数</h3><p>上述的测试用例执行次数 <code>b.N</code> ，对于每个用例均不同；<code>N</code> 从 1 开始，若测试能够在 1s 内完成，<code>N</code> 的值便会增加，再次执行，并且增加量会随着增加次数变大，。</p><h3 id="_2-4-提升准确度" tabindex="-1"><a class="header-anchor" href="#_2-4-提升准确度" aria-hidden="true">#</a> 2.4 提升准确度</h3><p>提升测试准确度的一个重要手段就是增加测试次数。</p><p>可以使用 <code>-benchtime</code> 设置测试时间和 N (执行次数) 或 <code>-count</code> 直接增加测试次数。</p><p>benchmark 的默认时间为 1s，可以使用 <code>-benchtime t</code> 来指定测试时间，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span> <span class="token parameter variable">-benchtime</span> 5s <span class="token builtin class-name">.</span>
goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib-8              <span class="token number">1012</span>           <span class="token number">5787959</span> ns/op
PASS
ok      benchmark-example/fib   <span class="token number">6</span>.459s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际时间为 6.459s ，其包含了编译、执行、销毁等操作的耗时。</p><p><code>-benchtime N</code> 可以直接指定执行次数，即 <code>b.N</code> 的值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置次数为 100</span>
$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span> <span class="token parameter variable">-benchtime</span> 100x <span class="token builtin class-name">.</span>
goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib-8               <span class="token number">100</span>           <span class="token number">5945347</span> ns/op
PASS
ok      benchmark-example/fib   <span class="token number">0</span>.604s

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-count n </code> 可以设置 benchmark 的次数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span> <span class="token parameter variable">-count</span> <span class="token number">3</span> <span class="token builtin class-name">.</span> 
goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib-8               <span class="token number">205</span>           <span class="token number">5704860</span> ns/op
BenchmarkFib-8               <span class="token number">208</span>           <span class="token number">5704035</span> ns/op
BenchmarkFib-8               <span class="token number">199</span>           <span class="token number">5917521</span> ns/op
PASS
ok      benchmark-example/fib   <span class="token number">5</span>.314s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-内存分配情况" tabindex="-1"><a class="header-anchor" href="#_2-5-内存分配情况" aria-hidden="true">#</a> 2.5 内存分配情况</h3><p><code>-benchmem</code> 可以用于查看内存分配情况。</p><p>示例：</p><p>函数 <code>generateWithCap</code> 和 <code>generate</code> 都是生成一组长度为 n 随机序列。<code>generateWithCap</code> 会在初始化切片时设置容量为元素数量 n，而 <code>generate</code> 不设置容量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">generateWithCap</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	nums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nums
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">generate</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	nums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nums
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token number">1000000</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerate</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">generate</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerateWithCap</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">generateWithCap</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Generate&#39;</span> <span class="token parameter variable">-benchmem</span> ./generate
goos: linux
goarch: amd64
pkg: benchmark-example/generate
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkGenerate-8                   <span class="token number">34</span>          <span class="token number">39161382</span> ns/op        <span class="token number">45188500</span> B/op         <span class="token number">41</span> allocs/op
BenchmarkGenerateWithCap-8            <span class="token number">40</span>          <span class="token number">25748104</span> ns/op         <span class="token number">8003584</span> B/op          <span class="token number">1</span> allocs/op
PASS
ok      benchmark-example/generate      <span class="token number">3</span>.402s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),r=n("p",null,[s("同样生成元素个数为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1"),n("mo",null,"×"),n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mn",null,"6")])]),n("annotation",{encoding:"application/x-tex"},"1 \\times 10^6")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"6")])])])])])])])])])]),s(" ， "),n("code",null,"generateWithCap"),s(" 的耗时减少了约 30%，而且内存分配只有一次。")],-1),d=a(`<h3 id="_2-6-测试不同的输入" tabindex="-1"><a class="header-anchor" href="#_2-6-测试不同的输入" aria-hidden="true">#</a> 2.6 测试不同的输入</h3><p>不同的函数时间复杂度不同，可以通过不同的输入来验证时间复杂度。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">benchGenerate</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">generate</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerateE3</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">benchGenerate</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerateE4</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">benchGenerate</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerateE5</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">benchGenerate</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenerateE6</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">benchGenerate</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;E\\d$&#39;</span> <span class="token parameter variable">-benchmem</span> ./generate
goos: linux
goarch: amd64
pkg: benchmark-example/generate
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkGenerateE3-8              <span class="token number">26528</span>             <span class="token number">52792</span> ns/op           <span class="token number">16376</span> B/op         <span class="token number">11</span> allocs/op
BenchmarkGenerateE4-8               <span class="token number">2836</span>            <span class="token number">489851</span> ns/op          <span class="token number">386297</span> B/op         <span class="token number">20</span> allocs/op
BenchmarkGenerateE5-8                <span class="token number">230</span>           <span class="token number">5124790</span> ns/op         <span class="token number">4654344</span> B/op         <span class="token number">30</span> allocs/op
BenchmarkGenerateE6-8                 <span class="token number">30</span>          <span class="token number">42110827</span> ns/op        <span class="token number">45188403</span> B/op         <span class="token number">40</span> allocs/op
PASS
ok      benchmark-example/generate      <span class="token number">6</span>.302s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出输入 N 变为原来的 10 倍，每次调用时间也约为原来的十倍，所以可以看出此函数的时间复杂度为 <em>O(N)</em>。</p><h2 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h2><h3 id="_3-1-resttimer" tabindex="-1"><a class="header-anchor" href="#_3-1-resttimer" aria-hidden="true">#</a> 3.1 RestTimer</h3><p>若在 benchmark 之前，需要较为耗时的准备工作，则需要忽略这部分的耗时：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFib2</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFibWithPreparation</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span> <span class="token parameter variable">-benchmem</span> ./fib
goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib-8                               <span class="token number">202</span>           <span class="token number">5734520</span> ns/op               <span class="token number">0</span> B/op          <span class="token number">0</span> allocs/op
BenchmarkFib2-8                              <span class="token number">205</span>           <span class="token number">5850143</span> ns/op               <span class="token number">0</span> B/op          <span class="token number">0</span> allocs/op
BenchmarkFibWithPreparation-8                  <span class="token number">1</span>        <span class="token number">3011438467</span> ns/op              <span class="token number">96</span> B/op          <span class="token number">2</span> allocs/op
PASS
ok      benchmark-example/fib   <span class="token number">15</span>.389s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-stoptimer-starttimer" tabindex="-1"><a class="header-anchor" href="#_3-2-stoptimer-starttimer" aria-hidden="true">#</a> 3.2 StopTimer &amp; StartTimer</h3><p>若每次调用函数前后需要准备工作和清理工作，则可以使用 <code>StopTimer</code> 暂停计时 和 <code>StartTimer</code> 开始计时。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkFib3</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
		b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFib4</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib[3,4]&#39;</span> <span class="token parameter variable">-benchmem</span> ./fib
goos: linux
goarch: amd64
pkg: benchmark-example/fib
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkFib3-8              <span class="token number">133</span>           <span class="token number">9265549</span> ns/op               <span class="token number">0</span> B/op          <span class="token number">0</span> allocs/op
BenchmarkFib4-8               <span class="token number">60</span>          <span class="token number">18395808</span> ns/op               <span class="token number">1</span> B/op          <span class="token number">0</span> allocs/op
PASS
ok      benchmark-example/fib   <span class="token number">5</span>.678s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,15),k={href:"https://geektutu.com/post/high-performance-go.html",target:"_blank",rel:"noopener noreferrer"};function m(b,v){const e=i("ExternalLinkIcon");return t(),c("div",null,[u,r,d,n("ol",null,[n("li",null,[n("a",k,[s("Go 语言高性能编程"),o(e)])])])])}const g=p(l,[["render",m],["__file","benchmark.html.vue"]]);export{g as default};
