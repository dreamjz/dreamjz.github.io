import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const l={},u=t(`<h2 id="_1-sync-once-的使用场景" tabindex="-1"><a class="header-anchor" href="#_1-sync-once-的使用场景" aria-hidden="true">#</a> 1. sync.Once 的使用场景</h2><p><code>sync.Once</code> 是 Go 标准库提供的使函数只执行一次的实现，常应用于单例模式，例如初始化配置、保持数据库连接等。作用与 <code>init</code> 函数类似，但有区别。</p><ul><li>init 函数是当所在的 package 首次被加载时执行，若迟迟未被使用，则既浪费了内存，又延长了程序加载时间。</li><li>sync.Once 可以在代码的任意位置初始化和调用，因此可以延迟到使用时再执行，并发场景下是<strong>线程安全</strong>的。</li></ul><p>在多数情况下，<code>sync.Once</code> 被用于控制变量的初始化，这个变量的读写满足如下三个条件：</p><ol><li>当且仅当第一次访问某个变量时，进行初始化（写）</li><li>变量初始化过程中，所有读都被阻塞，直到初始化完成</li><li>变量仅初始化一次，初始化完成后驻留在内存里</li></ol><p><code>sync.Once</code> 仅提供了一个方法 <code>Do</code>，参数 f 是对象初始化函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h2><p>下例中，使用函数<code>ReadConfig</code>读取配置，配置只需要被读取一次。</p><p>若函数被多个协程并发调用，此时使用<code>sync.once</code>可以保证函数只会被执行一次。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> readCfgOnce sync<span class="token punctuation">.</span>Once

<span class="token keyword">func</span> <span class="token function">ReadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	readCfgOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Reading Config...&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mainFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	n <span class="token operator">:=</span> <span class="token number">10</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">ReadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token number">00</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">21</span> Reading Config<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-标准库中的使用" tabindex="-1"><a class="header-anchor" href="#_2-1-标准库中的使用" aria-hidden="true">#</a> 2.1 标准库中的使用</h3>`,12),d=n("code",null,"sync.Once",-1),r={href:"https://github.com/golang/go/blob/release-branch.go1.18/src/html/entity.go",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"html",-1),v=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// html/entity.go</span>
<span class="token operator">...</span>
<span class="token keyword">var</span> entity <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">rune</span>
<span class="token operator">...</span>
<span class="token keyword">var</span> populateMapsOnce sync<span class="token punctuation">.</span>Once

<span class="token keyword">func</span> <span class="token function">populateMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	entity <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">{</span>
		<span class="token string">&quot;AElig;&quot;</span><span class="token punctuation">:</span>                           <span class="token char">&#39;\\U000000C6&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;AMP;&quot;</span><span class="token punctuation">:</span>                             <span class="token char">&#39;\\U00000026&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;Aacute;&quot;</span><span class="token punctuation">:</span>                          <span class="token char">&#39;\\U000000C1&#39;</span><span class="token punctuation">,</span>
        <span class="token operator">...</span> 
        <span class="token comment">// 约2000个字段</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// html/escape.go</span>
<span class="token keyword">func</span> <span class="token function">UnescapeString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	populateMapsOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>populateMaps<span class="token punctuation">)</span>
	i <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">IndexByte</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>entity</code>中包含两千多个字段，若在<code>init</code>函数中加载，没有使用时则将浪费内存</li><li><code>UnescapeString</code>函数是线程安全的，在并发调用时，<code>populateMapsOnce</code>可以保证<code>entity</code>只会被初始化一次</li></ul><h2 id="_3-原理" tabindex="-1"><a class="header-anchor" href="#_3-原理" aria-hidden="true">#</a> 3. 原理</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    done <span class="token builtin">uint32</span>
    m    Mutex
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span><span class="token function">doSlow</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">doSlow</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">defer</span> atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>done</code>：表示是否已执行，<code>0</code>表示未执行</li><li><code>m</code>：互斥锁</li></ul><h3 id="_3-1-done在结构体中的位置" tabindex="-1"><a class="header-anchor" href="#_3-1-done在结构体中的位置" aria-hidden="true">#</a> 3.1 <code>done</code>在结构体中的位置</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// done indicates whether the action has been performed.</span>
    <span class="token comment">// It is first in the struct because it is used in the hot path.</span>
    <span class="token comment">// The hot path is inlined at every call site.</span>
    <span class="token comment">// Placing done first allows more compact instructions on some architectures (amd64/x86),</span>
    <span class="token comment">// and fewer instructions (to calculate offset) on other architectures.</span>
    done <span class="token builtin">uint32</span>
    m    Mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>done 在热路径中，done 放在第一个字段，能够减少 CPU 指令，也就是说，这样做能够提升性能。</p><h4 id="热路径" tabindex="-1"><a class="header-anchor" href="#热路径" aria-hidden="true">#</a> 热路径</h4><p>热路径(hot path)是程序非常频繁执行的一系列指令，<code>sync.Once</code> 绝大部分场景都会访问 <code>done</code>，如果 hot path 编译后的机器码指令更少，更直接，必然是能够提升性能的。</p><h4 id="放在第一个字段就能够减少指令" tabindex="-1"><a class="header-anchor" href="#放在第一个字段就能够减少指令" aria-hidden="true">#</a> 放在第一个字段就能够减少指令？</h4><p>结构体第一个字段的地址和结构体的指针是相同的</p><ul><li>如果是第一个字段，直接对结构体的指针解引用即可</li><li>如果是其他的字段，除了结构体指针外，还需要计算与第一个值的偏移(calculate offset)。在机器码中，偏移量是随指令传递的附加值，CPU 需要做一次偏移值与指针的加法运算，才能获取要访问的值的地址。因为，访问第一个字段的机器代码更紧凑，速度更快。</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,14),m={href:"https://geektutu.com/post/hpg-sync-once.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://stackoverflow.com/questions/59174176/what-does-hot-path-mean-in-the-context-of-sync-once",target:"_blank",rel:"noopener noreferrer"};function h(f,g){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[d,s("在标准库中被广泛使用，例如在"),n("a",r,[k,e(a)]),s("中：")]),v,n("ol",null,[n("li",null,[n("a",m,[s("https://geektutu.com/post/hpg-sync-once.html"),e(a)])]),n("li",null,[n("a",b,[s("What does “hot path” mean in the context of sync.Once? - StackOverflow"),e(a)])])])])}const _=o(l,[["render",h],["__file","03.2.once.html.vue"]]);export{_ as default};
