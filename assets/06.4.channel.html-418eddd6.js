import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as t,a4 as e,H as l}from"./framework-d03928c9.js";const i={},u=e('<p><strong>不要通过共享内存的方式进行通信，而是应该通过通信的方式共享内存。</strong></p><h2 id="_6-4-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_6-4-1-设计原理" aria-hidden="true">#</a> 6.4.1 设计原理</h2><p>常见的多线程通信是通过<strong>共享内存</strong>来进行的：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310012235600.png" alt="shared-memory" tabindex="0" loading="lazy"><figcaption>shared-memory</figcaption></figure><p>Golang 除了支持共享内存的方式之外，还提供了基于 CSP（Communicating sequential processes）的并发模型。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310012237758.png" alt="channel-and-goroutines" tabindex="0" loading="lazy"><figcaption>channel-and-goroutines</figcaption></figure><h3 id="先入先出-fifo" tabindex="-1"><a class="header-anchor" href="#先入先出-fifo" aria-hidden="true">#</a> 先入先出 FIFO</h3><p>Channel 的数据遵循 FIFO原则：</p><ul><li>先从 channel 中读取数据的 goroutine 先接收到数据</li><li>先向 channel 中发送数据的 goroutine 可以优先发送数据</li></ul><h2 id="_6-4-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_6-4-2-数据结构" aria-hidden="true">#</a> 6.4.2 数据结构</h2>',10),r={href:"https://draveness.me/golang/tree/runtime.hchan",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.hchan",-1),k=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	qcount   <span class="token builtin">uint</span>
	dataqsiz <span class="token builtin">uint</span>
	buf      unsafe<span class="token punctuation">.</span>Pointer
	elemsize <span class="token builtin">uint16</span>
	closed   <span class="token builtin">uint32</span>
	elemtype <span class="token operator">*</span>_type
	sendx    <span class="token builtin">uint</span>
	recvx    <span class="token builtin">uint</span>
	recvq    waitq
	sendq    waitq

	lock mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>qcount</code>：channel 中元素的个数</li><li><code>dataqsiz</code>：channel 中<strong>循环</strong>队列的长度</li><li><code>buf</code>：channel 缓冲区数据指针</li><li><code>sendx</code>：channel 的发送操作当前所在位置（索引）</li><li><code>recvx</code>：channel 的接收操作当前所在位置（索引）</li><li><code>elemsize</code>：channel 中元素的大小</li><li><code>elemtype</code>：channel 中元素的类型</li><li><code>sendq</code>：发送操作阻塞的 goroutine 队列</li><li><code>recvq</code>：接收操作阻塞的 goroutine 队列</li></ul>`,2),v=n("strong",null,"双向链表",-1),m={href:"https://draveness.me/golang/tree/runtime.waitq",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"runtime.waitq",-1),g=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> waitq <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	first <span class="token operator">*</span>sudog
	last  <span class="token operator">*</span>sudog
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-4-3-创建-channel" tabindex="-1"><a class="header-anchor" href="#_6-4-3-创建-channel" aria-hidden="true">#</a> 6.4.3 创建 channel</h2><p>创建 channel 使用 make 关键字。编译期将<code>make</code>转换成<code>OMAKE</code>节点并在<strong>类型检查</strong>阶段将<code>OMAKE</code>转换成<code>OMAKECHAN</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OMAKE<span class="token punctuation">:</span>
		<span class="token operator">...</span>
		<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
		<span class="token keyword">case</span> TCHAN<span class="token punctuation">:</span>
			l <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 带缓冲区的异步 Channel</span>
				<span class="token operator">...</span>
				n<span class="token punctuation">.</span>Left <span class="token operator">=</span> l
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不带缓冲区的同步 Channel</span>
				n<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">nodintconst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OMAKECHAN
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b=n("code",null,"OMAKECHAN",-1),_={href:"https://draveness.me/golang/tree/runtime.makechan",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"runtime.makechan",-1),y={href:"https://draveness.me/golang/tree/runtime.makechan64",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.makechan64",-1),x=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"32")])]),n("annotation",{encoding:"application/x-tex"},"2^{32}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"32")])])])])])])])])])])],-1),q={href:"https://draveness.me/golang/tree/runtime.makechan",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"runtime.makechan",-1),E=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>t <span class="token operator">*</span>chantype<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>hchan <span class="token punctuation">{</span>
	elem <span class="token operator">:=</span> t<span class="token punctuation">.</span>elem
	mem<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> c <span class="token operator">*</span>hchan
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
		c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>buf <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> elem<span class="token punctuation">.</span>kind<span class="token operator">&amp;</span>kindNoPointers <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
		c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token operator">+</span>mem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> hchanSize<span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		c <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hchan<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>elemsize <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>elemtype <span class="token operator">=</span> elem
	c<span class="token punctuation">.</span>dataqsiz <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 channel 中收发的元素类型和缓冲区大小初始化：</p>`,2),S=n("strong",null,"无缓冲区",-1),O={href:"https://draveness.me/golang/tree/runtime.hchan",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"runtime.hchan",-1),N=n("li",null,[s("若 channel 有缓冲区且中元素类型"),n("strong",null,"不是指针"),s("类型，则将 channel 和底层数组分配在一块"),n("strong",null,"连续的内存空间"),s("中")],-1),P={href:"https://draveness.me/golang/tree/runtime.hchan",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.hchan",-1),L=n("strong",null,"单独",-1),R=n("h2",{id:"_6-4-4-发送数据",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-4-4-发送数据","aria-hidden":"true"},"#"),s(" 6.4.4 发送数据")],-1),D=n("code",null,"ch <- v",-1),M=n("code",null,"OSEND",-1),j={href:"https://draveness.me/golang/tree/runtime.chansend1",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.chansend1",-1),V=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OSEND<span class="token punctuation">:</span>
		n1 <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right
		n1 <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;chan send&quot;</span><span class="token punctuation">)</span>
		n1 <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
		n1 <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		n <span class="token operator">=</span> <span class="token function">mkcall1</span><span class="token punctuation">(</span><span class="token function">chanfn</span><span class="token punctuation">(</span><span class="token string">&quot;chansend1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B=n("code",null,"chansend1",-1),H={href:"https://draveness.me/golang/tree/runtime.chansend",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"runtime.chansend",-1),G=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;send on closed channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>进行加锁</li><li>若当前 channel 已关闭，触发 panic</li></ol><p>之后进入发送阶段，可以分为三个部分：</p>`,3),I=n("strong",null,"存在",-1),T=n("strong",null,"接收者",-1),U={href:"https://draveness.me/golang/tree/runtime.send",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime.send",-1),$=n("li",null,"发送到缓冲区：当缓冲区存在且还有剩余空间时，将数据发送至缓冲区",-1),J=n("li",null,"阻塞：当无缓冲区或缓冲区已满时，等待 goroutine 接收数据",-1),Q=e(`<h3 id="直接发送" tabindex="-1"><a class="header-anchor" href="#直接发送" aria-hidden="true">#</a> 直接发送</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">send</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 goroutine 等待队列中取出最先开始等待的 gortoutine，直接发送数据。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310020033512.png" alt="channel-direct-send" tabindex="0" loading="lazy"><figcaption>channel-direct-send</figcaption></figure>`,4),W={href:"https://draveness.me/golang/tree/runtime.send",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"runtime.send",-1),Y={href:"https://draveness.me/golang/tree/runtime.sendDirect",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.sendDirect",-1),sn=n("strong",null,"拷贝",-1),an=n("code",null,"x := <-c",-1),tn=n("code",null,"x",-1),en={href:"https://draveness.me/golang/tree/runtime.goready",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.goready",-1),pn=n("strong",null,"等待",-1),cn=n("strong",null,"标记",-1),ln=n("strong",null,"可运行",-1),un=n("strong",null,"发送方",-1),rn=n("code",null,"runnext",-1),dn=n("strong",null,"等待执行",-1),kn=n("strong",null,"下一次调度",-1),vn=n("strong",null,"唤醒接收方",-1),mn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> sg <span class="token operator">*</span>sudog<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unlockf <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> skip <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> sg<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">sendDirect</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>
		sg<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	gp <span class="token operator">:=</span> sg<span class="token punctuation">.</span>g
	<span class="token function">unlockf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
	<span class="token function">goready</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> skip<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送到缓冲区" tabindex="-1"><a class="header-anchor" href="#发送到缓冲区" aria-hidden="true">#</a> 发送到缓冲区</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">{</span>
		qp <span class="token operator">:=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sendx<span class="token punctuation">)</span>
		<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>sendx<span class="token operator">++</span>
		<span class="token keyword">if</span> c<span class="token punctuation">.</span>sendx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span>sendx <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		c<span class="token punctuation">.</span>qcount<span class="token operator">++</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程如下：</p>`,4),hn={href:"https://draveness.me/golang/tree/runtime.chanbuf",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.chanbuf",-1),bn={href:"https://draveness.me/golang/tree/runtime.typedmemmove",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"runtime.typedmemmove",-1),fn=n("li",null,[s("更新 "),n("code",null,"sendx"),s("索引")],-1),yn=n("li",null,[s("更新"),n("code",null,"qcount"),s("计数器")],-1),wn=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310020040377.png" alt="channel-buffer-send" tabindex="0" loading="lazy"><figcaption>channel-buffer-send</figcaption></figure><p>channel 的缓冲区是<strong>循环</strong>（或者说滚动）数组，当<code>sendx</code>到达数组尾部之后，会回到数据首部。</p><h3 id="阻塞发送" tabindex="-1"><a class="header-anchor" href="#阻塞发送" aria-hidden="true">#</a> 阻塞发送</h3><p>当缓冲区已满 或 当前没有接收者（无缓冲）时，若当前操作是阻塞的（block 为 true）发送数据操作会被阻塞：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">{</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mysg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mysg<span class="token punctuation">.</span>elem <span class="token operator">=</span> ep
	mysg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp
	mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> c
	gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> mysg
	c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span>
	<span class="token function">goparkunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> waitReasonChanSend<span class="token punctuation">,</span> traceEvGoBlockSend<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

	gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">nil</span>
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>
	mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token function">releaseSudog</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),xn={href:"https://draveness.me/golang/tree/runtime.getg",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"runtime.getg",-1),zn=n("strong",null,"发送",-1),En=n("strong",null,"goroutine",-1),Sn={href:"https://draveness.me/golang/tree/runtime.acquireSudog",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"runtime.acquireSudog",-1),Cn={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.sudog",-1),Pn=n("strong",null,"阻塞相关",-1),An=n("code",null,"select",-1),Ln=n("li",null,[n("p",null,[s("将已初始化的"),n("code",null,"mysg"),s("放入"),n("strong",null,"发送等待队列"),s("，并将当前的 goroutine 的"),n("code",null,"waiting"),s("字段设置为 "),n("code",null,"mysg"),s("表示当前 goroutine 正在等待 "),n("code",null,"mysg"),s("准备就绪")])],-1),Rn={href:"https://draveness.me/golang/tree/runtime.goparkunlock",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"runtime.goparkunlock",-1),Mn=n("li",null,[n("p",null,[s("当前的 goroutine 唤醒之后，将相关属性置零并释放 "),n("code",null,"mysg")])],-1),jn=n("p",null,"函数返回 true 则表示发送成功。",-1),Kn=n("h3",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),s(" 小结")],-1),Vn=n("p",null,"发送数据时：",-1),Bn=n("li",null,[s("若当前 channel 上的等待接收队列 "),n("code",null,"recvq"),s(" 存在被阻塞的 goroutine，则将数据发送给接收方，并将接收方 goroutine 设置成下一个可运行的 goroutine。")],-1),Hn=n("li",null,"当缓冲区可用时，直接发送到缓冲区中",-1),Fn={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.sudog",-1),In=n("strong",null,"channel",-1),Tn=n("strong",null,"发送队列",-1),Un=n("code",null,"sendq",-1),Zn=e('<p>发送数据过程中<strong>涉及</strong>的 goroutine <strong>调度</strong>：</p><ol><li>直接发送数据时，将接收方 goroutine 设置为当前 goroutine 的处理器 P 的 <code>runnext</code>（表示为当前P的下一个执行的 goroutine），不会立刻执行接收方 goroutine</li><li>发送<strong>阻塞</strong>时，将当前 goroutine 加入 channel 的发送队列 <code>sendq</code>，并进入睡眠让出处理器的使用权</li></ol><h2 id="_6-4-5-接收数据" tabindex="-1"><a class="header-anchor" href="#_6-4-5-接收数据" aria-hidden="true">#</a> 6.4.5 接收数据</h2><p>接收数据有两种方式：</p><ol><li><code>v := &lt;-ch</code></li><li><code>v, ok := &lt;-ch </code></li></ol><p>两种不同的方式会被转换成<code>ORECV</code>节点，并在类型检查阶段转换成<code>OAS2RECV</code>：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310020137659.png" alt="channel-receive-node" tabindex="0" loading="lazy"><figcaption>channel-receive-node</figcaption></figure>',7),$n={href:"https://draveness.me/golang/tree/runtime.chanrecv1",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"runtime.chanrecv1",-1),Qn={href:"https://draveness.me/golang/tree/runtime.chanrecv2",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.chanrecv2",-1),Xn={href:"https://draveness.me/golang/tree/runtime.chanrecv",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"runtime.chanrecv",-1),ns=e(`<p>首先，若从<code>nil</code> channel 中读取则直接进入<strong>阻塞</strong>态。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span> received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanReceiveNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>qcount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为 channel 加锁</li><li>若当前 channel 已关闭 并且 缓冲区中无数据，则清除<code>ep</code>指针中的数据并返回</li></ul><p>后序的流程分为三种情况：</p>`,4),ss=n("strong",null,"等待中",-1),as=n("strong",null,"发送者",-1),ts={href:"https://draveness.me/golang/tree/runtime.recv",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.recv",-1),os=n("li",null,"当缓冲区中有数据时，从缓冲区获取数据",-1),ps=n("li",null,"缓冲区无数据时，等待发送者",-1),cs=e(`<h3 id="直接接收" tabindex="-1"><a class="header-anchor" href="#直接接收" aria-hidden="true">#</a> 直接接收</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">recv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ls=n("code",null,"sendq",-1),is={href:"https://draveness.me/golang/tree/runtime.recv",target:"_blank",rel:"noopener noreferrer"},us=n("code",null,"runtime.recv",-1),rs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">recv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> sg <span class="token operator">*</span>sudog<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unlockf <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> skip <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>dataqsiz <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">recvDirect</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> ep<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		qp <span class="token operator">:=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> sg<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>recvx<span class="token operator">++</span>
		c<span class="token punctuation">.</span>sendx <span class="token operator">=</span> c<span class="token punctuation">.</span>recvx <span class="token comment">// c.sendx = (c.sendx+1) % c.dataqsiz</span>
	<span class="token punctuation">}</span>
	gp <span class="token operator">:=</span> sg<span class="token punctuation">.</span>g
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
	<span class="token function">goready</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> skip<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数会根据缓冲区的大小分为两种情况：</p>`,2),ds={href:"https://draveness.me/golang/tree/runtime.recvDirect",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.recvDirect",-1),vs=n("code",null,"elem",-1),ms=n("li",null,[s("若存在缓冲区： "),n("ol",null,[n("li",null,"将队列中的数据拷贝到接收方的内存地址"),n("li",null,[s("将发送"),n("strong",null,"队列首部"),s("的数据放入缓冲区，释放一个阻塞的发送方")])])],-1),hs={href:"https://draveness.me/golang/tree/runtime.goready",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"runtime.goready",-1),bs=n("code",null,"runnext",-1),_s=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310020152025.png" alt="channel-receive-from-sendq" tabindex="0" loading="lazy"><figcaption>channel-receive-from-sendq</figcaption></figure><h3 id="从缓冲区接收" tabindex="-1"><a class="header-anchor" href="#从缓冲区接收" aria-hidden="true">#</a> 从缓冲区接收</h3><p>当缓冲区中有数据时，从缓冲区中获取数据：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span> received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		qp <span class="token operator">:=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ep <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>recvx<span class="token operator">++</span>
		<span class="token keyword">if</span> c<span class="token punctuation">.</span>recvx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span>recvx <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		c<span class="token punctuation">.</span>qcount<span class="token operator">--</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将缓冲区的数据拷贝至目标地址</li><li>从缓冲区中清除已接收的数据</li><li>更新缓冲区的接收索引<code>recvx++</code></li><li>更新缓冲区计数器 <code>qcount--</code></li></ul><h3 id="阻塞接收" tabindex="-1"><a class="header-anchor" href="#阻塞接收" aria-hidden="true">#</a> 阻塞接收</h3><p>当发送队列中无等待中的发送者 并且 缓冲区无数据时，若当前操作是阻塞的（block 为true）则接收会被阻塞：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span> received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">{</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mysg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mysg<span class="token punctuation">.</span>elem <span class="token operator">=</span> ep
	gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> mysg
	mysg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp
	mysg<span class="token punctuation">.</span>c <span class="token operator">=</span> c
	c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span>
	<span class="token function">goparkunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> waitReasonChanReceive<span class="token punctuation">,</span> traceEvGoBlockRecv<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

	gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">nil</span>
	closed <span class="token operator">:=</span> gp<span class="token punctuation">.</span>param <span class="token operator">==</span> <span class="token boolean">nil</span>
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token function">releaseSudog</span><span class="token punctuation">(</span>mysg<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">!</span>closed
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),fs={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"runtime.sudog",-1),ws=n("code",null,"recvq",-1),xs={href:"https://draveness.me/golang/tree/runtime.goparkunlock",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"runtime.goparkunlock",-1),zs=n("h3",{id:"小结-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结-1","aria-hidden":"true"},"#"),s(" 小结")],-1),Es=n("p",null,"从 channel 中接收数据时，会出现5中情况：",-1),Ss=n("strong",null,"nil",-1),Os={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.gopark",-1),Ns=e("<li>若 channel <strong>已关闭</strong> 并且 <strong>缓冲区无数据</strong>，则直接返回</li><li>若 channel 的<strong>发送等待队列</strong><code>sendq</code>中存在等待中的 goroutine，则将<code>recvx</code>对应的数据拷贝至目标内存上，并将<code>sendq</code>中的数据存入缓冲区</li><li>若 channel 的缓冲区存在数据，则直接从缓冲区中读取</li>",3),Ps={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"runtime.sudog",-1),Ls=n("strong",null,"等待接收队列",-1),Rs=n("strong",null,"睡眠",-1),Ds=n("p",null,"接收数据中会有两个时机涉及 goroutine 的调度：",-1),Ms=n("ol",null,[n("li",null,"当 channel 为 nil 时，直接挂起当前 goroutine"),n("li",null,"当 缓冲区无数据 且 无等待中的发送者时，当前 goroutine 进入睡眠等待唤醒")],-1),js=n("h2",{id:"_6-4-6-关闭-channel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-4-6-关闭-channel","aria-hidden":"true"},"#"),s(" 6.4.6 关闭 channel")],-1),Ks=n("code",null,"close(ch)",-1),Vs=n("code",null,"close",-1),Bs=n("code",null,"OCLOSE",-1),Hs={href:"https://draveness.me/golang/tree/runtime.closechan",target:"_blank",rel:"noopener noreferrer"},Fs=n("code",null,"runtime.closechan",-1),Gs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">closechan</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;close of nil channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;close of closed channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若当前 channel 为 nil 或 已经关闭时，触发 panic。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	c<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token number">1</span>

	<span class="token keyword">var</span> glist gList
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> sg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> sg<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> sg<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
			sg<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		gp <span class="token operator">:=</span> sg<span class="token punctuation">.</span>g
		gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>
		glist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token operator">!</span>glist<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		gp <span class="token operator">:=</span> glist<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		gp<span class="token punctuation">.</span>schedlink <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token function">goready</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Is=n("li",null,[s("将 "),n("code",null,"recvq"),s("和 "),n("code",null,"sendq"),s(" 中的数据加入到 goroutine 列表 "),n("code",null,"gList"),s(" 中")],-1),Ts={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"runtime.sudog",-1),Zs={href:"https://draveness.me/golang/tree/runtime.goready",target:"_blank",rel:"noopener noreferrer"},$s=n("code",null,"runtime.goready",-1),Js=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Qs={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/",target:"_blank",rel:"noopener noreferrer"};function Ws(Xs,Ys){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("运行时的 channel 使用"),n("a",r,[d,t(a)]),s("表示：")]),k,n("p",null,[s("goroutine 队列由"),v,n("a",m,[h,t(a)]),s("表示：")]),g,n("p",null,[b,s("会在 SSA 中间代码生成阶段转换成调用 "),n("a",_,[f,t(a)]),s(" 或者 "),n("a",y,[w,t(a)]),s(" （用于处理缓冲区大于"),x,s("）的函数。")]),n("p",null,[s("其中，"),n("a",q,[z,t(a)]),s("：")]),E,n("ul",null,[n("li",null,[s("若 channel "),S,s("，只为"),n("a",O,[C,t(a)]),s("分配内存")]),N,n("li",null,[s("默认情况，则为 "),n("a",P,[A,t(a)]),s(" 和缓冲区"),L,s("分配内存")])]),R,n("p",null,[s("发送数据时使用 "),D,s(" 的形式，编译器会将其解析成 "),M,s("节点并转换成"),n("a",j,[K,t(a)]),s(":")]),V,n("p",null,[B,s("实际会调用函数"),n("a",H,[F,t(a)]),s("， 首先：")]),G,n("ol",null,[n("li",null,[s("直接发送：当"),I,s("等待的"),T,s("时，通过"),n("a",U,[Z,t(a)]),s("直接发送数据")]),$,J]),Q,n("p",null,[s("发送数据时使用"),n("a",W,[X,t(a)]),s("，函数流程如下：")]),n("ol",null,[n("li",null,[s("调用 "),n("a",Y,[nn,t(a)]),s(" 将发送的数据直接"),sn,s("到 "),an,s("的目标变量"),tn,s("的内存地址中")]),n("li",null,[s("调用 "),n("a",en,[on,t(a)]),s(" 将"),pn,s("接收数据的 goroutine "),cn,s("为"),ln,s("状态，并将该 goroutine 放到"),un,s("所在的处理器 P 的"),rn,s("上"),dn,s("，该处理器在"),kn,s("时会立刻"),vn,s(" goroutine（注意：发送数据时，不会立即执行接收方的 goroutine）")])]),mn,n("ol",null,[n("li",null,[s("使用 "),n("a",hn,[gn,t(a)]),s(" 计算下一个可以存储数据的位置")]),n("li",null,[s("通过"),n("a",bn,[_n,t(a)]),s("将发送的数据拷贝到缓冲区中")]),fn,yn]),wn,n("ol",null,[n("li",null,[n("p",null,[s("使用"),n("a",xn,[qn,t(a)]),s("获取"),zn,s("数据的 "),En])]),n("li",null,[n("p",null,[s("执行 "),n("a",Sn,[On,t(a)]),s("获取 "),n("a",Cn,[Nn,t(a)]),s(" 结构并设置"),Pn,s("的信息，如：发送的 channel，是否在 "),An,s(" 结构中，待发送的数据的地址等")])]),Ln,n("li",null,[n("p",null,[s("使用 "),n("a",Rn,[Dn,t(a)]),s(" 使得当前的 goroutine 进入睡眠并等待唤醒")])]),Mn]),jn,Kn,Vn,n("ol",null,[Bn,Hn,n("li",null,[s("缓冲区不可用（已满或无缓冲区），且无等待接收的 goroutine 时，创建一个"),n("a",Fn,[Gn,t(a)]),s("加入到 "),In,s(" 的"),Tn,Un,s("中，当前 goroutine 陷入睡眠并等待接收方接收数据")])]),Zn,n("p",null,[s("函数 "),n("a",$n,[Jn,t(a)]),s(" 和 "),n("a",Qn,[Wn,t(a)]),s(" 最终会调用函数"),n("a",Xn,[Yn,t(a)]),s("：")]),ns,n("ol",null,[n("li",null,[s("当存在"),ss,s("的"),as,s("，则调用"),n("a",ts,[es,t(a)]),s(" 从阻塞的发送者 或 缓冲区获取数据")]),os,ps]),cs,n("p",null,[s("当 channel 的等待发送队列 "),ls,s("中有等待中的发送者时，调用 "),n("a",is,[us,t(a)]),s("接收数据：")]),rs,n("ol",null,[n("li",null,[s("若不存在缓冲区，调用 "),n("a",ds,[ks,t(a)]),s(" 将发送者发送的数据"),vs,s("拷贝到目标内存地址上(ep指针指向的位置)")]),ms]),n("p",null,[s("之后调用 "),n("a",hs,[gs,t(a)]),s(" 将当前处理器的"),bs,s("设置为 发送方的 goroutine，在下一次调度时将发送方唤醒。")]),_s,n("ul",null,[n("li",null,[s("使用"),n("a",fs,[ys,t(a)]),s("封装当前 goroutine，加入接收等待队列"),ws,s("中。")]),n("li",null,[s("调用 "),n("a",xs,[qs,t(a)]),s(" 让出处理器使用权，等待调度")])]),zs,Es,n("ol",null,[n("li",null,[s("若 channel 为 "),Ss,s("，则调用 "),n("a",Os,[Cs,t(a)]),s(" 挂起当前 goroutine")]),Ns,n("li",null,[s("缓冲区无数据并且无等待中的发送者，则将当前 goroutine（使用"),n("a",Ps,[As,t(a)]),s("封装）加入到"),Ls,s("中，并陷入"),Rs,s("等待唤醒")])]),Ds,Ms,js,n("p",null,[s("关闭channel 使用"),Ks,s("，编译器将"),Vs,s("转换成 "),Bs,s("节点并调用"),n("a",Hs,[Fs,t(a)]),s("：")]),Gs,n("ul",null,[Is,n("li",null,[s("清除所有 "),n("a",Ts,[Us,t(a)]),s(" 上未被处理的元素")]),n("li",null,[s("使用 "),n("a",Zs,[$s,t(a)]),s(" 触发所有等待中的 goroutine 的调度")])]),Js,n("ol",null,[n("li",null,[n("a",Qs,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/"),t(a)])])])])}const sa=o(i,[["render",Ws],["__file","06.4.channel.html.vue"]]);export{sa as default};
