const n=JSON.parse('{"key":"v-3f62ce0c","path":"/note/golang/open-source-books/the-way-to-go/14/14.6.html","title":"14.6 协程和恢复(recover)","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1684038853000},"readingTime":{"minutes":0.34,"words":102},"filePathRelative":"note/golang/open-source-books/the-way-to-go/14/14.6.md","excerpt":"<h1> 14.6 协程和恢复(recover)</h1>\\n<p><strong>恢复是在 panicking 的协程内部的：不能被另外一个协程恢复</strong></p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">server</span><span class=\\"token punctuation\\">(</span>workChan <span class=\\"token operator\\">&lt;-</span><span class=\\"token keyword\\">chan</span> <span class=\\"token operator\\">*</span>Work<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> work <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> workChan <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">go</span> <span class=\\"token function\\">safelyDo</span><span class=\\"token punctuation\\">(</span>work<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\">// start the goroutine for that work</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">safelyDo</span><span class=\\"token punctuation\\">(</span>work <span class=\\"token operator\\">*</span>Work<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">defer</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">recover</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n            log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Work failed with %s in %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">,</span> work<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">do</span><span class=\\"token punctuation\\">(</span>work<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
