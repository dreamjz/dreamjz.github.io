import{_ as a,Z as e,$ as p,a0 as n,a1 as t,a2 as c,a4 as o,H as i}from"./framework-d03928c9.js";const l={},u=o(`<h2 id="_1-benchmark-的使用" tabindex="-1"><a class="header-anchor" href="#_1-benchmark-的使用" aria-hidden="true">#</a> 1. Benchmark 的使用</h2><h3 id="_1-1-示例-fibonacci-数列" tabindex="-1"><a class="header-anchor" href="#_1-1-示例-fibonacci-数列" aria-hidden="true">#</a> 1.1 示例：Fibonacci 数列</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// fib.go</span>
<span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>fib_test.go</code>中创建 benchmark 测试用例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// fib_test.go</span>
<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Benchmark 测试和单元测试都是放在<code>xxx_text.go</code>文件中</li><li>测试函数名要以 <code>Benchmark</code>开头，单元测试以 <code>Test</code>开头</li><li>测试函数参数为 <code>b *testing.B</code>，单元测试函数参数为 <code>t *testing.T</code></li></ul><h3 id="_1-2-运行-benchmark" tabindex="-1"><a class="header-anchor" href="#_1-2-运行-benchmark" aria-hidden="true">#</a> 1.2 运行 Benchmark</h3><p>运行 benchmark 测试，需要使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-bench</code>：表示开启 benchmark</li><li><code>.</code>：正则表达式，用于执行匹配的 benchmark 函数名，此处为任意函数</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>goos: windows
goarch: amd64
pkg: high-performance-go/01-performance-analysis
...
BenchmarkFib
BenchmarkFib-12              280           4173083 ns/op
PASS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-benchmark-如何工作" tabindex="-1"><a class="header-anchor" href="#_1-3-benchmark-如何工作" aria-hidden="true">#</a> 1.3 Benchmark 如何工作</h3><p>对于<code>b *testing.B</code>，<code>b.N</code>表示测试用例的运行次数。</p><p><code>b.N</code>从 1 开始，若用例能够在 1s 内完成，<code>b.N</code> 便会增加并再次执行。<code>b.N</code>大致以 <code>1, 2, 3, 5, 10, 20, 30, 50, 100...</code>的形式递增。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkFib-12              280           4173083 ns/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的 <code>BenchmarkFib-12</code> 的 <code>12</code> 表示 CPU 的核心数，可以通过<code>-cpu</code>来修改 <code>GOMAXPRROCS</code>的值，并且可以传入列表作为参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-cpu</span> <span class="token number">2,4</span>
BenchmarkFib
BenchmarkFib-2               <span class="token number">285</span>           <span class="token number">4176162</span> ns/op
BenchmarkFib-4               <span class="token number">294</span>           <span class="token number">4187019</span> ns/op
PASS
ok      high-performance-go/01-performance-analysis     <span class="token number">3</span>.305s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-cpu 2,4</code>：表示分别使用 2 个和 4 个核心进行测试，测试的函数是串行的多核心对结果没有影响</li><li><code>285</code>：表示测试用例在测试时间<code>3.305s</code>内执行的次数</li><li><code>4176162 ns/op</code>：表示每次执行的时间</li></ul><h3 id="_1-4-提升准确度" tabindex="-1"><a class="header-anchor" href="#_1-4-提升准确度" aria-hidden="true">#</a> 1.4 提升准确度</h3><p>对于性能测试来说，提升准确度的一个手段是增加测试次数。</p><p>使用<code>-benchtime</code>设定测试时间，其默认时间为 1s。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-benchtime</span> 5s
BenchmarkFib-12             <span class="token number">1448</span>           <span class="token number">4116528</span> ns/op
PASS
ok      high-performance-go/01-performance-analysis     <span class="token number">6</span>.425s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>6.5s</code>：包含了编译，执行，销毁等时间，比实际测试时间长</li><li><code>4116528</code>：可以看出，每次执行时间没有大的变化</li></ul><p><code>-benchtime</code> 可以设定具体次数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-benchtime</span> 30x
BenchmarkFib-12               <span class="token number">30</span>           <span class="token number">4228023</span> ns/op
PASS
ok      high-performance-go/01-performance-analysis     <span class="token number">0</span>.182s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-benchtime 30x</code>：表示只执行 30 次</li></ul><p><code>-count</code>用于设置测试轮数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-count</span> <span class="token number">3</span>
BenchmarkFib-12              <span class="token number">285</span>           <span class="token number">4268897</span> ns/op
BenchmarkFib-12              <span class="token number">285</span>           <span class="token number">4190173</span> ns/op
BenchmarkFib-12              <span class="token number">288</span>           <span class="token number">4254332</span> ns/op
PASS
ok      high-performance-go/01-performance-analysis     <span class="token number">5</span>.347s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-count 3</code>：表示测试 3 轮</li></ul><h3 id="_1-5-内存分配情况" tabindex="-1"><a class="header-anchor" href="#_1-5-内存分配情况" aria-hidden="true">#</a> 1.5 内存分配情况</h3><p><code>-benchmem</code>可以查看内存分配的次数。</p><p>下例中，分别使用两种不同的方式生成 slice：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">genSlice</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genSliceWithCap</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> GenSliceLen <span class="token operator">=</span> <span class="token number">500000</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenSlice</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">genSlice</span><span class="token punctuation">(</span>GenSliceLen<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenSliceWithCap</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">genSliceWithCap</span><span class="token punctuation">(</span>GenSliceLen<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;GenSlice&#39;</span> <span class="token parameter variable">-benchmem</span> 
BenchmarkGenSlice-12                 <span class="token number">181</span>           <span class="token number">6479400</span> ns/op        <span class="token number">21088848</span> B/op         <span class="token number">36</span> allocs/op
BenchmarkGenSliceWithCap-12          <span class="token number">507</span>           <span class="token number">2526058</span> ns/op         <span class="token number">4011269</span> B/op          <span class="token number">2</span> allocs/op
PASS
ok      high-performance-go/01-performance-analysis     <span class="token number">3</span>.819s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-测试不同的输入" tabindex="-1"><a class="header-anchor" href="#_1-6-测试不同的输入" aria-hidden="true">#</a> 1.6 测试不同的输入</h3><p>不同的函数时间复杂度不同，可以使用 benchmark 来验证时间和空间复杂度。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">benchGenSliceHelper</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">genSlice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGenSlice1000</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token function">benchGenSliceHelper</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkGenSlice10000</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">benchGenSliceHelper</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkGenSlice100000</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchGenSliceHelper</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;GenSlice1&#39;</span> <span class="token parameter variable">-benchmem</span>
BenchmarkGenSlice1000-12           <span class="token number">61258</span>             <span class="token number">19013</span> ns/op           <span class="token number">30584</span> B/op         <span class="token number">13</span> allocs/op
BenchmarkGenSlice10000-12           <span class="token number">9230</span>            <span class="token number">124317</span> ns/op          <span class="token number">363001</span> B/op         <span class="token number">20</span> allocs/op
BenchmarkGenSlice100000-12           <span class="token number">877</span>           <span class="token number">1234429</span> ns/op         <span class="token number">4106772</span> B/op         <span class="token number">29</span> allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出其空间和时间复杂度为 <code>O(n)</code></p><h2 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h2><h3 id="_2-1-resettimer" tabindex="-1"><a class="header-anchor" href="#_2-1-resettimer" aria-hidden="true">#</a> 2.1 ResetTimer</h3><p>如果在 benchmark 开始前，需要一些准备工作，如果准备工作比较耗时，则需要将这部分代码的耗时忽略掉。比如下面的例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 模拟耗时准备任务</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// run fib(30) b.N times</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// bench</span>
BenchmarkFib<span class="token operator">-</span><span class="token number">8</span>                <span class="token number">50</span>          <span class="token number">65912552</span> ns<span class="token operator">/</span>op
PASS
ok      example <span class="token number">6</span><span class="token punctuation">.</span>319s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时测试的时间收到干扰，需要<code>b.ResetTimer()</code>重置计时，排除干扰。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 模拟耗时准备任务</span>
    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 重置定时器</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// run fib(30) b.N times</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// bench</span>
BenchmarkFib<span class="token operator">-</span><span class="token number">8</span>                <span class="token number">50</span>           <span class="token number">6187485</span> ns<span class="token operator">/</span>op
PASS
ok      example <span class="token number">6</span><span class="token punctuation">.</span>330s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-stoptimer-starttimer" tabindex="-1"><a class="header-anchor" href="#_2-2-stoptimer-starttimer" aria-hidden="true">#</a> 2.2 StopTimer &amp; StartTimer</h3><p>若函数调用前后需要一些准备工作和清理工作，可以使用 <code>StopTimer</code> 暂停计时以及使用 <code>StartTimer</code> 开始计时。</p><p>例如测试排序数组，需要在排序之前生成数组。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
				nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// _test</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkBubbleSort</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		nums <span class="token operator">:=</span> <span class="token function">genSliceWithCap</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span>
		b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// bench</span>
BenchmarkBubbleSort<span class="token operator">-</span><span class="token number">12</span>                 <span class="token number">1</span>        <span class="token number">2949370800</span> ns<span class="token operator">/</span>op               <span class="token number">8</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
PASS
ok      high<span class="token operator">-</span>performance<span class="token operator">-</span><span class="token keyword">go</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">-</span>performance<span class="token operator">-</span>analysis     <span class="token number">3</span><span class="token punctuation">.</span>381s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,51),r={href:"https://geektutu.com/post/hpg-benchmark.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=i("ExternalLinkIcon");return e(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[t("https://geektutu.com/post/hpg-benchmark.html"),c(s)])])])])}const v=a(l,[["render",k],["__file","01.1.benchmark.html.vue"]]);export{v as default};
