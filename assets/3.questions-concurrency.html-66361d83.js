import{_ as n,Z as s,$ as a,a3 as t}from"./framework-dee406ed.js";const o={},p=t(`<h2 id="_1-有缓冲和无缓冲的-channel-区别" tabindex="-1"><a class="header-anchor" href="#_1-有缓冲和无缓冲的-channel-区别" aria-hidden="true">#</a> 1. 有缓冲和无缓冲的 Channel 区别</h2><ul><li>无缓冲 Channel： <ul><li>发送：发送时若无接收者则阻塞，直到接收者接收</li><li>接收：接收时若无发送者则阻塞，直到发送者发送</li></ul></li><li>有缓冲 Channel： <ul><li>发送：仅在缓冲以满时阻塞</li><li>接收：仅在缓冲为空时阻塞</li></ul></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	st <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token operator">&lt;-</span>ch
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span>  <span class="token comment">// 无缓冲，发送方阻塞直到接收方接收到数据。</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cost %.1f s\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	st <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token operator">&lt;-</span>ch
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
	ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">// 缓冲区为 2，发送方不阻塞，继续往下执行</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cost %.1f s\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// cost 0.0 s</span>
	ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">// 缓冲区使用完，发送方阻塞，2s 后接收方接收到数据，释放一个插槽，继续往下执行</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cost %.1f s\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// cost 2.0 s</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-简述-协程泄露-goroutine-leak" tabindex="-1"><a class="header-anchor" href="#_2-简述-协程泄露-goroutine-leak" aria-hidden="true">#</a> 2. 简述 协程泄露(Goroutine Leak)</h2><p>Goroutine Leak 只得时 Goroutine 在创建之后无法停止并被回收，最终导致内存泄露与程序崩溃。</p><p>常见场景：</p><ul><li>因通道阻塞导致 goroutine 陷入等待，无法结束</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">func</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
 	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
 	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
 		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ch <span class="token operator">&lt;-</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 	<span class="token keyword">return</span> <span class="token operator">&lt;-</span>ch
 <span class="token punctuation">}</span>
 
 <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
 		<span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;goroutines: %d\\n&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>出现死锁 因 goroutine 之间出现死锁，导致 goroutine 阻塞</li><li>无限循环 因 goroutine 陷入无限循环中，没有通知 goroutine 停止导致持续运行</li></ul><h2 id="_3-gomaxprocs-作用" tabindex="-1"><a class="header-anchor" href="#_3-gomaxprocs-作用" aria-hidden="true">#</a> 3. GOMAXPROCS 作用</h2><blockquote><p>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit.</p></blockquote><p><code>GOMAXPROCS</code> 限制的是同时执行用户态 Go 代码的操作系统线程的数量，但是对于被系统调用阻塞的线程数量是没有限制的。</p><p><code>GOMAXPROCS</code> 的默认值等于 CPU 的逻辑核数，同一时间，一个核只能绑定一个线程，然后运行被调度的协程。</p><p>使用环境变量<code>GOMAXPROCS</code>或函数<code>runtime.GOMAXPROCS</code>设置。</p><p>如 GOMAXPROCS 超过 CPU 核心数，因为同时运行的线程最大为 CPU 核心数，此时反而增加线程切换的开销，降低性能。</p><p>对于 I/O 密集型应用，可以适当增大该值以提高 I/O 吞吐率。</p><h2 id="_4-mutex-有几种模式" tabindex="-1"><a class="header-anchor" href="#_4-mutex-有几种模式" aria-hidden="true">#</a> 4. mutex 有几种模式</h2><p>mutex 有 正常模式 和 饥饿模式：</p><ul><li>正常模式：Goroutine 按照 FIFO 顺序获取锁；刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁。</li><li>饥饿模式：新 Goroutine 无法获取锁，无法进入自旋，而是在队列末尾等待。 <ul><li>一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换<strong>饥饿模式</strong>，以保证互斥锁的公平性。</li><li>若一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会<strong>切换</strong>回正常模式。</li></ul></li></ul><h2 id="_5-goroutine-何时发生内存泄露" tabindex="-1"><a class="header-anchor" href="#_5-goroutine-何时发生内存泄露" aria-hidden="true">#</a> 5. Goroutine 何时发生内存泄露</h2><p>在Go中内存泄露分为暂时性内存泄露和永久性内存泄露。</p><h3 id="暂时性内存泄露" tabindex="-1"><a class="header-anchor" href="#暂时性内存泄露" aria-hidden="true">#</a> <strong>暂时性内存泄露</strong></h3><ul><li>获取长字符串中的一段导致长字符串未释放</li><li>获取长slice中的一段导致长slice未释放</li><li>在长slice新建slice导致泄漏</li></ul><h3 id="永久性内存泄露" tabindex="-1"><a class="header-anchor" href="#永久性内存泄露" aria-hidden="true">#</a> <strong>永久性内存泄露</strong></h3><ul><li>goroutine永久阻塞而导致泄漏</li><li>time.Ticker未关闭导致泄漏</li><li>不正确使用Finalizer（Go版本的析构函数）导致泄漏</li></ul><h2 id="_6-go-的竞争条件" tabindex="-1"><a class="header-anchor" href="#_6-go-的竞争条件" aria-hidden="true">#</a> 6. Go 的竞争条件</h2><p>所谓竞态竞争，就是当<strong>两个或以上的goroutine访问相同资源时候，对资源进行读/写。</strong></p><p>可以用<code>go run -race xx.go</code>来进行检测。</p><p>解决方法是，对临界区资源上锁，或者使用原子操作(atomics)，原子操作的开销小于上锁。</p><h2 id="_7-如果若干个goroutine-有一个panic会怎么做" tabindex="-1"><a class="header-anchor" href="#_7-如果若干个goroutine-有一个panic会怎么做" aria-hidden="true">#</a> 7. 如果若干个goroutine，有一个panic会怎么做？</h2><p>有一个panic，那么剩余goroutine也会退出，程序退出。如果不想程序退出，那么必须通过调用 recover() 方法来捕获 panic 并恢复将要崩掉的程序。</p><h2 id="_8-defer-可以捕获子-goroutine-的-panic-么" tabindex="-1"><a class="header-anchor" href="#_8-defer-可以捕获子-goroutine-的-panic-么" aria-hidden="true">#</a> 8. defer 可以捕获子 goroutine 的 panic 么</h2><p>不可以，必须在子协程中捕获后进行处理或抛出。</p>`,34),e=[p];function c(i,u){return s(),a("div",null,e)}const r=n(o,[["render",c],["__file","3.questions-concurrency.html.vue"]]);export{r as default};
