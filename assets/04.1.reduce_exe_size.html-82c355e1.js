import{_ as i,Z as p,$ as l,a0 as n,a1 as s,a2 as e,a3 as t,H as o}from"./framework-09afcf0b.js";const c={},u=t(`<h2 id="_1-直接编译" tabindex="-1"><a class="header-anchor" href="#_1-直接编译" aria-hidden="true">#</a> 1. 直接编译</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Num<span class="token punctuation">,</span> Ans <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Calc <span class="token builtin">int</span>

<span class="token comment">// Square calculates the square of num</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>calc <span class="token operator">*</span>Calc<span class="token punctuation">)</span> <span class="token function">Square</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> result <span class="token operator">*</span>Result<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	result<span class="token punctuation">.</span>Num <span class="token operator">=</span> num
	result<span class="token punctuation">.</span>Ans <span class="token operator">=</span> num <span class="token operator">*</span> num
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>Calc<span class="token punctuation">)</span><span class="token punctuation">)</span>
	rpc<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Serving RPC server on port %d&quot;</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:1234&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Error serving: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接编译，大小约 9.2 MB：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go build <span class="token builtin class-name">.</span>
<span class="token function">dir</span> <span class="token operator">|</span> Select-Object Name, @<span class="token punctuation">{</span>Name<span class="token operator">=</span><span class="token string">&quot;MegaBytes&quot;</span><span class="token punctuation">;</span><span class="token assign-left variable">Expression</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token variable">$_</span>.Length / 1MB<span class="token punctuation">}</span><span class="token punctuation">}</span>

Name                         MegaBytes
----                         ---------
04-compile.exe           <span class="token number">9.23876953125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-编译选项" tabindex="-1"><a class="header-anchor" href="#_1-1-编译选项" aria-hidden="true">#</a> 1.1 编译选项</h3><p>Golang 编译器直接编译的程序会带有符号表和调试信息，release 版本可以考虑去除调试信息以减小体积：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go build <span class="token parameter variable">-ldflags</span> <span class="token string">&#39;-s -w&#39;</span> <span class="token builtin class-name">.</span>
$ <span class="token function">dir</span> <span class="token operator">|</span> Select-Object Name, @<span class="token punctuation">{</span>Name<span class="token operator">=</span><span class="token string">&quot;MegaBytes&quot;</span><span class="token punctuation">;</span><span class="token assign-left variable">Expression</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token variable">$_</span>.Length / 1MB<span class="token punctuation">}</span><span class="token punctuation">}</span>

Name                         MegaBytes
----                         ------article: <span class="token boolean">false</span>
---
04-compile.exe           <span class="token number">6.47216796875</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-ldflags</code>：<code>go tool link</code> 选项</li><li><code>-s</code>：忽略符号表和调试信息</li><li><code>-w</code>：忽略DWARFv3调试信息，使用该选项后将无法使用gdb进行调试</li></ul><p>约为 6.4 MB，体积减小了约 30%。</p><h2 id="_2-使用工具-upx" tabindex="-1"><a class="header-anchor" href="#_2-使用工具-upx" aria-hidden="true">#</a> 2. 使用工具 UPX</h2><h3 id="_2-1-upx" tabindex="-1"><a class="header-anchor" href="#_2-1-upx" aria-hidden="true">#</a> 2.1 UPX</h3><blockquote><p>UPX is an advanced executable file compressor. UPX will typically reduce the file size of programs and DLLs by around 50%-70%, thus reducing disk space, network load times, download times and other distribution and storage costs.</p></blockquote>`,12),r={href:"https://github.com/upx/upx",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="_2-2-直接使用" tabindex="-1"><a class="header-anchor" href="#_2-2-直接使用" aria-hidden="true">#</a> 2.2 直接使用</h3><p>upx 中参数最重要的是<strong>压缩率</strong>，取值范围<code>[1,9]</code>其中<code>1</code>为最低压缩率，<code>9</code>为最高压缩率。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>$ go build -o main_using_upx &amp;&amp; upx -9 main_using_upx

9,687,552 main.exe
5,234,176 main_using_upx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>体积约下降了 46%。</p><h3 id="_2-3-组合-upx-和-编译选项" tabindex="-1"><a class="header-anchor" href="#_2-3-组合-upx-和-编译选项" aria-hidden="true">#</a> 2.3 组合 upx 和 编译选项</h3><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>$ go build -ldflags &quot;-s -w&quot; -o main_using_upx_ldflags &amp;&amp; upx -9 main_using_upx_ldflags  

5,234,176 main_using_upx
2,464,768 main_using_upx_ldflags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>体积下降了约 52 %，直接编译大小为 <code>9,687,552B</code>，使用UPX和编译选项之后约下降了 74%。</p><h3 id="_2-4-upx-原理" tabindex="-1"><a class="header-anchor" href="#_2-4-upx-原理" aria-hidden="true">#</a> 2.4 UPX 原理</h3><p>upx 压缩后的程序和压缩前的程序一样，无需解压仍然能够正常地运行，这种压缩方法称之为<strong>带壳压缩</strong>，压缩包含两个部分：</p><ul><li>在程序开头或其他合适的地方插入解压代码</li><li>将程序的其他部分压缩</li></ul><p>执行时，也包含两个部分：</p><ul><li>首先执行的是程序开头的插入的解压代码，将原来的程序在内存中解压出来</li><li>再执行解压后的程序</li></ul><p>upx 在程序执行时，会有额外的解压动作，不过这个耗时几乎可以忽略。若对编译后的体积没什么要求的情况下，可以不使用 upx 来压缩。一般在服务器端独立运行的后台服务，无需压缩体积。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,14),k={href:"https://geektutu.com/post/hpg-reduce-size.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://upx.github.io/",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=o("ExternalLinkIcon");return p(),l("div",null,[u,n("p",null,[n("a",r,[s("upx"),e(a)]),s(" 是一个常用的压缩动态库和可执行文件的工具，通常可减少 50-70% 的体积。")]),d,n("ol",null,[n("li",null,[n("a",k,[s("https://geektutu.com/post/hpg-reduce-size.html"),e(a)])]),n("li",null,[n("a",v,[s("https://upx.github.io/"),e(a)])])])])}const _=i(c,[["render",m],["__file","04.1.reduce_exe_size.html.vue"]]);export{_ as default};
