import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as i}from"./framework-09afcf0b.js";const u={},l=n("h2",{id:"_1-反射的用途",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-反射的用途","aria-hidden":"true"},"#"),s(" 1. 反射的用途")],-1),k={href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"},r=p(`<h2 id="_2-反射如何简化代码" tabindex="-1"><a class="header-anchor" href="#_2-反射如何简化代码" aria-hidden="true">#</a> 2. 反射如何简化代码</h2><p>假设有一个配置类 Config，每个字段是一个配置项。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`json:&quot;server-name&quot;\`</span>
	IP      <span class="token builtin">string</span> <span class="token string">\`json:&quot;server-ip&quot;\`</span>
	URL     <span class="token builtin">string</span> <span class="token string">\`json:&quot;server-url&quot;\`</span>
	Timeout <span class="token builtin">string</span> <span class="token string">\`json:&quot;timeout&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数默认从<code>json</code>中读取，若环境变量中有配置则优先读取，环境变量全部为大写字母和下划线，并以<code>CONFIG_</code>开头，如<code>CONFIG_TIMEOUT</code>。</p><p>可以使用<code>switch</code>或者<code>if-else</code>结构来进行处理，但是当字段数量较多时，若需要修改某个字段，将需要进行多处修改，使得出错的概率上升。</p><p>此时使用反射可以编写通用代码，减少重复代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Config <span class="token punctuation">{</span>
	<span class="token comment">// read from xxx.json，省略</span>
	config <span class="token operator">:=</span> Config<span class="token punctuation">{</span><span class="token punctuation">}</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
	value <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typ<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		f <span class="token operator">:=</span> typ<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;CONFIG_%s&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> env<span class="token punctuation">,</span> exist <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">LookupEnv</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>
				value<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>config
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">&quot;CONFIG_SERVER_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;global_server&quot;</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">&quot;CONFIG_SERVER_IP&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10.0.0.1&quot;</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">&quot;CONFIG_SERVER_URL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;geektutu.com&quot;</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在运行时，利用反射获取到 <code>Config</code> 的每个字段的 <code>Tag</code> 属性，拼接出对应的环境变量的名称。</li><li>查看该环境变量是否存在，如果存在，则将环境变量的值赋值给该字段。</li></ul><h2 id="_3-反射的性能" tabindex="-1"><a class="header-anchor" href="#_3-反射的性能" aria-hidden="true">#</a> 3. 反射的性能</h2><p>使用反射会增加代码指令，对性能是一定会有影响的，可以通过测试检查影响有多大。</p><h3 id="_3-1-创建对象" tabindex="-1"><a class="header-anchor" href="#_3-1-创建对象" aria-hidden="true">#</a> 3.1 创建对象</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkGetObjUsingNew</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> res <span class="token operator">*</span>Config
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       res <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkGetObjUsingReflect</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> res <span class="token operator">*</span>Config
    t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       res<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Config<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkGetObjUsingNew-12              39839181                38.96 ns/op           64 B/op          1 allocs/op
BenchmarkGetObjUsingReflect-12          21852828                51.67 ns/op           64 B/op          1 allocs/op

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出通过反射创建对象的时间约为<code>new</code>的1.5倍。</p><h3 id="_3-2-修改字段的值" tabindex="-1"><a class="header-anchor" href="#_3-2-修改字段的值" aria-hidden="true">#</a> 3.2 修改字段的值</h3><p>获取字段有两种方式：</p><ol><li>通过名称获取，<code>Value.Elem().FieldByName(field_name)</code></li><li>通过索引获取，<code>Value.Elem().Field(field_index)</code></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">BenchmarkSet</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cfg <span class="token operator">:=</span> <span class="token operator">&amp;</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		cfg<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span>
		cfg<span class="token punctuation">.</span>IP <span class="token operator">=</span> <span class="token string">&quot;IP&quot;</span>
		cfg<span class="token punctuation">.</span>URL <span class="token operator">=</span> <span class="token string">&quot;URL&quot;</span>
		cfg<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token string">&quot;Timeout&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkSetUsingReflectByFieldName</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ins <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkSetUsingReflectByFieldIdx</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ins <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ins<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>BenchmarkSet<span class="token operator">-</span><span class="token number">12</span>                                 <span class="token number">1000000000</span>               <span class="token number">0.2504</span> ns<span class="token operator">/</span>op          <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkSetUsingReflectByFieldName<span class="token operator">-</span><span class="token number">12</span>           <span class="token number">4147510</span>               <span class="token number">291.7</span> ns<span class="token operator">/</span>op            <span class="token number">32</span> B<span class="token operator">/</span>op          <span class="token number">4</span> allocs<span class="token operator">/</span>op
BenchmarkSetUsingReflectByFieldIdx<span class="token operator">-</span><span class="token number">12</span>           <span class="token number">79601461</span>                <span class="token number">17.37</span> ns<span class="token operator">/</span>op            <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出使用反射给每个字段赋值，相比直接赋值，性能劣化约 100 - 1000 倍。其中，<code>FieldByName</code> 的性能相比 <code>Field</code> 劣化 10 倍。</p><h3 id="_3-3-fieldbyname-和-field" tabindex="-1"><a class="header-anchor" href="#_3-3-fieldbyname-和-field" aria-hidden="true">#</a> 3.3 FieldByName 和 Field</h3><p>reflect/value.go:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// FieldByName returns the struct field with the given name.</span>
<span class="token comment">// It returns the zero Value if no field was found.</span>
<span class="token comment">// It panics if v&#39;s Kind is not struct.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	v<span class="token punctuation">.</span><span class="token function">mustBe</span><span class="token punctuation">(</span>Struct<span class="token punctuation">)</span>
	<span class="token keyword">if</span> f<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">FieldByIndex</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reflect/type.go</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>rtype<span class="token punctuation">)</span> <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>StructField<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Struct <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: FieldByName of non-struct type&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	tt <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>structType<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> tt<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// FieldByName returns the struct field with the given name</span>
<span class="token comment">// and a boolean to indicate if the field was found.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>structType<span class="token punctuation">)</span> <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>f StructField<span class="token punctuation">,</span> present <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Quick check for top-level name, or struct without embedded fields.</span>
	hasEmbeds <span class="token operator">:=</span> <span class="token boolean">false</span>
	<span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> t<span class="token punctuation">.</span>fields <span class="token punctuation">{</span>
			tf <span class="token operator">:=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			<span class="token keyword">if</span> tf<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> name <span class="token punctuation">{</span>
				<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> tf<span class="token punctuation">.</span><span class="token function">embedded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				hasEmbeds <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>hasEmbeds <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">FieldByNameFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s <span class="token operator">==</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用链如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(v Value) FieldByName -&gt; (t *rtype) FieldByName -&gt; (t *structType) FieldByName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>(t *structType) FieldByName</code> 中使用 for 循环，逐个字段查找，字段名匹配时返回。</p><p>在反射的内部，字段是按顺序存储的，因此按照下标访问查询效率为 O(1)</p><p>按照 <code>Name</code> 访问，则需要遍历所有字段，查询效率为 O(N)。结构体所包含的字段(包括方法)越多，那么两者之间的效率差距则越大。</p><h2 id="_4-如何提高性能" tabindex="-1"><a class="header-anchor" href="#_4-如何提高性能" aria-hidden="true">#</a> 4. 如何提高性能</h2><h3 id="_4-1-避免使用反射" tabindex="-1"><a class="header-anchor" href="#_4-1-避免使用反射" aria-hidden="true">#</a> 4.1 避免使用反射</h3><p>使用反射赋值，效率非常低下，如果有替代方案，<strong>尽可能避免使用反射</strong>，<strong>特别是会被反复调用的热点代码</strong>。</p>`,33),d=n("code",null,"json",-1),v=n("code",null,"Marshal",-1),m=n("code",null,"Unmarshal",-1),b={href:"https://github.com/mailru/easyjson",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="_4-2-缓存" tabindex="-1"><a class="header-anchor" href="#_4-2-缓存" aria-hidden="true">#</a> 4.2 缓存</h3><p><code>FieldByName</code> 相比于 <code>Field</code> 有一个数量级的性能劣化。那在实际的应用中，就要避免直接调用 <code>FieldByName</code>。</p><p>可以利用哈希表将 <code>Name</code> 和 <code>Index</code> 的映射缓存起来。避免每次反复查找，耗费大量的时间。</p><p>使用哈希表优化后再次测试之前的例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">BenchmarkSetUsingReflectByFieldName</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ins <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkSetUsingReflectByFieldNameWithCache</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fCache <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> typ<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typ<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fCache<span class="token punctuation">[</span>typ<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> i
	<span class="token punctuation">}</span>

	ins <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;URL&quot;</span><span class="token punctuation">)</span>
		ins<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkSetUsingReflectByFieldName-12                   4135982               290.2 ns/op            32 B/op          4 allocs/op
BenchmarkSetUsingReflectByFieldNameWithCache-12         22643047                50.44 ns/op            0 B/op          0 allocs/op

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出时间减少为原来的约六分之一。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,8),g={href:"https://geektutu.com/post/hpg-reflect.html",target:"_blank",rel:"noopener noreferrer"};function h(y,q){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[s("标准库 "),n("a",k,[s("reflect"),t(a)]),s(" 为 Go 语言提供了运行时动态获取对象的类型和值以及动态创建对象的能力。反射可以帮助抽象和简化代码，提高开发效率。")]),r,n("p",null,[s("例如 RPC 协议中，需要对结构体进行序列化和反序列化，这个时候避免使用 Go 语言自带的 "),d,s(" 的 "),v,s(" 和 "),m,s(" 方法，因为标准库中的 json 序列化和反序列化是利用反射实现的。（可选的替代方案有 "),n("a",b,[s("easyjson"),t(a)]),s("，在大部分场景下，相比标准库，有 5 倍左右的性能提升。）")]),f,n("ol",null,[n("li",null,[n("a",g,[s("https://geektutu.com/post/hpg-reflect.html"),t(a)])])])])}const B=e(u,[["render",h],["__file","02.4.reflect.html.vue"]]);export{B as default};
