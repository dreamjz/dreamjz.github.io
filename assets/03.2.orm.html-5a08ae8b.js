import{_ as p,Z as e,$ as o,a0 as n,a1 as a,a2 as t,a3 as c,H as i}from"./framework-dee406ed.js";const l={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeORM/day2-orm",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="_1-dialect" tabindex="-1"><a class="header-anchor" href="#_1-dialect" aria-hidden="true">#</a> 1. Dialect</h2><p>不同的数据库对于SQL语句支持可能不同，ORM框架需要兼容多种数据库，将各数据不同的地方提取出来单独实现，这种方式被称为<code>Dialect</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> dialectsMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Dialect<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> Dialect <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">DataTypeOf</span><span class="token punctuation">(</span>typ reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">TableExistSQL</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">RegisterDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> dialect Dialect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> dialect
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">GetDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Dialect<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dialect<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
	<span class="token keyword">return</span> dialect<span class="token punctuation">,</span> ok
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Dialect</code>接口定义了两个方法:</p><ol><li><code>DataTpyeOf</code>：将 Golang 的数据类型转换为数据库的数据类型</li><li><code>TableExistSQL</code>：返回某个<strong>表是否存在</strong>的 SQL 语句</li></ol><p>全局变量<code>dialectsMap</code>存储不同的数据库对应的<code>Dialect</code>。</p><h3 id="_1-1-sqlite3" tabindex="-1"><a class="header-anchor" href="#_1-1-sqlite3" aria-hidden="true">#</a> 1.1 SQLite3</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> dialect

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> sqlite3 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> Dialect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sqlite3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">RegisterDialect</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite3&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sqlite3<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sqlite3<span class="token punctuation">)</span> <span class="token function">DataTypeOf</span><span class="token punctuation">(</span>typ reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;bool&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span>
		reflect<span class="token punctuation">.</span>Uint<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uintptr<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;integer&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;bigint&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Float32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Float64<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;real&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;text&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;blob&quot;</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> typ<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token string">&quot;datetime&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid sql type %s (%s)&quot;</span><span class="token punctuation">,</span> typ<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sqlite3<span class="token punctuation">)</span> <span class="token function">TableExistSQL</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	args <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>tableName<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&quot;SELECT name FROM sqlite_master WHERE type=&#39;table&#39; and name = ?&quot;</span><span class="token punctuation">,</span> args
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>init</code>：函数在包第一次加载时，会将<code>sqlite3</code>的<code>dialect</code>进行注册</li></ul><h2 id="_2-schema" tabindex="-1"><a class="header-anchor" href="#_2-schema" aria-hidden="true">#</a> 2. Schema</h2><p>ORM 框架最为核心的功能就是对象(Object)和数据库表(Table)的转换，表结构和结构体可以形成映射关系：</p><ol><li>表名(Table Name)：结构体名(Struct Name)</li><li>字段名/类型：结构体字段名/类型</li><li>约束条件：结构体字段的标签(tag)</li></ol><p>例如:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span> <span class="token string">\`geeorm:&quot;PRIMARY KEY&quot;\`</span>
    Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>User<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>Name<span class="token punctuation">\`</span></span> <span class="token keyword">text</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>Age<span class="token punctuation">\`</span></span> <span class="token keyword">integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> schema

<span class="token comment">// Field represents a column of database</span>
<span class="token keyword">type</span> Field <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
	Type <span class="token builtin">string</span>
	Tag  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// Schema represents a table of database</span>
<span class="token keyword">type</span> Schema <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Model      any
	Name       <span class="token builtin">string</span>
	Fields     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
	FieldNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	fieldMap   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Schema<span class="token punctuation">)</span> <span class="token function">GetField</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Field <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>fieldMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Field</code>：表示数据表字段 <ol><li><code>Name</code>：字段名</li><li><code>Type</code>：数据类型</li><li><code>Tag</code>：约束条件</li></ol></li><li><code>Schema</code>：表示数据表 <ol><li><code>Model</code>：映射的对象</li><li><code>Name</code>：表名</li><li><code>Fields</code>：表字段列表</li><li><code>FieldNames</code>：表字段名列表</li><li><code>fieldMap</code>：字段名/字段映射表，用于通过字段名快速获取字段</li></ol></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>dst any<span class="token punctuation">,</span> d dialect<span class="token punctuation">.</span>Dialect<span class="token punctuation">)</span> <span class="token operator">*</span>Schema <span class="token punctuation">{</span>
	modelType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	schema <span class="token operator">:=</span> <span class="token operator">&amp;</span>Schema<span class="token punctuation">{</span>
		Model<span class="token punctuation">:</span>    dst<span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span>     modelType<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		fieldMap<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> modelType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		f <span class="token operator">:=</span> modelType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>f<span class="token punctuation">.</span>Anonymous <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			field <span class="token operator">:=</span> <span class="token operator">&amp;</span>Field<span class="token punctuation">{</span>
				Name<span class="token punctuation">:</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
				Type<span class="token punctuation">:</span> d<span class="token punctuation">.</span><span class="token function">DataTypeOf</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;geeorm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				field<span class="token punctuation">.</span>Tag <span class="token operator">=</span> v
			<span class="token punctuation">}</span>
			schema<span class="token punctuation">.</span>Fields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>Fields<span class="token punctuation">,</span> field<span class="token punctuation">)</span>
			schema<span class="token punctuation">.</span>FieldNames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			schema<span class="token punctuation">.</span>fieldMap<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> field
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> schema
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>获取对象的数据类型，设计的入参类型为指针，使用<code>reflect.Indirect</code>获取指针指向的对象</p></li><li><p>通过<code>modleType.Name</code>获取结构体名称</p></li><li><p>遍历结构体字段，若字段不是匿名字段并且是导出的：</p><ol><li>获取字段名</li><li>将字段类型转换成数据库数据类型</li><li>获取字段标签</li><li>构建<code>Field</code>实例</li><li>添加至<code>Schema.Fields</code>,<code>Schema.FieldNames</code>,<code>Schema.fileMap</code>中</li></ol></li><li><p>返回<code>Schema</code>实例</p></li></ol><h3 id="_2-1-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-1-单元测试" aria-hidden="true">#</a> 2.1 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`geeorm:&quot;PRIMARY KEY&quot;\`</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> testDialect<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> dialect<span class="token punctuation">.</span><span class="token function">GetDialect</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite3&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestParse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	schema <span class="token operator">:=</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> testDialect<span class="token punctuation">)</span>
	<span class="token keyword">if</span> schema<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">&quot;User&quot;</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>Fields<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to parse User struct&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> schema<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Tag <span class="token operator">!=</span> <span class="token string">&quot;PRIMARY KEY&quot;</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to parse primary key&quot;</span><span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-session" tabindex="-1"><a class="header-anchor" href="#_3-session" aria-hidden="true">#</a> 3. Session</h2><p>修改<code>Session</code>数据结构。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	dialect  dialect<span class="token punctuation">.</span>Dialect
	refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema
	sql      strings<span class="token punctuation">.</span>Builder
	sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span>any
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> dialect dialect<span class="token punctuation">.</span>Dialect<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>
		db<span class="token punctuation">:</span>      db<span class="token punctuation">,</span>
		dialect<span class="token punctuation">:</span> dialect<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建文件<code>session/table.go</code>，用于放置数据库表相关的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> session

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;geeorm/log&quot;</span>
	<span class="token string">&quot;geeorm/schema&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Model</span><span class="token punctuation">(</span>val any<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	<span class="token comment">// nil or different model, update refTable</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>refTable <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>refTable<span class="token punctuation">.</span>Model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>refTable <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> s<span class="token punctuation">.</span>dialect<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema <span class="token punctuation">{</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>refTable <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Model is not set&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>refTable
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Model</code>用于给<code>Session.refTable</code>赋值，因为解析操作开销较大，所以结构体不发生变化就不会重复进行解析</li><li><code>RefTable</code>获取<code>Session.refTable</code>，若为空则打印日志</li></ul><p>实现数据表的创建、删除和判断是否存在：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> columns <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> table<span class="token punctuation">.</span>Fields <span class="token punctuation">{</span>
		columns <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s %s&quot;</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	desc <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE %s (%s);&quot;</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;DROP TABLE IF EXISTS %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	sql<span class="token punctuation">,</span> vals <span class="token operator">:=</span> s<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span><span class="token function">TableExistSQL</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	row <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vals<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> tmp <span class="token builtin">string</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span>
	<span class="token keyword">return</span> tmp <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-1-单元测试" aria-hidden="true">#</a> 3.1 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`geeorm:&quot;PRIMARY KEY&quot;\`</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestSession_CreateTable</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">newSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to create table User&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-engine" tabindex="-1"><a class="header-anchor" href="#_4-engine" aria-hidden="true">#</a> 4. Engine</h2><p>修改<code>Engine</code>的数据结构。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db      <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	dialect dialect<span class="token punctuation">.</span>Dialect
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewEngine</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Engine<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// Send ping to make sure the database connection is alive</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// make sure the specific dialect exists</span>
	d<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dialect<span class="token punctuation">.</span><span class="token function">GetDialect</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;dialect %s Not Found&quot;</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> DialectNotFoundErr
	<span class="token punctuation">}</span>

	e <span class="token operator">:=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">,</span> dialect<span class="token punctuation">:</span> d<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Connect database success&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> e<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>session<span class="token punctuation">.</span>Session <span class="token punctuation">{</span>
	<span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>db<span class="token punctuation">,</span> engine<span class="token punctuation">.</span>dialect<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,36),r={href:"https://geektutu.com/post/geeorm-day2.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=i("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[n("a",u,[a("day2-orm"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",r,[a("https://geektutu.com/post/geeorm-day2.html"),t(s)])])])])}const f=p(l,[["render",d],["__file","03.2.orm.html.vue"]]);export{f as default};
