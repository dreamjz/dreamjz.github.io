import{_ as o,Z as l,$ as p,a0 as n,a1 as s,a2 as e,a3 as t,H as c}from"./framework-09afcf0b.js";const i={},r=t('<p>程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：</p><ul><li>栈区（Stack） <strong>函数调用</strong>的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理</li><li>堆区（Heap） 堆中的对象由内存分配器分配并由垃圾收集器回收</li></ul><h2 id="_7-1-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_7-1-1-设计原理" aria-hidden="true">#</a> 7.1.1 设计原理</h2><p>内存管理一般包含三个不同的组件：</p><ol><li>用户程序（Mutator）</li><li>分配器（Allocator）</li><li>收集器（Collector）</li></ol><p>当用户程序申请内存时，它会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应的内存区域。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030221310.png" alt="mutator-allocator-collector" tabindex="0" loading="lazy"><figcaption>mutator-allocator-collector</figcaption></figure><h3 id="分配方法" tabindex="-1"><a class="header-anchor" href="#分配方法" aria-hidden="true">#</a> 分配方法</h3><p>编程语言的内存分配器一般包含两种分配方法：</p><ol><li>线性分配器（Sequential Allocator，Bump Allocator）</li><li>空闲链表分配器（Free-List Allocator）</li></ol><h4 id="线性分配器" tabindex="-1"><a class="header-anchor" href="#线性分配器" aria-hidden="true">#</a> 线性分配器</h4><p>使用线性分配器时，只需要在内存中维护一个指向内存特定位置的指针，如果用户程序向分配器申请内存，分配器只需要检查剩余的空闲内存、返回分配的内存区域并修改指针在内存中的位置，即移动下图中的指针：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030222750.png" alt="bump-allocator" tabindex="0" loading="lazy"><figcaption>bump-allocator</figcaption></figure><p>虽然线性分配器实现为它带来了较快的执行速度以及较低的实现复杂度，但是线性分配器无法在内存被释放时重用内存。</p><p>如下图所示，如果已经分配的内存被回收，线性分配器无法重新利用红色的内存：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030223356.png" alt="bump-allocator-reclaim-memory" tabindex="0" loading="lazy"><figcaption>bump-allocator-reclaim-memory</figcaption></figure><p>因为线<strong>性分配器</strong>具有上述特性，所以需要与<strong>合适</strong>的<strong>垃圾回收算法</strong>配合使用，如：</p><ul><li>标记压缩（Mark-Compact）</li><li>复制回收（Copying GC）</li><li>分代回收（Generational GC）</li><li>...</li></ul><h4 id="空闲链表分配器" tabindex="-1"><a class="header-anchor" href="#空闲链表分配器" aria-hidden="true">#</a> 空闲链表分配器</h4><p>空闲链表分配器（Free-List Allocator）可以重用已经被释放的内存，它在内部会维护一个类似<strong>链表</strong>的数据结构。</p><p>当用户程序申请内存时，空闲链表分配器会依次遍历空闲的内存块，找到足够大的内存，然后申请新的资源并修改链表：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030225435.png" alt="free-list-allocator" tabindex="0" loading="lazy"><figcaption>free-list-allocator</figcaption></figure><p>因为<strong>不同的内存块</strong>通过指针构成了<strong>链表</strong>，所以使用这种方式的分配器可以重新利用回收的资源。</p><p>但是因为分配内存时需要遍历链表，所以它的时间复杂度是 O(n)。</p><p>空闲链表分配器可以选择不同的策略在链表中的内存块中进行选择，最常见的是以下四种：</p><ol><li>首次适应（First-Fit）— 从链表头开始遍历，选择第一个大小大于申请内存的内存块；</li><li>循环首次适应（Next-Fit）— 从上次遍历的结束位置开始遍历，选择第一个大小大于申请内存的内存块；</li><li>最优适应（Best-Fit）— 从链表头遍历整个链表，选择最合适的内存块；</li><li>（Segregated-Fit）— 将内存分割成多个链表，每个链表中的内存块大小相同，申请内存时先找到满足条件的链表，再从链表中选择合适的内存块；</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030226592.png" alt="segregated-list" tabindex="0" loading="lazy"><figcaption>segregated-list</figcaption></figure><p>隔离适应策略会将内存分割成由 4、8、16、32 字节的内存块组成的链表，向内存分配器申请 8 字节的内存时，它会在上图中找到满足条件的空闲内存块并返回。</p><p>隔离适应的分配策略减少了需要遍历的内存块数量，提高了内存分配的效率。</p><h3 id="分级分配" tabindex="-1"><a class="header-anchor" href="#分级分配" aria-hidden="true">#</a> 分级分配</h3><p>线程缓存分配（Thread-Caching Malloc，TCMalloc）是用于分配内存的机制，<strong>核心理念</strong>是使用多级缓存将对象根据大小分类，并按照类别实施不同的分配策略。</p><h4 id="对象大小" tabindex="-1"><a class="header-anchor" href="#对象大小" aria-hidden="true">#</a> 对象大小</h4><p>Go 语言的内存分配器会根据申请分配的内存大小选择不同的处理逻辑，运行时根据对象的大小将对象分成微对象、小对象和大对象三种：</p><ol><li>微对象：(0, 16B)</li><li>小对象：[16B, 32KB]</li><li>大对象：(32KB, +∞)</li></ol><p>因为程序中的绝大多数对象的大小都在 32KB 以下，而申请的内存大小影响 Go 语言运行时分配内存的过程和开销，所以分别处理大对象和小对象有利于提高内存分配器的性能。</p><h4 id="多级缓存" tabindex="-1"><a class="header-anchor" href="#多级缓存" aria-hidden="true">#</a> 多级缓存</h4><p>内存分配器会将内存分成不同的级别分别管理，Go 运行时分配器都会引入三个组件分级管理内存：</p><ol><li>线程缓存（Thread Cache） 线程缓存属于每一个独立的线程，它能够满足线程上绝大多数的内存分配需求</li><li>中心缓存（Central Cache） 当线程缓存不能满足需求时，运行时会使用中心缓存作为补充解决小对象的内存分配</li><li>页堆（Page Heap） 遇到 32KB 以上的对象时，内存分配器会选择页堆直接分配大内存</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030230086.png" alt="multi-level-cache" tabindex="0" loading="lazy"><figcaption>multi-level-cache</figcaption></figure><h3 id="虚拟内存布局" tabindex="-1"><a class="header-anchor" href="#虚拟内存布局" aria-hidden="true">#</a> 虚拟内存布局</h3><ul><li>1.10 以前，堆区的内存空间都是连续的</li><li>1.11 ，使用<strong>稀疏的堆内存空间</strong>替代了连续的内存</li></ul><h4 id="线性内存" tabindex="-1"><a class="header-anchor" href="#线性内存" aria-hidden="true">#</a> 线性内存</h4><p>启动时会初始化整片<strong>虚拟内存</strong>区域：</p>',43),u={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.mspan",-1),m=n("li",null,[s("bitmap：16GB 用于标识 "),n("code",null,"arena"),s(" 区域中的那些地址保存了对象，位图中的每个字节都会表示堆区中的 32 字节是否空闲")],-1),h=n("li",null,"arena：512GB 真正的堆区，运行时会将 8KB 看做一页，这些内存页中存储了所有在堆上初始化的对象",-1),k=t('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030233784.png" alt="heap-before-go-1-10" tabindex="0" loading="lazy"><figcaption>heap-before-go-1-10</figcaption></figure><p>这种设计虽然简单并且方便，但是在 C 和 Go 混合使用时会导致程序崩溃：</p><ol><li>分配的内存地址会发生冲突，导致堆的初始化和扩容失败</li><li>没有被预留的大块内存可能会被分配给 C 语言的二进制，导致扩容后的堆不连续</li></ol><p>线性的堆内存需要预留大块的内存空间，但是申请大块的内存空间而不使用是不切实际的，不预留内存空间却会在特殊场景下造成程序崩溃。</p><h4 id="稀疏内存" tabindex="-1"><a class="header-anchor" href="#稀疏内存" aria-hidden="true">#</a> 稀疏内存</h4><p>使用稀疏的内存布局不仅能移除堆大小的上限，还能解决 C 和 Go 混合使用时的地址空间冲突问题。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030235854.png" alt="heap-after-go-1-11" tabindex="0" loading="lazy"><figcaption>heap-after-go-1-11</figcaption></figure>',7),g={href:"https://draveness.me/golang/tree/runtime.heapArena",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"runtime.heapArena",-1),v=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> heapArena <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	bitmap       <span class="token punctuation">[</span>heapArenaBitmapBytes<span class="token punctuation">]</span><span class="token builtin">byte</span>
	spans        <span class="token punctuation">[</span>pagesPerArena<span class="token punctuation">]</span><span class="token operator">*</span>mspan
	pageInUse    <span class="token punctuation">[</span>pagesPerArena <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
	pageMarks    <span class="token punctuation">[</span>pagesPerArena <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
	pageSpecials <span class="token punctuation">[</span>pagesPerArena <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
	checkmarks   <span class="token operator">*</span>checkmarksMap
	zeroedBase   <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>bitmap</code> 和 <code>spans</code> 与线性内存中的 <code>bitmap</code> 和 <code>spans</code> 区域对应</li><li><code>zeroedBase</code> 字段指向了该结构体管理的内存的基地址</li></ul><p>上述设计将原有的连续大内存切分成稀疏的小内存，而用于管理这些内存的元信息也被切成了小块。</p><h3 id="地址空间" tabindex="-1"><a class="header-anchor" href="#地址空间" aria-hidden="true">#</a> 地址空间</h3><p>所有的<strong>内存</strong>最终都是要从<strong>操作系统</strong>中<strong>申请</strong>的，所以 Go 语言的运行时构建了操作系统的内存管理抽象层，该抽象层将运行时管理的地址空间分成以下四种状态：</p><table><thead><tr><th style="text-align:left;">状态</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;"><code>None</code></td><td style="text-align:left;">内存没有被保留或者映射，是地址空间的默认状态</td></tr><tr><td style="text-align:left;"><code>Reserved</code></td><td style="text-align:left;">运行时持有该地址空间，但是访问该内存会导致错误</td></tr><tr><td style="text-align:left;"><code>Prepared</code></td><td style="text-align:left;">内存被保留，一般没有对应的物理内存访问该片内存的行为是未定义的可以快速转换到 <code>Ready</code> 状态</td></tr><tr><td style="text-align:left;"><code>Ready</code></td><td style="text-align:left;">可以被安全访问</td></tr></tbody></table><p>每个不同的操作系统都会包含一组用于管理内存的特定方法，这些方法可以让内存地址空间在不同的状态之间转换，可以通过下图了解不同状态之间的转换过程：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030237966.png" alt="memory-regions-states-and-transitions" tabindex="0" loading="lazy"><figcaption>memory-regions-states-and-transitions</figcaption></figure><p>运行时中包含多个操作系统实现的状态转换方法，所有的实现都包含在以 <code>mem_</code> 开头的文件中。</p><h2 id="_7-1-2-内存管理组件" tabindex="-1"><a class="header-anchor" href="#_7-1-2-内存管理组件" aria-hidden="true">#</a> 7.1.2 内存管理组件</h2><p>Go 语言的内存分配器包含：</p><ol><li>内存管理单元</li><li>线程缓存</li><li>中心缓存</li><li>页堆</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030238577.png" alt="go-memory-layout" tabindex="0" loading="lazy"><figcaption>go-memory-layout</figcaption></figure>`,13),f={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"runtime.mcache",-1),y={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"runtime.mspan",-1),w={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.mheap",-1),z={href:"https://draveness.me/golang/tree/runtime.mcentral",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.mcentral",-1),C={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.mheap",-1),A=n("h3",{id:"内存管理单元",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内存管理单元","aria-hidden":"true"},"#"),s(" 内存管理单元")],-1),G={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.mspan",-1),F=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	next <span class="token operator">*</span>mspan
	prev <span class="token operator">*</span>mspan
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P=n("code",null,"next",-1),K=n("code",null,"prev",-1),U={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"runtime.mspan",-1),I=n("strong",null,"双向链表",-1),L={href:"https://draveness.me/golang/tree/runtime.mSpanList",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.mSpanList",-1),T=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030240585.png",alt:"mspan-and-linked-list",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mspan-and-linked-list")],-1),R=n("h4",{id:"页和内存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#页和内存","aria-hidden":"true"},"#"),s(" 页和内存")],-1),V={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.mspan",-1),q=n("code",null,"npages",-1),O=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	startAddr <span class="token builtin">uintptr</span> <span class="token comment">// 起始地址</span>
	npages    <span class="token builtin">uintptr</span> <span class="token comment">// 页数</span>
	freeindex <span class="token builtin">uintptr</span>

	allocBits  <span class="token operator">*</span>gcBits
	gcmarkBits <span class="token operator">*</span>gcBits
	allocCache <span class="token builtin">uint64</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>startAddr</code> 和 <code>npages</code> — 确定该结构体管理的多个页所在的内存，每个页的大小都是 8KB；</li><li><code>freeindex</code> — 扫描页中空闲对象的初始索引；</li><li><code>allocBits</code> 和 <code>gcmarkBits</code> — 分别用于标记内存的占用和回收情况；</li><li><code>allocCache</code> — <code>allocBits</code> 的补码，可以用于快速查找内存中未被使用的内存；</li></ul>`,2),D={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime.mspan",-1),$=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030241695.png",alt:"mspan-and-pages",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mspan-and-pages")],-1),J={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"runtime.mspan",-1),W=n("code",null,"allocCache",-1),X=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030241550.png",alt:"mspan-and-objects",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mspan-and-objects")],-1),Y={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.mcache",-1),sn={href:"https://draveness.me/golang/tree/runtime.mcache.refill",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.mcache.refill",-1),en=n("h4",{id:"状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#状态","aria-hidden":"true"},"#"),s(" 状态")],-1),tn={href:"https://draveness.me/golang/tree/runtime.mSpanStateBox",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.mSpanStateBox",-1),ln={href:"https://draveness.me/golang/tree/runtime.mSpanState",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.mSpanState",-1),cn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	state       mSpanStateBox
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该状态可能处于四种情况：</p><ol><li><code>mSpanDead</code></li><li><code>mSpanInUse</code></li><li><code>mSpanManual</code></li><li><code>mSpanFree</code></li></ol>`,3),rn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.mspan",-1),dn=n("code",null,"mSpanFree",-1),mn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime.mspan",-1),kn=n("code",null,"mSpanInUse",-1),gn=n("code",null,"mSpanManual",-1),_n=t("<ul><li>在垃圾回收的任意阶段，可能从 <code>mSpanFree</code> 转换到 <code>mSpanInUse</code> 和 <code>mSpanManual</code>；</li><li>在垃圾回收的清除阶段，可能从 <code>mSpanInUse</code> 和 <code>mSpanManual</code> 转换到 <code>mSpanFree</code>；</li><li>在垃圾回收的标记阶段，不能从 <code>mSpanInUse</code> 和 <code>mSpanManual</code> 转换到 <code>mSpanFree</code>；</li></ul>",1),vn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"runtime.mspan",-1),bn=n("h4",{id:"跨度类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#跨度类","aria-hidden":"true"},"#"),s(" 跨度类")],-1),yn={href:"https://draveness.me/golang/tree/runtime.spanClass",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"runtime.spanClass",-1),wn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"runtime.mspan",-1),zn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	spanclass   spanClass
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Bn={href:"https://draveness.me/golang/tree/runtime.class_to_size",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime.class_to_size",-1),jn={href:"https://draveness.me/golang/tree/runtime.class_to_allocnpages",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.class_to_allocnpages",-1),Gn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030245291.png",alt:"mspan-max-waste-memory",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mspan-max-waste-memory")],-1),Mn=n("h3",{id:"线程缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线程缓存","aria-hidden":"true"},"#"),s(" 线程缓存")],-1),Fn={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime.mcache",-1),Kn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime.mspan",-1),Hn=n("code",null,"alloc",-1),In=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030246150.png",alt:"mcache-and-mspans",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mcache-and-mspans")],-1),Ln={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.mspan",-1),Tn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.mspan",-1),Vn=n("h4",{id:"初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化","aria-hidden":"true"},"#"),s(" 初始化")],-1),En={href:"https://draveness.me/golang/tree/runtime.allocmcache",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"runtime.allocmcache",-1),On={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"runtime.mheap",-1),Zn={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"runtime.mcache",-1),Jn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">allocmcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>mcache <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c <span class="token operator">*</span>mcache
	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mheap_<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>mcache<span class="token punctuation">)</span><span class="token punctuation">(</span>mheap_<span class="token punctuation">.</span>cachealloc<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>flushGen <span class="token operator">=</span> mheap_<span class="token punctuation">.</span>sweepgen
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mheap_<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>alloc <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>emptymspan
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>nextSample <span class="token operator">=</span> <span class="token function">nextSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qn={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.mcache",-1),Xn={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"runtime.mspan",-1),ns=n("code",null,"emptymspan",-1),ss=n("h4",{id:"替换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#替换","aria-hidden":"true"},"#"),s(" 替换")],-1),as={href:"https://draveness.me/golang/tree/runtime.mcache.refill",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.mcache.refill",-1),ts=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>mcache<span class="token punctuation">)</span> <span class="token function">refill</span><span class="token punctuation">(</span>spc spanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span>
	s <span class="token operator">=</span> mheap_<span class="token punctuation">.</span>central<span class="token punctuation">[</span>spc<span class="token punctuation">]</span><span class="token punctuation">.</span>mcentral<span class="token punctuation">.</span><span class="token function">cacheSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>alloc<span class="token punctuation">[</span>spc<span class="token punctuation">]</span> <span class="token operator">=</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),os={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"runtime.mspan",-1),ps=t(`<h4 id="微分配器" tabindex="-1"><a class="header-anchor" href="#微分配器" aria-hidden="true">#</a> 微分配器</h4><p>线程缓存中还包含几个用于分配微对象的字段，下面的这三个字段组成了微对象分配器，专门管理 16 字节以下的对象：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mcache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tiny             <span class="token builtin">uintptr</span>
	tinyoffset       <span class="token builtin">uintptr</span>
	local_tinyallocs <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>微分配器只会用于分配非指针类型的内存，上述三个字段中 <code>tiny</code> 会指向堆中的一片内存，<code>tinyOffset</code> 是下一个空闲内存所在的偏移量，最后的 <code>local_tinyallocs</code> 会记录内存分配器中分配的对象个数。</p><h3 id="中心缓存" tabindex="-1"><a class="header-anchor" href="#中心缓存" aria-hidden="true">#</a> 中心缓存</h3>`,5),cs={href:"https://draveness.me/golang/tree/runtime.mcentral",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"runtime.mcentral",-1),rs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mcentral <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	spanclass spanClass
	partial  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet
	full     <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),us={href:"https://draveness.me/golang/tree/runtime.spanSet",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"runtime.spanSet",-1),ms=n("h4",{id:"内存管理单元-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内存管理单元-1","aria-hidden":"true"},"#"),s(" 内存管理单元")],-1),hs={href:"https://draveness.me/golang/tree/runtime.mcentral.cacheSpan",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.mcentral.cacheSpan",-1),gs={href:"https://draveness.me/golang/tree/runtime.mcentral.partialSwept",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"runtime.mcentral.partialSwept",-1),vs={href:"https://draveness.me/golang/tree/runtime.spanSet",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"runtime.spanSet",-1),bs={href:"https://draveness.me/golang/tree/runtime.mcentral.partialUnswept",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"runtime.mcentral.partialUnswept",-1),xs={href:"https://draveness.me/golang/tree/runtime.spanSet",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"runtime.spanSet",-1),Ss={href:"https://draveness.me/golang/tree/runtime.mcentral.fullUnswept",target:"_blank",rel:"noopener noreferrer"},zs=n("code",null,"runtime.mcentral.fullUnswept",-1),Bs={href:"https://draveness.me/golang/tree/runtime.spanSet",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.spanSet",-1),js={href:"https://draveness.me/golang/tree/runtime.mspan.sweep",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"runtime.mspan.sweep",-1),Gs={href:"https://draveness.me/golang/tree/runtime.mcentral.grow",target:"_blank",rel:"noopener noreferrer"},Ms=n("code",null,"runtime.mcentral.grow",-1),Fs=n("li",null,[s("更新内存管理单元的 "),n("code",null,"allocCache"),s(" 等字段帮助快速分配内存；")],-1),Ps=n("h4",{id:"扩容",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扩容","aria-hidden":"true"},"#"),s(" 扩容")],-1),Ks={href:"https://draveness.me/golang/tree/runtime.mcentral.grow",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"runtime.mcentral.grow",-1),Hs=n("code",null,"class_to_allocnpages",-1),Is=n("code",null,"class_to_size",-1),Ls={href:"https://draveness.me/golang/tree/runtime.mheap.alloc",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"runtime.mheap.alloc",-1),Ts={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Rs=n("code",null,"runtime.mspan",-1),Vs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>mcentral<span class="token punctuation">)</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>mspan <span class="token punctuation">{</span>
	npages <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_allocnpages<span class="token punctuation">[</span>c<span class="token punctuation">.</span>spanclass<span class="token punctuation">.</span><span class="token function">sizeclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	size <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_size<span class="token punctuation">[</span>c<span class="token punctuation">.</span>spanclass<span class="token punctuation">.</span><span class="token function">sizeclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	s <span class="token operator">:=</span> mheap_<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>npages<span class="token punctuation">,</span> c<span class="token punctuation">.</span>spanclass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	n <span class="token operator">:=</span> <span class="token punctuation">(</span>npages <span class="token operator">&lt;&lt;</span> _PageShift<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">.</span>divShift <span class="token operator">*</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>divMul<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">.</span>divShift2
	s<span class="token punctuation">.</span>limit <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token operator">*</span>n
	<span class="token function">heapBitsForAddr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initSpan</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Es={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"runtime.mspan",-1),Os=n("code",null,"limit",-1),Ds=n("h3",{id:"页堆",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#页堆","aria-hidden":"true"},"#"),s(" 页堆")],-1),Zs={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},$s=n("code",null,"runtime.mheap",-1),Js=n("p",null,"结构体中包含两组非常重要的字段：",-1),Qs=n("ul",null,[n("li",null,[s("全局的中心缓存列表 "),n("code",null,"central")]),n("li",null,[s("管理堆区内存区域的 "),n("code",null,"arenas"),s(" 以及相关字段")])],-1),Ws={href:"https://draveness.me/golang/tree/runtime.mcentral",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"runtime.mcentral",-1),Ys=n("code",null,"scan",-1),na=n("code",null,"noscan",-1),sa=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030249187.png",alt:"mheap-and-mcentrals",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mheap-and-mcentrals")],-1),aa=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030250401.png",alt:"mheap-and-memories",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mheap-and-memories")],-1),ea=n("h4",{id:"初始化-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化-1","aria-hidden":"true"},"#"),s(" 初始化")],-1),ta={href:"https://draveness.me/golang/tree/runtime.mheap.init",target:"_blank",rel:"noopener noreferrer"},oa=n("code",null,"runtime.mheap.init",-1),la=n("code",null,"spanalloc",-1),pa=n("code",null,"cachealloc",-1),ca=n("code",null,"arenaHintAlloc",-1),ia={href:"https://draveness.me/golang/tree/runtime.fixalloc",target:"_blank",rel:"noopener noreferrer"},ra=n("code",null,"runtime.fixalloc",-1),ua=n("code",null,"central",-1),da={href:"https://draveness.me/golang/tree/runtime.mcentral",target:"_blank",rel:"noopener noreferrer"},ma=n("code",null,"runtime.mcentral",-1),ha=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>mheap<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">.</span>spanalloc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>mspan<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recordspan<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>mspan_sys<span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>cachealloc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>mcache<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>mcache_sys<span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>specialfinalizeralloc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>specialfinalizer<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>specialprofilealloc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>specialprofile<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>arenaHintAlloc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>arenaHint<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>spanalloc<span class="token punctuation">.</span>zero <span class="token operator">=</span> <span class="token boolean">false</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> h<span class="token punctuation">.</span>central <span class="token punctuation">{</span>
		h<span class="token punctuation">.</span>central<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mcentral<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token function">spanClass</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	h<span class="token punctuation">.</span>pages<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>gc_sys<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ka={href:"https://draveness.me/golang/tree/runtime.fixalloc.init",target:"_blank",rel:"noopener noreferrer"},ga=n("code",null,"runtime.fixalloc.init",-1),_a={href:"https://draveness.me/golang/tree/runtime.fixalloc.alloc",target:"_blank",rel:"noopener noreferrer"},va=n("code",null,"runtime.fixalloc.alloc",-1),fa={href:"https://draveness.me/golang/tree/runtime.fixalloc.free",target:"_blank",rel:"noopener noreferrer"},ba=n("code",null,"runtime.fixalloc.free",-1),ya=n("p",null,"除了这些空闲链表分配器之外，还会在该方法中初始化所有的中心缓存，这些中心缓存会维护全局的内存管理单元，各个线程会通过中心缓存获取新的内存单元。",-1),xa=n("h4",{id:"内存管理单元-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内存管理单元-2","aria-hidden":"true"},"#"),s(" 内存管理单元")],-1),wa={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"runtime.mheap",-1),za={href:"https://draveness.me/golang/tree/runtime.mheap.alloc",target:"_blank",rel:"noopener noreferrer"},Ba=n("code",null,"runtime.mheap.alloc",-1),Ca={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"runtime.mspan",-1),Aa=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>mheap<span class="token punctuation">)</span> <span class="token function">alloc</span><span class="token punctuation">(</span>npages <span class="token builtin">uintptr</span><span class="token punctuation">,</span> spanclass spanClass<span class="token punctuation">,</span> needzero <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>mspan <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s <span class="token operator">*</span>mspan
	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> h<span class="token punctuation">.</span>sweepdone <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span>npages<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		s <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">allocSpan</span><span class="token punctuation">(</span>npages<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> spanclass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>heap_inuse<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ga={href:"https://draveness.me/golang/tree/runtime.mheap.reclaim",target:"_blank",rel:"noopener noreferrer"},Ma=n("code",null,"runtime.mheap.reclaim",-1),Fa={href:"https://draveness.me/golang/tree/runtime.mheap.allocSpan",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"runtime.mheap.allocSpan",-1),Ka={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},Ua=n("code",null,"runtime.mspan",-1),Ha={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},Ia=n("code",null,"runtime.mheap",-1),La=n("h4",{id:"扩容-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扩容-1","aria-hidden":"true"},"#"),s(" 扩容")],-1),Na={href:"https://draveness.me/golang/tree/runtime.mheap.grow",target:"_blank",rel:"noopener noreferrer"},Ta=n("code",null,"runtime.mheap.grow",-1),Ra=n("li",null,"通过传入的页数获取期望分配的内存空间大小以及内存的基地址；",-1),Va=n("code",null,"arena",-1),Ea={href:"https://draveness.me/golang/tree/runtime.mheap.sysAlloc",target:"_blank",rel:"noopener noreferrer"},qa=n("code",null,"runtime.mheap.sysAlloc",-1),Oa={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},Da=n("code",null,"runtime.mheap",-1),Za=n("code",null,"arena",-1),$a={href:"https://draveness.me/golang/tree/runtime.pageAlloc.scavenge",target:"_blank",rel:"noopener noreferrer"},Ja=n("code",null,"runtime.pageAlloc.scavenge",-1),Qa=n("h2",{id:"_7-1-3-内存分配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-1-3-内存分配","aria-hidden":"true"},"#"),s(" 7.1.3 内存分配")],-1),Wa={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},Xa=n("code",null,"runtime.newobject",-1),Ya={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},ne=n("code",null,"runtime.mallocgc",-1),se=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>size <span class="token builtin">uintptr</span><span class="token punctuation">,</span> typ <span class="token operator">*</span>_type<span class="token punctuation">,</span> needzero <span class="token builtin">bool</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	mp <span class="token operator">:=</span> <span class="token function">acquirem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>mallocing <span class="token operator">=</span> <span class="token number">1</span>

	c <span class="token operator">:=</span> <span class="token function">gomcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> x unsafe<span class="token punctuation">.</span>Pointer
	noscan <span class="token operator">:=</span> typ <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> typ<span class="token punctuation">.</span>ptrdata <span class="token operator">==</span> <span class="token number">0</span>
	<span class="token keyword">if</span> size <span class="token operator">&lt;=</span> maxSmallSize <span class="token punctuation">{</span>
		<span class="token keyword">if</span> noscan <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> maxTinySize <span class="token punctuation">{</span>
			<span class="token comment">// 微对象分配</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 小对象分配</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 大对象分配</span>
	<span class="token punctuation">}</span>

	<span class="token function">publicationBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>mallocing <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token function">releasem</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>

	<span class="token keyword">return</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ae={href:"https://draveness.me/golang/tree/runtime.gomcache",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"runtime.gomcache",-1),te={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},oe=n("code",null,"runtime.mallocgc",-1),le=t('<ol><li>微对象 <code>(0, 16B)</code> — 先使用微型分配器，再依次尝试线程缓存、中心缓存和堆分配内存；</li><li>小对象 <code>[16B, 32KB]</code> — 依次尝试使用线程缓存、中心缓存和堆分配内存；</li><li>大对象 <code>(32KB, +∞)</code> — 直接在堆上分配内存</li></ol><h3 id="微对象" tabindex="-1"><a class="header-anchor" href="#微对象" aria-hidden="true">#</a> 微对象</h3><p>微对象是小于 16 字节的对象，使用线程缓存上的微分配器提高微对象分配的性能，主要使用它来分配较小的字符串以及逃逸的临时变量。</p><p>微分配器可以将多个较小的内存分配请求合入同一个内存块中，只有当内存块中的所有对象都需要被回收时，整片内存才可能被回收。</p><p>微分配器管理的对象<strong>不可以</strong>是<strong>指针</strong>类型，管理多个对象的内存块大小 <code>maxTinySize</code> 是可以调整的，在默认情况下，内存块的大小为 16 字节：</p><ul><li><p><code>maxTinySize</code> 的值越大，组合多个对象的可能性就越高，内存浪费也就越严重</p></li><li><p><code>maxTinySize</code> 越小，内存浪费就会越少</p></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030256451.png" alt="tiny-allocator" tabindex="0" loading="lazy"><figcaption>tiny-allocator</figcaption></figure><p>如上图所示，微分配器已经在 16 字节的内存块中分配了 12 字节的对象，如果下一个待分配的对象小于 4 字节，它会直接使用上述内存块的剩余部分，减少内存碎片，不过该内存块只有所有对象都被标记为垃圾时才会回收。</p><h3 id="小对象" tabindex="-1"><a class="header-anchor" href="#小对象" aria-hidden="true">#</a> 小对象</h3><p>小对象是指大小为 16 字节到 32,768 字节的对象以及所有<strong>小于 16 字节</strong>的<strong>指针</strong>类型的对象。</p><p>小对象的分配可以被分成以下的三个步骤：</p>',11),pe={href:"https://draveness.me/golang/tree/runtime.spanClass",target:"_blank",rel:"noopener noreferrer"},ce=n("code",null,"runtime.spanClass",-1),ie=n("li",null,"从线程缓存、中心缓存或者堆中获取内存管理单元并从内存管理单元找到空闲的内存空间；",-1),re={href:"https://draveness.me/golang/tree/runtime.memclrNoHeapPointers",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"runtime.memclrNoHeapPointers",-1),de=n("h3",{id:"大对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#大对象","aria-hidden":"true"},"#"),s(" 大对象")],-1),me={href:"https://draveness.me/golang/tree/runtime.mcache.allocLarge",target:"_blank",rel:"noopener noreferrer"},he=n("code",null,"runtime.mcache.allocLarge",-1),ke=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),ge={href:"https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/",target:"_blank",rel:"noopener noreferrer"};function _e(ve,fe){const a=c("ExternalLinkIcon");return l(),p("div",null,[r,n("ol",null,[n("li",null,[s("spans：512MB 存储了指向内存管理单元 "),n("a",u,[d,e(a)]),s(" 的指针，每个内存单元会管理几页的内存空间，每页大小为 8KB")]),m,h]),k,n("p",null,[s("运行时使用二维的 "),n("a",g,[_,e(a)]),s(" 数组管理所有的内存，每个单元都会管理 64MB 的内存空间：")]),v,n("p",null,[s("Go 语言程序都会在启动时初始化如上图所示的内存布局，每一个处理器 P 都会分配一个线程缓存 "),n("a",f,[b,e(a)]),s(" 用于处理微对象和小对象的分配，它们会持有内存管理单元 "),n("a",y,[x,e(a)]),s("。")]),n("p",null,[s("每个类型的内存管理单元都会管理特定大小的对象，当内存管理单元中不存在空闲对象时，它们会从 "),n("a",w,[S,e(a)]),s(" 持有的 134 个中心缓存 "),n("a",z,[B,e(a)]),s(" 中获取新的内存单元，中心缓存属于全局的堆结构体 "),n("a",C,[j,e(a)]),s("，它会从操作系统中申请内存。")]),A,n("p",null,[n("a",G,[M,e(a)]),s(" 是 Go 语言内存管理的基本单元：")]),F,n("ul",null,[n("li",null,[P,s(" 和 "),K,s(" 两个字段，分别指向了前一个和后一个 "),n("a",U,[H,e(a)])])]),n("p",null,[s("串联后的上述结构体会构成如下"),I,s("，运行时会使用 "),n("a",L,[N,e(a)]),s(" 存储双向链表的头结点和尾节点并在线程缓存以及中心缓存中使用。")]),T,R,n("p",null,[s("每个 "),n("a",V,[E,e(a)]),s(" 都管理 "),q,s(" 个大小为 8KB 的页，这里的页不是操作系统中的内存页，它们是操作系统内存页的整数倍，该结构体会使用下面这些字段来管理内存页的分配和回收：")]),O,n("p",null,[n("a",D,[Z,e(a)]),s(" 会以两种不同的视角看待管理的内存，当结构体管理的内存不足时，运行时会以页为单位向堆申请内存：")]),$,n("p",null,[s("当用户程序或者线程向 "),n("a",J,[Q,e(a)]),s(" 申请内存时，它会使用 "),W,s(" 字段以对象为单位在管理的内存中快速查找待分配的空间：")]),X,n("p",null,[s("如果能在内存中找到空闲的内存单元会直接返回，当内存中不包含空闲的内存时，上一级的组件 "),n("a",Y,[nn,e(a)]),s(" 会为调用 "),n("a",sn,[an,e(a)]),s(" 更新内存管理单元以满足为更多对象分配内存的需求。")]),en,n("p",null,[s("运行时会使用 "),n("a",tn,[on,e(a)]),s(" 存储内存管理单元的状态 "),n("a",ln,[pn,e(a)]),s("：")]),cn,n("p",null,[s("当 "),n("a",rn,[un,e(a)]),s(" 在空闲堆中，它会处于 "),dn,s(" 状态；当 "),n("a",mn,[hn,e(a)]),s(" 已经被分配时，它会处于 "),kn,s("、"),gn,s(" 状态，运行时会遵循下面的规则转换该状态：")]),_n,n("p",null,[s("设置 "),n("a",vn,[fn,e(a)]),s(" 状态的操作必须是原子性的以避免垃圾回收造成的线程竞争问题。")]),bn,n("p",null,[n("a",yn,[xn,e(a)]),s(" 是 "),n("a",wn,[Sn,e(a)]),s(" 的跨度类，它决定了内存管理单元中存储的对象大小和个数：")]),zn,n("p",null,[s("Go 语言的内存管理模块中一共包含 67 种跨度类，每一个跨度类都会存储特定大小的对象并且包含特定数量的页数以及对象，所有的数据都会被预选计算好并存储在 "),n("a",Bn,[Cn,e(a)]),s(" 和 "),n("a",jn,[An,e(a)]),s(" 等变量中。")]),Gn,Mn,n("p",null,[n("a",Fn,[Pn,e(a)]),s(" 是 Go 语言中的线程缓存，它会与线程上的处理器一一绑定，主要用来缓存用户程序申请的微小对象。每一个线程缓存都持有 68 * 2 个 "),n("a",Kn,[Un,e(a)]),s("，这些内存管理单元都存储在结构体的 "),Hn,s(" 字段中：")]),In,n("p",null,[s("线程缓存在刚刚被初始化时是不包含 "),n("a",Ln,[Nn,e(a)]),s(" 的，只有当用户程序申请内存时才会从上一级组件获取新的 "),n("a",Tn,[Rn,e(a)]),s(" 满足内存分配的需求。")]),Vn,n("p",null,[s("运行时在初始化处理器时会调用 "),n("a",En,[qn,e(a)]),s(" 初始化线程缓存，该函数会在系统栈中使用 "),n("a",On,[Dn,e(a)]),s(" 中的线程缓存分配器初始化新的 "),n("a",Zn,[$n,e(a)]),s(" 结构体：")]),Jn,n("p",null,[s("初始化后的 "),n("a",Qn,[Wn,e(a)]),s(" 中的所有 "),n("a",Xn,[Yn,e(a)]),s(" 都是空的占位符 "),ns,s("。")]),ss,n("p",null,[n("a",as,[es,e(a)]),s(" 会为线程缓存获取一个指定跨度类的内存管理单元，被替换的单元不能包含空闲的内存空间，而获取的单元中需要至少包含一个空闲对象用于分配内存：")]),ts,n("p",null,[s("该方法会从中心缓存中申请新的 "),n("a",os,[ls,e(a)]),s(" 存储到线程缓存中，这也是向线程缓存插入内存管理单元的唯一方法。")]),ps,n("p",null,[n("a",cs,[is,e(a)]),s(" 是内存分配器的中心缓存，与线程缓存不同，访问中心缓存中的内存管理单元需要使用互斥锁：")]),rs,n("p",null,[s("每个中心缓存都会管理某个跨度类的内存管理单元，它会同时持有两个 "),n("a",us,[ds,e(a)]),s("，分别存储包含空闲对象和不包含空闲对象的内存管理单元。")]),ms,n("p",null,[s("线程缓存会通过中心缓存的 "),n("a",hs,[ks,e(a)]),s(" 方法获取新的内存管理单元，可以将其分成以下几个部分：")]),n("ol",null,[n("li",null,[s("调用 "),n("a",gs,[_s,e(a)]),s(" 从清理过的、包含空闲空间的 "),n("a",vs,[fs,e(a)]),s(" 结构中查找可以使用的内存管理单元；")]),n("li",null,[s("调用 "),n("a",bs,[ys,e(a)]),s(" 从未被清理过的、有空闲对象的 "),n("a",xs,[ws,e(a)]),s(" 结构中查找可以使用的内存管理单元；")]),n("li",null,[s("调用 "),n("a",Ss,[zs,e(a)]),s(" 获取未被清理的、不包含空闲空间的 "),n("a",Bs,[Cs,e(a)]),s(" 中获取内存管理单元并通过 "),n("a",js,[As,e(a)]),s(" 清理它的内存空间；")]),n("li",null,[s("调用 "),n("a",Gs,[Ms,e(a)]),s(" 从堆中申请新的内存管理单元；")]),Fs]),Ps,n("p",null,[s("中心缓存的扩容方法 "),n("a",Ks,[Us,e(a)]),s(" 会根据预先计算的 "),Hs,s(" 和 "),Is,s(" 获取待分配的页数以及跨度类并调用 "),n("a",Ls,[Ns,e(a)]),s(" 获取新的 "),n("a",Ts,[Rs,e(a)]),s(" 结构：")]),Vs,n("p",null,[s("获取了 "),n("a",Es,[qs,e(a)]),s(" 后，会在上述方法中初始化 "),Os,s(" 字段并清除该结构在堆上对应的位图。")]),Ds,n("p",null,[n("a",Zs,[$s,e(a)]),s(" 是内存分配的核心结构体，Go 语言程序会将其作为全局变量存储，而堆上初始化的所有对象都由该结构体统一管理。")]),Js,Qs,n("p",null,[s("页堆中包含一个长度为 136 的 "),n("a",Ws,[Xs,e(a)]),s(" 数组，其中 68 个为跨度类需要 "),Ys,s(" 的中心缓存，另外的 68 个是 "),na,s(" 的中心缓存：")]),sa,aa,ea,n("p",null,[s("堆区的初始化会使用 "),n("a",ta,[oa,e(a)]),s(" 方法，其中初始化的两类变量比较重要：")]),n("ol",null,[n("li",null,[la,s("、"),pa,s(" 以及 "),ca,s(" 等 "),n("a",ia,[ra,e(a)]),s(" 类型的空闲链表分配器")]),n("li",null,[ua,s(" 切片中 "),n("a",da,[ma,e(a)]),s(" 类型的中心缓存")])]),ha,n("p",null,[s("堆中初始化的多个空闲链表分配器与设计原理中提到的分配器没有太多区别，当调用 "),n("a",ka,[ga,e(a)]),s(" 初始化分配器时，需要传入待初始化的结构体大小等信息，这会帮助分配器分割待分配的内存，它提供了以下两个用于分配和释放内存的方法：")]),n("ol",null,[n("li",null,[n("a",_a,[va,e(a)]),s(" — 获取下一个空闲的内存空间；")]),n("li",null,[n("a",fa,[ba,e(a)]),s(" — 释放指针指向的内存空间；")])]),ya,xa,n("p",null,[n("a",wa,[Sa,e(a)]),s(" 是内存分配器中的核心组件，运行时会通过它的 "),n("a",za,[Ba,e(a)]),s(" 方法在系统栈中获取新的 "),n("a",Ca,[ja,e(a)]),s(" 单元：")]),Aa,n("p",null,[s("为了阻止内存的大量占用和堆的增长，我们在分配对应页数的内存前需要先调用 "),n("a",Ga,[Ma,e(a)]),s(" 方法回收一部分内存，随后运行时通过 "),n("a",Fa,[Pa,e(a)]),s(" 分配新的内存管理单元，我们会将该方法的执行过程拆分成两个部分：")]),n("ol",null,[n("li",null,[s("从堆上分配新的内存页和内存管理单元 "),n("a",Ka,[Ua,e(a)]),s("；")]),n("li",null,[s("初始化内存管理单元并将其加入 "),n("a",Ha,[Ia,e(a)]),s(" 持有内存单元列表；")])]),La,n("p",null,[n("a",Na,[Ta,e(a)]),s(" 会向操作系统申请更多的内存空间，传入的页数经过对齐可以得到期望的内存大小，可以将该方法的执行过程分成以下几个部分：")]),n("ol",null,[Ra,n("li",null,[s("如果 "),Va,s(" 区域没有足够的空间，调用 "),n("a",Ea,[qa,e(a)]),s(" 从操作系统中申请更多的内存；")]),n("li",null,[s("扩容 "),n("a",Oa,[Da,e(a)]),s(" 持有的 "),Za,s(" 区域并更新页分配器的元信息；")]),n("li",null,[s("在某些场景下，调用 "),n("a",$a,[Ja,e(a)]),s(" 回收不再使用的空闲内存页；")])]),Qa,n("p",null,[s("堆上所有的对象都会通过调用 "),n("a",Wa,[Xa,e(a)]),s(" 函数分配内存，该函数会调用 "),n("a",Ya,[ne,e(a)]),s(" 分配指定大小的内存空间，这也是用户程序向堆上申请内存空间的必经函数：")]),se,n("p",null,[s("上述代码使用 "),n("a",ae,[ee,e(a)]),s(" 获取线程缓存并判断申请内存的类型是否为指针。")]),n("p",null,[s("可以看出 "),n("a",te,[oe,e(a)]),s(" 会根据对象的大小执行不同的分配逻辑：")]),le,n("ol",null,[n("li",null,[s("确定分配对象的大小以及跨度类 "),n("a",pe,[ce,e(a)]),s("；")]),ie,n("li",null,[s("调用 "),n("a",re,[ue,e(a)]),s(" 清空空闲内存中的所有数据；")])]),de,n("p",null,[s("运行时对于大于 32KB 的大对象会单独处理，直接调用 "),n("a",me,[he,e(a)]),s(" 分配大片内存。")]),ke,n("ol",null,[n("li",null,[n("a",ge,[s("https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/"),e(a)])])])])}const ye=o(i,[["render",_e],["__file","07.1.malloc.html.vue"]]);export{ye as default};
