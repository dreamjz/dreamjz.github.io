const e=JSON.parse('{"key":"v-4219e3d8","path":"/reading/sc/golang/high-performance-go/04-compile/04.2.mem_escape.html","title":"4.2 内存逃逸分析","lang":"zh-CN","frontmatter":{"title":"4.2 内存逃逸分析","date":"2023-10-05T00:00:00.000Z","category":["golang"],"article":false},"headers":[{"level":2,"title":"1. Stack and Heap","slug":"_1-stack-and-heap","link":"#_1-stack-and-heap","children":[]},{"level":2,"title":"2. 逃逸分析","slug":"_2-逃逸分析","link":"#_2-逃逸分析","children":[{"level":3,"title":"2.1 指针逃逸","slug":"_2-1-指针逃逸","link":"#_2-1-指针逃逸","children":[]},{"level":3,"title":"2.3 动态类型逃逸","slug":"_2-3-动态类型逃逸","link":"#_2-3-动态类型逃逸","children":[]},{"level":3,"title":"2.4 栈空间不足","slug":"_2-4-栈空间不足","link":"#_2-4-栈空间不足","children":[]},{"level":3,"title":"2.5 闭包","slug":"_2-5-闭包","link":"#_2-5-闭包","children":[]}]},{"level":2,"title":"3. 根据逃逸分析提升性能","slug":"_3-根据逃逸分析提升性能","link":"#_3-根据逃逸分析提升性能","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1701449868000},"readingTime":{"minutes":3.67,"words":1101},"filePathRelative":"reading/sc/golang/high-performance-go/04-compile/04.2.mem_escape.md","localizedDate":"2023年10月5日","excerpt":"<h2> 1. Stack and Heap</h2>\\n<p>Golang 程序会在两个区域为变量分配内存：</p>\\n<ol>\\n<li>栈(stack)，每个 goroutine 持有自身独有的栈空间</li>\\n<li>堆(heap)</li>\\n</ol>"}');export{e as data};
