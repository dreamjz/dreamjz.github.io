import{_ as o,Z as c,$ as p,a0 as n,a1 as s,a2 as e,a3 as t,H as l}from"./framework-dee406ed.js";const i={},u=t(`<p><code>select</code> 是操作系统中的系统调用，可以同时监听多个文件描述符的可读或可写的状态。</p><p>使用 <code>select</code>、<code>poll</code> 和 <code>epoll</code> 等函数构建 I/O 多路复用模型可以提升程序的性能。</p><p>Golang 中的<code>select</code>可同时等待多个<code>channel</code>可读或者可写，在能够读取/写入之前，<code>select</code>会一直阻塞当前goroutine。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281646207.png" alt="Golang-Select-Channels" tabindex="0" loading="lazy"><figcaption>Golang-Select-Channels</figcaption></figure><p><code>select</code>和<code>switch</code>的结构相似，但<code>select</code>的<code>case</code>中只能是<code>channel</code>的读取/写入操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> quit <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> c <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>
			x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;quit&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当<code>c</code>或<code>quit</code>可用时会进入对应的分支执行</li><li>当两者均可用时，会<strong>随机</strong>选择一个进行处理</li></ul><h2 id="_5-2-1-现象" tabindex="-1"><a class="header-anchor" href="#_5-2-1-现象" aria-hidden="true">#</a> 5.2.1 现象</h2><p><code>select</code>结构有两个特点：</p><ol><li><code>select</code>可进行<strong>非阻塞</strong>的收发操作</li><li><code>select</code>在遇到<strong>多个</strong><code>channel</code>可用时，会随机选取一个分支执行</li></ol><h3 id="非阻塞的收发" tabindex="-1"><a class="header-anchor" href="#非阻塞的收发" aria-hidden="true">#</a> 非阻塞的收发</h3><p>一般情况下，<code>select</code>在无<code>channel</code>可用的时，会阻塞当前的goroutine。</p><p>若在<code>select</code>结构中添加<code>default</code>语句，则有：</p><ul><li>若存在可用的<code>channel</code>，直接执行对应的分支</li><li>若不存在可用的<code>channel</code>，执行<code>default</code>分支</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
		<span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token keyword">default</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非阻塞收发的应用场景：<strong>不希望阻塞当前的goroutine，只关心channel是否可用</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>errCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> tasks <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            errCh <span class="token operator">&lt;-</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>errCh<span class="token punctuation">:</span>
    <span class="token keyword">return</span> err
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码不关心多少任务失败了，只想要直到是否有任务失败，不需要阻塞当前的goroutine。</p><h3 id="随机执行" tabindex="-1"><a class="header-anchor" href="#随机执行" aria-hidden="true">#</a> 随机执行</h3><p>当<code>select</code>中有多个<code>channel</code>可用时，会随机执行其中的一个分支。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ch <span class="token operator">&lt;-</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
			<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;case1&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
			<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;case2&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
case1
case2
case1
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随机执行是为了避免<strong>饥饿</strong>问题的发生。</p><h2 id="_5-2-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_5-2-2-数据结构" aria-hidden="true">#</a> 5.2.2 数据结构</h2>`,23),r=n("code",null,"select",-1),d=n("code",null,"case",-1),k={href:"https://draveness.me/golang/tree/runtime.scase",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.scase",-1),m=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> scase <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	c    <span class="token operator">*</span>hchan         <span class="token comment">// chan</span>
	elem unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-3-实现原理" tabindex="-1"><a class="header-anchor" href="#_5-2-3-实现原理" aria-hidden="true">#</a> 5.2.3 实现原理</h2><p><code>select</code>语句在编译期间会被转换成<code>OSELECT</code>节点，每个<code>OSELECT</code>会持有一组<code>OCASE</code>节点，若<code>OCASE</code>节点的执行条件为空，则表示<code>default</code>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281704462.png" alt="golang-oselect-and-ocases" tabindex="0" loading="lazy"><figcaption>golang-oselect-and-ocases</figcaption></figure>`,4),b={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkselectcases",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"cmd/compile/internal/gc.walkselectcases",-1),h=n("code",null,"case",-1),_=t(`<ol><li><strong>不存</strong>在任何<code>case</code></li><li>只有<strong>一个</strong><code>case</code></li><li>存在<strong>两个</strong><code>case</code>，其中一个是<code>default</code></li><li>存在多个<code>case</code></li></ol><h3 id="直接阻塞-无case" tabindex="-1"><a class="header-anchor" href="#直接阻塞-无case" aria-hidden="true">#</a> 直接阻塞（无case)</h3><p>当<code>select</code>中没有<code>case</code>时，会直接阻塞当前goroutine，导致 goroutine 进入无法被唤醒的永久休眠状态。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkselectcases</span><span class="token punctuation">(</span>cases <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> cases<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span><span class="token function">mkcall</span><span class="token punctuation">(</span><span class="token string">&quot;block&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f=n("code",null,"select{}",-1),w={href:"https://draveness.me/golang/tree/runtime.block",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"runtime.block",-1),x=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonSelectNoCases<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单一通道-一个case" tabindex="-1"><a class="header-anchor" href="#单一通道-一个case" aria-hidden="true">#</a> 单一通道（一个case）</h3><p>当<code>select</code>中只有一个<code>case</code>时，编译器将会改写为<code>if</code>结构：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 改写前</span>
<span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> v<span class="token punctuation">,</span> ok <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span> <span class="token comment">// case ch &lt;- v</span>
    <span class="token operator">...</span>    
<span class="token punctuation">}</span>

<span class="token comment">// 改写后</span>
<span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch <span class="token comment">// case ch &lt;- v</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中若<code>channel</code>是空指针，则会直接阻塞当前goroutine并陷入永久休眠。</p><h3 id="非阻塞收发-一个case和一个default" tabindex="-1"><a class="header-anchor" href="#非阻塞收发-一个case和一个default" aria-hidden="true">#</a> 非阻塞收发（一个case和一个default）</h3><p>当<code>select</code>中仅包含一个<code>case</code>和一个<code>default</code>时，编译器会认为这是一个非阻塞收发，并根据操作是<strong>发送</strong>或者<strong>接收</strong>进行不同的优化。</p><h4 id="发送" tabindex="-1"><a class="header-anchor" href="#发送" aria-hidden="true">#</a> 发送</h4>`,8),C=n("code",null,"case",-1),q=n("code",null,"OSEND",-1),G={href:"https://draveness.me/golang/tree/runtime.selectnbsend",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.selectnbsend",-1),O=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 改写前</span>
<span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> i<span class="token punctuation">:</span>
    <span class="token operator">...</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 改写后</span>
<span class="token keyword">if</span> <span class="token function">selectnbsend</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E={href:"https://draveness.me/golang/tree/runtime.selectnbsend",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"runtime.selectnbsend",-1),N=n("strong",null,"非阻塞",-1),j=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">selectnbsend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>selected <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={href:"https://draveness.me/golang/tree/runtime.chansend",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.chansend",-1),B=n("strong",null,"不会阻塞",-1),K=n("strong",null,"直接返回",-1),R=t(`<h4 id="接收" tabindex="-1"><a class="header-anchor" href="#接收" aria-hidden="true">#</a> 接收</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 改写前</span>
<span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> v <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span> <span class="token comment">// case v, ok &lt;- ch:</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 改写后</span>
<span class="token keyword">if</span> <span class="token function">selectnbrecv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if selectnbrecv2(&amp;v, &amp;ok, ch) {</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据返回值的不同，会使用两个函数：</p>`,3),T={href:"https://draveness.me/golang/tree/runtime.selectnbrecv",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"runtime.selectnbrecv",-1),W={href:"https://draveness.me/golang/tree/runtime.selectnbrecv2",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.selectnbrecv2",-1),I=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">selectnbrecv</span><span class="token punctuation">(</span>elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> c <span class="token operator">*</span>hchan<span class="token punctuation">)</span> <span class="token punctuation">(</span>selected <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	selected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">selectnbrecv2</span><span class="token punctuation">(</span>elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> received <span class="token operator">*</span><span class="token builtin">bool</span><span class="token punctuation">,</span> c <span class="token operator">*</span>hchan<span class="token punctuation">)</span> <span class="token punctuation">(</span>selected <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	selected<span class="token punctuation">,</span> <span class="token operator">*</span>received <span class="token operator">=</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$={href:"https://draveness.me/golang/tree/runtime.chanrecv",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.chanrecv",-1),F=n("h3",{id:"一般情况-多个case",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一般情况-多个case","aria-hidden":"true"},"#"),s(" 一般情况（多个case）")],-1),H=n("p",null,[s("当"),n("code",null,"select"),s("中有多个"),n("code",null,"case"),s("的情况时，流程如下：")],-1),Z=n("code",null,"case",-1),J={href:"https://draveness.me/golang/tree/runtime.scase",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.scase",-1),Q={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"runtime.selectgo",-1),X={href:"https://draveness.me/golang/tree/runtime.scase",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.scase",-1),nn=n("li",null,[s("通过 "),n("code",null,"for"),s(" 循环生成一组 "),n("code",null,"if"),s(" 语句，在语句中判断自己是不是被选中的 "),n("code",null,"case")],-1),sn=t(`<p>以三个<code>case</code>的<code>select</code>为例，其转化后的语句如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>selv <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>scase<span class="token punctuation">{</span><span class="token punctuation">}</span>
order <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">uint16</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> cas <span class="token operator">:=</span> <span class="token keyword">range</span> cases <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> scase<span class="token punctuation">{</span><span class="token punctuation">}</span>
    c<span class="token punctuation">.</span>kind <span class="token operator">=</span> <span class="token operator">...</span>
    c<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token operator">...</span>
    c<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token operator">...</span>
<span class="token punctuation">}</span>
chosen<span class="token punctuation">,</span> revcOK <span class="token operator">:=</span> <span class="token function">selectgo</span><span class="token punctuation">(</span>selv<span class="token punctuation">,</span> order<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> chosen <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> chosen <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> chosen <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),an={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.selectgo",-1),tn=n("ol",null,[n("li",null,[s("初始化操作并确定 "),n("code",null,"case"),s(" 的处理顺序")]),n("li",null,[s("在循环中根据 "),n("code",null,"case"),s(" 的类型做出不同的处理")])],-1),on=n("h4",{id:"初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化","aria-hidden":"true"},"#"),s(" 初始化")],-1),cn={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.selectgo",-1),ln=n("code",null,"case",-1),un=t(`<ol><li>轮询顺序(pollOrder)</li><li>加锁顺序(lockOrder)</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">selectgo</span><span class="token punctuation">(</span>cas0 <span class="token operator">*</span>scase<span class="token punctuation">,</span> order0 <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> ncases <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cas1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span>scase<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>cas0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	order1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>order0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	
	ncases <span class="token operator">:=</span> nsends <span class="token operator">+</span> nrecvs
	scases <span class="token operator">:=</span> cas1<span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span>
	pollorder <span class="token operator">:=</span> order1<span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span>
	lockorder <span class="token operator">:=</span> order1<span class="token punctuation">[</span>ncases<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span>

	norder <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> scases <span class="token punctuation">{</span>
		cas <span class="token operator">:=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ncases<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		j <span class="token operator">:=</span> <span class="token function">fastrandn</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		pollorder<span class="token punctuation">[</span>norder<span class="token punctuation">]</span> <span class="token operator">=</span> pollorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
		pollorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		norder<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	pollorder <span class="token operator">=</span> pollorder<span class="token punctuation">[</span><span class="token punctuation">:</span>norder<span class="token punctuation">]</span>
	lockorder <span class="token operator">=</span> lockorder<span class="token punctuation">[</span><span class="token punctuation">:</span>norder<span class="token punctuation">]</span>

	<span class="token comment">// 根据 Channel 的地址排序确定加锁顺序</span>
	<span class="token operator">...</span>
	<span class="token function">sellock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),rn={href:"https://draveness.me/golang/tree/runtime.fastrandn",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"runtime.fastrandn",-1),kn=n("strong",null,"随机的轮询顺序",-1),vn=n("strong",null,"避免",-1),mn=n("strong",null,"饥饿问题",-1),bn=n("li",null,[n("p",null,[s("加锁顺序：按照 Channel 的地址排序后确定加锁顺序； 根据 Channel 的"),n("strong",null,"地址顺序"),s("确定加锁顺序能够"),n("strong",null,"避免死锁"),s("的发生")])],-1),gn={href:"https://draveness.me/golang/tree/runtime.sellock",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime.sellock",-1),_n=n("code",null,"channel",-1),fn=n("h4",{id:"循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#循环","aria-hidden":"true"},"#"),s(" 循环")],-1),wn={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"runtime.selectgo",-1),xn=n("ol",null,[n("li",null,"查找是否已经存在准备就绪的 Channel，即可以执行收发操作"),n("li",null,"将当前 Goroutine 加入 Channel 对应的收发队列上并等待其他 Goroutine 的唤醒"),n("li",null,"当前 Goroutine 被唤醒之后找到满足条件的 Channel 并进行处理")],-1),Cn={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"runtime.selectgo",-1),Gn=n("code",null,"goto",-1),Sn=t(`<ul><li><code>bufrecv</code>：可以从缓冲区读取数据；</li><li><code>bufsend</code>：可以向缓冲区写入数据；</li><li><code>recv</code>：可以从休眠的发送方获取数据；</li><li><code>send</code>：可以向休眠的接收方发送数据；</li><li><code>rclose</code>：可以从关闭的 Channel 读取 EOF；</li><li><code>sclose</code>：向关闭的 Channel 发送数据；</li><li><code>retc</code>：结束调用并返回</li></ul><p><strong>查找准备就绪的 Channel</strong></p><p>根据 <code>case</code> 的四种类型分别处理：</p><ol><li>当 <code>case</code> <strong>不包含</strong> Channel 时： <ul><li><code>case</code> 会被跳过</li></ul></li><li>当 <code>case</code> 会从 Channel 中<strong>接收数据</strong>时： <ul><li>若当前 Channel 的 <code>sendq</code> 上有等待的 Goroutine，就会跳到 <code>recv</code> 标签并从缓冲区读取数据后将等待 Goroutine 中的数据放入到缓冲区中相同的位置</li><li>若当前 Channel 的缓冲区不为空，就会跳到 <code>bufrecv</code> 标签处从缓冲区获取数据</li><li>若当前 Channel 已经被关闭，就会跳到 <code>rclose</code> 做一些清除的收尾工作</li></ul></li><li>当 <code>case</code> 会向 Channel <strong>发送数据</strong>时： <ul><li>若当前 Channel 已经被关，闭就会直接跳到 <code>sclose</code> 标签，触发 <code>panic</code> 尝试中止程序</li><li>若当前 Channel 的 <code>recvq</code> 上有等待的 Goroutine，就会跳到 <code>send</code> 标签向 Channel 发送数据</li><li>若当前 Channel 的缓冲区存在空闲位置，就会将待发送的数据存入缓冲区</li></ul></li><li>当 <code>select</code> 语句中包含 <code>default</code> 时： <ul><li>表示前面的所有 <code>case</code> 都没有被执行，这里会<strong>解锁</strong>所有 Channel 并返回，意味着当前 <code>select</code> 结构中的收发都是<strong>非阻塞</strong>的</li></ul></li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281734651.png" alt="golang-runtime-selectgo" tabindex="0" loading="lazy"><figcaption>golang-runtime-selectgo</figcaption></figure><p><strong>加入 Channel 对应的收发队列</strong></p><p>若没有立即找到可以处理的<code>channel</code>，则将当前 Goroutine 加入到 Channel 的 <code>sendq</code> 或者 <code>recvq</code> 队列中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">selectgo</span><span class="token punctuation">(</span>cas0 <span class="token operator">*</span>scase<span class="token punctuation">,</span> order0 <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> ncases <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	gp <span class="token operator">=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	nextp <span class="token operator">=</span> <span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>waiting
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> casei <span class="token operator">:=</span> <span class="token keyword">range</span> lockorder <span class="token punctuation">{</span>
		casi <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span>
		cas <span class="token operator">=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>casi<span class="token punctuation">]</span>
		c <span class="token operator">=</span> cas<span class="token punctuation">.</span>c
		sg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		sg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp
		sg<span class="token punctuation">.</span>c <span class="token operator">=</span> c

		<span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">gopark</span><span class="token punctuation">(</span>selparkcommit<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonSelect<span class="token punctuation">,</span> traceEvGoBlockSelect<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),On={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.sudog",-1),zn={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.gopark",-1),jn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281737516.png",alt:"Golang-Select-Waiting",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Golang-Select-Waiting")],-1),Pn=n("p",null,[n("strong",null,"唤醒Goroutine，处理可用的Channel")],-1),Ln=n("code",null,"select",-1),Bn=n("strong",null,"准备就绪",-1),Kn=n("strong",null,"Goroutine",-1),Rn=n("strong",null,"唤醒",-1),Tn={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime.selectgo",-1),Wn={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.sudog",-1),In=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">selectgo</span><span class="token punctuation">(</span>cas0 <span class="token operator">*</span>scase<span class="token punctuation">,</span> order0 <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> ncases <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	sg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sudog<span class="token punctuation">)</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>param<span class="token punctuation">)</span>
	gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>

	casi <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	cas <span class="token operator">=</span> <span class="token boolean">nil</span>
	sglist <span class="token operator">=</span> gp<span class="token punctuation">.</span>waiting
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> casei <span class="token operator">:=</span> <span class="token keyword">range</span> lockorder <span class="token punctuation">{</span>
		k <span class="token operator">=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>casei<span class="token punctuation">]</span>
		<span class="token keyword">if</span> sg <span class="token operator">==</span> sglist <span class="token punctuation">{</span>
			casi <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span>
			cas <span class="token operator">=</span> k
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			c <span class="token operator">=</span> k<span class="token punctuation">.</span>c
			<span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span> <span class="token operator">&lt;</span> nsends <span class="token punctuation">{</span>
				c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeueSudoG</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeueSudoG</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		sgnext <span class="token operator">=</span> sglist<span class="token punctuation">.</span>waitlink
		sglist<span class="token punctuation">.</span>waitlink <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token function">releaseSudog</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
		sglist <span class="token operator">=</span> sgnext
	<span class="token punctuation">}</span>

	c <span class="token operator">=</span> cas<span class="token punctuation">.</span>c
	<span class="token keyword">goto</span> retc
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先获取当前 Goroutine 接收到的参数 <code>sudog</code> 结构，我们会依次对比所有 <code>case</code> 对应的 <code>sudog</code> 结构找到被唤醒的 <code>case</code>，获取该 <code>case</code> 对应的索引并返回。</p><p>由于当前的 <code>select</code> 结构找到了一个 <code>case</code> 执行，剩下 <code>case</code> 中没有被用到的 <code>sudog</code> 就会被忽略并且释放掉。为了不影响 Channel 的正常使用，需要将<strong>废弃的</strong> <code>sudog</code> 从 Channel 中<strong>出队</strong>。</p><p>循环中发现缓冲区中有元素或者缓冲区未满时就会通过 <code>goto</code> 关键字跳转到 <code>bufrecv</code> 和 <code>bufsend</code>，向 Channel 中发送数据或者从缓冲区中获取新数据：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bufrecv<span class="token punctuation">:</span>
	recvOK <span class="token operator">=</span> <span class="token boolean">true</span>
	qp <span class="token operator">=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>recvx<span class="token operator">++</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>recvx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>recvx <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>qcount<span class="token operator">--</span>
	<span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
	<span class="token keyword">goto</span> retc

bufsend<span class="token punctuation">:</span>
	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sendx<span class="token punctuation">)</span><span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>sendx<span class="token operator">++</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>sendx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>sendx <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span>qcount<span class="token operator">++</span>
	<span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
	<span class="token keyword">goto</span> retc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),$n={href:"https://draveness.me/golang/tree/runtime.send",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"runtime.send",-1),Fn={href:"https://draveness.me/golang/tree/runtime.recv",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime.recv",-1),Zn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>recv<span class="token punctuation">:</span>
	<span class="token function">recv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	recvOK <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">goto</span> retc

send<span class="token punctuation">:</span>
	<span class="token function">send</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">goto</span> retc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若向<strong>已关闭</strong>的Channel <strong>发送</strong>数据或者<strong>接收</strong>数据：</p><ul><li>从一个<strong>已关闭</strong> Channel 中<strong>接收</strong>数据会直接<strong>清除</strong> Channel 中的相关<strong>内容</strong></li><li>向一个<strong>已关闭</strong>的 Channel <strong>发送</strong>数据就会直接 <code>panic</code> 造成程序崩溃</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rclose<span class="token punctuation">:</span>
	<span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
	recvOK <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">goto</span> retc

sclose<span class="token punctuation">:</span>
	<span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;send on closed channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-4-小结" tabindex="-1"><a class="header-anchor" href="#_5-2-4-小结" aria-hidden="true">#</a> 5.2.4 小结</h2><h3 id="select的编译期优化" tabindex="-1"><a class="header-anchor" href="#select的编译期优化" aria-hidden="true">#</a> <code>select</code>的编译期优化</h3>`,6),Jn=n("code",null,"select",-1),Mn={href:"https://draveness.me/golang/tree/runtime.block",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"runtime.block",-1),Un=n("li",null,[s("若 "),n("code",null,"select"),s(" 语句中只包含一个 "),n("code",null,"case"),s("，编译器会将其转换成 "),n("code",null,"if ch == nil { block }; n;"),s(" 表达式： "),n("ul",null,[n("li",null,"首先判断操作的 Channel 是否为空"),n("li",null,[s("然后执行 "),n("code",null,"case"),s(" 结构中的内容")])])],-1),Xn=n("code",null,"select",-1),Yn=n("code",null,"case",-1),ns=n("code",null,"default",-1),ss={href:"https://draveness.me/golang/tree/runtime.selectnbrecv",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"runtime.selectnbrecv",-1),es={href:"https://draveness.me/golang/tree/runtime.selectnbsend",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"runtime.selectnbsend",-1),os={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"runtime.selectgo",-1),ps=n("code",null,"case",-1),ls=n("code",null,"if",-1),is=n("code",null,"case",-1),us=n("h3",{id:"select的执行流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#select的执行流程","aria-hidden":"true"},"#"),s(),n("code",null,"select"),s("的执行流程")],-1),rs={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"runtime.selectgo",-1),ks=n("li",null,[s("随机生成一个遍历的轮询顺序 "),n("code",null,"pollOrder"),s(" 并根据 Channel 地址生成锁定顺序 "),n("code",null,"lockOrder")],-1),vs=n("code",null,"pollOrder",-1),ms=n("code",null,"case",-1),bs=n("li",null,[s("若存在，直接获取 "),n("code",null,"case"),s(" 对应的索引并返回")],-1),gs={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"runtime.sudog",-1),_s={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"runtime.gopark",-1),ws=n("code",null,"lockOrder",-1),ys=n("code",null,"case",-1),xs={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.sudog",-1),qs=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Gs={href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/",target:"_blank",rel:"noopener noreferrer"};function Ss(Os,Es){const a=l("ExternalLinkIcon");return c(),p("div",null,[u,n("p",null,[r,s("本身并不存在结构体，但是其"),d,s("可以用"),n("a",k,[v,e(a)]),s("来表示:")]),m,n("p",null,[s("编译器使用"),n("a",b,[g,e(a)]),s("根据"),h,s("的不同进行优化：")]),_,n("p",null,[s("上述代码直接将"),f,s("转换成调用"),n("a",w,[y,e(a)]),s("：")]),x,n("p",null,[s("当 "),C,s(" 中表达式的类型是 "),q,s(" 时，编译器会使用条件语句和 "),n("a",G,[S,e(a)]),s(" 函数改写代码：")]),O,n("p",null,[s("其中的"),n("a",E,[z,e(a)]),s("提供了向 Channel "),N,s("地发送数据的能力：")]),j,n("p",null,[s("向 "),n("a",P,[L,e(a)]),s(" 函数传入了非阻塞，所以在不存在接收方或者缓冲区空间不足时，当前 Goroutine 都"),B,s("而是会"),K,s("。")]),R,n("ol",null,[n("li",null,[n("a",T,[V,e(a)])]),n("li",null,[n("a",W,[A,e(a)])])]),I,n("p",null,[s("和发送的情况类似，调用"),n("a",$,[D,e(a)]),s("也传入了表示非阻塞的参数。")]),F,H,n("ol",null,[n("li",null,[s("将所有的 "),Z,s(" 转换成包含 Channel 以及类型等信息的 "),n("a",J,[M,e(a)]),s(" 结构体")]),n("li",null,[s("调用运行时函数 "),n("a",Q,[U,e(a)]),s(" 从多个准备就绪的 Channel 中选择一个可执行的 "),n("a",X,[Y,e(a)]),s(" 结构体")]),nn]),sn,n("p",null,[s("其中的"),n("a",an,[en,e(a)]),s("执行过程主要有两步：")]),tn,on,n("p",null,[n("a",cn,[pn,e(a)]),s("进行初始化后会决定处理"),ln,s("的顺序：")]),un,n("ul",null,[n("li",null,[n("p",null,[s("轮询顺序：通过 "),n("a",rn,[dn,e(a)]),s(" 函数引入随机性； "),kn,s("可以"),vn,s(" Channel 的"),mn,s("，保证公平性")])]),bn,n("li",null,[n("p",null,[n("a",gn,[hn,e(a)]),s("按照加锁顺序锁定所有的"),_n])])]),fn,n("p",null,[s("当锁定了所有 Channel 之后就会进入 "),n("a",wn,[yn,e(a)]),s(" 函数的主循环，流程如下：")]),xn,n("p",null,[n("a",Cn,[qn,e(a)]),s(" 函数会根据不同情况通过 "),Gn,s(" 语句跳转到函数内部的不同标签执行相应的逻辑，其中包括：")]),Sn,n("p",null,[s("除了将当前 Goroutine 对应的 "),n("a",On,[En,e(a)]),s(" 结构体加入队列之外，这些结构体都会被串成链表附着在 Goroutine 上。")]),n("p",null,[s("在入队之后会调用 "),n("a",zn,[Nn,e(a)]),s(" 挂起当前 Goroutine 等待调度器的唤醒。")]),jn,Pn,n("p",null,[s("等到 "),Ln,s(" 中的一些 Channel "),Bn,s("之后，当前 "),Kn,s(" 就会被调度器"),Rn,s("。这时会继续执行 "),n("a",Tn,[Vn,e(a)]),s(" 函数的第三部分，从 "),n("a",Wn,[An,e(a)]),s(" 中读取数据：")]),In,n("p",null,[s("两个直接收发 Channel 的情况会调用运行时函数 "),n("a",$n,[Dn,e(a)]),s(" 和 "),n("a",Fn,[Hn,e(a)]),s("：")]),Zn,n("ol",null,[n("li",null,[s("空的 "),Jn,s(" 语句会被转换成调用 "),n("a",Mn,[Qn,e(a)]),s(" 直接挂起当前 Goroutine")]),Un,n("li",null,[s("若 "),Xn,s(" 语句中只包含两个 "),Yn,s(" 并且其中一个是 "),ns,s("，那么会使用 "),n("a",ss,[as,e(a)]),s(" 和 "),n("a",es,[ts,e(a)]),s(" 非阻塞地执行收发操作")]),n("li",null,[s("在默认情况下会通过 "),n("a",os,[cs,e(a)]),s(" 获取执行 "),ps,s(" 的索引，并通过多个 "),ls,s(" 语句执行对应 "),is,s(" 中的代码")])]),us,n("p",null,[s("运行时执行编译期间展开的 "),n("a",rs,[ds,e(a)]),s(" 函数，按照以下的流程执行：")]),n("ol",null,[ks,n("li",null,[s("根据 "),vs,s(" 遍历所有的 "),ms,s(" 查看是否有可以立刻处理的 Channel： "),n("ol",null,[bs,n("li",null,[s("若不存在，创建 "),n("a",gs,[hs,e(a)]),s(" 结构体，将当前 Goroutine 加入到所有相关 Channel 的收发队列，并调用 "),n("a",_s,[fs,e(a)]),s(" 挂起当前 Goroutine 等待调度器的唤醒")])])]),n("li",null,[s("当调度器唤醒当前 Goroutine 时，会再次按照 "),ws,s(" 遍历所有的 "),ys,s("，从中查找需要被处理的 "),n("a",xs,[Cs,e(a)]),s(" 对应的索引")])]),qs,n("ol",null,[n("li",null,[n("a",Gs,[s("https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/"),e(a)])])])])}const Ns=o(i,[["render",Ss],["__file","05.2.select.html.vue"]]);export{Ns as default};
