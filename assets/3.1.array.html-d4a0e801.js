import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as i}from"./framework-09afcf0b.js";const l={},u=p(`<h2 id="_3-1-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-1-概述" aria-hidden="true">#</a> 3.1.1 概述</h2><p><strong>数组</strong>是由<strong>相同类型</strong>元素的集合组成的数据结构, 在计算机中使用一块<strong>连续</strong>的内存来保存其中的元素, 可以使用<strong>索引</strong>快速访问元素.</p><p>常见的数组一般是一维数组, 多维数组在数值和图形结算领域较为常见.</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309231758285.jpg" alt="2019-02-20-3D-array" tabindex="0" loading="lazy"><figcaption>2019-02-20-3D-array</figcaption></figure><p>Golang 中的数组是一种<strong>基本数据类型</strong>, 数组的类型由两个因素确定:</p><ul><li>元素类型</li><li>数组长度(数组大小), 数组能够最大存储的元素个数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span> 和 <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token builtin">int</span> 		是两种不同类型<span class="token punctuation">,</span> 数组长度不同
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 是两种不同类型<span class="token punctuation">,</span> 数组元素类型不同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 的数组在初始化之后大小就无法改变, 存储元素相同但是大小不同将被视作不同的类型, 只有两者完全相同时才是同一类型.</p>`,8),r={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/types/type.go#L567",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"cmd/compile/internal/types.NewArray",-1),d=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/types/type.go </span>

<span class="token comment">// NewArray returns a new fixed-length array Type.</span>
<span class="token keyword">func</span> <span class="token function">NewArray</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">,</span> bound <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> bound <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;NewArray: invalid bound %v&quot;</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TARRAY<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> <span class="token operator">&amp;</span>Array<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">,</span> Bound<span class="token punctuation">:</span> bound<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span><span class="token function">SetNotInHeap</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span><span class="token function">NotInHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> elem<span class="token punctuation">.</span><span class="token function">HasTParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">SetHasTParam</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组类型包含两个字段: <code>Elem</code>和<code>Bound</code></li><li>数组是否应该在堆栈中初始化也是在编译期确定的.</li></ul><h2 id="_3-1-2-初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-2-初始化" aria-hidden="true">#</a> 3.1.2 初始化</h2><p>Golang 数组的初始化有两种不同的创建方式:</p><ul><li>显式指定数组大小</li><li>使用<code>[...T]</code>声明数组, Golang 将在编译期通过源代码推导数组大小</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
arr2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种声明在运行期间得到的结果是完全相同的.</p><p>后一种方式在编译期间会完成对数组大小的推导, 推导过程有两步:</p><ul><li>上限推导</li><li>语句转换</li></ul><h4 id="上限推导" tabindex="-1"><a class="header-anchor" href="#上限推导" aria-hidden="true">#</a> 上限推导</h4>`,10),v=n("code",null,"[10]T",-1),m={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/types/type.go#L567",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"cmd/compile/internal/types.NewArray",-1),f={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/types/type.go#L419",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cmd/compile/internal/types.Array",-1),y=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/types/type.go</span>

<span class="token comment">// Array contains Type fields specific to array types.</span>
<span class="token keyword">type</span> Array <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Elem  <span class="token operator">*</span>Type <span class="token comment">// element type</span>
	Bound <span class="token builtin">int64</span> <span class="token comment">// number of elements; &lt;0 if unknown yet</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=n("code",null,"[...T]",-1),x={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckcomplit",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"cmd/compile/internal/gc.typecheckcomplit",-1),I={href:"https://github.com/golang/go/blob/54f78cf8f1b8deea787803aeff5fb6150d7fac8f/src/cmd/compile/internal/typecheck/expr.go#L162",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"cmd/compile/internal/typecheck.tcComplit",-1),q=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/typecheck/expr.go</span>

<span class="token comment">// The result of tcCompLit MUST be assigned back to n, e.g.</span>
<span class="token comment">//</span>
<span class="token comment">//	n.Left = tcCompLit(n.Left)</span>
<span class="token keyword">func</span> <span class="token function">tcCompLit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>CompLitExpr<span class="token punctuation">)</span> <span class="token punctuation">(</span>res ir<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> base<span class="token punctuation">.</span>EnableTrace <span class="token operator">&amp;&amp;</span> base<span class="token punctuation">.</span>Flag<span class="token punctuation">.</span>LowerT <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token function">tracePrint</span><span class="token punctuation">(</span><span class="token string">&quot;tcCompLit&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	lno <span class="token operator">:=</span> base<span class="token punctuation">.</span>Pos
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		base<span class="token punctuation">.</span>Pos <span class="token operator">=</span> lno
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	ir<span class="token punctuation">.</span><span class="token function">SetPos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

	t <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	base<span class="token punctuation">.</span><span class="token function">AssertfAt</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;missing type in composite literal&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">switch</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span> 
	<span class="token keyword">case</span> types<span class="token punctuation">.</span>TARRAY<span class="token punctuation">:</span>
		<span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">,</span> <span class="token string">&quot;array literal&quot;</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span><span class="token function">SetOp</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span>OARRAYLIT<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckarraylit",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"cmd/compile/internal/gc.typecheckarraylit",-1),L={href:"https://github.com/golang/go/blob/master/src/cmd/compile/internal/typecheck/typecheck.go#L1099",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"cmd/compile/internal/typecheck.typecheckarraylit",-1),E=n("p",null,[n("code",null,"[3]T{1,2,3}"),s("和"),n("code",null,"[...]T{1,2,3}"),s("是在运行时等价的，"),n("code",null,"[...]T"),s("是Golang语法糖，当不想手动计算数组长度时，可以减少工作量。")],-1),O=n("h4",{id:"语句转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#语句转换","aria-hidden":"true"},"#"),s(" 语句转换")],-1),P={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.anylit",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"cmd/compile/internal/gc.anylit",-1),R={href:"https://github.com/golang/go/blob/54f78cf8f1b8deea787803aeff5fb6150d7fac8f/src/cmd/compile/internal/walk/complit.go#L527",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"cmd/compile/internal/walk.anylit",-1),F=p(`<ul><li>当元素数量<strong>小于或等于</strong> 4 个时，直接将数组中的元素放到栈上</li><li>当元素数量<strong>大于</strong> 4 个时，将数组中的元素放到静态区并在运行时取出</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/walk/complit.go</span>

<span class="token keyword">func</span> <span class="token function">anylit</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> var_ ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>ir<span class="token punctuation">.</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not lit, op=%v node=%v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token operator">...</span>

	<span class="token keyword">case</span> ir<span class="token punctuation">.</span>OSTRUCTLIT<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OARRAYLIT<span class="token punctuation">:</span>
		n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>CompLitExpr<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not struct/array&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token function">isSimpleName</span><span class="token punctuation">(</span>var_<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">var</span> components <span class="token builtin">int64</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ir<span class="token punctuation">.</span>OARRAYLIT <span class="token punctuation">{</span>
			components <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			components <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">NumFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// initialization of an array or struct with unspecified components (missing fields or arrays)</span>
		<span class="token keyword">if</span> <span class="token function">isSimpleName</span><span class="token punctuation">(</span>var_<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> components <span class="token punctuation">{</span>
			<span class="token function">appendWalkStmt</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> ir<span class="token punctuation">.</span><span class="token function">NewAssignStmt</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>Pos<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token function">fixedlit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> initKindLocalCode<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
	
    <span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当数组元素数目<strong>小于或等于</strong> 4 个，函数<code>fixedlit</code>将接收参数<code>initKindLocalCode</code>，会将原有的初始化语句拆分成<strong>声明表达式</strong>和<strong>赋值表达式</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/walk/complit.go</span>

<span class="token keyword">func</span> <span class="token function">anylit</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> var_ ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>ir<span class="token punctuation">.</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not lit, op=%v node=%v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token operator">...</span>

	<span class="token keyword">case</span> ir<span class="token punctuation">.</span>OSTRUCTLIT<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OARRAYLIT<span class="token punctuation">:</span>
		n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>CompLitExpr<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not struct/array&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token function">isSimpleName</span><span class="token punctuation">(</span>var_<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
			<span class="token comment">// lay out static data</span>
			vstat <span class="token operator">:=</span> <span class="token function">readonlystaticname</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

			ctxt <span class="token operator">:=</span> inInitFunction
			<span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ir<span class="token punctuation">.</span>OARRAYLIT <span class="token punctuation">{</span>
				ctxt <span class="token operator">=</span> inNonInitFunction
			<span class="token punctuation">}</span>
			<span class="token function">fixedlit</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> initKindStatic<span class="token punctuation">,</span> n<span class="token punctuation">,</span> vstat<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

			<span class="token comment">// copy static to var</span>
			<span class="token function">appendWalkStmt</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> ir<span class="token punctuation">.</span><span class="token function">NewAssignStmt</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>Pos<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> vstat<span class="token punctuation">)</span><span class="token punctuation">)</span>

			<span class="token comment">// add expressions to automatic</span>
			<span class="token function">fixedlit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> initKindDynamic<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
        
    <span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若数组元素<strong>大于</strong> 4 个，则通过<code>readonlystaticname</code>获取<code>staticname</code>，调用<code>fixedlit</code>在静态存储区初始化数组并将临时变量赋值给数组。</p><p>假设初始化<code>[5]int{1,2,3,4,5}</code>流程的伪代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
arr <span class="token operator">=</span> statictmp_0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上，在不考虑逃逸分析的情况下：</p><ul><li>数组元素<strong>小于等于</strong> 4 个，直接在栈上初始化</li><li>数组元素<strong>大于</strong> 4 个，在静态存储区初始化，然后拷贝到栈上</li></ul>`,10),G={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-machinecode/",target:"_blank",rel:"noopener noreferrer"},Y=p('<h2 id="_3-1-3-访问和赋值" tabindex="-1"><a class="header-anchor" href="#_3-1-3-访问和赋值" aria-hidden="true">#</a> 3.1.3 访问和赋值</h2><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h4><p>数组在内存中的占用一段连续的内存空间，并通过指向数组开头的<strong>指针</strong>、元素<strong>数量</strong>和元素<strong>类型</strong>占用空间大小来表示数组。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309231758445.png" alt="golang-array-memory" tabindex="0" loading="lazy"><figcaption>golang-array-memory</figcaption></figure>',4),X={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheck1",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"cmd/compile/internal/gc.typecheck1",-1),K={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/cmd/compile/internal/typecheck/typecheck.go#L478",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"cmd/compile/internal/typecheck",-1),z={href:"https://github.com/golang/go/blob/master/src/cmd/compile/internal/typecheck/expr.go#L583",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"cmd/compile/internal/typecheck.tcIndex",-1),U=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 cmd/compile/internal/typecheck/typecheck.go</span>

<span class="token comment">// typecheck1 should ONLY be called from typecheck.</span>
<span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token function">typecheckdef</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		ir<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">&quot;typecheck&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;typecheck %v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable&quot;</span><span class="token punctuation">)</span>

	<span class="token operator">...</span>
	<span class="token keyword">case</span> ir<span class="token punctuation">.</span>OINDEX<span class="token punctuation">:</span>
		n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>IndexExpr<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">tcIndex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// No return n here!</span>
	<span class="token comment">// Individual cases can type-assert n, introducing a new one.</span>
	<span class="token comment">// Each must execute its own return n.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tcIndex typechecks an OINDEX node.</span>
<span class="token keyword">func</span> <span class="token function">tcIndex</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>IndexExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">switch</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid operation: %v (type %v does not support indexing)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> n

	<span class="token keyword">case</span> types<span class="token punctuation">.</span>TSTRING<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TARRAY<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TSLICE<span class="token punctuation">:</span>
		n<span class="token punctuation">.</span>Index <span class="token operator">=</span> <span class="token function">indexlit</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>ByteType<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		why <span class="token operator">:=</span> <span class="token string">&quot;string&quot;</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			why <span class="token operator">=</span> <span class="token string">&quot;array&quot;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			why <span class="token operator">=</span> <span class="token string">&quot;slice&quot;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;non-integer %s index %v&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">Bounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			x <span class="token operator">:=</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> constant<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid %s index %v (index must be non-negative)&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> token<span class="token punctuation">.</span>GEQ<span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">MakeInt64</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid array index %v (out of bounds for %d-element array)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>String<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> token<span class="token punctuation">.</span>GEQ<span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">MakeInt64</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span><span class="token function">StringVal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid string index %v (out of bounds for %d-byte string)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span><span class="token function">StringVal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">ConstOverflow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid %s index %v (index too large)&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

	<span class="token operator">...</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若索引<strong>非整数</strong>，报错<code>&quot;non-integer %s index %v</code></li><li>若索引为<strong>负数</strong>，报错<code>invalid %s index %v (index must be non-negative)</code></li><li>若索引<strong>越界</strong>，报错<code>invalid array index %v (out of bounds for %d-element array</code></li></ul><p>当使用<strong>字面量或常量</strong>作为索引访问数组时，在<strong>编译期</strong>可以发现错误。</p><p>当使用<strong>变量</strong>做为索引访问时，需要在<strong>运行时</strong>阻止不合法的访问：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> invalid array index <span class="token number">4</span> <span class="token punctuation">(</span>out of bounds <span class="token keyword">for</span> <span class="token number">3</span><span class="token operator">-</span>element array<span class="token punctuation">)</span>
arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">panic</span><span class="token punctuation">:</span> runtime <span class="token builtin">error</span><span class="token punctuation">:</span> index out of <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> with length <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),j={href:"https://draveness.me/golang/tree/runtime.panicIndex",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.panicIndex",-1),Q={href:"https://draveness.me/golang/tree/runtime.goPanicIndex",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"runtime.goPanicIndex",-1),J=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 runtime/asm_389.s </span>

TEXT runtime·<span class="token function">panicIndex</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span>NOSPLIT<span class="token punctuation">,</span>$<span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span>
	MOVL	AX<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token function">0</span><span class="token punctuation">(</span>FP<span class="token punctuation">)</span>
	MOVL	CX<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token function">4</span><span class="token punctuation">(</span>FP<span class="token punctuation">)</span>
	JMP	runtime·<span class="token function">goPanicIndex</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 runtime/panic.go</span>

<span class="token keyword">func</span> <span class="token function">goPanicIndex</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">panicCheck1</span><span class="token punctuation">(</span><span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;index out of range&quot;</span><span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>boundsError<span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token function">int64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">,</span> code<span class="token punctuation">:</span> boundsIndex<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当数组访问通过编译期检查之后，会被转换成 SSA 指令。假设如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> check

<span class="token keyword">func</span> <span class="token function">outOfRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	i <span class="token operator">:=</span> <span class="token number">4</span>
	elem <span class="token operator">:=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token keyword">return</span> elem
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token assign-left variable">GOSSAFUNC</span><span class="token operator">=</span>outOfRange go build array.go
dumped SSA to ./ssa.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b1:
    ...
    v22 (6) = LocalAddr &lt;*[3]int&gt; {arr} v2 v20
    v23 (6) = IsInBounds &lt;bool&gt; v21 v11
If v23 → b2 b3 (likely) (6)

b2: ← b1-
    v26 (6) = PtrIndex &lt;*int&gt; v22 v21
    v27 (6) = Copy &lt;mem&gt; v20
    v28 (6) = Load &lt;int&gt; v26 v27 (elem[int])
    ...
Ret v30 (+7)

b3: ← b1-
    v24 (6) = Copy &lt;mem&gt; v20
    v25 (6) = PanicBounds &lt;mem&gt; [0] v21 v11 v24
Exit v25 (6)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的访问操作生成了判断数组上限的指令 <code>IsInBounds</code> 以及当条件不满足时触发程序崩溃的 <code>PanicBounds</code> 指令。</p><p>编译器会将 <code>PanicBounds</code> 指令转换成 <code>runtime.panicIndex</code> 函数，当数组下标没有越界时，编译器会先获取数组的内存地址和访问的下标、利用 <code>PtrIndex</code> 计算出目标元素的地址，最后使用 <code>Load</code> 操作将指针中的元素加载到内存中。</p><p>当然只有当编译器无法对数组下标是否越界无法做出判断时才会加入 <code>PanicBounds</code> 指令交给运行时进行判断。</p><h4 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h4><p>数组的赋值和更新操作 <code>a[i] = 2</code> 也会生成 SSA 生成期间计算出数组当前元素的内存地址，然后修改当前内存地址的内容，这些赋值语句会被转换成如下所示的 SSA 代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b1<span class="token punctuation">:</span>
    <span class="token operator">...</span>
    v21 <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> LocalAddr <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>arr<span class="token punctuation">}</span> v2 v19
    v22 <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> PtrIndex <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v21 v13
    v23 <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> Store <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token builtin">int</span><span class="token punctuation">}</span> v22 v20 v19
    <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值的过程中会先确定目标数组的地址，再通过 <code>PtrIndex</code> 获取目标元素的地址，最后使用 <code>Store</code> 指令将数据存入地址中。</p><p>由上可以看出<strong>数组寻址</strong>和<strong>赋值</strong>都是在<strong>编译阶段</strong>完成的，没有运行时的参与。</p><h2 id="_3-1-4-小结" tabindex="-1"><a class="header-anchor" href="#_3-1-4-小结" aria-hidden="true">#</a> 3.1.4 小结</h2><p>数组的访问同时依赖<strong>编译器</strong>和<strong>运行时</strong>，大多数数组操作在编译期间会转换成直接读写内存，在中间代码生成期间会插入运行时方法<code>runtime.panicIndex</code>防止发生越界。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,17),Z={href:"https://en.wikipedia.org/wiki/Array_(data_structure)",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array/#fn:1",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/golang/go/tree/release-branch.go1.17",target:"_blank",rel:"noopener noreferrer"};function an(tn,pn){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("编译期间的数组类型由函数 "),n("a",r,[k,t(a)]),s(" 生成.")]),d,n("p",null,[s("若使用"),v,s("这种形式, 那么变量类型将在 "),n("a",m,[s("类型检查"),t(a)]),s(" 阶段就会被提取出来, 随后使用 "),n("a",b,[g,t(a)]),s(" 创建结构体 "),n("a",f,[h,t(a)])]),y,n("p",null,[s("若使用"),_,s("的形式, 编译器将会在函数 "),n("a",x,[w,t(a)]),s(" 函数中对该数组大小进行推导:")]),n("p",null,[s("(备注: 原书中提到的函数在go1.17之后已删除, go1.17的函数位置为 "),n("a",I,[T,t(a)]),s(")")]),q,n("p",null,[s("函数会使用 "),n("a",S,[A,t(a)]),s(" 遍历元素的方式计算数组中元素的数量. (备注: 原书中提到的函数在go1.17之后已删除, go1.17的函数位置为 "),n("a",L,[N,t(a)]),s(")")]),E,O,n("p",null,[s("对于一个由字面量组成的数组，根据数组数量的不同，编译器在负责初始化字面量的函数"),n("a",P,[C,t(a)]),s(" 中做两种不同的优化 (备注: 原书中提到的函数在go1.17之后已删除, go1.17的函数位置为 "),n("a",R,[B,t(a)]),s(")：")]),F,n("p",null,[s("这些转换后的代码才会继续进入"),n("a",G,[s("中间代码生成"),t(a)]),s("和"),n("a",V,[s("机器码生成"),t(a)]),s("两个阶段，最后生成可以执行的二进制文件。")]),Y,n("p",null,[s("数组访问越界是非常严重的错误，Golang 在编译期的静态类型检查判断数组越界，"),n("a",X,[D,t(a)]),s("会验证访问数组的索引(备注：go1.17 的函数为"),n("a",K,[M,t(a)]),s("，并调用"),n("a",z,[H,t(a)]),s(" )：")]),U,n("p",null,[s("Golang 语言运行时在发现数组、切片和字符串的越界操作会由运行时的 "),n("a",j,[$,t(a)]),s(" 和 "),n("a",Q,[W,t(a)]),s(" 触发程序的运行时错误并导致崩溃退出：")]),J,n("ol",null,[n("li",null,[n("a",Z,[s("https://en.wikipedia.org/wiki/Array_(data_structure)"),t(a)])]),n("li",null,[n("a",nn,[s("https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array/#fn:1"),t(a)])]),n("li",null,[n("a",sn,[s("https://github.com/golang/go/tree/release-branch.go1.17"),t(a)])])])])}const on=e(l,[["render",an],["__file","3.1.array.html.vue"]]);export{on as default};
