import{_ as a,Z as n,$ as s,a3 as e}from"./framework-dee406ed.js";const p={},t=e(`<h1 id="_8-1-map-声明、初始化和make" tabindex="-1"><a class="header-anchor" href="#_8-1-map-声明、初始化和make" aria-hidden="true">#</a> 8.1 Map 声明、初始化和make</h1><p>Map ：数据结构，由元素对(pair, key : value) 组成的无序集合。</p><h2 id="_8-1-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-1-1-概念" aria-hidden="true">#</a> 8.1.1 概念</h2><ul><li><p>声明：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span>keytype<span class="token punctuation">]</span>valuetype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>key: 可以是使用<code>==</code>,<code>!=</code>操作符比较的类型</p><ul><li>数组和切片不能作为key</li><li>结构体可以提供<code>key()</code>和<code>hash()</code>方法来作为key</li></ul></li><li><p>value: 任意类型</p></li><li><p>map 的默认零值为：<code>nil</code></p></li><li><p>初始化：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>keytype<span class="token punctuation">]</span>valuetype<span class="token punctuation">{</span>k1<span class="token punctuation">:</span> v1<span class="token punctuation">,</span> k2<span class="token punctuation">:</span> v2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>make: 使用<code>make()</code> 来初始化map</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_type<span class="token punctuation">]</span>val_type<span class="token punctuation">)</span>
<span class="token comment">// with capacity</span>
<span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_type<span class="token punctuation">]</span>val_type<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_8-1-2-容量" tabindex="-1"><a class="header-anchor" href="#_8-1-2-容量" aria-hidden="true">#</a> 8.1.2 容量</h2><p>map 的容量时动态的，可以使用<code>make</code>时注明容量。</p><p>对大的map或者会快速扩张的map，最好事先设定容量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_type<span class="token punctuation">]</span>val_type<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-1-3-切片作为值" tabindex="-1"><a class="header-anchor" href="#_8-1-3-切片作为值" aria-hidden="true">#</a> 8.1.3 切片作为值</h2><p>当遇到key对应多个val时，可以使用切片作为值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mp <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
mp <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[t];function c(i,l){return n(),s("div",null,o)}const d=a(p,[["render",c],["__file","08.1.html.vue"]]);export{d as default};
