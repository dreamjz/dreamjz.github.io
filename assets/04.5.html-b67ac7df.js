import{_ as n,Z as a,$ as s,a3 as e}from"./framework-09afcf0b.js";const t={},o=e(`<h1 id="_4-5-基本类型和运算符" tabindex="-1"><a class="header-anchor" href="#_4-5-基本类型和运算符" aria-hidden="true">#</a> 4.5 基本类型和运算符</h1><h2 id="_4-5-1-布尔型-bool" tabindex="-1"><a class="header-anchor" href="#_4-5-1-布尔型-bool" aria-hidden="true">#</a> 4.5.1 布尔型 bool</h2><ul><li>值：<code>true</code> 或 <code>false</code></li></ul><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><h4 id="和" tabindex="-1"><a class="header-anchor" href="#和" aria-hidden="true">#</a> <code>==</code> 和 <code>!=</code></h4><p>只有类型相同的值才能进行比较（若为 <code>interface</code> 则需要实现相同的接口)。</p><p>Golang 没有隐式类型转换，所有类型转换需要进行显示说明。</p><h4 id="逻辑-非" tabindex="-1"><a class="header-anchor" href="#逻辑-非" aria-hidden="true">#</a> <code>!</code> 逻辑 非</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">!</span>T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span>
<span class="token operator">!</span>F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑-与" tabindex="-1"><a class="header-anchor" href="#逻辑-与" aria-hidden="true">#</a> <code>&amp;&amp;</code> 逻辑 与</h4><p>只有两边都为 <code>true </code>时为 <code>true</code></p><p><code>&amp;&amp;</code> 左边为 <code>false</code>， 右边表达式不会执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>T <span class="token operator">&amp;&amp;</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>
T <span class="token operator">&amp;&amp;</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span>
F <span class="token operator">&amp;&amp;</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span>
F <span class="token operator">&amp;&amp;</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑-或" tabindex="-1"><a class="header-anchor" href="#逻辑-或" aria-hidden="true">#</a> <code>||</code> 逻辑 或</h4><p>只有两边都为 <code>false</code>时为<code>false</code></p><p><code>||</code> 左边为<code>true</code>，右边不会执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>T <span class="token operator">||</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>
T <span class="token operator">||</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>
F <span class="token operator">||</span> T <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>
F <span class="token operator">||</span> F <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-5-2-数字类型" tabindex="-1"><a class="header-anchor" href="#_4-5-2-数字类型" aria-hidden="true">#</a> 4.5.2 数字类型</h2><h3 id="整型和浮点型" tabindex="-1"><a class="header-anchor" href="#整型和浮点型" aria-hidden="true">#</a> 整型和浮点型</h3><ul><li>基于架构： <ul><li><code>int</code> 和 <code>uint</code> ： 32 位和 64 位系统分别为 32 和 64 位。</li><li><code>uintptr</code>： 长度位足够存放一个指针。</li></ul></li><li>固定大小： <ul><li>整数：<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code></li><li>无符号整数: <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code></li><li>浮点数(IEEE-754 标准)：<code>float32</code>, <code>float64</code></li></ul></li><li>默认值：整型为 <code>0</code>， 浮点型为 <code>0.0</code></li><li>精度： <ul><li><code>float32</code>: 小数点后 7 位</li><li><code>float64</code>: 小数点后 15 位</li></ul></li><li>进制： <ul><li>八进制：前缀为 <code>0</code> ，如 <code>077</code></li><li>十六进制：前缀为 <code>0x</code> , 如：<code>0xFF</code></li></ul></li><li>科学计数法：<code>e</code>，<code>1e3</code>: 1000, <code>3.1e2</code>L: 310</li></ul><h3 id="复数" tabindex="-1"><a class="header-anchor" href="#复数" aria-hidden="true">#</a> 复数</h3><ul><li><code>complex64</code>: 32位实数和虚数</li><li><code>complex128</code>: 64位实数和虚数</li></ul><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><p>位运算只能用于<strong>整型</strong>，且位数相同</p><h4 id="按位-与" tabindex="-1"><a class="header-anchor" href="#按位-与" aria-hidden="true">#</a> <code>&amp;</code> 按位 与</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按位-或" tabindex="-1"><a class="header-anchor" href="#按位-或" aria-hidden="true">#</a> <code>|</code> 按位 或</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按位-异或" tabindex="-1"><a class="header-anchor" href="#按位-异或" aria-hidden="true">#</a> <code>^</code> 按位 异或</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="位清除" tabindex="-1"><a class="header-anchor" href="#位清除" aria-hidden="true">#</a> <code>&amp;^</code> 位清除</h4><p>将指定位置的值置 0</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">15</span> <span class="token operator">&amp;^</span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1011</span> <span class="token comment">// 1111 &amp;^ 0100 -&gt; 1011</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="一元运算符-按位补足" tabindex="-1"><a class="header-anchor" href="#一元运算符-按位补足" aria-hidden="true">#</a> <code>^</code> （一元运算符）按位补足</h4><p><code>^x</code> 表示为 <code>m^x</code>:</p><ul><li><code>x</code> 无符号，则<code>m</code>:全部位置1</li><li><code>x</code> 有符号，则 <code>m</code> 为 -1</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;int8&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a: %b\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;^a: %b\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">^</span>a<span class="token punctuation">)</span>
	<span class="token keyword">var</span> aa <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;aa %b\\n&quot;</span><span class="token punctuation">,</span> aa<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;^aa %b\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">^</span>aa<span class="token punctuation">)</span>
	
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;uint8&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> b <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;b %b\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;^b %b\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">^</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int8
 a: 00000010
^a: -0000011
 aa -0000010
^aa 00000001
uint8
 b 00000010
^b 11111101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="位左移" tabindex="-1"><a class="header-anchor" href="#位左移" aria-hidden="true">#</a> <code>&lt;&lt;</code> 位左移</h4><ul><li><code>X &lt;&lt; n</code>: 向左移动 <code>n</code> 位，右侧填充0。 相当于 <code>X </code> 乘以 2 的 n 次方</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token comment">// 1024</span>
<span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token comment">// 2048</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="位右移" tabindex="-1"><a class="header-anchor" href="#位右移" aria-hidden="true">#</a> <code>&gt;&gt;</code> 位右移</h4><ul><li><code>X &gt;&gt; n</code> ：向右移动 <code>n</code> 位，左侧填充0。 相当于 <code>X </code> 除以 2 的 n 次方</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">1024</span> <span class="token operator">&gt;&gt;</span> <span class="token number">10</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><p>使用位左移与 <code>iota</code> 计数配合可优雅地实现存储单位的常量枚举：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ByteSize <span class="token builtin">float64</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 通过赋值给空白标识符来忽略值</span>
	KB ByteSize <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>
	MB
	GB
	TB
	PB
	EB
	ZB
	YB
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在通讯中使用位左移表示标识的用例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> BitFlag <span class="token builtin">int</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Active BitFlag <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span> <span class="token comment">// 1 &lt;&lt; 0 == 1</span>
	Send <span class="token comment">// 1 &lt;&lt; 1 == 2</span>
	Receive <span class="token comment">// 1 &lt;&lt; 2 == 4</span>
<span class="token punctuation">)</span>

flag <span class="token operator">:=</span> Active <span class="token operator">|</span> Send <span class="token comment">// == 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><table><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>1 == 1 // true</td></tr><tr><td>!=</td><td>不等于</td><td>1 != 1 // false</td></tr><tr><td>&lt;</td><td>小于</td><td>1 &lt; 2 // true</td></tr><tr><td>&gt;</td><td>大于</td><td>1 &gt; 2 // false</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>1 &lt; 2 // true<br>2 &lt;= 2 // true</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>1 &gt;= 2 // false<br>2 &gt;= 2 // true</td></tr></tbody></table><h3 id="算数运算" tabindex="-1"><a class="header-anchor" href="#算数运算" aria-hidden="true">#</a> 算数运算</h3><table><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td></td></tr><tr><td>-</td><td>减</td><td></td></tr><tr><td>*</td><td>乘</td><td></td></tr><tr><td>/</td><td>除</td><td>- 整数不允许除以 0<br> - 浮点数除以 0.0 为 +Inf 正无穷</td></tr><tr><td>%</td><td>取余</td><td>9 % 4 // 1</td></tr><tr><td>++</td><td>递增</td><td>只能用于后缀，且不能作为表达式<br>n++ // OK<br>a := n++ // 无效</td></tr><tr><td>–-</td><td>递减</td><td>只能用于后缀，且不能作为表达式<br>n –-// OK<br>a := n– // 无效</td></tr></tbody></table><h2 id="_4-5-3-字符" tabindex="-1"><a class="header-anchor" href="#_4-5-3-字符" aria-hidden="true">#</a> 4.5.3 字符</h2><p>字符是整型的特殊用例。</p><ul><li><code>byte</code>: ASCII，<code>uint8</code> 别名</li><li><code>rune</code>: Unicode(UTF-8), <code>int32</code> 别名</li></ul>`,56),p=[o];function l(c,d){return a(),s("div",null,p)}const i=n(t,[["render",l],["__file","04.5.html.vue"]]);export{i as default};
