import{_ as o,Z as l,$ as p,a0 as s,a1 as n,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const c={},r=s("p",null,[s("s",null,"原标题：为什么Golang切片扩容基准是1024 以及 为什么v1.18之后改变了扩容公式，发现标题太长可以改成轻小说")],-1),m={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"},d={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/",target:"_blank",rel:"noopener noreferrer"},u=s("h2",{id:"_1-切片扩容公式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-切片扩容公式","aria-hidden":"true"},"#"),n(" 1. 切片扩容公式")],-1),h=s("code",null,"gov1.18",-1),g={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/slice.go#L162",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"runtime.growslice",-1),k=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// gov1.17 runtime/slice.go</span>

<span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
	doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
	<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
		newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>
			newcap <span class="token operator">=</span> doublecap
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
			<span class="token comment">// and prevent an infinite loop.</span>
			<span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Set newcap to the requested cap when</span>
			<span class="token comment">// the newcap calculation overflowed.</span>
			<span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可将上述代码段总结为以下公式，假设新容量为<code>N</code>，原容量为<code>OC</code>, 期望容量为<code>C</code>：</p>`,2),_={class:"katex"},b=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mi",null,"C")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"C"),s("mo",null,"≥"),s("mn",null,"2"),s("mo",null,"×"),s("mi",null,"O"),s("mi",null,"C")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"2"),s("mo",null,"×"),s("mi",null,"O"),s("mi",null,"C")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"O"),s("mi",null,"C"),s("mo",null,"<"),s("mn",null,"1024")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"O"),s("mi",null,"C"),s("mo",null,"×"),s("mn",null,"1.2"),s("msup",null,[s("mn",null,"5"),s("mi",null,"n")])])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"O"),s("mi",null,"C"),s("mo",null,"≥"),s("mn",null,"1024"),s("mo",{separator:"true"},","),s("mi",null,"O"),s("mi",null,"C"),s("mo",null,"×"),s("mn",null,"1.2"),s("msup",null,[s("mn",null,"5"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"<"),s("mi",null,"C"),s("mo",null,"≤"),s("mi",null,"O"),s("mi",null,"C"),s("mo",null,"×"),s("mn",null,"1.2"),s("msup",null,[s("mn",null,"5"),s("mi",null,"n")])])])])])])])]),s("annotation",{encoding:"application/x-tex"},"N=\\begin{cases}C & C \\ge 2\\times OC \\\\ 2\\times OC & OC \\lt 1024 \\\\ OC\\times 1.25^n & OC \\ge 1024, OC \\times1.25^{n-1} \\lt C \\le OC \\times 1.25^n \\end{cases}")])])],-1),y={class:"katex-html","aria-hidden":"true"},w=t('<span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1),f={class:"base"},x=s("span",{class:"strut",style:{height:"4.32em","vertical-align":"-1.91em"}},null,-1),z={class:"minner"},C={class:"mopen"},O={class:"delimsizing mult"},M={class:"vlist-t vlist-t2"},H={class:"vlist-r"},V={class:"vlist",style:{height:"2.35em"}},N=s("span",{style:{top:"-2.2em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎩")])],-1),j={style:{top:"-2.192em"}},R=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),S={style:{height:"0.316em",width:"0.8889em"}},Z={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},G=s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),L=[G],q=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎨")])],-1),B={style:{top:"-4.292em"}},Q=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),Y={style:{height:"0.316em",width:"0.8889em"}},A={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},I=s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),K=[I],U=s("span",{style:{top:"-4.6em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎧")])],-1),J=s("span",{class:"vlist-s"},"​",-1),E=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.85em"}},[s("span")])],-1),T=t('<span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1.2</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1024</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1024</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1.2</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1.2</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span>',2),F=s("p",null,"这里以 1024 作为扩容公式的基准（pivot），扩容公式发生改变。",-1),P=s("h2",{id:"_2-为什么是-1024",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-为什么是-1024","aria-hidden":"true"},"#"),n(" 2. 为什么是 1024")],-1),X=s("p",null,[s("s",null,"没有为什么，总得选个数字吧。")],-1),W=s("p",null,"因为 1024 是个不错的数字，比大部分切片的长度都要大。",-1),$={href:"https://groups.google.com/g/golang-nuts",target:"_blank",rel:"noopener noreferrer"},D={href:"https://groups.google.com/g/golang-nuts/c/UaVlMQ8Nz3o",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://en.wikipedia.org/wiki/Rob_Pike",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://zh.wikipedia.org/wiki/Google",target:"_blank",rel:"noopener noreferrer"},as={href:"https://zh.wikipedia.org/wiki/Go",target:"_blank",rel:"noopener noreferrer"},es={href:"https://zh.wikipedia.org/w/index.php?title=Sawzall_(programming_language),&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},ts=s("blockquote",null,[s("p",null,"What would you pick? You need to pick something."),s("p",null,"It was just arbitrary, I'm sure. 1024 is a nice number, and it's larger than the length of many slices."),s("p",null,"Sometimes a number is just a number.")],-1),ls=s("h2",{id:"_3-v1-18-之后的扩容公式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-v1-18-之后的扩容公式","aria-hidden":"true"},"#"),n(" 3. v1.18 之后的扩容公式")],-1),ps=s("code",null,"gov1.18",-1),os={href:"https://github.com/golang/go/blob/release-branch.go1.18/src/runtime/slice.go#L166",target:"_blank",rel:"noopener noreferrer"},is=s("code",null,"runtime.growSlice",-1),cs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
	doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
	<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
		newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>
		<span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> threshold <span class="token punctuation">{</span>
			newcap <span class="token operator">=</span> doublecap
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
			<span class="token comment">// and prevent an infinite loop.</span>
			<span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
				<span class="token comment">// Transition from growing 2x for small slices</span>
				<span class="token comment">// to growing 1.25x for large slices. This formula</span>
				<span class="token comment">// gives a smooth-ish transition between the two.</span>
				newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Set newcap to the requested cap when</span>
			<span class="token comment">// the newcap calculation overflowed.</span>
			<span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处变为了 <strong>256</strong>，并且大于等于 256 时，公式发生了改变。</p>`,2),rs=s("p",null,[n("每次"),s("strong",null,"增加量"),n("为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mtext",null,"新容量"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"×"),s("mtext",null,"阈值"),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"4")])]),s("annotation",{encoding:"application/x-tex"},"(\\text{新容量}+3\\times \\text{阈值})\\times \\frac{1}{4}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"新容量")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"阈值")]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"4")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),n("，直到大于或等于期望容量。")],-1),ms=s("h2",{id:"_4-为什么是这个公式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-为什么是这个公式","aria-hidden":"true"},"#"),n(" 4. 为什么是这个公式")],-1),ds={href:"https://go-review.googlesource.com/c/go/+/347917?tab=comments",target:"_blank",rel:"noopener noreferrer"},us=t(`<blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>use a somewhat smoother formula for the growth factor. Start reducing
the growth factor after 256 elements, but slowly.

starting cap    growth factor
	256             2.0
	512             1.63
	1024            1.44
	2048            1.35
	4096            1.30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>此公式会让切片容量的增长更加的平滑(Smoother)。</p><p>如下是提供的图表：</p><p>增长因子变化曲线</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250440283.png" alt="image-20230925044008056" tabindex="0" loading="lazy"><figcaption>image-20230925044008056</figcaption></figure><p>进行内存对齐(roundupsize)之后的曲线</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250441906.png" alt="image-20230925044135744" tabindex="0" loading="lazy"><figcaption>image-20230925044135744</figcaption></figure><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,8),hs={href:"https://groups.google.com/g/golang-nuts/c/UaVlMQ8Nz3o",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://go-review.googlesource.com/c/go/+/347917?tab=comments",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://docs.google.com/document/d/1JQvV6vyAYdHhIboY-zAwK06OXZjxHrUhOFeG38MuJ94/edit?resourcekey=0-L5OsHqwZZBxvjfK0dwsyVQ#heading=h.k26k09874o5u",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://archive.li/Z2R8w",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://go.googlesource.com/go/+/2dda92ff6f9f07eeb110ecbf0fc2d7a0ddd27f9d",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://wtf.hiigara.net/t/aaRKuc/golang",target:"_blank",rel:"noopener noreferrer"};function ys(ws,fs){const a=i("ExternalLinkIcon");return l(),p("div",null,[r,s("p",null,[n("在阅读了"),s("a",m,[n("Go 语言设计与实现"),e(a)]),n("的"),s("a",d,[n("3.2 切片实现原理"),e(a)]),n("之后，了解到切片的扩容机制和扩容公式，但是不明白为什么要选择这个公式，所以查找了资料并做下总结。")]),u,s("p",null,[n("在"),h,n("之前切片扩容代码如下（以1.17为例，"),s("a",g,[v,e(a)]),n("）：")]),k,s("p",null,[s("span",_,[b,s("span",y,[w,s("span",f,[x,s("span",z,[s("span",C,[s("span",O,[s("span",M,[s("span",H,[s("span",V,[N,s("span",j,[R,s("span",S,[(l(),p("svg",Z,L))])]),q,s("span",B,[Q,s("span",Y,[(l(),p("svg",A,K))])]),U]),J]),E])])]),T])])])])]),F,P,X,W,s("p",null,[n("我在 "),s("a",$,[n("golang-nuts"),e(a)]),n(" 找到了讨论 "),s("a",D,[n("slices grow at 25% after 1024 but why 1024?"),e(a)]),n("，以下是"),s("a",ss,[n("Rob Pike"),e(a)]),n("（"),s("a",ns,[n("Google"),e(a)]),n("的工程师，参与编程语言"),s("a",as,[n("Go"),e(a)]),n("与"),s("a",es,[n("Sawzall"),e(a)]),n("的研发工作）的回答：")]),ts,ls,s("p",null,[n("在"),ps,n("之后，公式发生了改变"),s("a",os,[is,e(a)]),n("：")]),cs,rs,ms,s("p",null,[n("根据"),s("a",ds,[n("347917: runtime: make slice growth formula a bit smoother | https://go-review.googlesource.com/c/go/+/347917"),e(a)]),n(" 的描述：")]),us,s("ol",null,[s("li",null,[s("a",hs,[n("https://groups.google.com/g/golang-nuts/c/UaVlMQ8Nz3o"),e(a)])]),s("li",null,[s("a",gs,[n("https://go-review.googlesource.com/c/go/+/347917?tab=comments"),e(a)])]),s("li",null,[s("a",vs,[n("https://docs.google.com/document/d/1JQvV6vyAYdHhIboY-zAwK06OXZjxHrUhOFeG38MuJ94/edit?resourcekey=0-L5OsHqwZZBxvjfK0dwsyVQ#heading=h.k26k09874o5u"),e(a)])]),s("li",null,[s("a",ks,[n("https://archive.li/Z2R8w"),e(a)])]),s("li",null,[s("a",_s,[n("https://go.googlesource.com/go/+/2dda92ff6f9f07eeb110ecbf0fc2d7a0ddd27f9d"),e(a)])]),s("li",null,[s("a",bs,[n("https://wtf.hiigara.net/t/aaRKuc/golang"),e(a)])])])])}const zs=o(c,[["render",ys],["__file","01.1.why_is_this_slicegrow_formula.html.vue"]]);export{zs as default};
