import{_ as e,Z as p,$ as o,a0 as n,a1 as s,a2 as c,a3 as a,H as l}from"./framework-09afcf0b.js";const i={},u=a('<h1 id="_6-3-传递变长参数" tabindex="-1"><a class="header-anchor" href="#_6-3-传递变长参数" aria-hidden="true">#</a> 6.3 传递变长参数</h1><p>若函数最后一个参数为<code>...type</code> 的形式，那么函数可以处理<strong>变长参数</strong>，长度可以为0，这样的函数被称为<strong>变参函数</strong>。</p><h2 id="相同参数类型" tabindex="-1"><a class="header-anchor" href="#相同参数类型" aria-hidden="true">#</a> 相同参数类型</h2><p>当变长参数类型相同时，可以：</p><ul><li>直接传入多个参数：<code>f(p1, p2, p3)</code></li><li>参数放在切片中，以<code>slice...</code>的形式传入</li></ul>',5),r={href:"https://github.com/dreamjz/golang-notes/tree/main/open-source-books/the-way-to-go/chapter-06/06_3_varnumpar.go",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">varnumpar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 0</span>
	s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>
	x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>s<span class="token operator">...</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	min <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		<span class="token keyword">if</span> v <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>
			min <span class="token operator">=</span> v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> min
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不同参数类型" tabindex="-1"><a class="header-anchor" href="#不同参数类型" aria-hidden="true">#</a> 不同参数类型</h2><p>两种方式：</p><ul><li><p>使用<code>struct</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Options <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    param1 type1<span class="token punctuation">,</span>
    param2 type2<span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用空接口 若边长参数类型没有指定，可以使用空接口<code>interface{}</code> 来接收任意类型的参数。 然后在函数内部通过<code>switch</code>对每个参数进行判断</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>values … <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> v <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span> …
			<span class="token keyword">case</span> float<span class="token punctuation">:</span> …
			<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span> …
			<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> …
			<span class="token keyword">default</span><span class="token punctuation">:</span> …
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,4);function k(v,m){const t=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("例：TODO: "),n("a",r,[s("06_3_varnumpar.go"),c(t)])]),d])}const g=e(i,[["render",k],["__file","06.3.html.vue"]]);export{g as default};
