import{_ as p,Z as o,$ as c,a0 as n,a2 as t,a1 as s,a3 as e,H as l}from"./framework-09afcf0b.js";const u={},i={href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"reflect",-1),k={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"reflect.TypeOf",-1),v={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"reflect.ValueOf",-1),m=n("p",null,"以及两个重要类型：",-1),g={href:"https://draveness.me/golang/tree/reflect.Type",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"reflect.Type",-1),h={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"reflect.Value",-1),y=e('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260250604.png" alt="golang-reflection" tabindex="0" loading="lazy"><figcaption>golang-reflection</figcaption></figure><h2 id="_4-3-1-反射的三大法则" tabindex="-1"><a class="header-anchor" href="#_4-3-1-反射的三大法则" aria-hidden="true">#</a> 4.3.1 反射的三大法则</h2><p>反射可以作为元编程方式减少代码，但是过多的反射会使得程序逻辑难以理解并运行缓慢。</p><p>Golang 的反射由三大法则：</p><ol><li>从<code>interface{}</code>变量可以反射出反射对象</li><li>从反射对象可以获取<code>interface{}</code>变量</li><li>要修改反射对象，其值必须可以设置</li></ol><h3 id="从interface-中可以反射出反射对象" tabindex="-1"><a class="header-anchor" href="#从interface-中可以反射出反射对象" aria-hidden="true">#</a> 从<code>interface{}</code>中可以反射出反射对象</h3>',6),w={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"reflect.TypeOf",-1),x={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"reflect.ValueOf",-1),O=n("strong",null,"入参",-1),T=n("code",null,"interface{}",-1),E=n("strong",null,"类型转换",-1),q=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260259103.png",alt:"golang-interface-to-reflection",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-interface-to-reflection")],-1),P=n("h3",{id:"从反射对象可以获取interface-变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#从反射对象可以获取interface-变量","aria-hidden":"true"},"#"),s(" 从反射对象可以获取"),n("code",null,"interface{}"),s("变量")],-1),S={href:"https://draveness.me/golang/tree/reflect.Value.Interface",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"reflect.Value.Interface",-1),N=n("code",null,"interface{}",-1),B=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260301496.png" alt="golang-reflection-to-interface" tabindex="0" loading="lazy"><figcaption>golang-reflection-to-interface</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260302014.png" alt="golang-bidirectional-reflection" tabindex="0" loading="lazy"><figcaption>golang-bidirectional-reflection</figcaption></figure><h3 id="要修改反射对象-其值必须可以设置" tabindex="-1"><a class="header-anchor" href="#要修改反射对象-其值必须可以设置" aria-hidden="true">#</a> 要修改反射对象，其值必须可以设置</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">1</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run reflect<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token builtin">panic</span><span class="token punctuation">:</span> reflect<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>mustBeAssignable using unaddressable value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 Golang 的参数都是值传递，那么得到的反射对象和原变量没有任何关系，无法修改原变量。</p><p>若想要修改原值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">1</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run reflect<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),z={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"reflect.ValueOf",-1),j={href:"https://draveness.me/golang/tree/reflect.Value.Elem",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"reflect.Value.Elem",-1),K={href:"https://draveness.me/golang/tree/reflect.Value.SetInt",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"reflect.Value.SetInt",-1),F=n("h2",{id:"_4-3-2-类型和值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-3-2-类型和值","aria-hidden":"true"},"#"),s(" 4.3.2 类型和值")],-1),G=n("h3",{id:"reflect-typeof",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reflect-typeof","aria-hidden":"true"},"#"),s(),n("code",null,"reflect.TypeOf")],-1),M=n("code",null,"interface{}",-1),$={href:"https://draveness.me/golang/tree/reflect.emptyInterface",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"reflect.emptyInterface",-1),Z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> emptyInterface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	typ  <span class="token operator">*</span>rtype
	word unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>typ</code>：表示变量的类型</li><li><code>word</code>: 表示底层的数据</li></ul>`,2),D={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"reflect.TypeOf",-1),Q=n("strong",null,"变量",-1),U={href:"https://draveness.me/golang/tree/reflect.emptyInterface",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"reflect.emptyInterface",-1),X=n("strong",null,"获取类型信息",-1),Y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Type <span class="token punctuation">{</span>
	eface <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>emptyInterface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">toType</span><span class="token punctuation">(</span>eface<span class="token punctuation">.</span>typ<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">toType</span><span class="token punctuation">(</span>t <span class="token operator">*</span>rtype<span class="token punctuation">)</span> Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),nn={href:"https://draveness.me/golang/tree/reflect.rtype",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"reflect.rtype",-1),an={href:"https://draveness.me/golang/tree/reflect.Type",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"reflect.Type",-1),en={href:"https://draveness.me/golang/tree/reflect.rtype.String",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"reflect.rtype.String",-1),on=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>rtype<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">nameOff</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>tflag<span class="token operator">&amp;</span>tflagExtraStar <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reflect-valueof" tabindex="-1"><a class="header-anchor" href="#reflect-valueof" aria-hidden="true">#</a> <code>reflect.ValueOf</code></h3>`,2),cn={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"reflect.ValueOf",-1),un=n("strong",null,"逃逸",-1),rn={href:"https://draveness.me/golang/tree/reflect.unpackEface",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"reflect.unpackEface",-1),dn={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"reflect.Value",-1),fn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ValueOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">escapes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token function">unpackEface</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">unpackEface</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	e <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyInterface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	t <span class="token operator">:=</span> e<span class="token punctuation">.</span>typ
	<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	f <span class="token operator">:=</span> <span class="token function">flag</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">ifaceIndir</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		f <span class="token operator">|=</span> flagIndir
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Value<span class="token punctuation">{</span>t<span class="token punctuation">,</span> e<span class="token punctuation">.</span>word<span class="token punctuation">,</span> f<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),mn={href:"https://draveness.me/golang/tree/reflect.unpackEface",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"reflect.unpackEface",-1),bn={href:"https://draveness.me/golang/tree/reflect.emptyInterface",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"reflect.emptyInterface",-1),_n={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"reflect.Value",-1),wn=n("code",null,"interface{}",-1),Vn={href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"reflect",-1),In=n("h2",{id:"_4-3-3-更新变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-3-3-更新变量","aria-hidden":"true"},"#"),s(" 4.3.3 更新变量")],-1),On={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"reflect.Value",-1),En={href:"https://draveness.me/golang/tree/reflect.Value.Set",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"reflect.Value.Set",-1),Pn={href:"https://draveness.me/golang/tree/reflect.flag.mustBeAssignable",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"reflect.flag.mustBeAssignable",-1),Cn={href:"https://draveness.me/golang/tree/reflect.flag.mustBeExported",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"reflect.flag.mustBeExported",-1),Bn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>x Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v<span class="token punctuation">.</span><span class="token function">mustBeAssignable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	x<span class="token punctuation">.</span><span class="token function">mustBeExported</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> target unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Interface <span class="token punctuation">{</span>
		target <span class="token operator">=</span> v<span class="token punctuation">.</span>ptr
	<span class="token punctuation">}</span>
	x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">assignTo</span><span class="token punctuation">(</span><span class="token string">&quot;reflect.Set&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>typ<span class="token punctuation">,</span> v<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> x<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),zn={href:"https://draveness.me/golang/tree/reflect.Value.assignTo",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"reflect.Value.assignTo",-1),jn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">assignTo</span><span class="token punctuation">(</span>context <span class="token builtin">string</span><span class="token punctuation">,</span> dst <span class="token operator">*</span>rtype<span class="token punctuation">,</span> target unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token function">directlyAssignable</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token operator">...</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span>dst<span class="token punctuation">,</span> v<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> fl<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token function">implements</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Interface <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> Value<span class="token punctuation">{</span>dst<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">flag</span><span class="token punctuation">(</span>Interface<span class="token punctuation">)</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		x <span class="token operator">:=</span> <span class="token function">valueInterface</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> dst<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span> x
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token function">ifaceE2I</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> x<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span>dst<span class="token punctuation">,</span> target<span class="token punctuation">,</span> flagIndir <span class="token operator">|</span> <span class="token function">flag</span><span class="token punctuation">(</span>Interface<span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>context <span class="token operator">+</span> <span class="token string">&quot;: value of type &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; is not assignable to type &quot;</span> <span class="token operator">+</span> dst<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ln={href:"https://draveness.me/golang/tree/reflect.Value.assignTo",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"reflect.Value.assignTo",-1),Rn={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"reflect.Value",-1),Gn=n("ul",null,[n("li",null,"若两个反射对象的类型是可以被直接替换，就会直接返回目标反射对象"),n("li",null,"若当前反射对象是接口并且目标对象实现了接口，就会把目标对象简单包装成接口值")],-1),Mn=n("h3",{id:"_4-3-4-实现协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-3-4-实现协议","aria-hidden":"true"},"#"),s(" 4.3.4 实现协议")],-1),$n={href:"https://draveness.me/golang/tree/reflect.rtype.Implements",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"reflect.rtype.Implements",-1),Zn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token keyword">interface</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> CustomError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>CustomError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typeOfError <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	customErrorPtr <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CustomError<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	customError <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>CustomError<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>customErrorPtr<span class="token punctuation">.</span><span class="token function">Implements</span><span class="token punctuation">(</span>typeOfError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; true</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>customError<span class="token punctuation">.</span><span class="token function">Implements</span><span class="token punctuation">(</span>typeOfError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>CustomError</code> 类型并没有实现 <code>error</code> 接口</li><li><code>*CustomError</code> 指针类型实现了 <code>error</code> 接口</li></ul>`,4),Dn={href:"https://draveness.me/golang/tree/reflect.rtype.Implements",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"reflect.rtype.Implements",-1),Qn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>rtype<span class="token punctuation">)</span> <span class="token function">Implements</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> u <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: nil type passed to Type.Implements&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> u<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Interface <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: non-interface type passed to Type.Implements&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">implements</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>rtype<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Un=n("li",null,"若传入的参数为空，触发panic",-1),Wn=n("li",null,"若传入的参数不是接口类型，触发panic",-1),Xn={href:"https://draveness.me/golang/tree/reflect.implements",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"reflect.implements",-1),ns=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">implements</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> V <span class="token operator">*</span>rtype<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>interfaceType<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	v <span class="token operator">:=</span> V<span class="token punctuation">.</span><span class="token function">uncommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	i <span class="token operator">:=</span> <span class="token number">0</span>
	vmethods <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>mcount<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
		tm <span class="token operator">:=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		tmName <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">nameOff</span><span class="token punctuation">(</span>tm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
		vm <span class="token operator">:=</span> vmethods<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
		vmName <span class="token operator">:=</span> V<span class="token punctuation">.</span><span class="token function">nameOff</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
		<span class="token keyword">if</span> vmName<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> tmName<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> V<span class="token punctuation">.</span><span class="token function">typeOff</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>mtyp<span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">typeOff</span><span class="token punctuation">(</span>tm<span class="token punctuation">.</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> i<span class="token operator">++</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若接口中不含任何方法，则是<strong>空接口</strong>，直接返回<code>true</code></li><li>遍历接口方法数组，判断是否实现了所有的接口，时间复杂度<code>O(n)</code></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260322296.png" alt="golang-type-implements-interface" tabindex="0" loading="lazy"><figcaption>golang-type-implements-interface</figcaption></figure><h2 id="_4-3-5-方法调用" tabindex="-1"><a class="header-anchor" href="#_4-3-5-方法调用" aria-hidden="true">#</a> 4.3.5 方法调用</h2><p>通过反射进行方法调用比较复杂：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>Add<span class="token punctuation">)</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	argv <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> argv <span class="token punctuation">{</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	result <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),ss={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"reflect.ValueOf",-1),ts=n("code",null,"Add",-1),es={href:"https://draveness.me/golang/tree/reflect.rtype.NumIn",target:"_blank",rel:"noopener noreferrer"},ps=n("code",null,"reflect.rtype.NumIn",-1),os={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"reflect.ValueOf",-1),ls=n("code",null,"argv",-1),us=n("code",null,"Add",-1),is={href:"https://draveness.me/golang/tree/reflect.Value.Call",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"reflect.Value.Call",-1),ks=n("li",null,"获取返回值数组、验证数组的长度以及类型并打印其中的数据",-1),ds={href:"https://draveness.me/golang/tree/reflect.Value.Call",target:"_blank",rel:"noopener noreferrer"},vs=n("code",null,"reflect.Value.Call",-1),fs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span>Value<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Value <span class="token punctuation">{</span>
	v<span class="token punctuation">.</span><span class="token function">mustBe</span><span class="token punctuation">(</span>Func<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">mustBeExported</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;Call&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时调用方法的入口：</p>`,2),ms=n("li",null,[n("code",null,"mustBe(Func)"),s(": 确保类型是函数")],-1),gs=n("li",null,[n("code",null,"mustBeExported()"),s(": 确保函数是导出的")],-1),bs={href:"https://draveness.me/golang/tree/reflect.Value.call",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"reflect.Value.call",-1),_s={href:"https://draveness.me/golang/tree/reflect.Value.call",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"reflect.Value.call",-1),ws=n("li",null,"检查输入参数以及类型的合法性",-1),Vs={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},xs=n("code",null,"reflect.Value",-1),Is=n("li",null,"通过函数指针和输入参数调用函数；",-1),Os=n("li",null,"从栈上获取函数的返回值",-1),Ts=e(`<h3 id="参数检查" tabindex="-1"><a class="header-anchor" href="#参数检查" aria-hidden="true">#</a> 参数检查</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>op <span class="token builtin">string</span><span class="token punctuation">,</span> in <span class="token punctuation">[</span><span class="token punctuation">]</span>Value<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Value <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>funcType<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>flag<span class="token operator">&amp;</span>flagMethod <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rcvr <span class="token operator">=</span> v
		rcvrtype<span class="token punctuation">,</span> t<span class="token punctuation">,</span> fn <span class="token operator">=</span> <span class="token function">methodReceiver</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span>flagMethodShift<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	n <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: Call with too few input arguments&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span> <span class="token operator">&gt;</span> n <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: Call with too many input arguments&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> xt<span class="token punctuation">,</span> targ <span class="token operator">:=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>xt<span class="token punctuation">.</span><span class="token function">AssignableTo</span><span class="token punctuation">(</span>targ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;reflect: &quot;</span> <span class="token operator">+</span> op <span class="token operator">+</span> <span class="token string">&quot; using &quot;</span> <span class="token operator">+</span> xt<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; as type &quot;</span> <span class="token operator">+</span> targ<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Es=n("code",null,"unsafe.Pointer",-1),qs={href:"https://draveness.me/golang/tree/reflect.methodReceiver",target:"_blank",rel:"noopener noreferrer"},Ps=n("code",null,"reflect.methodReceiver",-1),Ss=n("li",null,"检查传入参数的个数以及参数的类型与函数签名中的类型是否可以匹配，任何参数的不匹配都会导致整个程序的崩溃中止",-1),Cs=e(`<h3 id="准备参数" tabindex="-1"><a class="header-anchor" href="#准备参数" aria-hidden="true">#</a> 准备参数</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>nout <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	frametype<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> retOffset<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> framePool <span class="token operator">:=</span> <span class="token function">funcLayout</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> rcvrtype<span class="token punctuation">)</span>

	<span class="token keyword">var</span> args unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">if</span> nout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		args <span class="token operator">=</span> framePool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		args <span class="token operator">=</span> <span class="token function">unsafe_New</span><span class="token punctuation">(</span>frametype<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	off <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> rcvrtype <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">storeRcvr</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
		off <span class="token operator">=</span> ptrSize
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">{</span>
		targ <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>rtype<span class="token punctuation">)</span>
		a <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>align<span class="token punctuation">)</span>
		off <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
		n <span class="token operator">:=</span> targ<span class="token punctuation">.</span>size
		<span class="token operator">...</span>
		addr <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> off<span class="token punctuation">,</span> <span class="token string">&quot;n &gt; 0&quot;</span><span class="token punctuation">)</span>
		v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">assignTo</span><span class="token punctuation">(</span><span class="token string">&quot;reflect.Value.Call&quot;</span><span class="token punctuation">,</span> targ<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">=</span> v<span class="token punctuation">.</span>ptr
		off <span class="token operator">+=</span> n
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ns={href:"https://draveness.me/golang/tree/reflect.funcLayout",target:"_blank",rel:"noopener noreferrer"},Bs=n("code",null,"reflect.funcLayout",-1),zs=n("li",null,[s("如果当前函数有返回值，需要为当前函数的参数和返回值分配一片内存空间 "),n("code",null,"args")],-1),As=n("li",null,[s("如果当前函数是方法，需要向将方法的接收接收者者拷贝到 "),n("code",null,"args"),s(" 内存中")],-1),js=n("code",null,"args",-1),Ls={href:"https://draveness.me/golang/tree/reflect.funcLayout",target:"_blank",rel:"noopener noreferrer"},Ks=n("code",null,"reflect.funcLayout",-1),Rs=n("li",null,"将参数拷贝到内存空间中",-1),Fs=n("h3",{id:"调用函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#调用函数","aria-hidden":"true"},"#"),s(" 调用函数")],-1),Gs={href:"https://draveness.me/golang/tree/reflect.reflectcall",target:"_blank",rel:"noopener noreferrer"},Ms=n("code",null,"reflect.reflectcall",-1),$s=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Hs={href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-reflect/",target:"_blank",rel:"noopener noreferrer"};function Zs(Ds,Js){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[n("a",i,[r,t(a)]),s("实现了运行时反射，有两对非常重要的函数：")]),n("ol",null,[n("li",null,[n("a",k,[d,t(a)]),s(" 能获取类型信息")]),n("li",null,[n("a",v,[f,t(a)]),s(" 能获取数据的运行时表示")])]),m,n("ol",null,[n("li",null,[n("a",g,[b,t(a)]),s("：接口类型")]),n("li",null,[n("a",h,[_,t(a)]),s("：结构体类型")])]),y,n("p",null,[n("a",w,[V,t(a)]),s("和"),n("a",x,[I,t(a)]),s("的"),O,s("都是"),T,s("类型，在方法调用的过程中，会发生隐式的"),E,s("。")]),q,P,n("p",null,[n("a",S,[C,t(a)]),s("可以将反射变量转换成"),N,s("变量。")]),B,n("ol",null,[n("li",null,[n("a",z,[A,t(a)]),s("传入变量的指针")]),n("li",null,[n("a",j,[L,t(a)]),s("获取指针指向的变量")]),n("li",null,[n("a",K,[R,t(a)]),s("更新变量的值")])]),F,G,n("p",null,[M,s("在反射中使用"),n("a",$,[H,t(a)]),s("表示：")]),Z,n("p",null,[n("a",D,[J,t(a)]),s("函数会将传入的"),Q,s("转换成"),n("a",U,[W,t(a)]),s("并"),X,s("：")]),Y,n("p",null,[n("a",nn,[sn,t(a)]),s("实现了"),n("a",an,[tn,t(a)]),s("接口，其"),n("a",en,[pn,t(a)]),s("方法可以返回类型的名称：")]),on,n("p",null,[n("a",cn,[ln,t(a)]),s("会将当前值"),un,s("到堆上，然后通过"),n("a",rn,[kn,t(a)]),s("获取"),n("a",dn,[vn,t(a)]),s("：")]),fn,n("p",null,[n("a",mn,[gn,t(a)]),s(" 会将传入的接口转换成 "),n("a",bn,[hn,t(a)]),s("，然后将具体类型和指针包装成 "),n("a",_n,[yn,t(a)]),s(" 结构体后返回。")]),n("p",null,[s("上述的类型转换，会在编译期间完成，将变量转换成"),wn,s("并等待运行期间使用 "),n("a",Vn,[xn,t(a)]),s(" 包获取接口中存储的信息。")]),In,n("p",null,[s("更新 "),n("a",On,[Tn,t(a)]),s(" 时，就需要调用 "),n("a",En,[qn,t(a)]),s(" 更新反射对象，该方法会调用")]),n("ul",null,[n("li",null,[n("a",Pn,[Sn,t(a)]),s(" 检查当前反射对象是否可以被设置")]),n("li",null,[n("a",Cn,[Nn,t(a)]),s(" 检查字段是否对外公开")])]),Bn,n("p",null,[n("a",zn,[An,t(a)]),s("会返回一个新的反射对象，这个返回的反射对象指针会直接覆盖原反射变量。")]),jn,n("p",null,[n("a",Ln,[Kn,t(a)]),s(" 会根据当前和被设置的反射对象类型创建一个新的 "),n("a",Rn,[Fn,t(a)]),s(" 结构体：")]),Gn,Mn,n("p",null,[n("a",$n,[Hn,t(a)]),s("可以用于判断是否实现了特定的接口，使用方式：")]),Zn,n("p",null,[n("a",Dn,[Jn,t(a)]),s(":")]),Qn,n("ul",null,[Un,Wn,n("li",null,[s("调用"),n("a",Xn,[Yn,t(a)])])]),ns,n("ul",null,[n("li",null,[s("通过 "),n("a",ss,[as,t(a)]),s(" 获取函数 "),ts,s(" 对应的反射对象")]),n("li",null,[s("调用 "),n("a",es,[ps,t(a)]),s(" 获取函数的入参个数")]),n("li",null,[s("多次调用 "),n("a",os,[cs,t(a)]),s(" 函数逐一设置 "),ls,s(" 数组中的各个参数")]),n("li",null,[s("调用反射对象 "),us,s(" 的 "),n("a",is,[rs,t(a)]),s(" 方法并传入参数列表")]),ks]),n("p",null,[s("其中"),n("a",ds,[vs,t(a)])]),fs,n("ul",null,[ms,gs,n("li",null,[s("调用"),n("a",bs,[hs,t(a)])])]),n("p",null,[n("a",_s,[ys,t(a)]),s("将分为几个流程：")]),n("ol",null,[ws,n("li",null,[s("将传入的 "),n("a",Vs,[xs,t(a)]),s(" 参数数组设置到栈上")]),Is,Os]),Ts,n("ul",null,[n("li",null,[s("从反射对象中取出当前的函数指针 "),Es,s("，如果该函数指针是方法，那么我们会通过 "),n("a",qs,[Ps,t(a)]),s(" 获取方法的接收者和函数指针")]),Ss]),Cs,n("ol",null,[n("li",null,[s("通过 "),n("a",Ns,[Bs,t(a)]),s(" 计算当前函数需要的参数和返回值的栈布局，也就是每一个参数和返回值所占的空间大小；")]),zs,As,n("li",null,[s("将所有函数的参数按照顺序依次拷贝到对应 "),js,s(" 内存中 "),n("ol",null,[n("li",null,[s("使用 "),n("a",Ls,[Ks,t(a)]),s(" 返回的参数计算参数在内存中的位置")]),Rs])])]),Fs,n("p",null,[s("准备好调用函数需要的全部参数后向函数"),n("a",Gs,[Ms,t(a)]),s(" 传入栈类型、函数指针、参数和返回值的内存空间、栈的大小以及返回值的偏移量。")]),$s,n("ol",null,[n("li",null,[s("‘"),n("a",Hs,[s("https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-reflect/"),t(a)])])])])}const Us=p(u,[["render",Zs],["__file","4.3.reflect.html.vue"]]);export{Us as default};
