const e=JSON.parse(`{"key":"v-355c08bf","path":"/note/golang/open-source-books/the-way-to-go/06/06.1.html","title":"6.1 介绍","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.1.1 类型","slug":"_6-1-1-类型","link":"#_6-1-1-类型","children":[]},{"level":2,"title":"6.1.2 函数签名","slug":"_6-1-2-函数签名","link":"#_6-1-2-函数签名","children":[]}],"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"note/golang/open-source-books/the-way-to-go/06/06.1.md","excerpt":"<h1> 6.1 介绍</h1>\\n<p>编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的任务（那就是函数）来解决。而且，同一个任务（函数）可以被调用多次，有助于代码重用。</p>\\n<p>好的程序是非常注意 DRY 原则的，即不要重复你自己 (Don't Repeat Yourself)，意思是执行特定任务的代码只能在程序里面出现一次。</p>\\n<p>Go 不允许函数重载，即同名函数。</p>\\n<h2> 6.1.1 类型</h2>\\n<ul>\\n<li>普通的带有名字的函数</li>\\n<li>匿名函数或lambda函数</li>\\n<li>方法(Methods)</li>\\n</ul>"}`);export{e as data};
