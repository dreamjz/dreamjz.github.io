import{_ as p,Z as i,$ as o,a0 as n,a1 as s,a2 as e,a3 as t,H as c}from"./framework-dee406ed.js";const l={},r=t(`<h2 id="_1-introduction" tabindex="-1"><a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a> 1. Introduction</h2><p>TypeScript is a syntactic superset of JavaScript that adds <strong>static typing</strong>.</p><p>TypeScript uses <strong>compile time type checking</strong>, which means it checks if the specified types match before running the code, not while running the code.</p><h2 id="_2-compiler" tabindex="-1"><a class="header-anchor" href="#_2-compiler" aria-hidden="true">#</a> 2. Compiler</h2><p>TypeScript is transpiled into JavaScript using a compiler, which means Typescript can run anywhere that JavaScript runs.</p><h3 id="_2-1-installation" tabindex="-1"><a class="header-anchor" href="#_2-1-installation" aria-hidden="true">#</a> 2.1 Installation</h3><p>Using <code>npm</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run compiler:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-configuration" tabindex="-1"><a class="header-anchor" href="#_2-2-configuration" aria-hidden="true">#</a> 2.2 Configuration</h3>`,11),d=n("code",null,"tsconfig.json",-1),u={href:"https://www.typescriptlang.org/tsconfig",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>Create file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-run-code-in-command-line" tabindex="-1"><a class="header-anchor" href="#_2-3-run-code-in-command-line" aria-hidden="true">#</a> 2.3 Run code in command line</h3><h4 id="compile-to-js" tabindex="-1"><a class="header-anchor" href="#compile-to-js" aria-hidden="true">#</a> Compile to <code>.js</code></h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc ./foo.ts
$ <span class="token function">node</span> ./foo.js 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="using-ts-node" tabindex="-1"><a class="header-anchor" href="#using-ts-node" aria-hidden="true">#</a> Using <code>ts-node</code></h4><p>Install ts-node:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> ts-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run ts code:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ts-node ./foo.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-syntax" tabindex="-1"><a class="header-anchor" href="#_3-syntax" aria-hidden="true">#</a> 3. Syntax</h2><h3 id="_3-1-hello-world" tabindex="-1"><a class="header-anchor" href="#_3-1-hello-world" aria-hidden="true">#</a> 3.1 Hello World</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ts-node ./hello_world.ts
Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-comment" tabindex="-1"><a class="header-anchor" href="#_3-2-comment" aria-hidden="true">#</a> 3.2 Comment</h3><p>两种注释：</p><ul><li><p><strong>单行</strong>： <code>//</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// This is a single-line comment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>多行</strong>：<code>/* */</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/*
* This is a
* multi-line comment
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-variable" tabindex="-1"><a class="header-anchor" href="#_4-variable" aria-hidden="true">#</a> 4. Variable</h2><h3 id="_4-1-命名规则" tabindex="-1"><a class="header-anchor" href="#_4-1-命名规则" aria-hidden="true">#</a> 4.1 命名规则</h3><ul><li>可以包含字母和数字</li><li>除下划线<code>_</code>和<code>$</code>外不能含其他特殊字符</li><li>不能以数字开头</li></ul><h3 id="_4-2-声明" tabindex="-1"><a class="header-anchor" href="#_4-2-声明" aria-hidden="true">#</a> 4.2 声明</h3><p><strong>声明变量类型及初始值</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> variable_name<span class="token operator">:</span> data_type <span class="token operator">=</span> val
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>声明变量并赋值，自动推断类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> variable_name <span class="token operator">=</span> val
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>声明变量，不赋值</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> varible_name<span class="token operator">:</span> data_type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-作用域" tabindex="-1"><a class="header-anchor" href="#_4-3-作用域" aria-hidden="true">#</a> 4.3 作用域</h3><ul><li>全局： 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用</li><li>类：这个变量也可以称为 <strong>字段</strong>。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</li><li>局部：局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> global_num <span class="token operator">=</span> <span class="token number">12</span>          <span class="token comment">// 全局变量</span>
<span class="token keyword">class</span> <span class="token class-name">Numbers</span> <span class="token punctuation">{</span> 
   num_val <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>             <span class="token comment">// 实例变量</span>
   <span class="token keyword">static</span> sval <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">// 静态变量</span>
   
   <span class="token function">storeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span> 
      <span class="token keyword">var</span> local_num <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token comment">// 局部变量</span>
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;全局变量为: &quot;</span><span class="token operator">+</span>global_num<span class="token punctuation">)</span>  
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Numbers<span class="token punctuation">.</span>sval<span class="token punctuation">)</span>   <span class="token comment">// 静态变量</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;实例变量: &quot;</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>num_val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-operator" tabindex="-1"><a class="header-anchor" href="#_5-operator" aria-hidden="true">#</a> 5. Operator</h2><h3 id="_5-1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_5-1-算术运算符" aria-hidden="true">#</a> 5.1 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>x + y</td></tr><tr><td>-</td><td>减法</td><td>x - y</td></tr><tr><td>*</td><td>乘法</td><td>x * y</td></tr><tr><td>/</td><td>除法</td><td>x / y</td></tr><tr><td>%</td><td>取余</td><td>x % y</td></tr><tr><td>++</td><td>自增</td><td>x++ (<code>x++</code>整体值为 <code>x</code>)<br>++x(<code>++x</code>整体值为 <code>x+1</code>)</td></tr><tr><td>--</td><td>自减</td><td>x--<br>--x</td></tr></tbody></table><h3 id="_5-2-关系运算" tabindex="-1"><a class="header-anchor" href="#_5-2-关系运算" aria-hidden="true">#</a> 5.2 关系运算</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>x == y</td></tr><tr><td>!=</td><td>不等于</td><td>x != y</td></tr><tr><td>&gt;</td><td>大于</td><td>x &gt; y</td></tr><tr><td>&lt;</td><td>小于</td><td>x &lt; y</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>x &gt;= y</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>x &lt;= y</td></tr></tbody></table><h3 id="_5-3-逻辑运算" tabindex="-1"><a class="header-anchor" href="#_5-3-逻辑运算" aria-hidden="true">#</a> 5.3 逻辑运算</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>x &amp;&amp; y</td></tr><tr><td>||</td><td>逻辑或</td><td>x || y</td></tr><tr><td>!</td><td>逻辑非</td><td>!x</td></tr></tbody></table><ul><li><code>&amp;&amp;</code>: 短路运算，当之前的表达式值为 false，不执行后面的表达式</li><li><code>||</code>: 短路运算，当之前的表达式值为 true，不执行后面的表达式</li></ul><h3 id="_5-4-位运算" tabindex="-1"><a class="header-anchor" href="#_5-4-位运算" aria-hidden="true">#</a> 5.4 位运算</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>x &amp; y</td></tr><tr><td>|</td><td>按位或</td><td>x | y</td></tr><tr><td>~</td><td>取反</td><td>~x</td></tr><tr><td>^</td><td>异或</td><td>x ^ y</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>x &lt;&lt; 10</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>x &gt;&gt; 10</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>x &gt;&gt;&gt; 10</td></tr></tbody></table><h3 id="_5-5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-5-赋值运算符" aria-hidden="true">#</a> 5.5 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>x = 1</td></tr><tr><td>+=</td><td>先加后赋值</td><td>x += 1 // x = x+1</td></tr><tr><td>-=</td><td>先减后赋值</td><td>x -= 1 // x = x - 1</td></tr><tr><td>*=</td><td>先乘后赋值</td><td>x *= 1 // x = x * 1</td></tr><tr><td>/=</td><td>先除后赋值</td><td>x /= 2 // x = x / 2</td></tr></tbody></table><h3 id="_5-6-三元运算符" tabindex="-1"><a class="header-anchor" href="#_5-6-三元运算符" aria-hidden="true">#</a> 5.6 三元运算符</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>bool_exp <span class="token operator">?</span> exp1 <span class="token operator">:</span> exp2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>bool_exp</code>: 布尔表达式</li><li><code>exp1</code>：布尔表达式为 true，返回该值</li><li><code>exp2</code>：布尔表达式为 false，返回该值</li></ul><h3 id="_5-7-类型运算符" tabindex="-1"><a class="header-anchor" href="#_5-7-类型运算符" aria-hidden="true">#</a> 5.7 类型运算符</h3><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h4><p>返回变量的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">12</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h4><p>instanceof 运算符用于判断对象是否为指定的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> 
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">var</span> isPerson <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isPerson<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-type" tabindex="-1"><a class="header-anchor" href="#_6-type" aria-hidden="true">#</a> 6. Type</h2><table><thead><tr><th>数据类型</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>任意</td><td>any</td><td>类型为<code>any</code>的变量可以赋予任意类型的值</td></tr><tr><td>数字</td><td>number</td><td>双精度 64 位浮点数，可用于表示任意整数和浮点数</td></tr><tr><td>字符串</td><td>string</td><td>字符序列</td></tr><tr><td>布尔</td><td>bool</td><td>true / false</td></tr><tr><td>枚举</td><td>enum</td><td>定于数值集合</td></tr><tr><td>void</td><td>void</td><td>标识函数返回值类型为无返回值</td></tr><tr><td>null</td><td>null</td><td>表示对象缺失，表示空对象的引用</td></tr><tr><td>undefined</td><td>undefined</td><td>用于初始化变量为一个未定义的值</td></tr><tr><td>never</td><td>never</td><td>表示从不会出现的值</td></tr></tbody></table><h3 id="_6-1-never" tabindex="-1"><a class="header-anchor" href="#_6-1-never" aria-hidden="true">#</a> 6.1 never</h3><p>never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。这意味着声明为 never 类型的变量只能被 never 类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环），示例代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token comment">// 编译错误，数字类型不能转为 never 类型</span>
x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token comment">// 运行正确，never 类型可以赋值给 never类型</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;exception&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行正确，never 类型可以赋值给 数字类型</span>
y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;exception&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 返回值为 never 的函数可以是抛出异常的情况</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span>
<span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-enum" tabindex="-1"><a class="header-anchor" href="#_6-2-enum" aria-hidden="true">#</a> 6.2 enum</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>
    <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>
    <span class="token constant">C</span>  <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个值默认为0，后续依次加一。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>
    <span class="token constant">C</span>  <span class="token comment">// 4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-control-flow-statements" tabindex="-1"><a class="header-anchor" href="#_7-control-flow-statements" aria-hidden="true">#</a> 7. Control flow statements</h2><h3 id="_7-1-if-else" tabindex="-1"><a class="header-anchor" href="#_7-1-if-else" aria-hidden="true">#</a> 7.1 if-else</h3><p><strong>if</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>bool_exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>if-else</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>bool_exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>if-else-if</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>bool_exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>boo_exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">...</span>
<span class="token operator">...</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-switch" tabindex="-1"><a class="header-anchor" href="#_7-2-switch" aria-hidden="true">#</a> 7.2 switch</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> cond1<span class="token operator">:</span>
        <span class="token comment">// ...</span>
    <span class="token keyword">case</span> cond2<span class="token operator">:</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// break</span>
    <span class="token operator">...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>case 块默认是 <code>fallthrough </code>的，使用<code>break</code>来结束运行。</p><h3 id="_7-3-loop" tabindex="-1"><a class="header-anchor" href="#_7-3-loop" aria-hidden="true">#</a> 7.3 Loop</h3><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>init<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for-in</h4><p>用于迭代集合</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for-of</h4><p>for...of 允许你遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代的数据结构等。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;abcd&quot;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// a b c d</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while" aria-hidden="true">#</a> do-while</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue" aria-hidden="true">#</a> break / continue</h4><ul><li><code>break</code> 跳出循环和 <code>switch</code></li><li><code>continue</code>: 跳过本次循环</li></ul><h2 id="_8-function" tabindex="-1"><a class="header-anchor" href="#_8-function" aria-hidden="true">#</a> 8. Function</h2><h3 id="_8-1-定义" tabindex="-1"><a class="header-anchor" href="#_8-1-定义" aria-hidden="true">#</a> 8.1 定义</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">function_name</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> data_type<span class="token punctuation">,</span> param2<span class="token operator">:</span> data_type <span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">:</span> data_type<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-可选参数" tabindex="-1"><a class="header-anchor" href="#_8-2-可选参数" aria-hidden="true">#</a> 8.2 可选参数</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>b?</code> ：表示<code>b</code>为可选参数</li></ul><p>可选参数必须在必选参数<strong>之后</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;F1:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>  <span class="token string">&quot; b: &quot;</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a:  A  b:  undefined
a:  A  b:  B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-参数默认值" tabindex="-1"><a class="header-anchor" href="#_8-3-参数默认值" aria-hidden="true">#</a> 8.3 参数默认值</h3><p>若参数设置了默认值，则在调用函数时，若不传入该参数，则使用默认值。</p><p>含默认值的参数必须在必选参数<strong>之后</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;F2:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>  <span class="token string">&quot; b: &quot;</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span>
<span class="token punctuation">}</span> 

<span class="token function">f2</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a:  A  b:  b
a:  A  b:  B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-变长参数" tabindex="-1"><a class="header-anchor" href="#_8-4-变长参数" aria-hidden="true">#</a> 8.4 变长参数</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">func_name</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> data_type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
1
2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5-匿名函数" tabindex="-1"><a class="header-anchor" href="#_8-5-匿名函数" aria-hidden="true">#</a> 8.5 匿名函数</h3><p>匿名函数是一个没有函数名的函数。</p><p>匿名函数在程序运行时动态声明，除了没有函数名外，其他的与标准函数一样。</p><p>可以将匿名函数赋值给一个变量，这种表达式就成为函数表达式。</p><h3 id="_8-6-构造函数" tabindex="-1"><a class="header-anchor" href="#_8-6-构造函数" aria-hidden="true">#</a> 8.6 构造函数</h3><p>TypeScript 也支持使用 JavaScript 内置的构造函数 Function() 来定义函数：</p><p>语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var res = new Function ([arg1[, arg2[, ...argN]],] functionBody)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><strong>arg1, arg2, ... argN</strong>：参数列表。</li><li><strong>functionBody</strong>：一个含有包括函数定义的 JavaScript 语句的字符串。</li></ul><h3 id="_8-7-lambda-函数" tabindex="-1"><a class="header-anchor" href="#_8-7-lambda-函数" aria-hidden="true">#</a> 8.7 Lambda 函数</h3><p>Lambda 函数也称之为箭头函数。</p><p>箭头函数表达式的语法比函数表达式更短。</p><p>函数只有一行语句：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>( [param1, param2,…param n] )=&gt;statement;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-8-函数重载" tabindex="-1"><a class="header-anchor" href="#_8-8-函数重载" aria-hidden="true">#</a> 8.8 函数重载</h3><p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><h2 id="_9-array" tabindex="-1"><a class="header-anchor" href="#_9-array" aria-hidden="true">#</a> 9. Array</h2><p>数组是类型相同元素组成的集合。</p><h3 id="_9-1-声明" tabindex="-1"><a class="header-anchor" href="#_9-1-声明" aria-hidden="true">#</a> 9.1 声明</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> identifier<span class="token operator">:</span> data_type<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-2-初始化" tabindex="-1"><a class="header-anchor" href="#_9-2-初始化" aria-hidden="true">#</a> 9.2 初始化</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">var</span> strarr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-array-对象" tabindex="-1"><a class="header-anchor" href="#_9-3-array-对象" aria-hidden="true">#</a> 9.3 Array 对象</h3><p>可使用 <code>Array</code>创建数组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 长度为 4 的空数组</span>
<span class="token keyword">var</span> arr_names<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  
<span class="token comment">// 直接使用元素初始化</span>
<span class="token keyword">var</span> sites<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Taobao&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Facebook&quot;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-解构" tabindex="-1"><a class="header-anchor" href="#_9-4-解构" aria-hidden="true">#</a> 9.4 解构</h3><p>将数组元素直接赋值给变量：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> arr2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> arr2
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;x: &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token string">&quot; y: &quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// x:  1  y:  2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5-多维数组" tabindex="-1"><a class="header-anchor" href="#_9-5-多维数组" aria-hidden="true">#</a> 9.5 多维数组</h3><p>数组作为数组元素</p><h2 id="_10-map" tabindex="-1"><a class="header-anchor" href="#_10-map" aria-hidden="true">#</a> 10. Map</h2><p>Map 对象保存键值对，并且能够记住键的原始插入顺序。</p><p>任何值(对象或者原始值) 都可以作为一个键或一个值。</p><p>Map 是 ES6 中引入的一种新的数据结构</p><p>TypeScript 使用 Map 类型和 new 关键字来创建 Map：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化 Map，可以以数组的格式来传入键值对：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Map 相关的函数与属性：</p><ul><li><strong>map.clear()</strong> – 移除 Map 对象的所有键/值对 。</li><li><strong>map.set()</strong> – 设置键值对，返回该 Map 对象。</li><li><strong>map.get()</strong> – 返回键对应的值，如果不存在，则返回 undefined。</li><li><strong>map.has()</strong> – 返回一个布尔值，用于判断 Map 中是否包含键对应的值。</li><li><strong>map.delete()</strong> – 删除 Map 中的元素，删除成功返回 true，失败返回 false。</li><li><strong>map.size</strong> – 返回 Map 对象键/值对的数量。</li><li><strong>map.keys()</strong> - 返回一个 Iterator 对象， 包含了 Map 对象中每个元素的键 。</li><li><strong>map.values()</strong> – 返回一个新的Iterator对象，包含了Map对象中每个元素的值 。</li></ul><h2 id="_11-tuple" tabindex="-1"><a class="header-anchor" href="#_11-tuple" aria-hidden="true">#</a> 11. Tuple</h2><p>元组中允许存储不同类型的元素，元组可以作为参数传递给函数。</p><p>创建元组的语法格式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> tuple_name <span class="token operator">=</span> <span class="token punctuation">[</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span>…value n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_12-union-types" tabindex="-1"><a class="header-anchor" href="#_12-union-types" aria-hidden="true">#</a> 12. Union Types</h2><p>联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</p><p><strong>注意</strong>：只能赋值指定的类型，如果赋值其它类型就会报错。</p><p>创建联合类型的语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Type1|Type2|Type3...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span>
foo <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
foo <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// foo = true // cannot compile</span>

<span class="token keyword">var</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-interface" tabindex="-1"><a class="header-anchor" href="#_13-interface" aria-hidden="true">#</a> 13. Interface</h2><p>接口是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的类去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法。</p><p>TypeScript 接口定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">interface_name</span> <span class="token punctuation">{</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 使用联合类型</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    sayHi<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hi&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// A</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment">// 1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hi</span>

<span class="token keyword">var</span> b<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span>
    sayHi<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hi&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-1-继承" tabindex="-1"><a class="header-anchor" href="#_13-1-继承" aria-hidden="true">#</a> 13.1 继承</h3><p>使用<code>extends</code>继承接口，可以继承多个接口</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>interface_1 <span class="token keyword">extends</span> <span class="token class-name">interface_2</span><span class="token punctuation">,</span> interface_3<span class="token punctuation">,</span> interface_4 <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_14-class" tabindex="-1"><a class="header-anchor" href="#_14-class" aria-hidden="true">#</a> 14. Class</h2><p>定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">class_name</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字段</span>
    <span class="token operator">...</span>
    <span class="token comment">// 构造函数</span>
    <span class="token operator">...</span>
    <span class="token comment">// 方法</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类可以包含以下几个模块（类的数据成员）：</p><ul><li><strong>字段</strong> − 字段是类里面声明的变量。字段表示对象的有关数据。</li><li><strong>构造函数</strong> − 类实例化时调用，可以为类的对象分配内存。</li><li><strong>方法</strong> − 方法为对象要执行的操作。</li></ul><h3 id="_14-1-实例化" tabindex="-1"><a class="header-anchor" href="#_14-1-实例化" aria-hidden="true">#</a> 14.1 实例化</h3><p>我们使用 new 关键字来实例化类的对象，语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var object_name = new class_name([ arguments ])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span> 
   <span class="token comment">// 字段</span>
   engine<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> 
   
   <span class="token comment">// 构造函数</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span>engine<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine 
   <span class="token punctuation">}</span>  
   
   <span class="token comment">// 方法</span>
   <span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span> 
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;函数中显示发动机型号  :   &quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>engine<span class="token punctuation">)</span> 
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
 
<span class="token comment">// 创建一个对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;XXSY1&quot;</span><span class="token punctuation">)</span>
 
<span class="token comment">// 访问字段</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读取发动机型号 :  &quot;</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>engine<span class="token punctuation">)</span>  
 
<span class="token comment">// 访问方法</span>
obj<span class="token punctuation">.</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2-类的继承" tabindex="-1"><a class="header-anchor" href="#_14-2-类的继承" aria-hidden="true">#</a> 14.2 类的继承</h3><p>TypeScript 支持继承类，即我们可以在创建类的时候继承一个已存在的类，这个已存在的类称为父类，继承它的类称为子类。</p><p>类继承使用关键字 <strong>extends</strong>，子类除了不能继承父类的私有成员(方法和属性)和构造函数，其他的都可以继承。</p><p>TypeScript 一次只能继承一个类，不支持继承多个类，但 TypeScript 支持多重继承（A 继承 B，B 继承 C）。</p><p>语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class child_class_name extends parent_class_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_14-3-继承类的方法重写" tabindex="-1"><a class="header-anchor" href="#_14-3-继承类的方法重写" aria-hidden="true">#</a> 14.3 继承类的方法重写</h3><p>类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p><p>其中 super 关键字是对父类的直接引用，该关键字可以引用父类的属性和方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">PrinterClass</span> <span class="token punctuation">{</span> 
   <span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;父类的 doPrint() 方法。&quot;</span><span class="token punctuation">)</span> 
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
 
<span class="token keyword">class</span> <span class="token class-name">StringPrinter</span> <span class="token keyword">extends</span> <span class="token class-name">PrinterClass</span> <span class="token punctuation">{</span> 
   <span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span> 
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用父类的函数</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;子类的 doPrint()方法。&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-4-static" tabindex="-1"><a class="header-anchor" href="#_14-4-static" aria-hidden="true">#</a> 14.4 static</h3><p>static 关键字用于定义类的数据成员（属性和方法）为静态的，静态成员可以直接通过类名调用。</p><h3 id="_14-5-访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#_14-5-访问控制修饰符" aria-hidden="true">#</a> 14.5 访问控制修饰符</h3><p>TypeScript 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。TypeScript 支持 3 种不同的访问权限。</p><ul><li><strong>public（默认）</strong> : 公有，可以在任何地方被访问。</li><li><strong>protected</strong> : 受保护，可以被其自身以及其子类访问。</li><li><strong>private</strong> : 私有，只能被其定义所在的类访问。</li></ul><h3 id="_14-6-类和接口" tabindex="-1"><a class="header-anchor" href="#_14-6-类和接口" aria-hidden="true">#</a> 14.6 类和接口</h3><p>类可以实现接口，使用关键字 implements，并将 interest 字段作为类的属性使用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ILoan</span> <span class="token punctuation">{</span> 
   interest<span class="token operator">:</span><span class="token builtin">number</span> 
<span class="token punctuation">}</span> 
 
<span class="token keyword">class</span> <span class="token class-name">AgriLoan</span> <span class="token keyword">implements</span> <span class="token class-name">ILoan</span> <span class="token punctuation">{</span> 
   interest<span class="token operator">:</span><span class="token builtin">number</span> 
   rebate<span class="token operator">:</span><span class="token builtin">number</span> 
   
   <span class="token function">constructor</span><span class="token punctuation">(</span>interest<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>rebate<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">this</span><span class="token punctuation">.</span>interest <span class="token operator">=</span> interest 
      <span class="token keyword">this</span><span class="token punctuation">.</span>rebate <span class="token operator">=</span> rebate 
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
 
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AgriLoan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;利润为 : &quot;</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>interest<span class="token operator">+</span><span class="token string">&quot;，抽成为 : &quot;</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>rebate <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-namespace" tabindex="-1"><a class="header-anchor" href="#_15-namespace" aria-hidden="true">#</a> 15. Namespace</h2><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p><p>TypeScript 中命名空间使用 <strong>namespace</strong> 来定义，语法格式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> SomeNameSpaceName <span class="token punctuation">{</span> 
   <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterfaceName</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeClassName</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-moudule" tabindex="-1"><a class="header-anchor" href="#_16-moudule" aria-hidden="true">#</a> 16. Moudule</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。</p><p>我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的。</p><p>模块导出使用关键字 <strong>export</strong> 关键字，语法格式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 文件名 : SomeInterface.ts </span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SomeInterface</span> <span class="token punctuation">{</span> 
   <span class="token comment">// 代码部分</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在另外一个文件使用该模块就需要使用 <strong>import</strong> 关键字来导入:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> someInterfaceRef <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./SomeInterface&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_17-声明文件" tabindex="-1"><a class="header-anchor" href="#_17-声明文件" aria-hidden="true">#</a> 17. 声明文件</h2><p>TypeScript 作为 JavaScript 的超集，在开发过程中不可避免要引用其他第三方的 JavaScript 的库。虽然通过直接引用可以调用库的类和方法，但是却无法使用TypeScript 诸如类型检查等特性功能。为了解决这个问题，需要将这些库里的函数和方法体去掉后只保留导出类型声明，而产生了一个描述 JavaScript 库和模块信息的声明文件。通过引用这个声明文件，就可以借用 TypeScript 的各种特性来使用库文件了。</p><h3 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件</h3><p>声明文件以 <strong>.d.ts</strong> 为后缀，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>runoob.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明文件或模块的语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>declare module Module_Name {
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 引入声明文件语法格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &lt;reference path = &quot; runoob.d.ts&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,217),v={href:"https://www.w3schools.com/typescript/index.php",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.runoob.com/typescript/ts-tutorial.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://stackoverflow.com/questions/33535879/how-to-run-typescript-files-from-command-line",target:"_blank",rel:"noopener noreferrer"};function h(g,y){const a=c("ExternalLinkIcon");return i(),o("div",null,[r,n("p",null,[s("The compiler can be configured using "),d,s(". (Learn more at "),n("a",u,[s("https://www.typescriptlang.org/tsconfig"),e(a)]),s(" )")]),k,n("ol",null,[n("li",null,[n("p",null,[n("a",v,[s("Typescript Tutorial"),e(a)]),s(" W3schools")])]),n("li",null,[n("p",null,[n("a",m,[s("Typescript 教程"),e(a)]),s(" 菜鸟教程")])]),n("li",null,[n("p",null,[n("a",b,[s("How to run TypeScript files from command line?"),e(a)]),s(" stackoverflow")])])])])}const x=p(l,[["render",h],["__file","quick_start.html.vue"]]);export{x as default};
