import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as i}from"./framework-09afcf0b.js";const l={},r=e(`<h2 id="_7-3-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_7-3-1-设计原理" aria-hidden="true">#</a> 7.3.1 设计原理</h2><p>栈内存一般由编译器<strong>自动分配</strong>和<strong>释放</strong>，其中存储着函数的入参以及局部变量，这些参数会随着函数的创建而创建，函数的返回而消亡。</p><h3 id="寄存器" tabindex="-1"><a class="header-anchor" href="#寄存器" aria-hidden="true">#</a> 寄存器</h3><p>寄存器是 CPU 中的稀缺资源,存储能力非常有限，但是能提供最快的读写速度，充分利用寄存器的速度可以构建高性能的应用程序。</p><p>栈寄存器是 CPU 寄存器中的一种，它的主要作用是跟踪函数的调用栈，Go 语言的汇编代码包含 BP 和 SP 两个栈寄存器，分别存储了栈的<strong>基址指针</strong>和<strong>栈顶</strong>的地址，BP 和 SP 之间的内存就是当前函数的调用栈。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030626446.png" alt="stack-registers" tabindex="0" loading="lazy"><figcaption>stack-registers</figcaption></figure><p><strong>栈区内存</strong>都是从<strong>高地址</strong>向<strong>低地址</strong>扩展的，当应用程序<strong>申请</strong>或者<strong>释放</strong>栈内存时只需要<strong>修改 SP</strong> 寄存器的值，这种线性的内存分配方式与堆内存相比更加快速，仅会带来极少的额外开销。</p><h3 id="线程栈" tabindex="-1"><a class="header-anchor" href="#线程栈" aria-hidden="true">#</a> 线程栈</h3><p>在 Linux 操作系统中执行 <code>pthread_create</code> 系统调用，进程会启动一个新的线程，如果用户没有通过软资源限制 <code>RLIMIT_STACK</code> 指定线程栈的大小，那么操作系统会根据架构选择不同的默认栈大小。</p><h3 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析" aria-hidden="true">#</a> 逃逸分析</h3><p>在 C 语言和 C++ 这类需要<strong>手动管理内存</strong>的编程语言中，将对象或者结构体分配到栈上或者堆上是由工程师自主决定的，但是手动分配内存会导致如下的两个问题：</p><ol><li>若不需要分配到堆上的对象分配到了堆上：浪费内存空间</li><li>需要分配到堆上的对象分配到了栈上：悬挂指针、影响内存安全</li></ol><p>在 C 语言中，栈上的变量被函数作为返回值返回给调用方是一个常见的错误，在如下所示的代码中，栈上的变量 <code>i</code> 被错误返回：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">dangling_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>dangling_pointer</code> 函数返回后，它的本地变量会被编译器回收，调用方获取的是危险的悬挂指针，我们不确定当前指针指向的值是否合法时，这种问题在大型项目中是比较难以发现和定位的。</p><p>在编译器优化中，<strong>逃逸分析</strong>是用来决定指针动态作用域的方法。</p><p>Go 语言的编译器使用逃逸分析决定哪些变量应该在栈上分配，哪些变量应该在堆上分配，其中包括使用 <code>new</code>、<code>make</code> 和字面量等方法隐式分配的内存，Go 语言的逃逸分析遵循以下两个不变性：</p><ol><li>指向栈对象的指针不能存在于堆中</li><li>指向栈对象的指针不能在栈对象回收后存活</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030631782.png" alt="escape-analysis-and-key-invariants" tabindex="0" loading="lazy"><figcaption>escape-analysis-and-key-invariants</figcaption></figure><p>逃逸分析是静态分析的一种，在编译器解析了 Go 语言源文件后，它可以获得整个程序的抽象语法树（Abstract syntax tree，AST），编译器可以根据抽象语法树分析静态的数据流，我们会通过以下几个步骤实现静态分析的全过程：</p>`,20),u={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.EscLocation",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"cmd/compile/internal/gc.EscLocation",-1),k={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.EscEdge",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"cmd/compile/internal/gc.EscEdge",-1),g=n("li",null,"遍历对象分配图并查找违反两条不变性的变量分配关系，如果堆上的变量指向了栈上的变量，那么该变量需要分配在堆上；",-1),v=n("li",null,"记录从函数的调用参数到堆以及返回值的数据流，增强函数参数的逃逸分析",-1),h=e('<h3 id="栈内存空间" tabindex="-1"><a class="header-anchor" href="#栈内存空间" aria-hidden="true">#</a> 栈内存空间</h3><p>Go 语言使用<strong>用户态线程</strong> <strong>Goroutine</strong> 作为执行上下文，它的额外开销和默认栈大小都比线程小很多，然而 Goroutine 的栈内存空间和栈结构也在早期几个版本中发生过一些变化：</p><ol><li>v1.0 ~ v1.1 — 最小栈内存空间为 4KB</li><li>v1.2 — 将最小栈内存提升到了 8KB</li><li>v1.3 — 使用<strong>连续栈</strong>替换之前版本的分段栈</li><li>v1.4 — 将最小栈内存降低到了 2KB</li></ol><h4 id="分段栈" tabindex="-1"><a class="header-anchor" href="#分段栈" aria-hidden="true">#</a> 分段栈</h4><p>分段栈是 Go 语言在 v1.3 版本之前的实现。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030634643.png" alt="segmented-stacks" tabindex="0" loading="lazy"><figcaption>segmented-stacks</figcaption></figure><p>分段栈机制虽然能够按需为当前 Goroutine 分配内存并且及时减少内存的占用，但是它也存在两个比较大的问题：</p><ol><li>如果当前 Goroutine 的栈几乎充满，那么任意的函数调用都会触发栈扩容，当函数返回后又会触发栈的收缩，如果在一个循环中调用函数，栈的分配和释放就会造成巨大的额外开销，这被称为热分裂问题（Hot split）；</li><li>一旦 Goroutine 使用的内存<strong>越过</strong>了分段栈的扩缩容阈值，运行时会触发栈的扩容和缩容，带来额外的工作量；</li></ol><h4 id="连续栈" tabindex="-1"><a class="header-anchor" href="#连续栈" aria-hidden="true">#</a> 连续栈</h4><p>连续栈可以解决分段栈中存在的两个问题，其<strong>核心原理</strong>是每当程序的栈空间不足时，初始化一片更大的栈空间并将原栈中的所有值都迁移到新栈中，新的局部变量或者函数调用就有充足的内存空间。</p><p>使用连续栈机制时，栈空间不足导致的扩容会经历以下几个步骤：</p><ol><li>在内存空间中分配更大的栈内存空间；</li><li>将旧栈中的所有内容复制到新栈中；</li><li><strong>将指向旧栈对应变量的指针重新指向新栈</strong>；</li><li>销毁并回收旧栈的内存空间；</li></ol><p>在扩容的过程中，最重要的是调整指针的第三步，这一步能够保证指向栈的指针的正确性，因为栈中的所有变量内存都会发生变化，所以原本指向栈中变量的指针也需要调整。我们在前面提到过经过逃逸分析的 Go 语言程序的遵循以下不变性 —— <strong>指向栈对象的指针不能存在于堆中</strong>，所以指向栈中变量的指针只能在栈上，我们只需要调整栈中的所有变量就可以保证内存的安全了。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030635755.png" alt="continuous-stacks" tabindex="0" loading="lazy"><figcaption>continuous-stacks</figcaption></figure><h2 id="_7-3-2-栈操作" tabindex="-1"><a class="header-anchor" href="#_7-3-2-栈操作" aria-hidden="true">#</a> 7.3.2 栈操作</h2>',15),_={href:"https://draveness.me/golang/tree/runtime.stack",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"runtime.stack",-1),f=n("code",null,"[lo, hi)",-1),y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> stack <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	lo <span class="token builtin">uintptr</span>
	hi <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="栈初始化" tabindex="-1"><a class="header-anchor" href="#栈初始化" aria-hidden="true">#</a> 栈初始化</h3>`,2),w={href:"https://draveness.me/golang/tree/runtime.stackpool",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"runtime.stackpool",-1),j={href:"https://draveness.me/golang/tree/runtime.stackLarge",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.stackLarge",-1),z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> stackpool <span class="token punctuation">[</span>_NumStackOrders<span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
	item stackpoolItem
	<span class="token boolean">_</span>    <span class="token punctuation">[</span>cpu<span class="token punctuation">.</span>CacheLinePadSize <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>stackpoolItem<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">%</span>cpu<span class="token punctuation">.</span>CacheLinePadSize<span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> stackpoolItem <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu   mutex
	span mSpanList
<span class="token punctuation">}</span>

<span class="token keyword">var</span> stackLarge <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	lock mutex
	free <span class="token punctuation">[</span>heapAddrBits <span class="token operator">-</span> pageShift<span class="token punctuation">]</span>mSpanList
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.mspan",-1),P={href:"https://draveness.me/golang/tree/runtime.stackinit",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.stackinit",-1),B=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">stackinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> stackpool <span class="token punctuation">{</span>
		stackpool<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>span<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> stackLarge<span class="token punctuation">.</span>free <span class="token punctuation">{</span>
		stackLarge<span class="token punctuation">.</span>free<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.mcache",-1),K=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mcache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	stackcache <span class="token punctuation">[</span>_NumStackOrders<span class="token punctuation">]</span>stackfreelist
<span class="token punctuation">}</span>

<span class="token keyword">type</span> stackfreelist <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	list gclinkptr
	size <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030638403.png" alt="stack-memory" tabindex="0" loading="lazy"><figcaption>stack-memory</figcaption></figure>`,2),I={href:"https://draveness.me/golang/tree/runtime.stackpool",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.stackpool",-1),A={href:"https://draveness.me/golang/tree/runtime.stackLarge",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.stackLarge",-1),V=n("h3",{id:"栈分配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈分配","aria-hidden":"true"},"#"),s(" 栈分配")],-1),H={href:"https://draveness.me/golang/tree/runtime.malg",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.malg",-1),O={href:"https://draveness.me/golang/tree/runtime.stackalloc",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"runtime.stackalloc",-1),U=n("li",null,"如果栈空间较小，使用全局栈缓存或者线程缓存上固定大小的空闲链表分配内存；",-1),F={href:"https://draveness.me/golang/tree/runtime.stackLarge",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime.stackLarge",-1),$={href:"https://draveness.me/golang/tree/runtime.stackLarge",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.stackLarge",-1),J=n("h3",{id:"栈扩容",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈扩容","aria-hidden":"true"},"#"),s(" 栈扩容")],-1),Q={href:"https://draveness.me/golang/tree/cmd/internal/obj/x86.stacksplit",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"cmd/internal/obj/x86.stacksplit",-1),X={href:"https://draveness.me/golang/tree/runtime.morestack",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.morestack",-1),nn={href:"https://draveness.me/golang/tree/runtime.newstack",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"runtime.newstack",-1),an=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thisg <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> thisg<span class="token punctuation">.</span>m<span class="token punctuation">.</span>curg
	<span class="token operator">...</span>
	preempt <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">Loaduintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>stackguard0<span class="token punctuation">)</span> <span class="token operator">==</span> stackPreempt
	<span class="token keyword">if</span> preempt <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">canPreemptM</span><span class="token punctuation">(</span>thisg<span class="token punctuation">.</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			gp<span class="token punctuation">.</span>stackguard0 <span class="token operator">=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo <span class="token operator">+</span> _StackGuard
			<span class="token function">gogo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>sched<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	sp <span class="token operator">:=</span> gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp
	<span class="token keyword">if</span> preempt <span class="token punctuation">{</span>
		<span class="token keyword">if</span> gp<span class="token punctuation">.</span>preemptShrink <span class="token punctuation">{</span>
			gp<span class="token punctuation">.</span>preemptShrink <span class="token operator">=</span> <span class="token boolean">false</span>
			<span class="token function">shrinkstack</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> gp<span class="token punctuation">.</span>preemptStop <span class="token punctuation">{</span>
			<span class="token function">preemptPark</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token function">gopreempt_m</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),tn={href:"https://draveness.me/golang/tree/runtime.newstack",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.newstack",-1),on={href:"https://draveness.me/golang/tree/runtime.gogo",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.gogo",-1),cn={href:"https://draveness.me/golang/tree/runtime.scanstack",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"runtime.scanstack",-1),rn={href:"https://draveness.me/golang/tree/runtime.shrinkstack",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.shrinkstack",-1),dn={href:"https://draveness.me/golang/tree/runtime.suspendG",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"runtime.suspendG",-1),mn={href:"https://draveness.me/golang/tree/runtime.preemptPark",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.preemptPark",-1),vn=n("code",null,"_Gpreempted",-1),hn={href:"https://draveness.me/golang/tree/runtime.gopreempt_m",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"runtime.gopreempt_m",-1),bn=e(`<p>如果当前 Goroutine 不需要被抢占，意味着我们需要新的栈空间来支持函数调用和本地变量的初始化，运行时会先检查目标大小的栈是否会溢出：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	oldsize <span class="token operator">:=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi <span class="token operator">-</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo
	newsize <span class="token operator">:=</span> oldsize <span class="token operator">*</span> <span class="token number">2</span>
	<span class="token keyword">if</span> newsize <span class="token operator">&gt;</span> maxstacksize <span class="token punctuation">{</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: goroutine stack exceeds &quot;</span><span class="token punctuation">,</span> maxstacksize<span class="token punctuation">,</span> <span class="token string">&quot;-byte limit\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: sp=&quot;</span><span class="token punctuation">,</span> <span class="token function">hex</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot; stack=[&quot;</span><span class="token punctuation">,</span> <span class="token function">hex</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">,</span> <span class="token function">hex</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;]\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;stack overflow&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Grunning<span class="token punctuation">,</span> _Gcopystack<span class="token punctuation">)</span>
	<span class="token function">copystack</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span>
	<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Gcopystack<span class="token punctuation">,</span> _Grunning<span class="token punctuation">)</span>
	<span class="token function">gogo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>sched<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),fn=n("code",null,"_Gcopystack",-1),yn={href:"https://draveness.me/golang/tree/runtime.copystack",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"runtime.copystack",-1),xn={href:"https://draveness.me/golang/tree/runtime.stackalloc",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"runtime.stackalloc",-1),Gn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">copystack</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> newsize <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	old <span class="token operator">:=</span> gp<span class="token punctuation">.</span>stack
	used <span class="token operator">:=</span> old<span class="token punctuation">.</span>hi <span class="token operator">-</span> gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp

	<span class="token builtin">new</span> <span class="token operator">:=</span> <span class="token function">stackalloc</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新栈的初始化和数据的复制是一个比较简单的过程，不过这不是整个过程中最复杂的地方，我们还需要将指向源栈中内存指向新的栈，在这期间我们需要分别调整以下的指针：</p>`,2),zn={href:"https://draveness.me/golang/tree/runtime.adjustsudogs",target:"_blank",rel:"noopener noreferrer"},Ln=n("code",null,"runtime.adjustsudogs",-1),Sn={href:"https://draveness.me/golang/tree/runtime.syncadjustsudogs",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime.syncadjustsudogs",-1),qn={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Bn=n("code",null,"runtime.sudog",-1),Cn={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.memmove",-1),Kn={href:"https://draveness.me/golang/tree/runtime.adjustctxt",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.adjustctxt",-1),Nn={href:"https://draveness.me/golang/tree/runtime.adjustdefers",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.adjustdefers",-1),Tn={href:"https://draveness.me/golang/tree/runtime.adjustpanics",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime.adjustpanics",-1),Hn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">copystack</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> newsize <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> adjinfo adjustinfo
	adjinfo<span class="token punctuation">.</span>old <span class="token operator">=</span> old
	adjinfo<span class="token punctuation">.</span>delta <span class="token operator">=</span> <span class="token builtin">new</span><span class="token punctuation">.</span>hi <span class="token operator">-</span> old<span class="token punctuation">.</span>hi <span class="token comment">// 计算新栈和旧栈之间内存地址差</span>

	ncopy <span class="token operator">:=</span> used
	<span class="token keyword">if</span> <span class="token operator">!</span>gp<span class="token punctuation">.</span>activeStackChans <span class="token punctuation">{</span>
		<span class="token function">adjustsudogs</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adjinfo<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		adjinfo<span class="token punctuation">.</span>sghi <span class="token operator">=</span> <span class="token function">findsghi</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> old<span class="token punctuation">)</span>
		ncopy <span class="token operator">-=</span> <span class="token function">syncadjustsudogs</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> used<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adjinfo<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">memmove</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">.</span>hi<span class="token operator">-</span>ncopy<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>hi<span class="token operator">-</span>ncopy<span class="token punctuation">)</span><span class="token punctuation">,</span> ncopy<span class="token punctuation">)</span>

	<span class="token function">adjustctxt</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adjinfo<span class="token punctuation">)</span>
	<span class="token function">adjustdefers</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adjinfo<span class="token punctuation">)</span>
	<span class="token function">adjustpanics</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adjinfo<span class="token punctuation">)</span>

	gp<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token builtin">new</span>
	gp<span class="token punctuation">.</span>stackguard0 <span class="token operator">=</span> <span class="token builtin">new</span><span class="token punctuation">.</span>lo <span class="token operator">+</span> _StackGuard
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp <span class="token operator">=</span> <span class="token builtin">new</span><span class="token punctuation">.</span>hi <span class="token operator">-</span> used
	gp<span class="token punctuation">.</span>stktopsp <span class="token operator">+=</span> adjinfo<span class="token punctuation">.</span>delta
	<span class="token operator">...</span>
	<span class="token function">stackfree</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Mn={href:"https://draveness.me/golang/tree/runtime.adjustpointer",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"runtime.adjustpointer",-1),Rn={href:"https://draveness.me/golang/tree/runtime.adjustinfo",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime.adjustinfo",-1),Fn={href:"https://draveness.me/golang/tree/runtime.stackfree",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"runtime.stackfree",-1),$n=n("h3",{id:"栈缩容",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈缩容","aria-hidden":"true"},"#"),s(" 栈缩容")],-1),Dn={href:"https://draveness.me/golang/tree/runtime.shrinkstack",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"runtime.shrinkstack",-1),Qn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">shrinkstack</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	oldsize <span class="token operator">:=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi <span class="token operator">-</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo
	newsize <span class="token operator">:=</span> oldsize <span class="token operator">/</span> <span class="token number">2</span>
	<span class="token keyword">if</span> newsize <span class="token operator">&lt;</span> _FixedStack <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	avail <span class="token operator">:=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi <span class="token operator">-</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>lo
	<span class="token keyword">if</span> used <span class="token operator">:=</span> gp<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi <span class="token operator">-</span> gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp <span class="token operator">+</span> _StackLimit<span class="token punctuation">;</span> used <span class="token operator">&gt;=</span> avail<span class="token operator">/</span><span class="token number">4</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token function">copystack</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要触发栈的缩容，新栈的大小会是原始栈的一半，不过如果新栈的大小低于程序的最低限制 2KB，那么缩容的过程就会停止。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030641576.png" alt="shrink-stacks" tabindex="0" loading="lazy"><figcaption>shrink-stacks</figcaption></figure>`,3),Wn={href:"https://draveness.me/golang/tree/runtime.copystack",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"runtime.copystack",-1),Yn=n("h3",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),ns={href:"https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-stack-management/",target:"_blank",rel:"noopener noreferrer"};function ss(as,ts){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("ol",null,[n("li",null,[s("构建带权重的有向图，其中顶点 "),n("a",u,[d,t(a)]),s(" 表示被分配的变量，边 "),n("a",k,[m,t(a)]),s(" 表示变量之间的分配关系，权重表示寻址和取地址的次数；")]),g,v]),h,n("p",null,[s("Go 语言中的执行栈由 "),n("a",_,[b,t(a)]),s(" 表示，该结构体中只包含两个字段，分别表示栈的顶部和栈的底部，每个栈结构体都表示范围为 "),f,s(" 的内存空间：")]),y,n("p",null,[s("栈空间在运行时中包含两个重要的全局变量，分别是 "),n("a",w,[x,t(a)]),s(" 和 "),n("a",j,[G,t(a)]),s("，这两个变量分别表示全局的栈缓存和大栈缓存，前者可以分配小于 32KB 的内存，后者用来分配大于 32KB 的栈空间：")]),z,n("p",null,[s("这两个用于分配空间的全局变量都与内存管理单元 "),n("a",L,[S,t(a)]),s(" 有关，我们可以认为 Go 语言的栈内存都是分配在堆上的，运行时初始化会调用 "),n("a",P,[q,t(a)]),s(" 初始化这些全局变量：")]),B,n("p",null,[s("如果运行时只使用全局变量来分配内存的话，会造成线程之间的锁竞争进而影响程序的执行效率，栈内存由于与线程关系比较密切，所以我们在每一个线程缓存 "),n("a",C,[E,t(a)]),s(" 中都加入了栈缓存减少锁竞争影响。")]),K,n("p",null,[s("运行时使用全局的 "),n("a",I,[N,t(a)]),s(" 和线程缓存中的空闲链表分配 32KB 以下的栈内存，使用全局的 "),n("a",A,[T,t(a)]),s(" 和堆内存分配 32KB 以上的栈内存，提高本地分配栈内存的性能。")]),V,n("p",null,[s("运行时会在 Goroutine 的初始化函数 "),n("a",H,[M,t(a)]),s(" 中调用 "),n("a",O,[R,t(a)]),s(" 分配一个大小足够栈内存空间，根据线程缓存和申请栈的大小，该函数会通过三种不同的方法分配栈空间：")]),n("ol",null,[U,n("li",null,[s("如果栈空间较大，从全局的大栈缓存 "),n("a",F,[Z,t(a)]),s(" 中获取内存空间；")]),n("li",null,[s("如果栈空间较大并且 "),n("a",$,[D,t(a)]),s(" 空间不足，在堆上申请一片大小足够内存空间；")])]),J,n("p",null,[s("编译器会在 "),n("a",Q,[W,t(a)]),s(" 中为函数调用插入 "),n("a",X,[Y,t(a)]),s(" 运行时检查，它会在几乎所有的函数调用之前检查当前 Goroutine 的栈内存是否充足，如果当前栈需要扩容，我们会保存一些栈的相关信息并调用 "),n("a",nn,[sn,t(a)]),s(" 创建新的栈：")]),an,n("p",null,[n("a",tn,[en,t(a)]),s(" 会先做一些准备工作并检查当前 Goroutine 是否发出了抢占请求，如果发出了抢占请求：")]),n("ol",null,[n("li",null,[s("当前线程可以被抢占时，直接调用 "),n("a",on,[pn,t(a)]),s(" 触发调度器的调度；")]),n("li",null,[s("如果当前 Goroutine 在垃圾回收被 "),n("a",cn,[ln,t(a)]),s(" 标记成了需要收缩栈，调用 "),n("a",rn,[un,t(a)]),s("；")]),n("li",null,[s("如果当前 Goroutine 被 "),n("a",dn,[kn,t(a)]),s(" 函数挂起，调用 "),n("a",mn,[gn,t(a)]),s(" 被动让出当前处理器的控制权并将 Goroutine 的状态修改至 "),vn,s("；")]),n("li",null,[s("调用 "),n("a",hn,[_n,t(a)]),s(" 主动让出当前处理器的控制权；")])]),bn,n("p",null,[s("如果目标栈的大小没有超出程序的限制，我们会将 Goroutine 切换至 "),fn,s(" 状态并调用 "),n("a",yn,[wn,t(a)]),s(" 开始栈拷贝。在拷贝栈内存之前，运行时会通过 "),n("a",xn,[jn,t(a)]),s(" 分配新的栈空间：")]),Gn,n("ol",null,[n("li",null,[s("调用 "),n("a",zn,[Ln,t(a)]),s(" 或者 "),n("a",Sn,[Pn,t(a)]),s(" 调整 "),n("a",qn,[Bn,t(a)]),s(" 结构体的指针；")]),n("li",null,[s("调用 "),n("a",Cn,[En,t(a)]),s(" 将源栈中的整片内存拷贝到新的栈中；")]),n("li",null,[s("调用 "),n("a",Kn,[In,t(a)]),s("、"),n("a",Nn,[An,t(a)]),s(" 和 "),n("a",Tn,[Vn,t(a)]),s(" 调整剩余 Goroutine 相关数据结构的指针；")])]),Hn,n("p",null,[s("调整指向栈内存的指针都会调用 "),n("a",Mn,[On,t(a)]),s("，该函数会利用 "),n("a",Rn,[Un,t(a)]),s(" 计算的新栈和旧栈之间的内存地址差来调整指针。所有的指针都被调整后，我们就可以更新 Goroutine 的几个变量并通过 "),n("a",Fn,[Zn,t(a)]),s(" 释放原始栈的内存空间了。")]),$n,n("p",null,[n("a",Dn,[Jn,t(a)]),s(" 栈缩容时调用的函数：")]),Qn,n("p",null,[s("运行时只会在栈内存使用不足 1/4 时进行缩容，缩容也会调用扩容时使用的 "),n("a",Wn,[Xn,t(a)]),s(" 开辟新的栈空间。")]),Yn,n("ol",null,[n("li",null,[n("a",ns,[s("https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-stack-management/"),t(a)])])])])}const os=o(l,[["render",ss],["__file","07.3.stackmem.html.vue"]]);export{os as default};
