const n=JSON.parse('{"key":"v-320e8b4e","path":"/note/golang/open-source-books/advanced-go-programming/04.1.html","title":"04.1 RPC","lang":"zh-CN","frontmatter":{"title":"04.1 RPC","date":"2021-12-20T00:00:00.000Z","category":["golang","rpc"],"timeline":true},"headers":[{"level":2,"title":"4.1 RPC","slug":"_4-1-rpc","link":"#_4-1-rpc","children":[{"level":3,"title":"4.1.1 Hello World","slug":"_4-1-1-hello-world","link":"#_4-1-1-hello-world","children":[]},{"level":3,"title":"4.1.2  更安全的 RPC 接口","slug":"_4-1-2-更安全的-rpc-接口","link":"#_4-1-2-更安全的-rpc-接口","children":[]},{"level":3,"title":"4.1.3 跨语言 RPC","slug":"_4-1-3-跨语言-rpc","link":"#_4-1-3-跨语言-rpc","children":[]},{"level":3,"title":"4.1.4 HTTP 上的 RPC","slug":"_4-1-4-http-上的-rpc","link":"#_4-1-4-http-上的-rpc","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1682668422000},"readingTime":{"minutes":5.77,"words":1732},"filePathRelative":"note/golang/open-source-books/advanced-go-programming/04.1.md","localizedDate":"2021年12月20日","excerpt":"<h2> 4.1 RPC</h2>\\n<p>RPC( Remote Procedure Call ) 远程过程调用，是分布式系统中不同节点之间流行的通信方式。在互联时代 RPC 和 IPC (Inter-process communication, 进程间通讯) 成为了不可或缺的基础构件。</p>\\n<h3> 4.1.1 Hello World</h3>\\n<p>创建 <code>server</code> ：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> HelloService <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>h <span class=\\"token operator\\">*</span>HelloService<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Hello</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> reply <span class=\\"token operator\\">*</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token operator\\">*</span>reply <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"hello \\"</span> <span class=\\"token operator\\">+</span> request\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\trpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Register</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span>HelloService<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n\\tlistener<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> net<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Listen</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tcp\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\":9090\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"listen tcp error: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\tconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> listener<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Accept</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"accept error: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\trpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ServeConn</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
