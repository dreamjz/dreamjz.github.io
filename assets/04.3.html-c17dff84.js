import{_ as a,Z as t,$ as p,a0 as n,a1 as e,a2 as o,a3 as c,H as l}from"./framework-dee406ed.js";const i={},u=c(`<h2 id="_4-3-玩转-rpc" tabindex="-1"><a class="header-anchor" href="#_4-3-玩转-rpc" aria-hidden="true">#</a> 4.3 玩转 RPC</h2><p>不同的场景中 RPC 有着不同的需求， 因此开源社区中诞生了各种 RPC 框架，本节将介绍 Go 内置的 RPC 框架在一些特殊场景的用法。</p><h3 id="_4-3-1-客户端-rpc-实现原理" tabindex="-1"><a class="header-anchor" href="#_4-3-1-客户端-rpc-实现原理" aria-hidden="true">#</a> 4.3.1 客户端 RPC 实现原理</h3><p>Go 语言的 RPC 库最简单的使用方式是通过 <code>Client.Call</code> 方法进行同步阻塞调用，方法实现如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Call invokes the named function, waits for it to complete, and returns its error status.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	call <span class="token operator">:=</span> <span class="token operator">&lt;-</span>client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Done
	<span class="token keyword">return</span> call<span class="token punctuation">.</span>Error
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过 <code>Client.Go</code> 方法进行一次异步调用，返回一个表示这次调用的<code>Call</code> 结构体，然后等待<code>Call</code>结构体的 Done 返回调用结果</p><p>所以我们直接可以使用<code>Client.Go</code> 方法直接调用 <code>HelloService</code> :</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    helloCall <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
    
    <span class="token comment">// do something </span>
    
    helloCall <span class="token operator">=</span> <span class="token operator">&lt;-</span> helloCall<span class="token punctuation">.</span>done
    <span class="token keyword">if</span> err <span class="token operator">:=</span> helloCall<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    args <span class="token operator">:=</span> helloCall<span class="token punctuation">.</span>Args<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
    reply <span class="token operator">:=</span> hellCall<span class="token punctuation">.</span>Reply<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在发起异步调用之后，会执行其他任务，之后可以通过 channel 返回的 <code>*Call</code> 类型变量中获取</p><p><code>client.Go</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Go invokes the function asynchronously. It returns the Call structure representing</span>
<span class="token comment">// the invocation. The done channel will signal when the call is complete by returning</span>
<span class="token comment">// the same Call object. If done is nil, Go will allocate a new channel.</span>
<span class="token comment">// If non-nil, done must be buffered or Go will deliberately crash.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>
	call <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Call<span class="token punctuation">)</span>
	call<span class="token punctuation">.</span>ServiceMethod <span class="token operator">=</span> serviceMethod
	call<span class="token punctuation">.</span>Args <span class="token operator">=</span> args
	call<span class="token punctuation">.</span>Reply <span class="token operator">=</span> reply
	<span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// buffered.</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// If caller passes done != nil, it must arrange that</span>
		<span class="token comment">// done has enough buffer for the number of simultaneous</span>
		<span class="token comment">// RPCs that will be using that channel. If the channel</span>
		<span class="token comment">// is totally unbuffered, it&#39;s best not to run at all.</span>
		<span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">&quot;rpc: done channel is unbuffered&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	call<span class="token punctuation">.</span>Done <span class="token operator">=</span> done
	client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	<span class="token keyword">return</span> call
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先构造 <code>Call</code> 类型的对象，之后通过<code>client.send</code>发送 RPC 请求，并且<code>client.send</code>是线程安全的。</p><p>当调用完成或者发生错误时，将调用<code>call.done</code> 方法通知完成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> call<span class="token punctuation">.</span>Done <span class="token operator">&lt;-</span> call<span class="token punctuation">:</span>
		<span class="token comment">// ok</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">// We don&#39;t want to block here. It is the caller&#39;s responsibility to make</span>
		<span class="token comment">// sure the channel has enough buffer space. See comment in Go().</span>
		<span class="token keyword">if</span> debugLog <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc: discarding Call reply due to insufficient Done chan capacity&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-2-基于-rpc-实现-watch-功能" tabindex="-1"><a class="header-anchor" href="#_4-3-2-基于-rpc-实现-watch-功能" aria-hidden="true">#</a> 4.3.2 基于 RPC 实现 Watch 功能</h3><p>在很多系统中都提供了 Watch 功能的接口，当系统满足某种条件时 Watch 方法返回监控的结果。在此我们可以尝试通过 RPC 框架实现一个基本的 Watch 功能。</p><p>因为 <code>client.send</code> 是线程安全的，我们可以通过在不同的 Goroutine 中同时并发阻塞调用 RPC 方法，在一个独立的 Goroutine 中调用 Watch 函数进行监控。</p><p>下面将通过 RPC 构造一个简单的 KV 数据库，首先定义服务如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	KVStoreName <span class="token operator">=</span> <span class="token string">&quot;KVStoreService&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	ErrNotFound <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
	ErrTimeout  <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;timed out&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> KVStoreInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Set</span><span class="token punctuation">(</span>kv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Watch</span><span class="token punctuation">(</span>timeoutSecond <span class="token builtin">int</span><span class="token punctuation">,</span> keyChanged <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> KVStoreService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	m         <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	filter    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span>
	watchChan <span class="token keyword">chan</span> <span class="token builtin">string</span>
	mu        sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> KVStoreInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">NewKVStoreService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>KVStoreService <span class="token punctuation">{</span>
	kvs <span class="token operator">:=</span> <span class="token operator">&amp;</span>KVStoreService<span class="token punctuation">{</span>
		m<span class="token punctuation">:</span>         <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		filter<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		watchChan<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	kvs<span class="token punctuation">.</span>filter<span class="token punctuation">[</span><span class="token string">&quot;watcher&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		kvs<span class="token punctuation">.</span>watchChan <span class="token operator">&lt;-</span> key
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> kvs
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	kvs<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> kvs<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> kvs<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token operator">*</span>value <span class="token operator">=</span> v
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> ErrNotFound
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>kv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	kvs<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> kvs<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	key<span class="token punctuation">,</span> value <span class="token operator">:=</span> kv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

	oldValue <span class="token operator">:=</span> kvs<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;old: %v, new: %v&quot;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fn <span class="token operator">:=</span> <span class="token keyword">range</span> kvs<span class="token punctuation">.</span>filter <span class="token punctuation">{</span>
		<span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	kvs<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreService<span class="token punctuation">)</span> <span class="token function">Watch</span><span class="token punctuation">(</span>timeoutSecond <span class="token builtin">int</span><span class="token punctuation">,</span> keyChanged <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>timeoutSecond<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> ErrTimeout
	<span class="token keyword">case</span> key <span class="token operator">:=</span> <span class="token operator">&lt;-</span>kvs<span class="token punctuation">.</span>watchChan<span class="token punctuation">:</span>
		<span class="token operator">*</span>keyChanged <span class="token operator">=</span> key
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>KVStoreService</code>: <code>m</code> 用于存储 KV 数据，<code>filter</code> 为过滤器函数列表, <code>mu</code> 为互斥锁， <code>watchChan</code> : 监视通道，用记录改变的 key</li><li>在 <code>NewKVStoreService</code> 中初始化 <code>m</code> , <code>filter</code> 和 <code>watchChan</code> 并注册了 <code>watcher</code> 函数用于监控 key 的变化</li><li>当调用 <code>Set</code> 方法时，会调用所有的过滤器，此时 <code>watcher</code> 会被调用并将 key 写只通道中</li><li><code>Watch</code>: 从 <code>watch</code> 通道中获取变化的 key ，若超时则返回错误</li></ul><p>客户端如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	timeout <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> KVStoreClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreClient<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> kvs<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>KVStoreName<span class="token operator">+</span><span class="token string">&quot;.Get&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreClient<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>kv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> kvs<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>KVStoreName<span class="token operator">+</span><span class="token string">&quot;.Set&quot;</span><span class="token punctuation">,</span> kv<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>kvs <span class="token operator">*</span>KVStoreClient<span class="token punctuation">)</span> <span class="token function">Watch</span><span class="token punctuation">(</span>timeoutSecond <span class="token builtin">int</span><span class="token punctuation">,</span> keyChanged <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> kvs<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>KVStoreName<span class="token operator">+</span><span class="token string">&quot;.Watch&quot;</span><span class="token punctuation">,</span> timeoutSecond<span class="token punctuation">,</span> keyChanged<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> service<span class="token punctuation">.</span>KVStoreInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>KVStoreClient<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">DialKVStoreService</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>KVStoreClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	kvClient <span class="token operator">:=</span> <span class="token operator">&amp;</span>KVStoreClient<span class="token punctuation">{</span>
		client<span class="token punctuation">:</span> client<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> kvClient<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	cmd    <span class="token builtin">string</span>
	params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DialKVStoreService</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;error dialing tcp: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> cmd <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">var</span> val <span class="token builtin">string</span>
		err <span class="token operator">:=</span> <span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token string">&quot;set&quot;</span><span class="token punctuation">:</span>
		err <span class="token operator">:=</span> <span class="token function">set</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported command&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;USAGE: \\n\\t client [command] [...params]&quot;</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	cmd <span class="token operator">=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	params <span class="token operator">=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Cmd: %s, params: %v&quot;</span><span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client <span class="token operator">*</span>KVStoreClient<span class="token punctuation">,</span> srcMethod <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">,</span> watched <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>watched <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">srcMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	watchChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">watchKeyChanged</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> watchChan<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> <span class="token function">srcMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>watchChan
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">watchKeyChanged</span><span class="token punctuation">(</span>client <span class="token operator">*</span>KVStoreClient<span class="token punctuation">,</span> watchChan <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> keyChanged <span class="token builtin">string</span>
	err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token operator">&amp;</span>keyChanged<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;error calling %s: %v&quot;</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span>KVStoreName<span class="token operator">+</span><span class="token string">&quot;.Watch&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;watch-key-changed: &quot;</span><span class="token punctuation">,</span> keyChanged<span class="token punctuation">)</span>
	watchChan <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">get</span><span class="token punctuation">(</span>client <span class="token operator">*</span>KVStoreClient<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error calling %s.%s: %w&quot;</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span>KVStoreName<span class="token punctuation">,</span> <span class="token string">&quot;Get&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">set</span><span class="token punctuation">(</span>client <span class="token operator">*</span>KVStoreClient<span class="token punctuation">,</span> kv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>kv<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error calling %s.%s: %v&quot;</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span>KVStoreName<span class="token punctuation">,</span> <span class="token string">&quot;Set&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>watchKeyChanged</code>: 调用 <code>KVStoreService.Watch</code> 服务获取修改的 Key</li><li><code>doClientWork</code> ：当需要调用 <code>watch</code> 时，通过 <code>watchChan</code> 等待 <code>watchKeyChanged</code> 的返回</li></ul><p>这样每次调用 <code>KVStoreService.Set</code> 服务时就可以监控 kv 的变化了</p><h3 id="_4-3-3-反向-rpc" tabindex="-1"><a class="header-anchor" href="#_4-3-3-反向-rpc" aria-hidden="true">#</a> 4.3.3 反向 RPC</h3><p>通常的 RPC 基于 C/S 架构， RPC 的服务端对应网络服务器， RPC 客户端对应网络客户端。但是对于一些特殊场景，例如公司内网提供一个 RPC 服务，但是外网无法连接到内网服务器，此时可以参考类似反向代理技术，首先从内网主动连接到外网的 TCP 服务器，然后基于 TPC 连接向外网提供服务。</p><p>示例代码如下，server 端：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">NewArithmeticService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;error dialing tcp: %v, retry ...&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;dialing success&quot;</span><span class="token punctuation">)</span>

		rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
		conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反向 RPC 的服务端不主动监听 TCP 连接，而是连接到客户端的 TCP 服务器并基于 TCP 为客户端提供 RPC 服务</p><p>客户端需要提供 TCP 服务用于接受服务端的连接：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;error listening tcp:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;listening on tcp :9090&quot;</span><span class="token punctuation">)</span>
	clientChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;waiting for connection ...&quot;</span><span class="token punctuation">)</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;error accepting conn:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s connected ...&quot;</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		clientChan <span class="token operator">&lt;-</span> rpc<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">doClientWork</span><span class="token punctuation">(</span>clientChan<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">doClientWork</span><span class="token punctuation">(</span>clientChan <span class="token keyword">chan</span> <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client <span class="token operator">:=</span> <span class="token operator">&lt;-</span>clientChan
	<span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> reply <span class="token builtin">int</span>
	args <span class="token operator">:=</span> service<span class="token punctuation">.</span>ArithmeticService<span class="token punctuation">{</span>
		X<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
		Y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;ArithmeticService.Multiply&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error calling ArithmeticService.Multiply:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d * %d = %d&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>X<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-4-上下文信息" tabindex="-1"><a class="header-anchor" href="#_4-3-4-上下文信息" aria-hidden="true">#</a> 4.3.4 上下文信息</h3><p>基于上下文可以针对不同客户端提供定制化的 RPC 服务，我们可以通过为每个链接提供独立的 RPC 服务来实现对上下文的支持。</p><p>首先改造<code>HelloService</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	ErrAuth  <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;not login&quot;</span><span class="token punctuation">)</span>
	ErrLogin <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;username or password incorrect&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Conn    net<span class="token punctuation">.</span>Conn
	isLogin <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Login</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> request <span class="token operator">!=</span> <span class="token string">&quot;user:pass&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ErrLogin
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span>isLogin <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ErrAuth
	<span class="token punctuation">}</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s, from %s&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Hello</code> 中加入了简单的登录验证，这样在调用 RPC 服务之前需要进行登录操作。</p><p>在服务端为每个链接提供独立的 RPC 服务：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;error listening tcp:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;error accepting conn:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			p <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			p<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">{</span>Conn<span class="token punctuation">:</span> conn<span class="token punctuation">}</span><span class="token punctuation">)</span>
			p<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="referece" tabindex="-1"><a class="header-anchor" href="#referece" aria-hidden="true">#</a> Referece</h2>`,39),k={href:"https://chai2010.cn/advanced-go-programming-book/ch4-rpc/ch4-03-netrpc-hack.html",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",k,[e("4.3 玩转 RPC"),o(s)])])])])}const b=a(i,[["render",r],["__file","04.3.html.vue"]]);export{b as default};
