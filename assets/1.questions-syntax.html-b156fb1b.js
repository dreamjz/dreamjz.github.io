import{_ as n,Z as s,$ as a,a3 as t}from"./framework-dee406ed.js";const e={},p=t(`<h2 id="_1-和-的区别" tabindex="-1"><a class="header-anchor" href="#_1-和-的区别" aria-hidden="true">#</a> 1. <code>=</code> 和 <code>:=</code> 的区别</h2><p>:= 声明+赋值</p><p>= 仅赋值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> foo <span class="token builtin">int</span>
foo <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment">// equal to </span>
foo <span class="token operator">:=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-指针的作用" tabindex="-1"><a class="header-anchor" href="#_2-指针的作用" aria-hidden="true">#</a> 2. 指针的作用</h2><p>指针用来保存变量的地址。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token operator">=</span>  <span class="token number">5</span>
<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>x
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d&quot;</span><span class="token punctuation">,</span>  <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// x 可以用 *p 访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>*</code>：指针解引用，获取指针指向的值</li><li><code>&amp;</code>：获取变量地址</li></ul><h2 id="_3-go-允许多个返回值吗" tabindex="-1"><a class="header-anchor" href="#_3-go-允许多个返回值吗" aria-hidden="true">#</a> 3. Go 允许多个返回值吗</h2><p>允许</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> y<span class="token punctuation">,</span> x
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// B A</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-go-有异常类型吗" tabindex="-1"><a class="header-anchor" href="#_4-go-有异常类型吗" aria-hidden="true">#</a> 4. Go 有异常类型吗</h2><p>没有</p><p>只有错误类型<code>error</code>，用于表示异常状态</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-什么是协程-goroutine" tabindex="-1"><a class="header-anchor" href="#_5-什么是协程-goroutine" aria-hidden="true">#</a> 5. 什么是协程（Goroutine）</h2><p>Goroutine 是与其他函数或方法同时运行的函数或方法。 Goroutines 可以被认为是轻量级的线程。 与线程相比，创建 Goroutine 的开销很小。 Go应用程序同时运行数千个 Goroutine 是非常常见的做法。</p><h2 id="_6-如何高效地拼接字符串" tabindex="-1"><a class="header-anchor" href="#_6-如何高效地拼接字符串" aria-hidden="true">#</a> 6. 如何高效地拼接字符串</h2><p>Go 语言中，字符串是只读的，也就意味着每次修改操作都会创建一个新的字符串。如果需要拼接多次，应使用 <code>strings.Builder</code>，最小化内存拷贝次数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> str strings<span class="token punctuation">.</span>Builder
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    str<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-什么是-rune-类型" tabindex="-1"><a class="header-anchor" href="#_7-什么是-rune-类型" aria-hidden="true">#</a> 7. 什么是 rune 类型</h2><p>ASCII 码只需要 7 bit 就可以完整地表示，但只能表示英文字母在内的128个字符。</p><p>为了表示世界上大部分的文字系统，发明了 Unicode， 它是ASCII的超集，包含世界上书写系统中存在的所有字符，并为每个代码分配一个标准编号（称为Unicode CodePoint），在 Go 语言中称之为 rune，是 int32 类型的别名。</p><p>Go 语言中，字符串的底层表示是 byte (8 bit) 序列，而非 rune (32 bit) 序列。例如下面的例子中 <code>语</code> 和 <code>言</code> 使用 UTF-8 编码后各占 3 个 byte，因此 <code>len(&quot;Go语言&quot;)</code> 等于 8，当然我们也可以将字符串转换为 rune 序列。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-如何判断-map-中是否包含某个-key" tabindex="-1"><a class="header-anchor" href="#_8-如何判断-map-中是否包含某个-key" aria-hidden="true">#</a> 8. 如何判断 map 中是否包含某个 key</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dict<span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token comment">//do something here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ok</code>：表示 key 是否存在</li><li><code>val</code>：key 对应的 value</li></ul><h2 id="_9-go-支持默认参数或可选参数吗" tabindex="-1"><a class="header-anchor" href="#_9-go-支持默认参数或可选参数吗" aria-hidden="true">#</a> 9. Go 支持默认参数或可选参数吗</h2><p>Go 语言不支持可选参数（python 支持），也不支持方法重载（java支持）</p><h2 id="_10-简述-defer-的特性" tabindex="-1"><a class="header-anchor" href="#_10-简述-defer-的特性" aria-hidden="true">#</a> 10. 简述 defer 的特性</h2><ul><li><strong>执行顺序</strong>： 多个 defer 遵循 LIFO（Last In First Out，后进先出）的顺序执行，先定义的 defer 语句后执行</li><li><strong>执行时机</strong>： defer 在 return 之后执行</li><li><strong>参数预计算</strong>： 直接使用 defer 调用函数，函数参数会在定义时进行计算并拷贝，导致结果不符合预期； 应将函数放入闭包中执行</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;defer 1&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;defer 2&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;tst return &quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">tst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
tst <span class="token keyword">return</span>
<span class="token keyword">defer</span> <span class="token number">2</span>
<span class="token keyword">defer</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以看出，执行顺序为 LIFO并且在 return 之后执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Duration-1:&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Duration-2:&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
Duration<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span>0057363s
Duration<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> 0s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer fmt.Println(&quot;Duration-1:&quot;, time.Since(s1))</code>：此处在定义时，参数<code>time.Since(s1)</code>已经进行计算完毕，导致计算的时间差为 0</p><h2 id="_11-defer-能否修改返回值" tabindex="-1"><a class="header-anchor" href="#_11-defer-能否修改返回值" aria-hidden="true">#</a> 11. defer 能否修改返回值</h2><p>可以，当函数返回值为：</p><ol><li>具名返回值</li><li>指针类型</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> i
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">tst1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">tst2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>i
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">tst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 0</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">tst1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">tst2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tst</code>中，返回的值已经经过拷贝，在defer中修改局部变量不会影响返回值。</p><h2 id="_12-如何交换两个变量" tabindex="-1"><a class="header-anchor" href="#_12-如何交换两个变量" aria-hidden="true">#</a> 12. 如何交换两个变量</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 2, 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-结构体中-tag-的作用" tabindex="-1"><a class="header-anchor" href="#_13-结构体中-tag-的作用" aria-hidden="true">#</a> 13. 结构体中 tag 的作用</h2><p>tag 可以作为字段的注解，利用反射可以获取 tag 的值。</p><p>框架/工具可以通过反射获取到某个字段定义的属性，采取相应的处理方式。tag 丰富了代码的语义，增强了灵活性。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Stu <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;stu_name&quot;\`</span>
	ID   <span class="token builtin">string</span> <span class="token string">\`json:&quot;stu_id&quot;\`</span>
	Age  <span class="token builtin">string</span> <span class="token string">\`json:&quot;-&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	buf<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>Stu<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> ID<span class="token punctuation">:</span> <span class="token string">&quot;001&quot;</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token string">&quot;16&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// {&quot;stu_name&quot;:&quot;Alice&quot;,&quot;stu_id&quot;:&quot;001&quot;}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>json:&quot;stu_name&quot;</code>：在编码成 JSON 格式时，将字段名改成<code>stu_name</code></li><li><code>json:&quot;-&quot;</code>：JSON 编码时，跳过此字段</li></ul><h2 id="_14-如何判断切片内容是否相等" tabindex="-1"><a class="header-anchor" href="#_14-如何判断切片内容是否相等" aria-hidden="true">#</a> 14. 如何判断切片内容是否相等</h2><p>go 语言中可以使用反射 <code>reflect.DeepEqual(a, b)</code> 判断 a、b 两个切片是否相等，但是通常不推荐这么做，使用反射非常影响性能。</p><p>建议使用遍历的方式（<a href="./ans/14-q-syntax">性能比较</a>）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sliceEqual</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 异或运算</span>
	<span class="token comment">// 参与比较的切片不能为 nil</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>a2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a1 <span class="token punctuation">{</span>
		<span class="token keyword">if</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-格式化输出中的-v-v-v-区别" tabindex="-1"><a class="header-anchor" href="#_15-格式化输出中的-v-v-v-区别" aria-hidden="true">#</a> 15. 格式化输出中的 <code>%v</code>， <code>%+v</code>，<code>%#v</code> 区别</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> s <span class="token keyword">struct</span> <span class="token punctuation">{</span>
       a <span class="token builtin">int</span>
       b <span class="token builtin">int</span>
    <span class="token punctuation">}</span>
    sv <span class="token operator">:=</span> s<span class="token punctuation">{</span>
       a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v\\n&quot;</span><span class="token punctuation">,</span> sv<span class="token punctuation">)</span>  <span class="token comment">// {1 2}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> sv<span class="token punctuation">)</span> <span class="token comment">// {a:1 b:2}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#v\\n&quot;</span><span class="token punctuation">,</span> sv<span class="token punctuation">)</span> <span class="token comment">// main.s{a:1, b:2}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>%v</code>：打印值</li><li><code>%+v</code>：打印字段名和值</li><li><code>%#v</code>：打印类型名及字段名</li></ul><h2 id="_16-如何定义枚举" tabindex="-1"><a class="header-anchor" href="#_16-如何定义枚举" aria-hidden="true">#</a> 16. 如何定义枚举</h2><p>使用 const 关键字和 <code>iota</code>定义枚举值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StuType <span class="token builtin">int32</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Type1 StuType <span class="token operator">=</span> <span class="token boolean">iota</span>
	Type2
	Type3
	Type4
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">,</span> Type3<span class="token punctuation">,</span> Type4<span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>iota</code>初始值为 0，后续定义的枚举将会自动加一。</p><h2 id="_17-空结构体的作用" tabindex="-1"><a class="header-anchor" href="#_17-空结构体的作用" aria-hidden="true">#</a> 17. 空结构体的作用</h2><p>空结构体<code>struct{}{}</code>，用作占位符，因为其占用内存大小为0。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配合 map 类型可以实现 set：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Set <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	set <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Set<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
		set<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> set<span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A exists&quot;</span><span class="token punctuation">)</span> <span class="token comment">// A exists</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为 Channel 的元素类型时，可以只用于发送/接收信号：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">&lt;-</span>ch
		<span class="token comment">// do something</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-new-和-make-区别" tabindex="-1"><a class="header-anchor" href="#_18-new-和-make-区别" aria-hidden="true">#</a> 18. new 和 make 区别</h2><ul><li>new 仅用于分配内存，返回指向变量的指针</li><li>make 用于 slice, map 和 channel 的初始化</li></ul><h2 id="_19-golang-如何实现面向对象" tabindex="-1"><a class="header-anchor" href="#_19-golang-如何实现面向对象" aria-hidden="true">#</a> 19. Golang 如何实现面向对象</h2><ul><li>封装：同一各包，对象对包内可见；不同的包，仅有导出的对象可见</li><li>继承：通过 struct 嵌套实现继承，可实现多重继承</li><li>多态：通过接口类型 interface 实现</li></ul><h2 id="_20-uint-型变量相减会发生什么" tabindex="-1"><a class="header-anchor" href="#_20-uint-型变量相减会发生什么" aria-hidden="true">#</a> 20. uint 型变量相减会发生什么</h2><p>对于变量 <code>a, b uint</code></p><ul><li>若 <code>a &gt; b</code>，得到正常值</li><li>若 <code>a &lt; b</code>，则发生溢出</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">uint</span>
	a <span class="token operator">=</span> <span class="token number">5</span>
	b <span class="token operator">=</span> <span class="token number">8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token comment">// 3</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// 18446744073709551613</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","1.questions-syntax.html.vue"]]);export{d as default};
