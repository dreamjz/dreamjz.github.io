import{_ as p,Z as l,$ as i,a0 as n,a1 as s,a2 as e,a3 as t,H as o}from"./framework-dee406ed.js";const c={},d=t(`<h2 id="indentation" tabindex="-1"><a class="header-anchor" href="#indentation" aria-hidden="true">#</a> Indentation</h2><p>Indentation refers to the spaces at the beginning of a code line.</p><p>Python uses indentation to indicate a block of code.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1 less than 2&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="variable" tabindex="-1"><a class="header-anchor" href="#variable" aria-hidden="true">#</a> Variable</h2><p>In Python, variables are created when you assign a value to it:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">5</span>
y <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> Name</h3><p>Rules for Python variables:</p>`,9),r=n("li",null,"A variable name must start with a letter or the underscore character",-1),u=n("li",null,"A variable name cannot start with a number",-1),k=n("li",null,"A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )",-1),m=n("li",null,"Variable names are case-sensitive (age, Age and AGE are three different variables)",-1),v={href:"https://www.w3schools.com/python/python_ref_keywords.asp",target:"_blank",rel:"noopener noreferrer"},h=t(`<h4 id="multi-words-names" tabindex="-1"><a class="header-anchor" href="#multi-words-names" aria-hidden="true">#</a> Multi words names</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Camel Case</span>
varName <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># Pascal Case</span>
VarName <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># Snake Case</span>
var_name <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="assignment" tabindex="-1"><a class="header-anchor" href="#assignment" aria-hidden="true">#</a> Assignment</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Many values to multiple variables</span>
x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
<span class="token comment"># One value to multiple variables</span>
x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># Unpack collection</span>
fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> fruits
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="casting" tabindex="-1"><a class="header-anchor" href="#casting" aria-hidden="true">#</a> Casting</h3><p>If you want to specify the data type of a variable, this can be done with casting:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># &quot;3&quot;</span>
y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
z <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 3.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case-sensitive" tabindex="-1"><a class="header-anchor" href="#case-sensitive" aria-hidden="true">#</a> Case-sensitive</h3><p>Variable names are case-sensitive.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">4</span>
A <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment"># A will not overwrite a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-variables" tabindex="-1"><a class="header-anchor" href="#global-variables" aria-hidden="true">#</a> Global variables</h3><p>Variables that are created outside of a function are known as global variables.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    
f<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use <code>global</code> keyword to change/create a global variable inside a function.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> x
    x <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span>

f<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">//</span> world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comment" tabindex="-1"><a class="header-anchor" href="#comment" aria-hidden="true">#</a> Comment</h2><p>A comment starts with a <code>#</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># This is a comment</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hell&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="data-type" tabindex="-1"><a class="header-anchor" href="#data-type" aria-hidden="true">#</a> Data type</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Text Type:</td><td><code>str</code></td></tr><tr><td>Numeric Types:</td><td><code>int</code>, <code>float</code>, <code>complex</code></td></tr><tr><td>Sequence Types:</td><td><code>list</code>, <code>tuple</code>, <code>range</code></td></tr><tr><td>Mapping Type:</td><td><code>dict</code></td></tr><tr><td>Set Types:</td><td><code>set</code>, <code>frozenset</code></td></tr><tr><td>Boolean Type:</td><td><code>bool</code></td></tr><tr><td>Binary Types:</td><td><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></td></tr><tr><td>None Type:</td><td><code>NoneType</code></td></tr></tbody></table><h3 id="get-the-type" tabindex="-1"><a class="header-anchor" href="#get-the-type" aria-hidden="true">#</a> Get the type</h3><p>Use <code>type()</code> function to get the data type of a variable:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">5</span>
y <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># int</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>There are three numeric types in Python:</p><ul><li><code>int</code></li><li><code>float</code></li><li><code>complex</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># int</span>
y <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token comment"># float</span>
z <span class="token operator">=</span> <span class="token number">1j</span> <span class="token comment"># complex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>Strings in python are surrounded by either single quotes or double quotes.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
y <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Use three quotes to assign a multiline string to a string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
A
B
C
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iterate-string" tabindex="-1"><a class="header-anchor" href="#iterate-string" aria-hidden="true">#</a> Iterate string</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-length" tabindex="-1"><a class="header-anchor" href="#string-length" aria-hidden="true">#</a> String length</h4><p>Use <code>len()</code> to get the length of string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-string" tabindex="-1"><a class="header-anchor" href="#check-string" aria-hidden="true">#</a> Check string</h4><p>To check if a certain phrase or character is present in a string by using the keyword <code>in</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wo&quot;</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wa&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="slicing" tabindex="-1"><a class="header-anchor" href="#slicing" aria-hidden="true">#</a> Slicing</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 3), el</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [0, 2), he</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [3, 5), lo</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># ll  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h4><p>The <code>format()</code> method takes the passed arguments, format them, and places them in the string where the placeholders <code>{}</code> are:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">16</span>
s <span class="token operator">=</span> <span class="token string">&quot;Alice is {}&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>

s1<span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span>
txt <span class="token operator">=</span> <span class="token string">&quot;{1} and {0}&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># B and A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="escape-characters" tabindex="-1"><a class="header-anchor" href="#escape-characters" aria-hidden="true">#</a> Escape characters</h4><table><thead><tr><th style="text-align:left;">Code</th><th style="text-align:left;">Result</th></tr></thead><tbody><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;">Single Quote</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">Backslash</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">New Line</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">Carriage Return</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">Tab</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">Backspace</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">Form Feed</td></tr><tr><td style="text-align:left;">\\ooo</td><td style="text-align:left;">Octal value</td></tr><tr><td style="text-align:left;">\\xhh</td><td style="text-align:left;">Hex value</td></tr></tbody></table><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>Boolean represents one of two values: <code>True</code> or <code>False</code>.</p><h4 id="evaluate-values" tabindex="-1"><a class="header-anchor" href="#evaluate-values" aria-hidden="true">#</a> Evaluate values</h4><p>The <code>bool()</code> function allows you to evaluate any value:</p><ul><li>Any string is <code>True</code>, except empty strings.</li><li>Any number is <code>True</code>, except <code>0</code>.</li><li>Any list, tuple, set, and dictionary are <code>True</code>, except empty ones.</li></ul><h2 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> Operator</h2><h3 id="arithmetic" tabindex="-1"><a class="header-anchor" href="#arithmetic" aria-hidden="true">#</a> Arithmetic</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Name</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">Addition</td><td style="text-align:left;">x + y</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">Subtraction</td><td style="text-align:left;">x - y</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">Multiplication</td><td style="text-align:left;">x * y</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">Division</td><td style="text-align:left;">x / y</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">Modulus</td><td style="text-align:left;">x % y</td></tr><tr><td style="text-align:left;">**</td><td style="text-align:left;">Exponentiation</td><td style="text-align:left;">x ** y</td></tr><tr><td style="text-align:left;">//</td><td style="text-align:left;">Floor division</td><td style="text-align:left;">x // y</td></tr></tbody></table><h3 id="comparison" tabindex="-1"><a class="header-anchor" href="#comparison" aria-hidden="true">#</a> Comparison</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Name</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">Equal</td><td style="text-align:left;">x == y</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">Not equal</td><td style="text-align:left;">x != y</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">Greater than</td><td style="text-align:left;">x &gt; y</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">Less than</td><td style="text-align:left;">x &lt; y</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">Greater than or equal to</td><td style="text-align:left;">x &gt;= y</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">Less than or equal to</td><td style="text-align:left;">x &lt;= y</td></tr></tbody></table><h3 id="logical" tabindex="-1"><a class="header-anchor" href="#logical" aria-hidden="true">#</a> Logical</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">and</td><td style="text-align:left;">Returns True if both statements are true</td><td style="text-align:left;">x &lt; 5 and x &lt; 10</td></tr><tr><td style="text-align:left;">or</td><td style="text-align:left;">Returns True if one of the statements is true</td><td style="text-align:left;">x &lt; 5 or x &lt; 4</td></tr><tr><td style="text-align:left;">not</td><td style="text-align:left;">Reverse the result, returns False if the result is true</td><td style="text-align:left;">not(x &lt; 5 and x &lt; 10)</td></tr></tbody></table><h3 id="identity" tabindex="-1"><a class="header-anchor" href="#identity" aria-hidden="true">#</a> Identity</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">is</td><td style="text-align:left;">Returns True if both variables are the same object</td><td style="text-align:left;">x is y</td></tr><tr><td style="text-align:left;">is not</td><td style="text-align:left;">Returns True if both variables are not the same object</td><td style="text-align:left;">x is not y</td></tr></tbody></table><h3 id="membership" tabindex="-1"><a class="header-anchor" href="#membership" aria-hidden="true">#</a> Membership</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">in</td><td style="text-align:left;">Returns True if a sequence with the specified value is present in the object</td><td style="text-align:left;">x in y</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">Returns True if a sequence with the specified value is not present in the object</td><td style="text-align:left;">x not in y</td></tr></tbody></table><h3 id="bitwise" tabindex="-1"><a class="header-anchor" href="#bitwise" aria-hidden="true">#</a> Bitwise</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">AND</td><td style="text-align:left;">Sets each bit to 1 if both bits are 1</td><td style="text-align:left;">x &amp; y</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">OR</td><td style="text-align:left;">Sets each bit to 1 if one of two bits is 1</td><td style="text-align:left;">x | y</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">XOR</td><td style="text-align:left;">Sets each bit to 1 if only one of two bits is 1</td><td style="text-align:left;">x ^ y</td></tr><tr><td style="text-align:left;">~</td><td style="text-align:left;">NOT</td><td style="text-align:left;">Inverts all the bits</td><td style="text-align:left;">~x</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">Zero fill left shift</td><td style="text-align:left;">Shift left by pushing zeros in from the right and let the leftmost bits fall off</td><td style="text-align:left;">x &lt;&lt; 2</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">Signed right shift</td><td style="text-align:left;">Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off</td><td style="text-align:left;">x &gt;&gt; 2</td></tr></tbody></table><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><p>List are used to store multiple items in a single variable.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Create list</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># Get length </span>
<span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment"># 3</span>
<span class="token comment"># List can contain different tpyes</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># Crreat list by using list()</span>
nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Access item in list</span>
nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 1</span>
nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 3</span>
<span class="token comment"># Return new list by giving range</span>
nums1 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># [1, 2), [2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-if-item-exists" tabindex="-1"><a class="header-anchor" href="#check-if-item-exists" aria-hidden="true">#</a> Check if item exists</h4><p>Use <code>in</code> to check if item exists:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> nums<span class="token punctuation">)</span> <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insert-item" tabindex="-1"><a class="header-anchor" href="#insert-item" aria-hidden="true">#</a> Insert item</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
nums<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># [1, 4, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="append-item" tabindex="-1"><a class="header-anchor" href="#append-item" aria-hidden="true">#</a> Append item</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extend-list" tabindex="-1"><a class="header-anchor" href="#extend-list" aria-hidden="true">#</a> Extend list</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
nums<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iterate-list" tabindex="-1"><a class="header-anchor" href="#iterate-list" aria-hidden="true">#</a> Iterate list</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment"># Use in keyword</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

<span class="token comment"># iterate through index</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
<span class="token comment"># List comprehension</span>
<span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list-comprehension" tabindex="-1"><a class="header-anchor" href="#list-comprehension" aria-hidden="true">#</a> List comprehension</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>newlist <span class="token operator">=</span> <span class="token punctuation">[</span>expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>newlist <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> fruits <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><p>Sets are used to store multiple items in a single variable.</p><p>Items in the set are unordered, unchangeable, and do not allow duplicate values.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numSet <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token comment"># create set by using set()</span>
numset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="access-item" tabindex="-1"><a class="header-anchor" href="#access-item" aria-hidden="true">#</a> Access item</h4><p>You cannot access items in a set by index.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    
<span class="token comment"># Check if item exists</span>
<span class="token number">4</span> <span class="token keyword">in</span> nums <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary" aria-hidden="true">#</a> Dictionary</h2><p>Dictionary is used to store data values in <code>key:value</code> pairs.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&quot;B&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span> 

<span class="token comment"># Get dictionary item</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
<span class="token comment"># Get length of dictionary</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
<span class="token comment"># Get all keys</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Get all values</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>values<span class="token punctuation">)</span>
<span class="token comment"># Get all entries</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Check if key exists</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span> <span class="token keyword">in</span> m<span class="token punctuation">)</span> <span class="token comment"># True</span>

<span class="token comment"># Add items</span>
m<span class="token punctuation">[</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment"># Delte items</span>
m<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> m<span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">]</span>
m<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># empty dict</span>
<span class="token keyword">del</span> m <span class="token comment"># delete dict</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if-else</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> cond<span class="token punctuation">:</span>
    <span class="token comment"># code</span>
<span class="token keyword">elif</span> cond<span class="token punctuation">:</span>
    <span class="token comment"># code</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> Loop</h2><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> cond<span class="token punctuation">:</span>
    <span class="token comment"># code</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
    
<span class="token comment"># pass</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># create functions</span>
<span class="token keyword">def</span> <span class="token function">functionName</span><span class="token punctuation">(</span>paramter_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
    
functionName<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>   

<span class="token comment"># arbitrary arguments</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
    
<span class="token comment"># arbitrary keyword args</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">**</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;My naem is &quot;</span> <span class="token operator">+</span> param<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
f<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># default parameter value</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h2><p>A lambda function is a small anonymous function.</p><p>A lambda function can take any number of arguments, but can only have one expression.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">lambda</span> args<span class="token punctuation">:</span> exp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h2><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> <code>__init_</code></h3><p><code>__init__</code> function is always executed when the class is being initiated.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__int__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment"># Alice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> <code>__str__</code></h3><p>The <code>__str_</code> function controls what should be returned when the class object is represented as a string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>slef<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
       
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># ...</span>
        
    <span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        
       
p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>method1<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> Inheritance</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2><h3 id="create-a-module" tabindex="-1"><a class="header-anchor" href="#create-a-module" aria-hidden="true">#</a> Create a module</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># mymod.py</span>
<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>

<span class="token comment"># main.py</span>
<span class="token keyword">import</span> mymod <span class="token keyword">as</span> mm

mm<span class="token punctuation">.</span>greeting<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Import only parts from a module.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mymod <span class="token keyword">import</span> greeting
<span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pip" tabindex="-1"><a class="header-anchor" href="#pip" aria-hidden="true">#</a> PIP</h2><p>PIP is a package manager for Python packages.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># install </span>
$ pip <span class="token function">install</span> pkg_name
<span class="token comment"># uninstall </span>
$ pip uninstall pkg_name
<span class="token comment"># list</span>
$ pip list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="try-except" tabindex="-1"><a class="header-anchor" href="#try-except" aria-hidden="true">#</a> Try-except</h2><p>The <code>try</code> block lets you test a block of code for errors.</p><p>The <code>except</code> block lets you handle the error.</p><p>The <code>else</code> block lets you execute code when there is no error.</p><p>The <code>finally</code> block lets you execute code, regardless of the result of the try- and except blocks.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># code</span>
<span class="token keyword">except</span> NamedError<span class="token punctuation">:</span>
    <span class="token comment"># hanle error</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># no error</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token comment"># ... </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="throw-exception" tabindex="-1"><a class="header-anchor" href="#throw-exception" aria-hidden="true">#</a> Throw exception</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,134),b={href:"https://www.w3schools.com/python/default.asp",target:"_blank",rel:"noopener noreferrer"};function y(g,f){const a=o("ExternalLinkIcon");return l(),i("div",null,[d,n("ul",null,[r,u,k,m,n("li",null,[s("A variable name cannot be any of the "),n("a",v,[s("Python keywords"),e(a)]),s(".")])]),h,n("ol",null,[n("li",null,[n("a",b,[s("https://www.w3schools.com/python/default.asp"),e(a)])])])])}const w=p(c,[["render",y],["__file","quick_start.html.vue"]]);export{w as default};
