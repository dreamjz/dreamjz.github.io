import{_ as l,X as i,Y as u,a0 as a,a3 as o,Z as n,$ as s,a1 as p,F as c}from"./framework-8cb7ec75.js";const r={},k=p('<h2 id="_3-3-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_3-3-1-设计原理" aria-hidden="true">#</a> 3.3.1 设计原理</h2><p>哈希表是计算机科学中的最重要数据结构之一，不仅因其 <em>O(1)</em> 的读写性能优秀，还因为它提供了键值之间的映射。</p><p>要想实现一个性能优异的哈希表，需要注意两个关键点 -- <strong>哈希函数</strong>和<strong>哈希冲突</strong>的解决方法。</p><h3 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h3><p>实现哈希表的关键点在于哈希函数的选择，哈希函数的选择在很大程度上能够决定哈希表的读写性能。在理想的情况下哈希函数能够将不同键映射到不容的索引上，这要求哈希函数的<strong>输出范围大于输入范围</strong>，但是由于键的数量远远大于映射的范围，所以在实际使用中，理想的效果是无法实现的。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478768-perfect-hash-function.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6),d=n("b",null,"图 3-7 完美哈希函数",-1),m=n("p",null,[s("比较实际的方式是让哈希函数的结果尽可能的均匀分布，然后通过工程上的手段解决哈希冲突的问题。哈希函数映射的结果需要尽可能"),n("strong",null,"均匀"),s("，结果不均匀的哈希函数会带来更多的哈希冲突以及更差的读写性能。")],-1),v=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478778-bad-hash-function.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),h=n("b",null,"图 3-8 不均匀哈希函数",-1),b=p(`<p>若使用结果分布较为均匀的哈希函数，那么哈希表的增删改查的时间复杂度为 <em>O(1)</em>；但是若哈希函数的结果分布不均匀，那么所有操作的时间复杂度可能会达到 <em>O(n)</em>，由此看来，采用好的哈希函数是至关重要的。</p><h3 id="解决哈希冲突" tabindex="-1"><a class="header-anchor" href="#解决哈希冲突" aria-hidden="true">#</a> 解决哈希冲突</h3><p>通常情况下，哈希函数输入的范围一定会远远大于输出的范围，所以使用哈希表一定会遇到哈希冲突，即使使用了完美哈希函数。常见的解决哈希冲突的方法有<strong>开放寻址法</strong>和<strong>拉链法</strong>。</p><h4 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法" aria-hidden="true">#</a> 开放寻址法</h4><p>开放寻址法的核心思想是<strong>依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中</strong>，使用开放寻址法实现的哈希表，底层的数据结构为<strong>数组</strong>，因为数组长度有限，那么写入 <code>(key, value)</code>时会从如下索引开始遍历：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span> <span class="token operator">%</span> array<span class="token punctuation">.</span><span class="token builtin">len</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们向当前哈希表写入新的数据时，若发生冲突，则会将键值对写入下一个索引不为空的位置：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478785-open-addressing-and-set.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,8),g=n("b",null,"图 3-9 开放地址法写入数据",-1),f=n("p",null,"当 Key3 与已经存入哈希表的两个键值对 Key1 和 Key2 发生冲突时，Key3 会被写入 Key2 后面的空闲位置。当需要读取 Key3 对应的值时就会先获取键的哈希值并取模，首先会找到 Key1，发现和 Key3 不等之后继续寻找之后的元素，直到内存为空或找到目标元素。",-1),_=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478791-open-addressing-and-get.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),y=n("b",null,"图 3-10 开放地址法写入数据",-1),w=p('<p>当需要查找某个键对应的值时，会从索引的位置开始线性探测数组，找到目标键值对或空内存则结束查找。</p><p>开放寻址法中对性能影响最大的是<strong>装载因子</strong>，其为数组<strong>元素数量</strong>和<strong>数组大小</strong>的<strong>比值</strong>。随着装载因子的增加，线性探测的平均用时就会逐渐增加，这回影响哈希表的读写性能。当装载率超过 70% 之后，性能会急剧下降，一旦大到 100%，查找和插入的时间复杂度将会是 <em>O(n)</em>，所以实现哈希表时需要关注装载因子的变化。</p><h4 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法" aria-hidden="true">#</a> 拉链法</h4><p>拉链法一般使用数组加链表的形式：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478798-separate-chaing-and-set.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),x=n("b",null,"图 3-11 拉链法写入数据",-1),z=p(`<p>例如将键值对 <code>(Key6, Value6)</code> <strong>写入</strong>，<code>Key6</code> 会通过如下方式获取桶索引：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&quot;Key6&quot;</span><span class="token punctuation">)</span> <span class="token operator">%</span> array<span class="token punctuation">.</span><span class="token builtin">len</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在选择了 2 号桶之后开始遍历桶中的链表，此时会有两种情况：</p><ol><li>找到相同的 Key： 更新 Value</li><li>没有找到相同的 Key： 在链表末尾追加新的 K-V</li></ol><p><strong>读取</strong>的流程类似：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-30-15777168478804-separate-chaing-and-get.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,6),B=n("b",null,"图 3-12 拉链法读取数据",-1),q=n("p",null,[s("若寻找 "),n("code",null,"Key11"),s(" ，当其命中 4 号桶时，遍历桶中的链表没有找到期望的键则表示哈希表中没有对应的键值。")],-1),O=n("p",null,[s("计算哈希、定位桶和遍历链表是哈希表读写操作的主要开销，使用"),n("strong",null,"拉链法"),s("实现的哈希表的"),n("strong",null,"装载因子"),s("计算如下：")],-1),P=n("p",null,[s("​ "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"装载因子"),n("mo",null,"="),n("mtext",null,"元素数量"),n("mo",null,"÷"),n("mtext",null,"桶数量")]),n("annotation",{encoding:"application/x-tex"},"\\text{装载因子} = \\text{元素数量} \\div \\text{桶数量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"装载因子")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"元素数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"桶数量")])])])])],-1),M=n("p",null,"装载因子性能越大，读写性能越差，所以当装载因子较大时需要进行哈希扩容以保证性能不会出现严重的下降。",-1),E=n("h2",{id:"_3-3-2-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-2-数据结构","aria-hidden":"true"},"#"),s(" 3.3.2 数据结构")],-1),K={href:"https://draveness.me/golang/tree/runtime.hmap",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.hmap",-1),C=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count     <span class="token builtin">int</span>
	flags     <span class="token builtin">uint8</span>
	B         <span class="token builtin">uint8</span>
	noverflow <span class="token builtin">uint16</span>
	hash0     <span class="token builtin">uint32</span>

	buckets    unsafe<span class="token punctuation">.</span>Pointer
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer
	nevacuate  <span class="token builtin">uintptr</span>

	extra <span class="token operator">*</span>mapextra
<span class="token punctuation">}</span>

<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	nextOverflow <span class="token operator">*</span>bmap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L=n("ol",null,[n("li",null,[n("code",null,"count"),s(" : 键值对的数量；")]),n("li",null,[n("code",null,"B"),s(": "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"B")]),n("mo",null,"="),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"n"),n("mo",{stretchy:"false"},"("),n("mi",null,"b"),n("mi",null,"u"),n("mi",null,"c"),n("mi",null,"k"),n("mi",null,"e"),n("mi",null,"t"),n("mi",null,"s"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"2^B = len(buckets)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mclose"},")")])])]),s(" ，表示哈希表持有的 "),n("code",null,"bucket"),s(" 数量；")]),n("li",null,[n("code",null,"hash0"),s("： 哈希的种子，能为哈希函数的结果引入随机性，这个值在创建哈希表时确定，并在调用哈希函数时作为参数传入；")]),n("li",null,[n("code",null,"buckets"),s("：指向一个 "),n("code",null,"[]bmap"),s(" 数组；")]),n("li",null,[n("code",null,"oldbuckets"),s(": 扩容时，存放之前的 "),n("code",null,"buckets"),s("；")]),n("li",null,[n("code",null,"extra"),s(": 溢出桶结构；")]),n("li",null,[n("code",null,"noverflow"),s("：溢出桶中 "),n("code",null,"bmap"),s(" 大致数量；")]),n("li",null,[n("code",null,"nevacuate"),s("：分流次数，翻倍扩容时分流操作计数的字段；")]),n("li",null,[n("code",null,"flags"),s("：状态标识，例如：写入中，等量扩容等；")])],-1),j=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hmap-and-buckets.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),G=n("b",null,"图 3-13 哈希表的数据结构",-1),D={href:"https://draveness.me/golang/tree/runtime.hmap",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.hmap",-1),V={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.bmap",-1),T={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"runtime.bmap",-1),W=n("code",null,"extra.nextOverflow",-1),X=n("p",null,[s("上述的两种桶在内存中是连续的，称为"),n("strong",null,"正常桶"),s("（图中黄色部分）和"),n("strong",null,"溢出桶"),s("（图中绿色部分）。")],-1),F={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"runtime.bmap",-1),Q=n("code",null,"tophash",-1),Y=n("code",null,"tophash",-1),U=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Z={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.bmap",-1),H=n("code",null,"tophash",-1),J={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.bmap",-1),sn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.bmap",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"cmd/compile/internal/gc.bmap",-1),tn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
    elems   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
    pad      <span class="token builtin">uintptr</span>
    overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>topbits</code>：存储 Key 的哈希值高 8 位，长度为 8 的数组；</li><li><code>keys</code>：存储具体的 Key，长度为 8 的数组；</li><li><code>elems</code>：存储具体的 Value，长度为 8 的数组；</li><li><code>overflow</code>：指向 <code>hmap.extra.overflow</code> 溢出桶中的 <code>bmap</code> ；</li><li><code>pad</code>：用于对其内存；</li></ol><h2 id="_3-3-3-初始化" tabindex="-1"><a class="header-anchor" href="#_3-3-3-初始化" aria-hidden="true">#</a> 3.3.3 初始化</h2><p>Go 语言的初始化有两种方式：通过<strong>字面量</strong>和<strong>运行时</strong>。</p><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hashMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
	<span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;B&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),pn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.maplit",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"cmd/compile/internal/gc.maplit",-1),on=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">maplit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> m <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OMAKE<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	a<span class="token punctuation">.</span>Esc <span class="token operator">=</span> n<span class="token punctuation">.</span>Esc
	a<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Set2</span><span class="token punctuation">(</span><span class="token function">typenod</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">nodintconst</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">litas</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

	entries <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">25</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Build list of var[c] = expr.</span>
	<span class="token comment">// Use temporaries so that mapassign1 can have addressable key, elem.</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当哈希表中的元素数量<strong>少于或等于</strong> 25 个时，编译器会将字面量初始化的结构体转化成以下代码，将所有键值对一次加入到哈希表中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hashTbale <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
hashTbale<span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
hashTbale<span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>
hashTbale<span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若元素数量超过 25 个，编译器会创建两个数组分别存储键和值，这些键值会通过如下所示的 for 循环加入哈希表：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>
vstatk <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span> ， <span class="token string">&quot;26&quot;</span><span class="token punctuation">}</span>
vstatv <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>vstak<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    hash<span class="token punctuation">[</span>vstatk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> vstatv<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处的切片还会被编译器继续展开。由此可见<strong>字面量</strong>初始化的两种方式都会使用 <code>make</code> 创建新的哈希表并使用 <code>[]</code> 语法添加元素。</p><h3 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><p>当创建的哈希表被分配到栈上并且容量小于 <code>BUCKETSIZE = 8</code> 时，Go 语言在编译阶段使用如下方式快速初始化哈希表，也是对小容量哈希表的优化：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> h <span class="token operator">*</span>hmap
<span class="token keyword">var</span> hv hmap
<span class="token keyword">var</span> bv bmap
h <span class="token operator">:=</span> <span class="token operator">&amp;</span>hv
b <span class="token operator">:=</span> <span class="token operator">&amp;</span>bv
h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> b
h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fashtrand0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),cn=n("code",null,"make",-1),ln={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/",target:"_blank",rel:"noopener noreferrer"},un={href:"https://draveness.me/golang/tree/runtime.makemap",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"runtime.makemap",-1),kn=n("strong",null,"字面量",-1),dn={href:"https://draveness.me/golang/tree/runtime.makemap",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"runtime.makemap",-1),vn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token operator">*</span>hmap <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token punctuation">{</span>
		hint <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		h <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hmap<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	B <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		B<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>B <span class="token operator">=</span> B

	<span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> nextOverflow <span class="token operator">*</span>bmap
		h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> nextOverflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>mapextra<span class="token punctuation">)</span>
			h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> h
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数流程如下：</p>`,2),hn=n("li",null,"计算哈希表占用的内存是否溢出或者超过能分配的最大值；",-1),bn={href:"https://draveness.me/golang/tree/runtime.fastrand",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.fastrand",-1),fn=n("li",null,[s("根据传入的 "),n("code",null,"hint"),s(" 计算需要的最小桶数量，例如：初始容量为 16，那么 B 的值为满足不等式 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"16"),n("mo",null,"≤"),n("msup",null,[n("mn",null,"2"),n("mi",null,"B")]),n("mo",null,"×"),n("mn",null,"6.5")]),n("annotation",{encoding:"application/x-tex"},"16 \\leq 2^B \\times 6.5")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),n("span",{class:"mord"},"16"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.9247em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"6.5")])])]),s(" 的最小整数，即 2；")],-1),_n={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"runtime.makeBucketArray",-1),wn={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"runtime.makeBucketArray",-1),zn=n("code",null,"B",-1),Bn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> b <span class="token builtin">uint8</span><span class="token punctuation">,</span> dirtyalloc unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>buckets unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> nextOverflow <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	base <span class="token operator">:=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	nbuckets <span class="token operator">:=</span> base
	<span class="token keyword">if</span> b <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		nbuckets <span class="token operator">+=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
		sz <span class="token operator">:=</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size <span class="token operator">*</span> nbuckets
		up <span class="token operator">:=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
		<span class="token keyword">if</span> up <span class="token operator">!=</span> sz <span class="token punctuation">{</span>
			nbuckets <span class="token operator">=</span> up <span class="token operator">/</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	buckets <span class="token operator">=</span> <span class="token function">newarray</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>nbuckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> base <span class="token operator">!=</span> nbuckets <span class="token punctuation">{</span>
		nextOverflow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> base<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>nbuckets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last<span class="token punctuation">.</span><span class="token function">setoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> buckets<span class="token punctuation">,</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当桶的数量小于 2<sup>4</sup> 时，由于数据较少、使用溢出桶的可能性较低，会省略创建的过程以减少额外开销；</li><li>当桶的数量多余 2<sup>4</sup> 时，会额外创建 2<sup>B-4</sup> 个溢出桶；</li></ul>`,2),qn=n("mark",null,"正常桶和溢出桶在内存中存储空间是连续的",-1),On={href:"https://draveness.me/golang/tree/runtime.hmap",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime.hmap",-1),Mn={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.newobject",-1),Kn=p(`<h2 id="_3-3-4-读写操作" tabindex="-1"><a class="header-anchor" href="#_3-3-4-读写操作" aria-hidden="true">#</a> 3.3.4 读写操作</h2><p>哈希表的访问一般通过<strong>下标</strong>或<strong>遍历</strong>进行的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>val <span class="token operator">=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> hash <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都能够获取哈希表数据，但是使用的函数和底层原理完全不同。前者需要直到 Key 并且一次只能获取单个键对应的值，后者可以遍历哈希表中的全部键值对，访问数据无需预先知道 Key。</p><p>数据结构的写一般指的是<strong>增加</strong>、<strong>删除</strong>和<strong>修改</strong>，增加和修改都是使用索引和赋值语句，而删除字典中的数据需要使用关键字 <code>delete</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue
<span class="token function">delete</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h3>`,7),An={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"hash[key]",-1),Ln=n("code",null,"OINDEXMAP",-1),jn={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),Sn=n("code",null,"OINDEXMAP",-1),Vn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v     <span class="token operator">:=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// =&gt; v     := *mapaccess1(maptype, hash, &amp;key)</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// =&gt; v, ok := mapaccess2(maptype, hash, &amp;key)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值语句左侧接受参数的个数会决定使用的运行时方法：</p>`,2),Nn={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"runtime.mapaccess1",-1),In={href:"https://draveness.me/golang/tree/runtime.mapaccess2",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.mapaccess2",-1),Xn=n("code",null,"bool",-1),Fn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> v
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程如下：</p><ol><li>使用 <code>hash0</code> 和哈希函数计算哈希值；</li><li>通过掩码计算桶序号，例如：B 为 2，掩码就为 11，即取哈希值的低 B 位，其值即为桶序号；</li><li>获取哈希值的高 8 位；</li><li>在 <code>bucketloop</code> 循环中，会一次遍历正常桶和溢出桶中的数据，先比较哈希值的高 8 位和桶中的 <code>tophash</code>，之后比较传入的 Key 和桶中存储的 Key。使用高 8 位加速访问，低 B 位选择桶序号，这种设计可以减少同一个桶中有大量相等 <code>tophash</code> 的概率影响性能的情况发生。 <img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2.png" alt="" loading="lazy"></li></ol>`,3),Rn=n("b",null,"图 3-14 读取哈希表中的数据",-1),Qn={href:"https://draveness.me/golang/tree/runtime.mapaccess2",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"runtime.mapaccess2",-1),Un={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"runtime.mapaccess1",-1),$n=n("code",null,"bool",-1),Hn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>v, ok := map[key]</code> 访问哈希表元素可以更加准确知道 <code>v == nil</code> 时，<code>v</code> 是哈希表中的元素还是元素不存在。</p><h3 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h3>`,3),Jn=n("code",null,"hash[k]",-1),ns={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"runtime.mapassign",-1),as={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"runtime.mapaccess1",-1),ps=n("strong",null,"哈希值",-1),es=n("strong",null,"桶",-1),os=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>flags <span class="token operator">^=</span> hashWriting

again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">)</span> <span class="token operator">+</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过遍历比较桶中存储的 <code>tophash</code> 和 Key 的哈希值高 8 位，若找到了则返回目标位置的地址。其中 <code>inserti</code> 表示目标元素在桶中的索引，<code>insertk</code> 和 <code>val</code> 分别表示键值对的地址，获得目标地址后通过算数计算寻址获得键值对 <code>k</code> 和 <code>val</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> inserti <span class="token operator">*</span><span class="token builtin">uint8</span>
	<span class="token keyword">var</span> insertk unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">var</span> val unsafe<span class="token punctuation">.</span>Pointer
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
					insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
					val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">goto</span> done
		<span class="token punctuation">}</span>
		ovf <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ovf <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		b <span class="token operator">=</span> ovf
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的 for 循环会依次遍历正常桶和溢出桶中的数据，判断 <code>tophash</code> 和 <code>key</code>，遍历结束后从循环中跳出。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hashmap-overflow-bucket.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,5),cs=n("b",null,"图 3-15 遍历溢出桶",-1),ls={href:"https://draveness.me/golang/tree/runtime.hmap.newoverflow",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"runtime.hmap.newoverflow",-1),us={href:"https://draveness.me/golang/tree/runtime.hmap",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"runtime.hmap",-1),ks=n("code",null,"noverflow",-1),ds=n("code",null,"noverflow",-1),ms=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		newb <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>newb<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>newb<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>insertk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token operator">*</span>inserti <span class="token operator">=</span> top
	h<span class="token punctuation">.</span>count<span class="token operator">++</span>

done<span class="token punctuation">:</span>
	<span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vs={href:"https://draveness.me/golang/tree/runtime.typedmemmove",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"runtime.typedmemmove",-1),bs=n("code",null,"val",-1),gs={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"runtime.mapassign",-1),_s=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>00018 (+5) CALL runtime.mapassign_fast64(SB)
00020 (5) MOVQ 24(SP), DI               ;; DI = &amp;value
00026 (5) LEAQ go.string.&quot;88&quot;(SB), AX   ;; AX = &amp;&quot;88&quot;
00027 (5) MOVQ AX, (DI)                 ;; *DI = AX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>24(SP)</code>是函数返回的地址，通过 <code>LEAQ</code> 指令将字符串的地址存储到寄存器 <code>AX</code> 中，<code>MOVQ</code> 将字符串 <code>“88”</code> 存储到目标地址完成本次哈希表的写入。</p><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h3><p>在写入的过程中，随着哈希表中元素的增加，其性能会逐渐降低，所以需要更多的桶和内存空间来保证哈希的读写性能：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> again
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ys={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"runtime.mapassign",-1),xs=n("ol",null,[n("li",null,[n("p",null,"装载因子超过 6.5；")]),n("li",null,[n("p",null,"溢出桶的数量过多，分为两种情况："),n("ul",null,[n("li",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"B"),n("mo",null,"<"),n("mn",null,"16")]),n("annotation",{encoding:"application/x-tex"},"B < 16")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"16")])])]),s(" ，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"溢出桶的数量"),n("mo",null,"≥"),n("msup",null,[n("mn",null,"2"),n("mi",null,"B")])]),n("annotation",{encoding:"application/x-tex"},"\\text{溢出桶的数量} \\geq 2^B")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8193em","vertical-align":"-0.136em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"溢出桶的数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])])])])])])])]),s("；")]),n("li",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"B"),n("mo",null,"≥"),n("mn",null,"16")]),n("annotation",{encoding:"application/x-tex"},"B \\geq 16")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8193em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"16")])])]),s("，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"溢出桶的数量"),n("mo",null,"≥"),n("msup",null,[n("mn",null,"2"),n("mn",null,"15")])]),n("annotation",{encoding:"application/x-tex"},"\\text{溢出桶的数量} \\geq 2^{15}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8193em","vertical-align":"-0.136em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"溢出桶的数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"15")])])])])])])])])])])]),s("；")])])])],-1),zs={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},Bs=n("code",null,"runtime.mapassign",-1),qs=p("<p>根据触发条件不同，扩容方式分为两种：</p><ol><li>装载因子超过 6.5 ，进行<strong>翻倍扩容</strong>；</li><li>溢出桶过多，进行<strong>等量扩容</strong>；</li></ol><p><strong>等量扩容</strong>是一种特殊情况下的扩容，当我们持续向哈希表中插入数据并将它们全部删除时，若哈希表中的数据量没有超过阈值，就会不断积累溢出桶造成缓慢的<mark>内存泄露</mark>。等量扩容创建新的桶保存数据，而垃圾回收会清理老的溢出桶并释放内存。</p>",3),Os={href:"https://draveness.me/golang/tree/runtime.hashGrow",target:"_blank",rel:"noopener noreferrer"},Ps=n("code",null,"runtime.hashGrow",-1),Ms=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	bigger <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		bigger <span class="token operator">=</span> <span class="token number">0</span>
		h<span class="token punctuation">.</span>flags <span class="token operator">|=</span> sameSizeGrow
	<span class="token punctuation">}</span>
	oldbuckets <span class="token operator">:=</span> h<span class="token punctuation">.</span>buckets
	newbuckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">:=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token operator">+</span>bigger<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>B <span class="token operator">+=</span> bigger
	h<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags
	h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> oldbuckets
	h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> newbuckets
	h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>
	h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>

	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>oldoverflow <span class="token operator">=</span> h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token boolean">nil</span>
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Es={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},Ks=n("code",null,"runtime.makeBucketArray",-1),As=n("code",null,"oldbuckets",-1),Cs=n("code",null,"buckets",-1),Ls=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hashmap-hashgrow.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),js=n("b",null,"图 3-15 哈希表的扩容",-1),Gs={href:"https://draveness.me/golang/tree/runtime.hashGrow",target:"_blank",rel:"noopener noreferrer"},Ds=n("code",null,"runtime.hashGrow",-1),Ss={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},Vs=n("code",null,"runtime.evacuate",-1),Ns=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">evacuate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> oldbucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	newbit <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">noldbuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> xy <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>evacDst
		x <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		x<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>

		y <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
		y<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldbucket<span class="token operator">+</span>newbit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ts={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},Is=n("code",null,"runtime.evacuate",-1),Ws={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"runtime.evacDst",-1),Fs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hashmap-evacuate-destination.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Rs=n("b",null,"图 3-16 哈希表扩容目的",-1),Qs=n("strong",null,"等量扩容",-1),Ys={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"runtime.evacDst",-1),Zs=n("strong",null,"翻倍扩容",-1),$s=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>		<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
			v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				top <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
				k2 <span class="token operator">:=</span> k
				<span class="token keyword">var</span> useY <span class="token builtin">uint8</span>
				hash <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> hash<span class="token operator">&amp;</span>newbit <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					useY <span class="token operator">=</span> <span class="token number">1</span>
				<span class="token punctuation">}</span>
				b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedX <span class="token operator">+</span> useY
				dst <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span>useY<span class="token punctuation">]</span>

				<span class="token keyword">if</span> dst<span class="token punctuation">.</span>i <span class="token operator">==</span> bucketCnt <span class="token punctuation">{</span>
					dst<span class="token punctuation">.</span>b <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
					dst<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span>
					dst<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
					dst<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				dst<span class="token punctuation">.</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>dst<span class="token punctuation">.</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span>bucketCnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> top
				<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
				<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
				dst<span class="token punctuation">.</span>i<span class="token operator">++</span>
				dst<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				dst<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设两个 Key 的哈希值低 4 位别为 <code>1011</code> 和 <code>1111</code>，原来有 4 个桶，那么掩码为 <code>11</code>；翻倍扩容之后为 8 个桶，掩码为 <code>111</code> 。那么原来的两组数据在 3 号桶中，现在分流到 3 号 和 7 号中。</p><p>​ <img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hashmap-bucket-evacuate.png" alt="" loading="lazy"></p>`,3),Hs=n("b",null,"图 3-17 哈希表数据分流",-1),Js={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},na=n("code",null,"runtime.evacuate",-1),sa={href:"https://draveness.me/golang/tree/runtime.advanceEvacuationMark",target:"_blank",rel:"noopener noreferrer"},aa=n("code",null,"runtime.advanceEvacuationMark",-1),ta=n("code",null,"nevacuate",-1),pa=n("code",null,"oldbuckets",-1),ea=n("code",null,"oldoverflow",-1),oa=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">advanceEvacuationMark</span><span class="token punctuation">(</span>h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> newbit <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span>
	stop <span class="token operator">:=</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">+</span> <span class="token number">1024</span>
	<span class="token keyword">if</span> stop <span class="token operator">&gt;</span> newbit <span class="token punctuation">{</span>
		stop <span class="token operator">=</span> newbit
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">!=</span> stop <span class="token operator">&amp;&amp;</span> <span class="token function">bucketEvacuated</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">==</span> newbit <span class="token punctuation">{</span> <span class="token comment">// newbit == # of oldbuckets</span>
		h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token keyword">if</span> h<span class="token punctuation">.</span>extra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>oldoverflow <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> sameSizeGrow
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取</strong>时若哈希表的 <code>oldbuckets</code> 存在，会先定位到旧桶并在该桶没有被分流时从中获取键值对。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c <span class="token operator">:=</span> h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			m <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
		oldb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>oldb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			b <span class="token operator">=</span> oldb
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为旧桶中的元素还没有被分流，其中还保存着我们需要的数据，所以旧桶会替代新创建的空桶提供数据。</p>`,4),ca=n("strong",null,"扩容",-1),la={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},ia=n("code",null,"runtime.growWork",-1),ua=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ra=n("strong",null,"写入",-1),ka=n("strong",null,"删除",-1),da={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},ma=n("code",null,"runtime.growWork",-1),va=n("strong",null,"元素过多",-1),ha=n("strong",null,"数量翻倍",-1),ba={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},ga=n("code",null,"runtime.growWork",-1),fa=n("strong",null,"读取",-1),_a=n("strong",null,"溢出桶过多",-1),ya=n("strong",null,"等量扩容",-1),wa=n("h3",{id:"删除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#删除","aria-hidden":"true"},"#"),s(" 删除")],-1),xa=n("p",null,[n("strong",null,"删除"),s("哈希表元素使用 "),n("code",null,"delete"),s(" 关键字，将 Key 对应的元素删除；无论元素是否存在函数均不会返回任何结果。")],-1),za=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/hashmap-delete.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Ba=n("code",null,"delete",-1),qa=n("code",null,"ODELETE",-1),Oa={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),Ma=n("code",null,"ODELETE",-1),Ea={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Ka=n("code",null,"runtime.mapdelete",-1),Aa={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Ca=n("code",null,"runtime.mapdelete",-1),La=n("code",null,"mapdelete_faststr",-1),ja=n("code",null,"mapdelete_fast32",-1),Ga=n("code",null,"mapdelete_fast64",-1),Da=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ODELETE<span class="token punctuation">:</span>
		init<span class="token punctuation">.</span><span class="token function">AppendNodes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">.</span>Ninit<span class="token punctuation">)</span>
		map_ <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		key <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		map_ <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>map_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
		key <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

		t <span class="token operator">:=</span> map_<span class="token punctuation">.</span>Type
		fast <span class="token operator">:=</span> <span class="token function">mapfast</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> fast <span class="token operator">==</span> mapslow <span class="token punctuation">{</span>
			key <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> <span class="token function">mkcall1</span><span class="token punctuation">(</span><span class="token function">mapfndel</span><span class="token punctuation">(</span>mapdelete<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> <span class="token function">typename</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> map_<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Sa={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Va=n("code",null,"runtime.mapdelete",-1),Na=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapdelete</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
search<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> search
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			k2 <span class="token operator">:=</span> k
			<span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emptyOne
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-5-小结" tabindex="-1"><a class="header-anchor" href="#_3-3-5-小结" aria-hidden="true">#</a> 3.3.5 小结</h2><p>Go 语言使用<strong>拉链法</strong>来解决哈希冲突的哈希表，其<strong>访问</strong>、<strong>写入</strong>和<strong>删除</strong>操作都在编译期间转换成了运行时的函数或方法。哈希表每个桶中会存储对应<strong>哈希值</strong>的高 8 位，可以快速遍历桶中的元素。</p><p>每个桶 (<code>bmap</code>) 只能存储 8 个键值对，超出的元素会存储到<strong>溢出桶</strong>中。随着元素数量的增加，<strong>溢出桶</strong>的数量和<strong>装载因子</strong>会主键升高，达到一定程度就会触发<strong>扩容</strong>；元素的分流会在调用<strong>写操作</strong>时增量进行，不会造成性能的瞬时巨大抖动。</p><h2 id="_3-3-6-延伸阅读" tabindex="-1"><a class="header-anchor" href="#_3-3-6-延伸阅读" aria-hidden="true">#</a> 3.3.6 延伸阅读</h2>`,5),Ta={href:"https://study.com/academy/lesson/separate-chaining-concept-advantages-disadvantages.html",target:"_blank",rel:"noopener noreferrer"},Ia=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Wa={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"},Xa={href:"https://segmentfault.com/a/1190000039101378",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://golang.design/go-questions/map/principal/#%E4%BB%80%E4%B9%88%E6%98%AF-map",target:"_blank",rel:"noopener noreferrer"},Ra={href:"https://golang.design/go-questions/map/extend/",target:"_blank",rel:"noopener noreferrer"};function Qa(Ya,Ua){const e=c("center"),t=c("ExternalLinkIcon");return i(),u("div",null,[k,a(e,null,{default:o(()=>[d]),_:1}),m,v,a(e,null,{default:o(()=>[h]),_:1}),b,a(e,null,{default:o(()=>[g]),_:1}),f,_,a(e,null,{default:o(()=>[y]),_:1}),w,a(e,null,{default:o(()=>[x]),_:1}),z,a(e,null,{default:o(()=>[B]),_:1}),q,O,P,M,E,n("p",null,[s("Go 语言运行时使用多个数组结构表示哈希表，其中 "),n("a",K,[A,a(t)]),s(" 为最核心的结构体：")]),C,L,j,a(e,null,{default:o(()=>[G]),_:1}),n("p",null,[s("哈希表 "),n("a",D,[S,a(t)]),s(" 的桶是 "),n("a",V,[N,a(t)]),s("。每个 "),n("a",T,[I,a(t)]),s(" 能存储 8 个键值对，单个桶已经装满时就会使用 "),W,s(" 指向的桶来存储溢出的数据。")]),X,n("p",null,[s("桶的结构体 "),n("a",F,[R,a(t)]),s(" 在 Go 语言源代码中定义只包含简单的 "),Q,s(" 字段，"),Y,s(" 存储了键哈希值的高 8 位，通过比较不同键的哈希值高 8 位可以减少访问键值对次数以提高性能：")]),U,n("p",null,[s("在运行期间，"),n("a",Z,[$,a(t)]),s(" 结构体实际不止包含 "),H,s(" 字段，因为哈希表中可能存储不同类型的键值对，其占据的空间大小需要在编译期间进行推导；"),n("a",J,[nn,a(t)]),s(" 中其他的字段在运行时也是通过计算内存地址的方式访问的，所以其定义中不包含这些字段。可以根据编译期间的 "),n("a",sn,[an,a(t)]),s(" 推导出其结构：")]),tn,n("p",null,[s("初始化时需要声明 K-V 的类型，字面量初始化方式将会通过 "),n("a",pn,[en,a(t)]),s(" 函数进行：")]),on,n("p",null,[s("除了上述特定优化之外，只要使用了 "),cn,s(" 创建哈希表，Go 编译器都将会在"),n("a",ln,[s("类型检查"),a(t)]),s("期间将其转换成 "),n("a",un,[rn,a(t)]),s("，使用"),kn,s("只是语言提供的辅助工具，最后调用的都是 "),n("a",dn,[mn,a(t)]),s(":")]),vn,n("ol",null,[hn,n("li",null,[s("调用 "),n("a",bn,[gn,a(t)]),s(" 获取一个随机的哈希种子；")]),fn,n("li",null,[s("使用 "),n("a",_n,[yn,a(t)]),s(" 创建用于保存桶的数组；")])]),n("p",null,[n("a",wn,[xn,a(t)]),s(" 会根据传入的 "),zn,s(" 计算出需要创建的桶数量并在内存中分配一片连续的空间用于存储数据：")]),Bn,n("p",null,[s("有上述代码可知，"),qn,s("，只是被 "),n("a",On,[Pn,a(t)]),s(" 中的不同字段引用，当溢出桶数量较多时会通过 "),n("a",Mn,[En,a(t)]),s(" 创建新的溢出桶。")]),Kn,n("p",null,[s("在编译的"),n("a",An,[s("类型检查"),a(t)]),s("期间，"),Cn,s("以及类似的操作都会被转换成哈希 "),Ln,s(" 操作，"),n("a",jn,[s("中间代码生成"),a(t)]),s("阶段会在 "),n("a",Gn,[Dn,a(t)]),s(" 中将 "),Sn,s(" 操作转换成如下代码：")]),Vn,n("ul",null,[n("li",null,[s("若接受一个参数，会使用 "),n("a",Nn,[Tn,a(t)]),s("，该函数仅会返回一个指向目标值的指针；")]),n("li",null,[s("若接受两个参数，会使用 "),n("a",In,[Wn,a(t)]),s("，除了返回目标值之外，还会返回一个用于表示当前键对应的值是否存在的 "),Xn,s(" 值；")])]),Fn,a(e,null,{default:o(()=>[Rn]),_:1}),n("p",null,[s("另一个函数 "),n("a",Qn,[Yn,a(t)]),s(" 只是在 "),n("a",Un,[Zn,a(t)]),s(" 的基础上多返回了一个标识键值对是否存在的 "),$n,s(" 值：")]),Hn,n("p",null,[s("当形如 "),Jn,s(" 的表达式出现在赋值符号左侧时，该表达式会在编译期间转换成 "),n("a",ns,[ss,a(t)]),s(" 函数调用，该函数和 "),n("a",as,[ts,a(t)]),s(" 类似，首先根据 Key 获取"),ps,s("和对应的"),es,s("。")]),os,a(e,null,{default:o(()=>[cs]),_:1}),n("p",null,[s("若当前桶已经满了，哈希会调用 "),n("a",ls,[is,a(t)]),s(" 创建新桶或使用 "),n("a",us,[rs,a(t)]),s(" 预先在 "),ks,s(" 中创建好的桶保存数据，新创建的桶不仅会被追加到已有桶的末尾还会增加哈希表的 "),ds,s(" 计数器。")]),ms,n("p",null,[s("若当前值在哈希表中不存在，哈希表会为新的键值对规划存储的内存地址，通过 "),n("a",vs,[hs,a(t)]),s(" 将键移动到对应的内存空间中并返回对应值的 "),bs,s("。如果当前键值对在哈希表中存在，那么会直接返回目标区域的内存地址，"),n("a",gs,[fs,a(t)]),s(" 函数不会将值拷贝到桶中，而是返回内存地址，真正的赋值操作是在编译期间：")]),_s,n("p",null,[n("a",ys,[ws,a(t)]),s(" 函数会在以下两种情况发生时触发哈希扩容：")]),xs,n("p",null,[s("Go 语言哈希表的扩容不是一个原子过程，所以 "),n("a",zs,[Bs,a(t)]),s(" 还需要判断当前哈希是否已经处于扩容状态，避免二次扩容。")]),qs,n("p",null,[s("扩容的入口是 "),n("a",Os,[Ps,a(t)]),s("：")]),Ms,n("p",null,[s("哈希表在扩容的过程中，会通过 "),n("a",Es,[Ks,a(t)]),s(" 创建一组新桶和预创建的溢出桶，随后将原有的桶数组设置到 "),As,s(" 上并将新的空桶设置到 "),Cs,s(" 上，溢出桶使用了相同的逻辑；扩容后的哈希表如下：")]),Ls,a(e,null,{default:o(()=>[js]),_:1}),n("p",null,[n("a",Gs,[Ds,a(t)]),s(" 函数只是创建了新桶，并没有对数据进行拷贝和转移。哈希表的数据迁移过程是在 "),n("a",Ss,[Vs,a(t)]),s(" 中完成的，会对传入桶中的元素进行再分配。")]),Ns,n("p",null,[n("a",Ts,[Is,a(t)]),s(" 会将一个旧桶中的数据分流到两个新桶，其创建了两个 "),n("a",Ws,[Xs,a(t)]),s(" 结构体分别指向了一个新桶。")]),Fs,a(e,null,{default:o(()=>[Rs]),_:1}),n("p",null,[s("若为"),Qs,s("，新旧桶之间是一对一的关系，所以两个 "),n("a",Ys,[Us,a(t)]),s(" 只会初始化一个。若为"),Zs,s("，每个旧桶的元素会被分流到两个新桶中，分流逻辑如下：")]),$s,a(e,null,{default:o(()=>[Hs]),_:1}),n("p",null,[n("a",Js,[na,a(t)]),s(" 最后会调用 "),n("a",sa,[aa,a(t)]),s(" 增加哈希的 "),ta,s(" 计数器并在所有的旧桶都被分流之后清空哈希的 "),pa,s(" 和 "),ea,s("。")]),oa,n("p",null,[s("当哈希表处于"),ca,s("状态时，每次向哈希表中写入值时都会触发 "),n("a",la,[ia,a(t)]),s(" 增量拷贝哈希表中的内容：")]),ua,n("p",null,[s("除了"),ra,s("之外，"),ka,s("操作也会在扩容期间触发 "),n("a",da,[ma,a(t)]),s(" 。")]),n("p",null,[s("小结：哈希表在存储"),va,s("时会触发扩容操作，每次都会将桶的"),ha,s("，扩容过程不是原子的，而是通过 "),n("a",ba,[ga,a(t)]),s(" 增量触发，扩容期间"),fa,s("元素会使用旧桶，向哈希表写入数据时会触发旧桶元素的分流。在"),_a,s("时，会进行"),ya,s("，以解决大量写入和删除导致的内存泄露问题。")]),wa,xa,za,n("p",null,[s("在编译期间，"),Ba,s(" 关键字会被转换成操作为 "),qa,s(" 的节点，而 "),n("a",Oa,[Pa,a(t)]),s(" 会将 "),Ma,s(" 节点转换成 "),n("a",Ea,[Ka,a(t)]),s(" 函数簇中的一个，包括 "),n("a",Aa,[Ca,a(t)]),s("、"),La,s("、"),ja,s(" 和 "),Ga,s("：")]),Da,n("p",null,[s("以 "),n("a",Sa,[Va,a(t)]),s(" 为例，其逻辑和写入类似；在扩容期间会先分流元素，之后会寻找桶中的元素完成删除操作。")]),Na,n("ul",null,[n("li",null,[n("a",Ta,[s("Separate Chaining: Concept, Advantages & Disadvantages"),a(t)])])]),Ia,n("ol",null,[n("li",null,[n("a",Wa,[s("Go 语言设计与实现"),a(t)])]),n("li",null,[n("a",Xa,[s("由浅到深，入门Go语言Map实现原理"),a(t)])]),n("li",null,[n("a",Fa,[s("map 的实现原理"),a(t)])]),n("li",null,[n("a",Ra,[s("map 扩容过程"),a(t)])])])])}const $a=l(r,[["render",Qa],["__file","03.3.html.vue"]]);export{$a as default};
