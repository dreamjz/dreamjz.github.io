const e=JSON.parse('{"key":"v-0852c2d9","path":"/note/rpc/gRPC/generated_code.html","title":"Generated code","lang":"zh-CN","frontmatter":{"title":"Generated code","date":"2022-01-05T00:00:00.000Z","category":["golang","rpc"],"tag":["grpc"],"timeline":true},"headers":[{"level":2,"title":"1. Methods on generated server","slug":"_1-methods-on-generated-server","link":"#_1-methods-on-generated-server","children":[{"level":3,"title":"1.1 Unary methods","slug":"_1-1-unary-methods","link":"#_1-1-unary-methods","children":[]},{"level":3,"title":"1.2 Server-streaming methods","slug":"_1-2-server-streaming-methods","link":"#_1-2-server-streaming-methods","children":[]},{"level":3,"title":"1.3 Client-streaming methods","slug":"_1-3-client-streaming-methods","link":"#_1-3-client-streaming-methods","children":[]},{"level":3,"title":"1.4 Bidi-streaming methods","slug":"_1-4-bidi-streaming-methods","link":"#_1-4-bidi-streaming-methods","children":[]},{"level":3,"title":"2.1 Unary Methods","slug":"_2-1-unary-methods","link":"#_2-1-unary-methods","children":[]},{"level":3,"title":"2.2 Server-Streaming methods","slug":"_2-2-server-streaming-methods","link":"#_2-2-server-streaming-methods","children":[]},{"level":3,"title":"2.3 Client-Streaming methods","slug":"_2-3-client-streaming-methods","link":"#_2-3-client-streaming-methods","children":[]},{"level":3,"title":"2.4 Bidi-Streaming methods","slug":"_2-4-bidi-streaming-methods","link":"#_2-4-bidi-streaming-methods","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":3.52,"words":1056},"filePathRelative":"note/rpc/gRPC/generated_code.md","localizedDate":"2022年1月5日","excerpt":"<p><strong>Thread-safety</strong>: note that client-side RPC invocations and server-side RPC handlers are <em>thread-safe</em> and are meant to be run on concurrent goroutines. But also note that for individual streams, incoming and outgoing data is bi-directional but serial; so e.g. <em>inidividual</em> streams do not support concurrent reads or concurrent writes (but reads are safely concurrent with writes).</p>"}');export{e as data};
