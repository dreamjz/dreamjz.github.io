import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as p,H as i}from"./framework-d03928c9.js";const l={},u={href:"https://github.com/golang/go/tree/release-branch.go1.18/src",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="_1-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-数据结构" aria-hidden="true">#</a> 1. 数据结构</h2><h3 id="_1-1-hmap" tabindex="-1"><a class="header-anchor" href="#_1-1-hmap" aria-hidden="true">#</a> 1.1 hmap</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A header for a Go map.</span>
<span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span>
	<span class="token comment">// Make sure this stays in sync with the compiler&#39;s definition.</span>
	count     <span class="token builtin">int</span> <span class="token comment">// # live cells == size of map.  Must be first (used by len() builtin)</span>
	flags     <span class="token builtin">uint8</span>
	B         <span class="token builtin">uint8</span>  <span class="token comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span>
	noverflow <span class="token builtin">uint16</span> <span class="token comment">// approximate number of overflow buckets; see incrnoverflow for details</span>
	hash0     <span class="token builtin">uint32</span> <span class="token comment">// hash seed</span>

	buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// array of 2^B Buckets. may be nil if count==0.</span>
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// previous bucket array of half the size, non-nil only when growing</span>
	nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// progress counter for evacuation (buckets less than this have been evacuated)</span>

	extra <span class="token operator">*</span>mapextra <span class="token comment">// optional fields</span>
<span class="token punctuation">}</span>

<span class="token comment">// mapextra holds fields that are not present on all maps.</span>
<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// If both key and elem do not contain pointers and are inline, then we mark bucket</span>
	<span class="token comment">// type as containing no pointers. This avoids scanning such maps.</span>
	<span class="token comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span>
	<span class="token comment">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span>
	<span class="token comment">// overflow and oldoverflow are only used if key and elem do not contain pointers.</span>
	<span class="token comment">// overflow contains overflow buckets for hmap.buckets.</span>
	<span class="token comment">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span>
	<span class="token comment">// The indirection allows to store a pointer to the slice in hiter.</span>
	overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap

	<span class="token comment">// nextOverflow holds a pointer to a free overflow bucket.</span>
	nextOverflow <span class="token operator">*</span>bmap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hamp</code>：</p>`,4),r=n("ul",null,[n("li",null,[n("code",null,"count"),s(" : 哈希表中元素的数量")]),n("li",null,[n("code",null,"B"),s("：用于表示哈希表 "),n("code",null,"buckets"),s("数量；"),n("code",null,"bukets"),s("数量为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"B")])]),n("annotation",{encoding:"application/x-tex"},"2^B")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])])])])])])])])]),n("li",null,[n("code",null,"overflow"),s("：溢出桶的近似数量")]),n("li",null,[n("code",null,"hash0"),s("：哈希种子")]),n("li",null,[n("code",null,"buckets"),s("：存储桶数组")]),n("li",null,[n("code",null,"oldbukets"),s("：进入扩容状态后，旧存储桶数组")])],-1),d=p(`<p><code>mapextra</code>：</p><ul><li><code>overflow</code>：溢出桶数组</li><li><code>oldoverflow</code>：进入扩容状态后，旧溢出桶数组</li><li><code>nextOverflow</code>：指向下一个可用溢出桶</li></ul><h3 id="_1-2-bmap" tabindex="-1"><a class="header-anchor" href="#_1-2-bmap" aria-hidden="true">#</a> 1.2 bmap</h3><p><code>bmap</code>定义中只有一个字段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其余字段在编译器添加，重建后的结果如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
    values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
    pad      <span class="token builtin">uintptr</span>
    overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>topbits</code>：哈希值高八位；长度为 8 的数组</li><li><code>keys</code>：key；长度为 8 的数组</li><li><code>valuse</code>：value；长度为 8 的数组</li></ul><p>正常桶和溢出桶构成单向链表。</p><h2 id="_2-访问操作" tabindex="-1"><a class="header-anchor" href="#_2-访问操作" aria-hidden="true">#</a> 2. 访问操作</h2><h3 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期" aria-hidden="true">#</a> 编译期</h3><p>根据表达式左边的变量数量决定条用的函数：</p><ul><li>只有一个变量，<code>v := hash[key]</code>；调用函数 <code>runtime.mapaccess1</code></li><li>两个变量，<code>v, ok := hash[key]</code>；调用函数<code>runtime.mapaccess2</code></li></ul><p><code>mapaccess2</code> 会多返回一个 bool 类型值，表示 key 是否存在</p><h3 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	hash <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">hasher</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c <span class="token operator">:=</span> h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// There used to be half as many buckets; mask down one more power of two.</span>
			m <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
		oldb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>oldb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			b <span class="token operator">=</span> oldb
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				k <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectelem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					e <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">return</span> e
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要流程：</p><ol><li>计算 key 的 hash 值</li><li>计算存储桶索引位置，<code>哈希值 mod 桶数组长度</code>： <ul><li>计算掩码 <code>(1 &lt;&lt; B) - 1</code></li><li>进行按位与运算，得到 hash 值的 低 B 位；</li></ul></li><li>若处于扩容中，则尝试从旧桶中获取数据</li><li>获取 hash 值高八位</li><li>遍历桶及其溢出桶，直到找到 value 或 遍历结束 <ul><li>比较 hash 值高八位</li><li>相同，则比较 key</li><li>key 相同，则查找 value， 返回结果</li></ul></li></ol><h2 id="_3-写入" tabindex="-1"><a class="header-anchor" href="#_3-写入" aria-hidden="true">#</a> 3. 写入</h2><h3 id="编译期-1" tabindex="-1"><a class="header-anchor" href="#编译期-1" aria-hidden="true">#</a> 编译期</h3><p>解析表达式，转换成调用 <code>runtime.mapassign</code></p><h3 id="运行时-1" tabindex="-1"><a class="header-anchor" href="#运行时-1" aria-hidden="true">#</a> 运行时</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Like mapaccess, but allocates a slot for the key if it is not present in the map.</span>
<span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	hash <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">hasher</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Set hashWriting after calling t.hasher, since t.hasher may panic,</span>
	<span class="token comment">// in which case we have not actually done a write.</span>
	h<span class="token punctuation">.</span>flags <span class="token operator">^=</span> hashWriting

	<span class="token keyword">if</span> h<span class="token punctuation">.</span>buckets <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">)</span> <span class="token comment">// newarray(t.bucket, 1)</span>
	<span class="token punctuation">}</span>

again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>

	<span class="token keyword">var</span> inserti <span class="token operator">*</span><span class="token builtin">uint8</span>
	<span class="token keyword">var</span> insertk unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">var</span> elem unsafe<span class="token punctuation">.</span>Pointer
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
					insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
					elem <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				k <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// already have a mapping for key. Update it.</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">needkeyupdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> k<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			elem <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">goto</span> done
		<span class="token punctuation">}</span>
		ovf <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ovf <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		b <span class="token operator">=</span> ovf
	<span class="token punctuation">}</span>

	<span class="token comment">// Did not find mapping for key. Allocate new cell &amp; add entry.</span>

	<span class="token comment">// If we hit the max load factor or we have too many overflow buckets,</span>
	<span class="token comment">// and we&#39;re not already in the middle of growing, start growing.</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> again <span class="token comment">// Growing the table invalidates everything, so try again</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// The current bucket and all the overflow buckets connected to it are full, allocate a new one.</span>
		newb <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>newb<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>newb<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		elem <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>insertk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// store new key/elem at insert position</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		kmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>insertk<span class="token punctuation">)</span> <span class="token operator">=</span> kmem
		insertk <span class="token operator">=</span> kmem
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectelem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		vmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">=</span> vmem
	<span class="token punctuation">}</span>
	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token operator">*</span>inserti <span class="token operator">=</span> top
	h<span class="token punctuation">.</span>count<span class="token operator">++</span>

done<span class="token punctuation">:</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>hashWriting <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;concurrent map writes&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> hashWriting
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectelem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		elem <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> elem
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要流程：</p><ol><li><p>计算 key 的 hash 值</p></li><li><p>计算 存储桶 的索引位置</p></li><li><p>若此时处于扩容状态，触发一次扩容操作，对桶中的数据进行分流</p></li><li><p>获取 tophash</p></li><li><p>遍历桶及其溢出桶</p><ul><li><p>若 tophash 为空，插入此位置并<strong>插入</strong> key 和 value，结束。</p></li><li><p>若不为空，则比较 tophash；若不同，则继续 步骤 5）</p></li><li><p>相同，则比较 key ；若不同，则继续 步骤 5）</p></li><li><p>若 key 相同， 则<strong>更新</strong> value；</p></li></ul></li><li><p>判断是否需要扩容，若需要则 继续 步骤 2)</p></li><li><p>遍历结束后，若未找到插入位置，则说明桶<strong>已满</strong>；<strong>创建</strong>新的溢出桶，并<strong>插入</strong></p></li></ol><h2 id="_4-删除" tabindex="-1"><a class="header-anchor" href="#_4-删除" aria-hidden="true">#</a> 4. 删除</h2><h3 id="编译期-2" tabindex="-1"><a class="header-anchor" href="#编译期-2" aria-hidden="true">#</a> 编译期</h3><p>将表达式<code>delete(hash, key)</code>转换成<code>runtime.mapdelete</code>系列函数中的一个。</p><h3 id="运行时-2" tabindex="-1"><a class="header-anchor" href="#运行时-2" aria-hidden="true">#</a> 运行时</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapdelete</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	hash <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">hasher</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Set hashWriting after calling t.hasher, since t.hasher may panic,</span>
	<span class="token comment">// in which case we have not actually done a write (delete).</span>
	h<span class="token punctuation">.</span>flags <span class="token operator">^=</span> hashWriting

	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	bOrig <span class="token operator">:=</span> b
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
search<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> search
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			k2 <span class="token operator">:=</span> k
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				k2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Only clear key if there are pointers in it.</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>ptrdata <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token function">memclrHasPointers</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			e <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elemsize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">indirectelem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>ptrdata <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token function">memclrHasPointers</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emptyOne
			<span class="token comment">// If the bucket now ends in a bunch of emptyOne states,</span>
			<span class="token comment">// change those to emptyRest states.</span>
			<span class="token comment">// It would be nice to make this a separate function, but</span>
			<span class="token comment">// for loops are not currently inlineable.</span>
			<span class="token keyword">if</span> i <span class="token operator">==</span> bucketCnt<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">goto</span> notLast
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">goto</span> notLast
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">for</span> <span class="token punctuation">{</span>
				b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emptyRest
				<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> b <span class="token operator">==</span> bOrig <span class="token punctuation">{</span>
						<span class="token keyword">break</span> <span class="token comment">// beginning of initial bucket, we&#39;re done.</span>
					<span class="token punctuation">}</span>
					<span class="token comment">// Find previous bucket, continue at its last entry.</span>
					c <span class="token operator">:=</span> b
					<span class="token keyword">for</span> b <span class="token operator">=</span> bOrig<span class="token punctuation">;</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token punctuation">}</span>
					i <span class="token operator">=</span> bucketCnt <span class="token operator">-</span> <span class="token number">1</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					i<span class="token operator">--</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> emptyOne <span class="token punctuation">{</span>
					<span class="token keyword">break</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		notLast<span class="token punctuation">:</span>
			h<span class="token punctuation">.</span>count<span class="token operator">--</span>
			<span class="token comment">// Reset the hash seed to make it more difficult for attackers to</span>
			<span class="token comment">// repeatedly trigger hash collisions. See issue 25237.</span>
			<span class="token keyword">if</span> h<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">break</span> search
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>hashWriting <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;concurrent map writes&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> hashWriting
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要流程：</p><ol><li>计算 key 的 hash 值</li><li>计算桶的索引</li><li>若处于扩容状态，则触发一次扩容操作</li><li>遍历桶及其溢出桶，查找 key，若找到则将 key 和 value 删除</li></ol><h2 id="_5-扩容" tabindex="-1"><a class="header-anchor" href="#_5-扩容" aria-hidden="true">#</a> 5. 扩容</h2><h3 id="扩容条件" tabindex="-1"><a class="header-anchor" href="#扩容条件" aria-hidden="true">#</a> 扩容条件</h3>`,34),v=n("ol",null,[n("li",null,"装载因子超过 6.5"),n("li",null,[s("溢出桶过多；溢出桶的数量近似和正常桶数量一样多（小于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"15")])]),n("annotation",{encoding:"application/x-tex"},"2^{15}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"15")])])])])])])])])])])]),s("使用准确值，大于等于则使用近似值）")])],-1),m=p('<h3 id="扩容类型" tabindex="-1"><a class="header-anchor" href="#扩容类型" aria-hidden="true">#</a> 扩容类型</h3><ol><li>翻倍扩容，状态因子超过6.5</li><li>等量扩容，溢出桶过多</li></ol><h3 id="扩容流程" tabindex="-1"><a class="header-anchor" href="#扩容流程" aria-hidden="true">#</a> 扩容流程</h3><p>等量扩容：</p><ul><li>创建新的桶数组，将旧桶数据以一对一关系进行迁移</li></ul><p>翻倍扩容：</p><ol><li>创建大小为旧桶两倍的新桶，将一个旧桶的数据分流到两个新桶</li></ol><h3 id="扩容操作时机" tabindex="-1"><a class="header-anchor" href="#扩容操作时机" aria-hidden="true">#</a> 扩容操作时机</h3><p>扩容并不是在一次完成，而是在<strong>写入</strong>和<strong>删除</strong>操作时对对当前操作的桶进行<strong>一次</strong>扩容操作。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',10),b={href:"https://github.com/golang/go/tree/release-branch.go1.18/src",target:"_blank",rel:"noopener noreferrer"},h={href:"https://draveness.me/golang/",target:"_blank",rel:"noopener noreferrer"};function f(y,w){const a=i("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("以 "),n("a",u,[s("gov1.18"),t(a)]),s("为例总结 map 的底层实现。")]),k,r,d,v,m,n("ol",null,[n("li",null,[n("a",b,[s("https://github.com/golang/go/tree/release-branch.go1.18/src"),t(a)])]),n("li",null,[n("a",h,[s("https://draveness.me/golang/"),t(a)])])])])}const x=e(l,[["render",f],["__file","2.map_underlying.html.vue"]]);export{x as default};
