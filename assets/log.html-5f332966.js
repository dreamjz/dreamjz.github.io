import{_ as e,Z as p,$ as o,a0 as n,a1 as s,a2 as t,a3 as c,H as i}from"./framework-09afcf0b.js";const l={},u=c(`<h2 id="introduction-简介" tabindex="-1"><a class="header-anchor" href="#introduction-简介" aria-hidden="true">#</a> Introduction 简介</h2><p>在日常开发中，日志功能是必不可少的，虽然可以使用<code>fmt</code>库输出一些信息，但灵活性不够；golang提供了标准库<code>log</code>，可以实现基本的日志功能</p><h2 id="quick-start-快速开始" tabindex="-1"><a class="header-anchor" href="#quick-start-快速开始" aria-hidden="true">#</a> Quick Start 快速开始</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;Kesa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User: %s login,ID:%d&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Warning hacker %s detected&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">)</span>

	<span class="token comment">// do not execute</span>
	log<span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span><span class="token string">&quot;User:%s[ID:%d] login failed&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  go run ./main.go
<span class="token number">2021</span>/10/27 <span class="token number">11</span>:59:15 User: Kesa login,ID:1
<span class="token number">2021</span>/10/27 <span class="token number">11</span>:59:15 Warning hacker Kesa detected
<span class="token builtin class-name">exit</span> status <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>log</code>提供了三组函数:</p><ul><li><code>Print/Printf/Println</code>:正常输出日志</li><li><code>Panic/Panicf/Panicln</code>：输出日志后以拼装好的字符串作为参数调用<code>panic</code></li><li><code>Fatal/Fatalf/Fatalln</code>:输出日志后，调用<code>os.Exit(1)</code>退出程序</li></ul><p><code>log</code>默认输出至标准错误(<code>stderr</code>)，每条日志之前会加上日期和时间；若日志信息不是以换行符结尾的则会加上换行符，即每条日志均会在新行中打印</p><p>虽然日志均会在新行打印，但是<code>Print</code>和<code>Println</code>是有区别的,看下面的示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2021</span>/10/27 <span class="token number">14</span>:17:38 A1 2B
<span class="token number">2021</span>/10/27 <span class="token number">14</span>:17:38 A <span class="token number">1</span> <span class="token number">2</span> B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Print</code>只会在两个均不为<code>string</code>型的参数间添加空格，如<code>A1 2B</code>;而<code>Println</code>会在所有的参数之间加空格,如<code>A 1 2 B</code></p><h2 id="定制" tabindex="-1"><a class="header-anchor" href="#定制" aria-hidden="true">#</a> 定制</h2><h3 id="前缀" tabindex="-1"><a class="header-anchor" href="#前缀" aria-hidden="true">#</a> 前缀</h3><p><code>log.SetPrefix</code>会为每条日志文本前添加一个前缀</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID       <span class="token builtin">int</span>
	Username <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;Kesa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// set prefix</span>
	log<span class="token punctuation">.</span><span class="token function">SetPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;[Login]&quot;</span><span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User: %s login,ID:%d&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Login]2021/10/27 14:25:08 User: Kesa login,ID:1
[Login]2021/10/27 14:25:08 Warning hacker Kesa detected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h3><p>设置选项可以在每条输出的文本前添加额外信息，如时间，文件名等</p><p><code>log</code>提供了6个选项：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/log/log.go</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// the date in the local time zone: 2009/01/23</span>
	Ltime                         <span class="token comment">// the time in the local time zone: 01:23:23</span>
	Lmicroseconds                 <span class="token comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span>
	Llongfile                     <span class="token comment">// full file name and line number: /a/b/c/d.go:23</span>
	Lshortfile                    <span class="token comment">// final file name element and line number: d.go:23. overrides Llongfile</span>
	LUTC                          <span class="token comment">// if Ldate or Ltime is set, use UTC rather than the local time zone</span>
	Lmsgprefix                    <span class="token comment">// move the &quot;prefix&quot; from the beginning of the line to before the message</span>
	LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// initial values for the standard logger</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Ldate</code>：输出当地时区的日期，如:<code>2021/10/27</code></li><li><code>Ltime</code>:输出当地时区的时间,如：<code>14:31:21</code></li><li><code>Lmicroseconds</code>:输出时间精确到微秒，设置此选项就无需设置<code>Ltime</code>,如<code>11:45:45.123123</code></li><li><code>Llongfile</code>:输出长文件名和行号，含包名，如：<code>/a/b/c/d.go:23</code></li><li><code>Lshortfile</code>:输出短文件名和行号，不含包名，如：<code>d.go:23</code></li><li><code>LUTC</code>：若在<code>Ldate</code>和<code>Ltime</code>之后设置，将输出UTC时间</li><li><code>Lmsgprefix</code>:将设置的日志前缀从行首移动至日志信息的开头</li><li><code>LstdFlags</code>：logger的默认设置，设置<code>Ldate</code>和<code>Ltime</code></li></ul><p>使用<code>log.SetFlags</code>设置选项，可以设置多个：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;Kesa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// set prefix</span>
	log<span class="token punctuation">.</span><span class="token function">SetPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;[Login]&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">// set flag</span>
	log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>Llongfile <span class="token operator">|</span> log<span class="token punctuation">.</span>Ldate <span class="token operator">|</span> log<span class="token punctuation">.</span>Ltime <span class="token operator">|</span> log<span class="token punctuation">.</span>Lmsgprefix<span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User: %s login,ID:%d&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2021</span>/10/27 <span class="token number">16</span>:14:17 main.go:22: <span class="token punctuation">[</span>Login<span class="token punctuation">]</span>User: Kesa login,ID:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到前缀<code>[login]</code>被移动到日志信息之前了</p><p>调用<code>log.Flags()</code>可以查看当前的设置,由于设置返回的值为整型，不够直观，可以编写函数转成字符串，在上述例子中添加以下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">LogFlagsToString</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">LogFlagsToString</span><span class="token punctuation">(</span>flags <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> buffer bytes<span class="token punctuation">.</span>Buffer

	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Ldate <span class="token operator">==</span> log<span class="token punctuation">.</span>Ldate <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Ldate&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Ltime <span class="token operator">==</span> log<span class="token punctuation">.</span>Ltime <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Ltime&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Lmicroseconds <span class="token operator">==</span> log<span class="token punctuation">.</span>Lmicroseconds <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Lmicroseconds&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Llongfile <span class="token operator">==</span> log<span class="token punctuation">.</span>Llongfile <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Llongfile&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Lshortfile <span class="token operator">==</span> log<span class="token punctuation">.</span>Lshortfile <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Lshortfile&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>LUTC <span class="token operator">==</span> log<span class="token punctuation">.</span>LUTC <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Ldate&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>Lmsgprefix <span class="token operator">==</span> log<span class="token punctuation">.</span>Lmsgprefix <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|Lmsgprefix&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> flags<span class="token operator">&amp;</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">==</span> log<span class="token punctuation">.</span>LstdFlags <span class="token punctuation">{</span>
		buffer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;|LstdFlags&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> buffer<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义" tabindex="-1"><a class="header-anchor" href="#自定义" aria-hidden="true">#</a> 自定义</h3><p>实际上，<code>log</code>库定义了一个默认的Logger <code>std</code>,意为标准日志，直接调用的<code>log</code>库的函数实际上内部会调用<code>std</code>的方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/log/log.go</span>
<span class="token keyword">var</span> std <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> LstdFlags<span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Panicf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span>
  std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以自定义Logger:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// create-logger/main.go</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID       <span class="token builtin">int</span>
	Username <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	u <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;Kesa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	buf <span class="token operator">:=</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">{</span><span class="token punctuation">}</span>
	logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;[login]&quot;</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token operator">|</span>log<span class="token punctuation">.</span>Lmsgprefix<span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User %s(ID:%d) login &quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2021</span>/10/27 <span class="token number">17</span>:21:55 <span class="token punctuation">[</span>login<span class="token punctuation">]</span>User Kesa<span class="token punctuation">(</span>ID:1<span class="token punctuation">)</span> login 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>log.New</code>接受三个参数：</p><ul><li><code>io.Writer</code>:日志信息会写入其中</li><li><code>prefix</code>:日志前缀</li><li><code>flag</code>:日志选项</li></ul><p>上面的示例中将日志写入<code>bytes.Buffer</code>中，之后将<code>buf</code>打印到标准输出</p><p><code>log.New</code>的第一个参数可以使用<code>io.MultiWriter</code>实现多目的输出，下例将日志同时输出至标准输出、buffer和文件中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID       <span class="token builtin">int</span>
	Username <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	u <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		ID<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;Kesa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	writer1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">{</span><span class="token punctuation">}</span>
	writer2 <span class="token operator">:=</span> os<span class="token punctuation">.</span>Stdout
	writer3<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;./multi.log&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;create file failed:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span><span class="token function">MultiWriter</span><span class="token punctuation">(</span>writer1<span class="token punctuation">,</span> writer2<span class="token punctuation">,</span> writer3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;[Multi]&quot;</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token operator">|</span>log<span class="token punctuation">.</span>Lmsgprefix<span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s login,ID:%d&quot;</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go run ./main.go 
<span class="token number">2021</span>/10/27 <span class="token number">20</span>:49:35 <span class="token punctuation">[</span>Multi<span class="token punctuation">]</span> Kesa login,ID:1
Buf:2021/10/27 <span class="token number">20</span>:49:35 <span class="token punctuation">[</span>Multi<span class="token punctuation">]</span> Kesa login,ID:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时生成文件<code>multi.log</code>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2021/10/27 20:52:32 [Multi]Kesa login,ID:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h4><p><code>log</code>库的核心是<code>Output</code>方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/log/log.go</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Output</span><span class="token punctuation">(</span>calldepth <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// get this early.</span>
  <span class="token keyword">var</span> file <span class="token builtin">string</span>
  <span class="token keyword">var</span> line <span class="token builtin">int</span>
  l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> l<span class="token punctuation">.</span>flag<span class="token operator">&amp;</span><span class="token punctuation">(</span>Lshortfile<span class="token operator">|</span>Llongfile<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token comment">// Release lock while getting caller info - it&#39;s expensive.</span>
    l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> ok <span class="token builtin">bool</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> ok <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span>calldepth<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
      file <span class="token operator">=</span> <span class="token string">&quot;???&quot;</span>
      line <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  l<span class="token punctuation">.</span>buf <span class="token operator">=</span> l<span class="token punctuation">.</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>
  l<span class="token punctuation">.</span><span class="token function">formatHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> now<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
  l<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> s<span class="token operator">...</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\n&#39;</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
  <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果设置了<code>Lshortfile</code>或<code>Llongfile</code>，<code>Output</code>方法中会调用<code>runtime.Caller</code>获取文件名和行号；<code>runtime.Caller</code>的参数<code>calldepth</code>表示获取调用栈向上多少层信息，当前层为0</p><p>一般的调用路径为：</p><ul><li>程序中使用<code>log.Printf</code>之类的函数</li><li><code>log.Printf</code>内调用<code>std.Output</code></li><li><code>Output</code>方法中需要获取调用<code>log.Printf</code>的文件和行号,这里<code>calldepth</code>为2 <ul><li><code>calldepth</code>为0表示<code>Output</code>调用<code>runtime.Caller</code>的那一行信息</li><li><code>calldepth</code>为1表示<code>log.Printf</code>调用<code>Output</code>的那一行信息</li><li><code>calldepth</code>为2表示调用<code>log.Printf</code>的那一行信息</li></ul></li><li>调用<code>formatHeader</code>处理前缀和选项</li><li>将生成的字节流写入<code>Writer</code>之中</li></ul><p>值得注意的是此处有两个优化技巧：</p><ul><li>由于<code>runtime.Caller</code>调用比较耗时，先释放锁，避免等待时间过长</li><li>为避免频繁的内存分配，<code>logger</code>保存了一个<code>[]byte</code>类型的<code>buf</code>，可重复使用，前缀和日志内容先写入到<code>buf</code>中，之后统一写入<code>Writer</code>，减少IO操作</li></ul><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>标准库的<code>log</code>比较小巧，可以简单使用；但若其不满足功能，也有很多优秀的开源log库可供选择，如：zap,logrus,zerolog等</p><h2 id="reference-参考" tabindex="-1"><a class="header-anchor" href="#reference-参考" aria-hidden="true">#</a> Reference 参考</h2>`,53),r={href:"https://golang.org/pkg/log",target:"_blank",rel:"noopener noreferrer"},d={href:"https://darjun.github.io/2020/02/07/godailylib/log",target:"_blank",rel:"noopener noreferrer"},k={href:"https://groups.google.com/g/golang-nuts/c/SOibvyF6Tjo",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/golang/go/issues/2062",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/golang",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/golang/go",target:"_blank",rel:"noopener noreferrer"};function b(f,h){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[s("log"),t(a)]),s(" godoc")]),n("li",null,[n("a",d,[s("log"),t(a)]),s(" darjun/blog")]),n("li",null,[n("a",k,[s("log.Print() ? log.Println() ? What the difference ?"),t(a)]),s(" google groups")]),n("li",null,[n("a",v,[s("log.Print behaves like log.Println"),t(a)]),s(),n("a",m,[s("golang"),t(a)]),s("/"),n("strong",null,[n("a",g,[s("go"),t(a)])]),s(" issue")])])])}const q=e(l,[["render",b],["__file","log.html.vue"]]);export{q as default};
