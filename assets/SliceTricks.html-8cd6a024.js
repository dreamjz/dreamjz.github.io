import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as i}from"./framework-09afcf0b.js";const l={},u={href:"https://ueokande.github.io/go-slice-tricks/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/golang/go/wiki/SliceTricks",target:"_blank",rel:"noopener noreferrer"},k=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040025782.png",alt:"slice tricks",tabindex:"0",loading:"lazy"}),n("figcaption",null,"slice tricks")],-1),d=n("p",null,[s("Since the introduction of the "),n("code",null,"append"),s(" built-in, most of the functionality of the "),n("code",null,"container/vector"),s(" package, which was removed in Go 1, can be replicated using "),n("code",null,"append"),s(" and "),n("code",null,"copy"),s(".")],-1),v={href:"https://pkg.go.dev/golang.org/x/exp/slices",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"golang.org/x/exp/slices",-1),b=p(`<p>Here are the vector methods and their slice-manipulation analogues:</p><h4 id="appendvector" tabindex="-1"><a class="header-anchor" href="#appendvector" aria-hidden="true">#</a> AppendVector</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> Copy</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>

<span class="token comment">// These two are often a little slower than the above one,</span>
<span class="token comment">// but they would be more efficient if there are more</span>
<span class="token comment">// elements to be appended to b after copying.</span>
b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// This one-line implementation is equivalent to the above</span>
<span class="token comment">// two-line make+copy implementation logically. But it is</span>
<span class="token comment">// actually a bit slower (as of Go toolchain v1.16).</span>
b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cut" tabindex="-1"><a class="header-anchor" href="#cut" aria-hidden="true">#</a> Cut</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token comment">// or</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delete-without-preserving-order" tabindex="-1"><a class="header-anchor" href="#delete-without-preserving-order" aria-hidden="true">#</a> Delete without preserving order</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> 
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NOTE</strong> If the type of the element is a <em>pointer</em> or a struct with pointer fields, which need to be garbage collected, the above implementations of <code>Cut</code> and <code>Delete</code> have a potential <em>memory leak</em> problem: some elements with values are still referenced by slice <code>a</code>&#39;s underlying array, just not &quot;visible&quot; in the slice. Because the &quot;deleted&quot; value is referenced in the underlying array, the deleted value is still &quot;reachable&quot; during GC, even though the value cannot be referenced by your code. If the underlying array is long-lived, this represents a leak. The following code can fix this problem:</p><blockquote><p><strong>Cut</strong></p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span>j<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// or the zero value of T</span>
<span class="token punctuation">}</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span>j<span class="token operator">+</span>i<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Delete</strong></p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// or the zero value of T</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Delete without preserving order</strong></p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="expand" tabindex="-1"><a class="header-anchor" href="#expand" aria-hidden="true">#</a> Expand</h4><p>Insert <code>n</code> elements at position <code>i</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="extend" tabindex="-1"><a class="header-anchor" href="#extend" aria-hidden="true">#</a> Extend</h4><p>Append <code>n</code> elements:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="extend-capacity" tabindex="-1"><a class="header-anchor" href="#extend-capacity" aria-hidden="true">#</a> Extend Capacity</h4><p>Make sure there is space to append <code>n</code> elements without re-allocating:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
	a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter-in-place" tabindex="-1"><a class="header-anchor" href="#filter-in-place" aria-hidden="true">#</a> Filter (in place)</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n <span class="token operator">:=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">keep</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x
		n<span class="token operator">++</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> Insert</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>NOTE</strong>: The second <code>append</code> creates a new slice with its own underlying storage and copies elements in <code>a[i:]</code> to that slice, and these elements are then copied back to slice <code>a</code> (by the first <code>append</code>). The creation of the new slice (and thus memory garbage) and the second copy can be avoided by using an alternative way:</p><blockquote><p><strong>Insert</strong></p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment">/* use the zero value of the element type */</span><span class="token punctuation">)</span>
<span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insertvector" tabindex="-1"><a class="header-anchor" href="#insertvector" aria-hidden="true">#</a> InsertVector</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// The above one-line way copies a[i:] twice and</span>
<span class="token comment">// allocates at least once.</span>
<span class="token comment">// The following verbose way only copies elements</span>
<span class="token comment">// in a[i:] once and allocates at most once.</span>
<span class="token comment">// But, as of Go toolchain 1.16, due to lacking of</span>
<span class="token comment">// optimizations to avoid elements clearing in the</span>
<span class="token comment">// &quot;make&quot; call, the verbose way is not always faster.</span>
<span class="token comment">//</span>
<span class="token comment">// Future compiler optimizations might implement</span>
<span class="token comment">// both in the most efficient ways.</span>
<span class="token comment">//</span>
<span class="token comment">// Assume element type is int.</span>
<span class="token keyword">func</span> <span class="token function">Insert</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">,</span> vs <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s2 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vs<span class="token punctuation">)</span>
		<span class="token keyword">return</span> s2
	<span class="token punctuation">}</span>
	s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vs<span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s2
<span class="token punctuation">}</span>

a <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> b<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> Push</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pop" tabindex="-1"><a class="header-anchor" href="#pop" aria-hidden="true">#</a> Pop</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x<span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="push-front-unshift" tabindex="-1"><a class="header-anchor" href="#push-front-unshift" aria-hidden="true">#</a> Push Front/Unshift</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pop-front-shift" tabindex="-1"><a class="header-anchor" href="#pop-front-shift" aria-hidden="true">#</a> Pop Front/Shift</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x<span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="additional-tricks" tabindex="-1"><a class="header-anchor" href="#additional-tricks" aria-hidden="true">#</a> Additional Tricks</h2><h3 id="filtering-without-allocating" tabindex="-1"><a class="header-anchor" href="#filtering-without-allocating" aria-hidden="true">#</a> Filtering without allocating</h3><p>This trick uses the fact that a slice shares the same backing array and capacity as the original, so the storage is reused for the filtered slice. Of course, the original contents are modified.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For elements which must be garbage collected, the following code can be included afterwards:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// or the zero value of T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reversing" tabindex="-1"><a class="header-anchor" href="#reversing" aria-hidden="true">#</a> Reversing</h3><p>To replace the contents of a slice with the same elements but in reverse order:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
	opp <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i
	a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>opp<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>opp<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The same thing, except with two indices:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shuffling" tabindex="-1"><a class="header-anchor" href="#shuffling" aria-hidden="true">#</a> Shuffling</h3><p>Fisher–Yates algorithm:</p>`,57),h={href:"https://pkg.go.dev/math/rand#Shuffle",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
    j <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="batching-with-minimal-allocation" tabindex="-1"><a class="header-anchor" href="#batching-with-minimal-allocation" aria-hidden="true">#</a> Batching with minimal allocation</h3><p>Useful if you want to do batch processing on large slices.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>actions <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
batchSize <span class="token operator">:=</span> <span class="token number">3</span>
batches <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token operator">+</span> batchSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> batchSize<span class="token punctuation">)</span>

<span class="token keyword">for</span> batchSize <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    actions<span class="token punctuation">,</span> batches <span class="token operator">=</span> actions<span class="token punctuation">[</span>batchSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> actions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>batchSize<span class="token punctuation">:</span>batchSize<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
batches <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> actions<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yields the following:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="in-place-deduplicate-comparable" tabindex="-1"><a class="header-anchor" href="#in-place-deduplicate-comparable" aria-hidden="true">#</a> In-place deduplicate (comparable)</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;sort&quot;</span>

in <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment">// any item can be sorted</span>
sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>
j <span class="token operator">:=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> in<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
		<span class="token keyword">continue</span>
	<span class="token punctuation">}</span>
	j<span class="token operator">++</span>
	<span class="token comment">// preserve the original data</span>
	<span class="token comment">// in[i], in[j] = in[j], in[i]</span>
	<span class="token comment">// only set what is required</span>
	in<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
result <span class="token operator">:=</span> in<span class="token punctuation">[</span><span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// [1 2 3 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="move-to-front-or-prepend-if-not-present-in-place-if-possible" tabindex="-1"><a class="header-anchor" href="#move-to-front-or-prepend-if-not-present-in-place-if-possible" aria-hidden="true">#</a> Move to front, or prepend if not present, in place if possible.</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// moveToFront moves needle to the front of haystack, in place if possible.</span>
<span class="token keyword">func</span> <span class="token function">moveToFront</span><span class="token punctuation">(</span>needle <span class="token builtin">string</span><span class="token punctuation">,</span> haystack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> needle <span class="token punctuation">{</span>
		<span class="token keyword">return</span> haystack
	<span class="token punctuation">}</span>
	prev <span class="token operator">:=</span> needle
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> haystack <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			haystack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> needle
			prev <span class="token operator">=</span> elem
		<span class="token keyword">case</span> elem <span class="token operator">==</span> needle<span class="token punctuation">:</span>
			haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prev
			<span class="token keyword">return</span> haystack
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prev
			prev <span class="token operator">=</span> elem
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

haystack <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">}</span> <span class="token comment">// [a b c d e]</span>
haystack <span class="token operator">=</span> <span class="token function">moveToFront</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> haystack<span class="token punctuation">)</span>         <span class="token comment">// [c a b d e]</span>
haystack <span class="token operator">=</span> <span class="token function">moveToFront</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> haystack<span class="token punctuation">)</span>         <span class="token comment">// [f c a b d e]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sliding-window" tabindex="-1"><a class="header-anchor" href="#sliding-window" aria-hidden="true">#</a> Sliding Window</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// returns the input slice as the first element</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> size <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>input<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// allocate slice at the precise size we need</span>
	r <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token operator">-</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">{</span>
		r <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> input<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function f(y,w){const a=i("ExternalLinkIcon");return o(),c("div",null,[n("ul",null,[n("li",null,[s("Pic: "),n("a",u,[s("https://ueokande.github.io/go-slice-tricks/"),t(a)])]),n("li",null,[s("Doc: "),n("a",r,[s("https://github.com/golang/go/wiki/SliceTricks"),t(a)])])]),k,d,n("p",null,[s("Since the introduction of generics, generic implementations of several of these functions are available in the "),n("a",v,[m,t(a)]),s(" package.")]),b,n("blockquote",null,[n("p",null,[s("Since go1.10, this is available at "),n("a",h,[s("math/rand.Shuffle"),t(a)])])]),g])}const _=e(l,[["render",f],["__file","SliceTricks.html.vue"]]);export{_ as default};
