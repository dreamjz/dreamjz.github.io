const e=JSON.parse('{"key":"v-240501e7","path":"/reading/algorithm/offer_oriented/AL_DS/06_stack/06.2.html","title":"6.2 栈应用","lang":"zh-CN","frontmatter":{"title":"6.2 栈应用","date":"2023-09-11T00:00:00.000Z","category":["algorithm"]},"headers":[{"level":2,"title":"6.2.1 问题36: 后缀表达式","slug":"_6-2-1-问题36-后缀表达式","link":"#_6-2-1-问题36-后缀表达式","children":[{"level":3,"title":"6.2.1.1 分析&题解","slug":"_6-2-1-1-分析-题解","link":"#_6-2-1-1-分析-题解","children":[]}]},{"level":2,"title":"6.2.2 问题37: 行星碰撞","slug":"_6-2-2-问题37-行星碰撞","link":"#_6-2-2-问题37-行星碰撞","children":[{"level":3,"title":"6.2.2.1 分析","slug":"_6-2-2-1-分析","link":"#_6-2-2-1-分析","children":[]},{"level":3,"title":"6.2.2.2 题解","slug":"_6-2-2-2-题解","link":"#_6-2-2-2-题解","children":[]}]},{"level":2,"title":"6.2.3 问题38: 每日温度","slug":"_6-2-3-问题38-每日温度","link":"#_6-2-3-问题38-每日温度","children":[{"level":3,"title":"6.2.3.1 分析","slug":"_6-2-3-1-分析","link":"#_6-2-3-1-分析","children":[]},{"level":3,"title":"6.2.3.2 题解","slug":"_6-2-3-2-题解","link":"#_6-2-3-2-题解","children":[]}]},{"level":2,"title":"6.2.4 问题39: 直方图的最大矩形面积","slug":"_6-2-4-问题39-直方图的最大矩形面积","link":"#_6-2-4-问题39-直方图的最大矩形面积","children":[{"level":3,"title":"6.2.4.1 分析&题解","slug":"_6-2-4-1-分析-题解","link":"#_6-2-4-1-分析-题解","children":[]}]},{"level":2,"title":"6.2.5 问题40: 矩阵中的最大矩形","slug":"_6-2-5-问题40-矩阵中的最大矩形","link":"#_6-2-5-问题40-矩阵中的最大矩形","children":[{"level":3,"title":"6.2.5.1 分析&题解","slug":"_6-2-5-1-分析-题解","link":"#_6-2-5-1-分析-题解","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":8.92,"words":2677},"filePathRelative":"reading/algorithm/offer_oriented/AL_DS/06_stack/06.2.md","localizedDate":"2023年9月11日","excerpt":"<p>如果数据的保存顺序和使用顺序相反, 具有后进先出的特点, 可以考虑使用栈来解决.</p>\\n<h2> 6.2.1 问题36: 后缀表达式</h2>\\n<p><a href=\\"https://leetcode.cn/problems/8Zf90G/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LCR 036. 逆波兰表达式求值</a></p>\\n<blockquote>\\n<p>根据<a href=\\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> 逆波兰表示法</a>，求该后缀表达式的计算结果。</p>\\n<p>有效的算符包括 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\\n<p><strong>说明：</strong></p>\\n<ul>\\n<li>整数除法只保留整数部分。</li>\\n<li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>\\n</ul>\\n<p><strong>示例 1：</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>输入：tokens = [\\"2\\",\\"1\\",\\"+\\",\\"3\\",\\"*\\"]\\n输出：9\\n解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>示例 2：</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>输入：tokens = [\\"4\\",\\"13\\",\\"5\\",\\"/\\",\\"+\\"]\\n输出：6\\n解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>示例 3：</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>输入：tokens = [\\"10\\",\\"6\\",\\"9\\",\\"3\\",\\"+\\",\\"-11\\",\\"*\\",\\"/\\",\\"*\\",\\"17\\",\\"+\\",\\"5\\",\\"+\\"]\\n输出：22\\n解释：\\n该算式转化为常见的中缀算术表达式为：\\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>提示：</strong></p>\\n<ul>\\n<li><code>1 &lt;= tokens.length &lt;= 104</code></li>\\n<li><code>tokens[i]</code> 要么是一个算符（<code>\\"+\\"</code>、<code>\\"-\\"</code>、<code>\\"*\\"</code> 或 <code>\\"/\\"</code>），要么是一个在范围 <code>[-200, 200]</code> 内的整数</li>\\n</ul>\\n<p><strong>逆波兰表达式：</strong></p>\\n<p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p>\\n<ul>\\n<li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li>\\n<li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li>\\n</ul>\\n<p>逆波兰表达式主要有以下两个优点：</p>\\n<ul>\\n<li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + * </code>也可以依据次序计算出正确结果。</li>\\n<li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li>\\n</ul>\\n</blockquote>"}');export{e as data};
