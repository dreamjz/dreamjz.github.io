import{_ as r,Z as k,$ as m,a0 as n,a1 as s,a2 as a,a5 as l,a4 as e,H as u}from"./framework-d03928c9.js";const d={},v=n("h2",{id:"_1-quick-sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-quick-sort","aria-hidden":"true"},"#"),s(" 1. Quick Sort")],-1),h={href:"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"partition-exchange sort",-1),g=n("p",null,[n("strong",null,"时间复杂度(Time Complexity)"),s(":")],-1),f=n("ul",null,[n("li",null,[s("最坏(Worst-case): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("最好(Best-case): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(nlogn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("平均(Average): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(nlogn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])])],-1),w=n("p",null,[n("strong",null,"空间复杂度(Space Complexity)"),s(":")],-1),y=n("ul",null,[n("li",null,[s("最坏(Worst-case): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("最好(Best-case): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(logn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("平均(Average): "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(logn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])])],-1),x=e(`<h3 id="_1-1-流程" tabindex="-1"><a class="header-anchor" href="#_1-1-流程" aria-hidden="true">#</a> 1.1 流程</h3><ol><li>选取<strong>基准</strong>(pivot)</li><li><strong>分区(partition)</strong>: 将大于基准的元素放入其右边 小于的放入其左边; 分区结束后形成以<strong>基准</strong>为界, 形成左右分区</li><li>将左右分区**递归(recursive)**执行步骤1), 直到分区只剩下一个元素为止.</li></ol><h3 id="_1-2-lomuto-partition" tabindex="-1"><a class="header-anchor" href="#_1-2-lomuto-partition" aria-hidden="true">#</a> 1.2 Lomuto Partition</h3><p>快速排序流程:</p><ol><li>选取基准 Pivot</li><li>将小于于<code>Pivot</code>的数字放在其左边, 大于等于<code>Pivot</code>的放在右边, 形成左右分区; 左分区所有数字小于基准, 右分区所有数字大于等于基准; 对于左右分区, 继续 步骤1). 直到区间为空为止.</li><li>所有数字排序完毕</li></ol><p>分区流程:</p><ol><li>选取最右边的数作为基准</li><li>左分区索引<code>i</code>, 遍历数组, 将小于基准的数字和左分区数字交换; 直到结束为止;</li><li>将左分区边界右边的数字和基准交换, <strong>返回</strong>当前<strong>基准位置</strong></li></ol><p>伪代码如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Sorts a (portion of an) array, divides it into partitions, then sorts those</span>
algorithm <span class="token function">quicksort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span> is 
  <span class="token comment">// Ensure indices are in correct order</span>
  <span class="token keyword">if</span> lo <span class="token operator">&gt;=</span> hi <span class="token operator">||</span> lo <span class="token operator">&lt;</span> <span class="token number">0</span> then 
    <span class="token keyword">return</span>
    
  <span class="token comment">// Partition array and get the pivot index</span>
  p <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span> 
      
  <span class="token comment">// Sort the two partitions</span>
  <span class="token function">quicksort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Left side of pivot</span>
  <span class="token function">quicksort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span> <span class="token comment">// Right side of pivot</span>

<span class="token comment">// Divides array into two partitions</span>
algorithm <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span> is 
  pivot <span class="token operator">:</span><span class="token operator">=</span> A<span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token comment">// Choose the last element as the pivot</span>

  <span class="token comment">// Temporary pivot index</span>
  i <span class="token operator">:</span><span class="token operator">=</span> lo <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">for</span> j <span class="token operator">:</span><span class="token operator">=</span> lo to hi <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">do</span> 
    <span class="token comment">// If the current element is less than or equal to the pivot</span>
    <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot then 
      <span class="token comment">// Move the temporary pivot index forward</span>
      i <span class="token operator">:</span><span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token comment">// Swap the current element with the element at the temporary pivot index</span>
      swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> with A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>

  <span class="token comment">// Move the pivot element to the correct pivot position (between the smaller and larger elements)</span>
  i <span class="token operator">:</span><span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
  swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> with A<span class="token punctuation">[</span>hi<span class="token punctuation">]</span>
  <span class="token keyword">return</span> i <span class="token comment">// the pivot index</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),_=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"sortArray"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` nums
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},"{"),s(`
        pivot `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" pivot"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" pivot"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// random pivot"),s(`
    pi `),n("span",{class:"token operator"},":="),s(" rand"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Intn"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token operator"},"-"),s("left"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(` left
    `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" pi"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// move pivot to end"),s(`

    p `),n("span",{class:"token operator"},":="),s(" nums"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"// pivot value"),s(`
    i`),n("span",{class:"token punctuation"},","),s(" j "),n("span",{class:"token operator"},":="),s(" left"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(` left
    `),n("span",{class:"token keyword"},"for"),s(" j "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// move to left"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" p "),n("span",{class:"token punctuation"},"{"),s(`
            i`),n("span",{class:"token operator"},"++"),s(`
            `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},","),s(" j"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        j`),n("span",{class:"token operator"},"++"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// move pivot to middle"),s(`
    i`),n("span",{class:"token operator"},"++"),s(`
    `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"// pivot "),s(`
    `),n("span",{class:"token keyword"},"return"),s(` i    
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},","),s(" j "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    nums`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=e(`<h3 id="_1-3-hoare-partition" tabindex="-1"><a class="header-anchor" href="#_1-3-hoare-partition" aria-hidden="true">#</a> 1.3 Hoare Partition</h3><p>快速排序流程:</p><ol><li>选取基准 <code>Pivot</code></li><li>将小于于<code>Pivot</code>的数字放在其左边, 大于等于<code>Pivot</code>的放在右边, 形成左右分区; 左分区所有数字小于基准, 右分区所有数字大于等于基准; 对于左右分区, 继续 步骤1). 直到区间为空为止.</li><li>所有数字排序完毕</li></ol><p>分区流程:</p><ol><li><p>选择中间数字为基准</p></li><li><p>使用双指针<code>i</code>, <code>j</code>; 分别从数组两端向中间移动, 每次都移动一步:</p><ul><li>若<code>nums[i] &lt; pivot</code>, 则<code>i</code>继续向右移动, 跳过这些数字</li><li>若<code>nums[j] &gt; pivot</code>, 则<code>j</code>继续向左移动, 跳过这些数字</li></ul><p>当<code>i&lt;j</code>, 则交换. 直到<code>i &gt;= j</code></p></li><li><p><strong>返回<code>j</code></strong>.</p></li></ol><p>算法伪代码:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// Sorts a (portion of an) array, divides it into partitions, then sorts those
algorithm quicksort(A, lo, hi) is 
  if lo &gt;= 0 &amp;&amp; hi &gt;= 0 &amp;&amp; lo &lt; hi then
    p := partition(A, lo, hi) 
    quicksort(A, lo, p) // Note: the pivot is now included
    quicksort(A, p + 1, hi) 

// Divides array into two partitions
algorithm partition(A, lo, hi) is 
  // Pivot value
  pivot := A[ floor((hi - lo)/2) + lo ] // The value in the middle of the array

  // Left index
  i := lo - 1 

  // Right index
  j := hi + 1

  loop forever 
    // Move the left index to the right at least once and while the element at
    // the left index is less than the pivot
    do i := i + 1 while A[i] &lt; pivot
    
    // Move the right index to the left at least once and while the element at
    // the right index is greater than the pivot
    do j := j - 1 while A[j] &gt; pivot

    // If the indices crossed, return
    if i &gt;= j then return j
    
    // Swap the elements at the left and right indices
    swap A[i] with A[j]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),q=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"sortArray"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` nums
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},"{"),s(`
        p `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"hoarePartition"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"hoarePartition"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"{"),s(`
    pi `),n("span",{class:"token operator"},":="),s(" rand"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Intn"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token operator"},"-"),s("left"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(` left
    p `),n("span",{class:"token operator"},":="),s(" nums"),n("span",{class:"token punctuation"},"["),s("pi"),n("span",{class:"token punctuation"},"]"),s(`

    i`),n("span",{class:"token punctuation"},","),s(" j "),n("span",{class:"token operator"},":="),s(" left"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token operator"},"<"),s(" j "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" p"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"{"),s(`
            i`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" j"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" p"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"{"),s(`
            j`),n("span",{class:"token operator"},"--"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" i "),n("span",{class:"token operator"},"<"),s(" j "),n("span",{class:"token punctuation"},"{"),s(`
            nums`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(` j
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=e('<h2 id="_2-three-way-radix-quicksort" tabindex="-1"><a class="header-anchor" href="#_2-three-way-radix-quicksort" aria-hidden="true">#</a> 2. Three-way Radix Quicksort</h2><blockquote><p><strong>Multi-key quicksort</strong>, also known as <strong>three-way radix quicksort</strong>.</p></blockquote><p>三路快速排序, 将数据分为三个分区(基准pivot):</p><ul><li>小于pivot</li><li>等于pivot</li><li>大于pivot</li></ul><p>可以避免某一区全部都是重复元素, 依然进行分区</p>',5),M=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"sortArray"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` nums
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},"{"),s(`
        less`),n("span",{class:"token punctuation"},","),s(" great "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" less"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"quickSort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" great"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// random pivot"),s(`
    pi `),n("span",{class:"token operator"},":="),s(" rand"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Intn"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token operator"},"-"),s("left"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(` left
    p `),n("span",{class:"token operator"},":="),s(" nums"),n("span",{class:"token punctuation"},"["),s("pi"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" pi"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// move to right"),s(`

    `),n("span",{class:"token comment"},"// partition"),s(`
    `),n("span",{class:"token comment"},"// three part"),s(`
    less `),n("span",{class:"token operator"},":="),s(` left 
    great `),n("span",{class:"token operator"},":="),s(` right
    idx `),n("span",{class:"token operator"},":="),s(` left
    `),n("span",{class:"token keyword"},"for"),s(" idx "),n("span",{class:"token operator"},"<="),s(" great "),n("span",{class:"token punctuation"},"{"),s(`
        ele `),n("span",{class:"token operator"},":="),s(" nums"),n("span",{class:"token punctuation"},"["),s("idx"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token comment"},"// less part"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" ele "),n("span",{class:"token operator"},"<"),s(" p "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" idx"),n("span",{class:"token punctuation"},","),s(" less"),n("span",{class:"token punctuation"},")"),s(`
            less`),n("span",{class:"token operator"},"++"),s(`
            idx`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// great part"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" ele "),n("span",{class:"token operator"},">"),s(" p "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 从右边来的数字大小未知, 后序还需要比较"),s(`
            `),n("span",{class:"token comment"},"// idx 不动"),s(`
            `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},","),s(" idx"),n("span",{class:"token punctuation"},","),s(" great"),n("span",{class:"token punctuation"},")"),s(`
            great`),n("span",{class:"token operator"},"--"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// equals part"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" ele "),n("span",{class:"token operator"},"=="),s(" p "),n("span",{class:"token punctuation"},"{"),s(`
            idx`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// less 和 great 指向分区边界外"),s(`
    `),n("span",{class:"token comment"},"// less-1, great+1 才是分区边界"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" less"),n("span",{class:"token punctuation"},","),s(` great
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},","),s(" j "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    nums`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=e('<p><strong>注意</strong>:</p><ul><li><p><code>idx&lt;=grear</code>: 因为<code>great</code>实际指向下一个需要去比较的元素, 若改成<code>idx&lt;great</code>, 那么在两者相遇时就会结束循环, 从而<strong>漏掉</strong>一个元素.</p></li><li><p><code>great--</code>时, <code>idx</code>不能自增: 因为从 <code>great</code> 区来的元素其大小是未知的, 下一次循环需要再次判断. 所以交换元素到<code>great</code>区时, <code>idx</code>不动,</p></li><li><p><code>partition</code> 返回的<code>less</code> <code>great</code>不是边界, <code>less-1</code>, <code>great+1</code> 才是分区边界</p></li></ul><h2 id="_3-leetcode" tabindex="-1"><a class="header-anchor" href="#_3-leetcode" aria-hidden="true">#</a> 3. LeetCode</h2>',3),O={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"},L=n("ul",null,[n("li",null,"此问题的测试案例, 存在大量重复数据, 直接使用快速排序将超时."),n("li",null,"可以使用三路快排")],-1),P=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),C={href:"https://en.wikipedia.org/wiki/Quicksort#",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.runoob.com/w3cnote/quick-sort-2.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://en.wikipedia.org/wiki/Multi-key_quicksort",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://zhuanlan.zhihu.com/p/406976071",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"};function B(N,E){const t=u("ExternalLinkIcon"),o=u("CodeTabs");return k(),m("div",null,[v,n("blockquote",null,[n("p",null,[s("Quicksort is a "),n("a",h,[s("divide-and-conquer algorithm"),a(t)]),s(". It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called "),b,s(".")])]),g,f,w,y,x,a(o,{id:"115",data:[{title:"Golang"}]},{tab0:l(({title:i,value:c,isActive:p})=>[_]),_:1}),j,a(o,{id:"182",data:[{title:"Golang"}]},{tab0:l(({title:i,value:c,isActive:p})=>[q]),_:1}),A,a(o,{id:"218",data:[{title:"Golang"}]},{tab0:l(({title:i,value:c,isActive:p})=>[M]),_:1}),S,n("p",null,[s("LeetCode: "),n("a",O,[s("912. 排序数组"),a(t)])]),L,P,n("ol",null,[n("li",null,[n("a",C,[s("https://en.wikipedia.org/wiki/Quicksort#"),a(t)])]),n("li",null,[n("a",I,[s("https://www.runoob.com/w3cnote/quick-sort-2.html"),a(t)])]),n("li",null,[n("a",z,[s("https://en.wikipedia.org/wiki/Multi-key_quicksort"),a(t)])]),n("li",null,[n("a",Q,[s("https://zhuanlan.zhihu.com/p/406976071"),a(t)])]),n("li",null,[n("a",T,[s("912. 排序数组"),a(t)])])])])}const V=r(d,[["render",B],["__file","01.QuickSort.html.vue"]]);export{V as default};
