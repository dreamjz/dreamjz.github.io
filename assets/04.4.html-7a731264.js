import{_ as c,Z as l,$ as i,a2 as a,a4 as u,a0 as s,a1 as n,a3 as e,H as p}from"./framework-dee406ed.js";const r={},k=e('<h2 id="_4-4-grpc-入门" tabindex="-1"><a class="header-anchor" href="#_4-4-grpc-入门" aria-hidden="true">#</a> 4.4 gRPC 入门</h2><p>gRPC 是 Google 基于 protocol buffers 开发的跨语言的开源 RPC 框架，基于 HTTP/2 协议设计，可以在一个 HTTP/2 链接上提供多个服务。</p><h3 id="_4-4-1-grpc-技术栈" tabindex="-1"><a class="header-anchor" href="#_4-4-1-grpc-技术栈" aria-hidden="true">#</a> 4.4.1 gRPC 技术栈</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/ch4-1-grpc-go-stack.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),d=e(`<p>最底层为 TCP 或 Unix Socket 协议，之上是 HTTP/2 协议的实现，然后在 HTTP/2 协议之上构建针对 Golang 的 gRPC 核心库。应用程序通过 gRPC 插件生产的 Stub 代码和 gRPC 核心库通信，也可以直接和 gRPC 核心库通信</p><h3 id="_4-4-2-grpc-入门" tabindex="-1"><a class="header-anchor" href="#_4-4-2-grpc-入门" aria-hidden="true">#</a> 4.4.2 gRPC 入门</h3><p>若从 protobuf 的角度看， gRPC 不过是针对 service 接口生成代码的生成器。下面学习 gRPC 的基本用法。</p><p>创建 <code>hello.proto</code>, 定义 <code>Greeter</code> 服务(这里按照官网的教程改写了，感觉这里的版本有点老)：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> hello<span class="token punctuation">;</span>

<span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">&quot;dreamjz/hello&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
  <span class="token keyword">rpc</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative <span class="token punctuation">\\</span>
	--go-grpc_out<span class="token operator">=</span>. --go-grpc<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 <code>server</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pb<span class="token punctuation">.</span>UnimplementedGreeterServer
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">SayHello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloReply<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received: %s&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloReply<span class="token punctuation">{</span>Message<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to listen at: %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>port<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	pb<span class="token punctuation">.</span><span class="token function">RegisterGreeterServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Server listening at: %v&quot;</span><span class="token punctuation">,</span> listen<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to serve: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>client</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>client pb<span class="token punctuation">.</span>GreeterClient<span class="token punctuation">,</span> name <span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	message<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;%v.SayHello(_) = _, %v&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token operator">*</span>serverAddr<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect %v: %v&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>serverAddr<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	client <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewGreeterClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	<span class="token function">sayHello</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token operator">*</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gRPC 通过 <code>context.Context</code> 参数为每个方法提供了上下文支持。使用<code>context.WithTimeout</code> 为 RPC 添加超时时长，若调用超时则释放所有的资源；<code>defer cancel()</code> 则是在调用成功后保证能够释放所有占用的资源。</p><p>gRPC 和标准库中的 RPC 有一个区别，gRPC 生成的接口不支持异步调用。但是由于可以在多个 goroutine 之间安全共享 gRPC 底层的 HTTP/2 连接，因此可以通过在另一个 goroutine 阻塞调用的方式模拟异步调用。</p><h3 id="_4-4-3-grpc-流" tabindex="-1"><a class="header-anchor" href="#_4-4-3-grpc-流" aria-hidden="true">#</a> 4.4.3 gRPC 流</h3>`,14),v={href:"https://grpc.io/docs/languages/go/basics/",target:"_blank",rel:"noopener noreferrer"},m=s("h3",{id:"_4-4-4-发布订阅模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-4-4-发布订阅模式","aria-hidden":"true"},"#"),n(" 4.4.4 发布订阅模式")],-1),b={href:"https://www.zhihu.com/question/58805021",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/moby/moby/pull/32691",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/moby/moby/tree/master/pkg",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/moby/moby/tree/master/pkg/pubsub",target:"_blank",rel:"noopener noreferrer"},y=s("strong",null,"publisher.go",-1),P=e('<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',2),R={href:"https://chai2010.cn/advanced-go-programming-book/ch4-rpc/ch4-04-grpc.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://grpc.io/docs/languages/go/basics/",target:"_blank",rel:"noopener noreferrer"};function x(w,q){const o=p("center"),t=p("ExternalLinkIcon");return l(),i("div",null,[k,a(o,null,{default:u(()=>[n("图 4-1 gRPC 技术栈")]),_:1}),d,s("p",null,[n("此处可参考官网完整示例 "),s("a",v,[n("Basic Tutorial"),a(t)])]),m,s("p",null,[n("下面将基于 gRPC Stream 构建一个简单的发布订阅系统。发布订阅是一个常见的设计模式，开源社区中由很多的实现，这里看下 docker 中的实现 （docker 开源项目已改名为 moby，参见"),s("a",b,[n("对于 Docker 改名 Moby ，大家怎么看？"),a(t)]),n(" ,"),s("a",g,[n("#32691"),a(t)]),n(" ）")]),s("p",null,[s("a",h,[n("moby"),a(t)]),n("/"),s("a",f,[n("pkg"),a(t)]),n("/"),s("a",_,[n("pubsub"),a(t)]),n("/"),y,n(" :")]),P,s("ol",null,[s("li",null,[s("a",R,[n("gRPC 入门"),a(t)]),n(" Go 语言高级编程")]),s("li",null,[s("a",C,[n("Basic Tutorial"),a(t)]),n(" gRPC docs")])])])}const T=c(r,[["render",x],["__file","04.4.html.vue"]]);export{T as default};
