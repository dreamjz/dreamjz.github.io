const l=JSON.parse('{"key":"v-ad1c2c7a","path":"/interview/mysql/qa_1.html","title":"Mysql - Q&A - 1","lang":"zh-CN","frontmatter":{"title":"Mysql - Q&A - 1"},"headers":[{"level":2,"title":"1. Basics","slug":"_1-basics","link":"#_1-basics","children":[{"level":3,"title":"1.1 常用索引有哪些","slug":"_1-1-常用索引有哪些","link":"#_1-1-常用索引有哪些","children":[]},{"level":3,"title":"1.2 聚集索引和非聚集索引的区别","slug":"_1-2-聚集索引和非聚集索引的区别","link":"#_1-2-聚集索引和非聚集索引的区别","children":[]},{"level":3,"title":"1.3 MySQL 为什么使用 B+ Tree 作为存储的数据结构","slug":"_1-3-mysql-为什么使用-b-tree-作为存储的数据结构","link":"#_1-3-mysql-为什么使用-b-tree-作为存储的数据结构","children":[]},{"level":3,"title":"1.4 Mysql 的 B+Tree 非叶子节点有多少数据，一般有几层","slug":"_1-4-mysql-的-b-tree-非叶子节点有多少数据-一般有几层","link":"#_1-4-mysql-的-b-tree-非叶子节点有多少数据-一般有几层","children":[]},{"level":3,"title":"1.5 MyISAM、InnoDB 索引实现","slug":"_1-5-myisam、innodb-索引实现","link":"#_1-5-myisam、innodb-索引实现","children":[]},{"level":3,"title":"1.6 MyISAM与InnoDB的主要区别","slug":"_1-6-myisam与innodb的主要区别","link":"#_1-6-myisam与innodb的主要区别","children":[]},{"level":3,"title":"1.7 为字段建立索引的好处？越多越好么？","slug":"_1-7-为字段建立索引的好处-越多越好么","link":"#_1-7-为字段建立索引的好处-越多越好么","children":[]},{"level":3,"title":"1.8 MySQL 慢查询常见原因","slug":"_1-8-mysql-慢查询常见原因","link":"#_1-8-mysql-慢查询常见原因","children":[]},{"level":3,"title":"1.9 SQL 优化原则，索引注意事项？","slug":"_1-9-sql-优化原则-索引注意事项","link":"#_1-9-sql-优化原则-索引注意事项","children":[]},{"level":3,"title":"1.10 事务的 ACID","slug":"_1-10-事务的-acid","link":"#_1-10-事务的-acid","children":[]},{"level":3,"title":"1.11 事务的隔离级别","slug":"_1-11-事务的隔离级别","link":"#_1-11-事务的隔离级别","children":[]},{"level":3,"title":"1.12 什么是当前读和快照读？","slug":"_1-12-什么是当前读和快照读","link":"#_1-12-什么是当前读和快照读","children":[]},{"level":3,"title":"1.13 什么是MVCC","slug":"_1-13-什么是mvcc","link":"#_1-13-什么是mvcc","children":[]},{"level":3,"title":"1.14 事务开始的时机","slug":"_1-14-事务开始的时机","link":"#_1-14-事务开始的时机","children":[]},{"level":3,"title":"1.15 什么是预读","slug":"_1-15-什么是预读","link":"#_1-15-什么是预读","children":[]},{"level":3,"title":"1.16 什么是缓存池(Buffer Pool)","slug":"_1-16-什么是缓存池-buffer-pool","link":"#_1-16-什么是缓存池-buffer-pool","children":[]},{"level":3,"title":"1.17 简述SQL查询过程","slug":"_1-17-简述sql查询过程","link":"#_1-17-简述sql查询过程","children":[]},{"level":3,"title":"1.18 简述SQL更新过程","slug":"_1-18-简述sql更新过程","link":"#_1-18-简述sql更新过程","children":[]},{"level":3,"title":"1.19 什么是脏页","slug":"_1-19-什么是脏页","link":"#_1-19-什么是脏页","children":[]},{"level":3,"title":"1.20 InnoDB锁的类型","slug":"_1-20-innodb锁的类型","link":"#_1-20-innodb锁的类型","children":[]},{"level":3,"title":"1.21 什么是两阶段锁","slug":"_1-21-什么是两阶段锁","link":"#_1-21-什么是两阶段锁","children":[]},{"level":3,"title":"1.22 如何解决死锁","slug":"_1-22-如何解决死锁","link":"#_1-22-如何解决死锁","children":[]}]},{"level":2,"title":"2. Log","slug":"_2-log","link":"#_2-log","children":[{"level":3,"title":"2.1 什么是 binlog","slug":"_2-1-什么是-binlog","link":"#_2-1-什么是-binlog","children":[]},{"level":3,"title":"2.2 什么是 redo log","slug":"_2-2-什么是-redo-log","link":"#_2-2-什么是-redo-log","children":[]},{"level":3,"title":"2.3 binlog和redo log的区别","slug":"_2-3-binlog和redo-log的区别","link":"#_2-3-binlog和redo-log的区别","children":[]},{"level":3,"title":"2.4 简述binlog的写入机制","slug":"_2-4-简述binlog的写入机制","link":"#_2-4-简述binlog的写入机制","children":[]},{"level":3,"title":"2.5 简述redo log的写入机制","slug":"_2-5-简述redo-log的写入机制","link":"#_2-5-简述redo-log的写入机制","children":[]},{"level":3,"title":"2.6 简述 redo log的存储方式，事务没有提交时redo log会写入到硬盘中吗？","slug":"_2-6-简述-redo-log的存储方式-事务没有提交时redo-log会写入到硬盘中吗","link":"#_2-6-简述-redo-log的存储方式-事务没有提交时redo-log会写入到硬盘中吗","children":[]},{"level":3,"title":"2.7 简述redo log组提交(group commit)机制","slug":"_2-7-简述redo-log组提交-group-commit-机制","link":"#_2-7-简述redo-log组提交-group-commit-机制","children":[]},{"level":3,"title":"2.8 Binlog和Redolog记录如何保持一致","slug":"_2-8-binlog和redolog记录如何保持一致","link":"#_2-8-binlog和redolog记录如何保持一致","children":[]},{"level":3,"title":"2.9 执行一个 update 语句以后，再执行 hexdump 命令直接查看 ibd 文件内容，为什么没有看到数据有改变呢","slug":"_2-9-执行一个-update-语句以后-再执行-hexdump-命令直接查看-ibd-文件内容-为什么没有看到数据有改变呢","link":"#_2-9-执行一个-update-语句以后-再执行-hexdump-命令直接查看-ibd-文件内容-为什么没有看到数据有改变呢","children":[]},{"level":3,"title":"2.10 为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的","slug":"_2-10-为什么-binlog-cache-是每个线程自己维护的-而-redo-log-buffer-是全局共用的","link":"#_2-10-为什么-binlog-cache-是每个线程自己维护的-而-redo-log-buffer-是全局共用的","children":[]},{"level":3,"title":"2.11 事务未提交时若发生crash，会导致主备不一致么","slug":"_2-11-事务未提交时若发生crash-会导致主备不一致么","link":"#_2-11-事务未提交时若发生crash-会导致主备不一致么","children":[]},{"level":3,"title":"2.12 MySQL 如何知道binlog是完整的","slug":"_2-12-mysql-如何知道binlog是完整的","link":"#_2-12-mysql-如何知道binlog是完整的","children":[]},{"level":3,"title":"2.13 redolog和binlog如何关联","slug":"_2-13-redolog和binlog如何关联","link":"#_2-13-redolog和binlog如何关联","children":[]},{"level":3,"title":"2.14 为何binlog和redolog需要进行两段提交？不可以redolog提交之后在提交binlog吗","slug":"_2-14-为何binlog和redolog需要进行两段提交-不可以redolog提交之后在提交binlog吗","link":"#_2-14-为何binlog和redolog需要进行两段提交-不可以redolog提交之后在提交binlog吗","children":[]},{"level":3,"title":"2.15 可以只用redolog，不用binlog么","slug":"_2-15-可以只用redolog-不用binlog么","link":"#_2-15-可以只用redolog-不用binlog么","children":[]},{"level":3,"title":"2.16 redolog buffer是什么？","slug":"_2-16-redolog-buffer是什么","link":"#_2-16-redolog-buffer是什么","children":[]},{"level":3,"title":"2.17 为何binlog不能被中断","slug":"_2-17-为何binlog不能被中断","link":"#_2-17-为何binlog不能被中断","children":[]},{"level":3,"title":"2.18 undolog是什么","slug":"_2-18-undolog是什么","link":"#_2-18-undolog是什么","children":[]},{"level":3,"title":"2.19 简述binlog的三种模式","slug":"_2-19-简述binlog的三种模式","link":"#_2-19-简述binlog的三种模式","children":[]},{"level":3,"title":"2.20 MIXED模式的好处","slug":"_2-20-mixed模式的好处","link":"#_2-20-mixed模式的好处","children":[]}]}],"git":{"updatedTime":1698123705000},"readingTime":{"minutes":22.32,"words":6697},"filePathRelative":"interview/mysql/qa_1.md","excerpt":"<h2> 1. Basics</h2>\\n<h3> 1.1 常用索引有哪些</h3>\\n<p>普通索引、唯一索引、主键索引、组合索引、全文索引</p>\\n<p><strong>普通索引</strong>：基本索引类型，用于加速系统对数据的访问速度</p>\\n<p>例如，建立 index_id 在 tb_student 表上：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">INDEX</span> index_id <span class=\\"token keyword\\">ON</span> tb_student<span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>"}');export{l as data};
