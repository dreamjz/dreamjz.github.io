import{_ as p,Z as e,$ as c,a0 as n,a1 as a,a2 as t,a3 as o,H as i}from"./framework-09afcf0b.js";const l={},u=o(`<h2 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组" aria-hidden="true">#</a> 1. 数组</h2><h3 id="_1-1-类型" tabindex="-1"><a class="header-anchor" href="#_1-1-类型" aria-hidden="true">#</a> 1.1 类型</h3><p>Golang 中的数组类型由两个因素确定：</p><ol><li>数组长度</li><li>元素类型</li></ol><p>只有两者均相同时，才是相同类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span>
c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>a</code>和<code>b</code> 长度相同但元素类型不同，不是同一类型</li><li><code>a</code>和<code>c</code>元素类型但数组长度不同，不是同一类型</li></ul><h3 id="_1-2-赋值" tabindex="-1"><a class="header-anchor" href="#_1-2-赋值" aria-hidden="true">#</a> 1.2 赋值</h3><p>数组类型的赋值会<strong>拷贝</strong>整个数组，若将大型数组作为参数应使用指针类型，以减小性能损耗。</p><h2 id="_2-切片" tabindex="-1"><a class="header-anchor" href="#_2-切片" aria-hidden="true">#</a> 2. 切片</h2><p>切片的数据结构可以由<code>reflect.SliceHeader</code>表示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
	Cap  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Data：指向底层数组</li></ul><p>切片的赋值，不会拷贝底层数组，而是拷贝其指针，此时新旧切片会指向同一数组。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310032351032.jpeg" alt="golang slice" tabindex="0" loading="lazy"><figcaption>golang slice</figcaption></figure><h2 id="_3-操作" tabindex="-1"><a class="header-anchor" href="#_3-操作" aria-hidden="true">#</a> 3. 操作</h2><h3 id="_3-1-copy" tabindex="-1"><a class="header-anchor" href="#_3-1-copy" aria-hidden="true">#</a> 3.1 copy</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040050628.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><h3 id="_3-2-append" tabindex="-1"><a class="header-anchor" href="#_3-2-append" aria-hidden="true">#</a> 3.2 append</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040050699.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><ul><li>append 之后长度小于等于容量，则利用底层数组的剩余空间</li><li>append 之后长度大于容量，则进行扩容，将新旧数据拷贝过去； 若能预先知道容量，则能够减少扩容次数以提升性能</li></ul><h3 id="_3-3-delete" tabindex="-1"><a class="header-anchor" href="#_3-3-delete" aria-hidden="true">#</a> 3.3 delete</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040053546.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>删除切片的某个元素之后，需要将后序元素向前移动一位，时间复杂度为 O(n)</p><h3 id="_3-4-delete-gc" tabindex="-1"><a class="header-anchor" href="#_3-4-delete-gc" aria-hidden="true">#</a> 3.4 delete (GC)</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040055202.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>将删除的元素置空，方便GC</p><h3 id="_3-5-insert" tabindex="-1"><a class="header-anchor" href="#_3-5-insert" aria-hidden="true">#</a> 3.5 insert</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040056068.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>在某个位置添加一个元素后，将该位置后面的元素再 append 回去。复杂度为 O(N)。</p><h3 id="_3-6-filter" tabindex="-1"><a class="header-anchor" href="#_3-6-filter" aria-hidden="true">#</a> 3.6 filter</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040057465.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><h3 id="_3-7-push" tabindex="-1"><a class="header-anchor" href="#_3-7-push" aria-hidden="true">#</a> 3.7 push</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040057507.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>在末尾追加元素，不考虑内存拷贝的情况，复杂度为 O(1)。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040058345.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>在头部追加元素，时间和空间复杂度均为 O(N)。</p><h3 id="_3-8-pop" tabindex="-1"><a class="header-anchor" href="#_3-8-pop" aria-hidden="true">#</a> 3.8 pop</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040059907.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>尾部删除元素，复杂度 O(1)</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310040058907.png" alt="hpg-slice" tabindex="0" loading="lazy"><figcaption>hpg-slice</figcaption></figure><p>头部删除元素，复杂度为 O(1)。</p><p>需要注意的是，底层数组没有发生改变，第 0 个位置的内存仍旧没有释放。如果有大量这样的操作，头部的内存会一直被占用。</p><h2 id="_4-性能陷阱" tabindex="-1"><a class="header-anchor" href="#_4-性能陷阱" aria-hidden="true">#</a> 4. 性能陷阱</h2><h3 id="_4-1-大量内存得不到释放" tabindex="-1"><a class="header-anchor" href="#_4-1-大量内存得不到释放" aria-hidden="true">#</a> 4.1 大量内存得不到释放</h3><p>若在现有的 slice 上进行 re-slice 操作获取新的切片，不会创建新的底层数组，而是新切片直接指向原数组。</p><p>若频繁的进行 re-slice 操作，可能出现底层数组占用非常大的内存，而切片只引用其中的一小部分，并且数组无法被 GC 回收，造成内存浪费。</p><p>故因使用 <code>copy</code> 来取代 <code>re-slice</code> 操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">getLastElemsUsingReslice</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getLastElemsUsingCopy</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	res <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>getLastElemsUsingReslice</code>：通过 re-slice 方式获取最后 n 个元素</li><li><code>getLastElemsUsingCopy</code>：通过 copy 方式获取最后 n 个元素</li></ul><p>进行测试：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">printMem</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t<span class="token punctuation">.</span><span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> mstat runtime<span class="token punctuation">.</span>MemStats
	runtime<span class="token punctuation">.</span><span class="token function">ReadMemStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mstat<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f MB&quot;</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>mstat<span class="token punctuation">.</span>Alloc<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024.</span><span class="token operator">/</span><span class="token number">1024.</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestGetSlice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		f    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingReslice&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> getLastElemsUsingReslice<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingCopy&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> getLastElemsUsingCopy<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%-20s&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
				nums <span class="token operator">:=</span> <span class="token function">genSliceWithCap</span><span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span>
				res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tt<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token function">printMem</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>t.Helper()</code>：标识当前函数为辅助函数，当打印测试信息时（如文件，代码行位置）时会跳过辅助函数</li><li><code>runtime.ReadMemStats(*runtime.MemStats)</code>：读取当前的内存分配信息</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>=== RUN   TestGetSlice/UsingReslice________
    slice_test.go:42: 100.21 MB
=== RUN   TestGetSlice/UsingCopy___________
    slice_test.go:42: 3.22 MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出使用 reslice 操作之后，存在切片对原数组的引用时，原数组无法回收导致大量的内存占用。</p><p>若在测试中，手动调用 <code>runtime.GC()</code> 启动 GC，此时差距就更加的明显：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestGetSlice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		f    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingReslice&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> getLastElemsUsingReslice<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingCopy&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> getLastElemsUsingCopy<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%-20s&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
				nums <span class="token operator">:=</span> <span class="token function">genSliceWithCap</span><span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span>
				res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tt<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token function">printMem</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestGetSlice<span class="token operator">/</span>UsingReslice________
    slice_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span> <span class="token number">100.21</span> MB
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestGetSlice<span class="token operator">/</span>UsingCopy___________
    slice_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span> <span class="token number">0.22</span> MB    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,58),r={href:"https://geektutu.com/post/hpg-slice.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://stackoverflow.com/questions/39194816/how-to-wrap-golang-test-functions",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ueokande.github.io/go-slice-tricks/",target:"_blank",rel:"noopener noreferrer"};function g(m,b){const s=i("ExternalLinkIcon");return e(),c("div",null,[u,n("ol",null,[n("li",null,[n("p",null,[n("a",r,[a("https://geektutu.com/post/hpg-slice.html"),t(s)])])]),n("li",null,[n("p",null,[n("a",d,[a("https://stackoverflow.com/questions/39194816/how-to-wrap-golang-test-functions"),t(s)])])]),n("li",null,[n("p",null,[n("a",k,[a("https://ueokande.github.io/go-slice-tricks/"),t(s)])])])])])}const h=p(l,[["render",g],["__file","02.2.slice.html.vue"]]);export{h as default};
