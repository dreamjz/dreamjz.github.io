import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as i}from"./framework-09afcf0b.js";const l={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeCache/day4-consistent-hash",target:"_blank",rel:"noopener noreferrer"},r=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DAY4-CONSISTENT-HASH
│  go.mod
│  go.work
│  main.go
│  
└─geecache
    │  byteview.go
    │  cache.go
    │  geecache.go
    │  geecache_test.go
    │  go.mod
    │  http.go
    │
    ├─consistenthash
    │      consistenthash.go
    │      consistenthash_test.go
    │
    └─lru
            lru.go
            lru_test.go

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-一致性哈希-consistent-hash" tabindex="-1"><a class="header-anchor" href="#_1-一致性哈希-consistent-hash" aria-hidden="true">#</a> 1. 一致性哈希(Consistent Hash)</h2><h3 id="_1-1-为何需要一致性哈希" tabindex="-1"><a class="header-anchor" href="#_1-1-为何需要一致性哈希" aria-hidden="true">#</a> 1.1 为何需要一致性哈希</h3><p>当一个节点收到请求，但是当前节点未存储缓存值，此时节点需要决定向哪一个节点发送请求：</p><ul><li>若随机选取，那么下一次不一定能够再次选取到已经有缓存的节点，再次需要访问数据库，效率低下</li><li>若实现简单的哈希算法，例如将key的 ASCII 之和除以节点数的余数作为选择的节点编号。但是，当节点数量发生变化时，所有的缓存失效，引发<strong>缓存雪崩</strong>（缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。常因为缓存服务器宕机，或缓存设置了相同的过期时间引起）</li></ul><h2 id="_2-一致性哈希算法" tabindex="-1"><a class="header-anchor" href="#_2-一致性哈希算法" aria-hidden="true">#</a> 2. 一致性哈希算法</h2><h3 id="_2-1-基本步骤" tabindex="-1"><a class="header-anchor" href="#_2-1-基本步骤" aria-hidden="true">#</a> 2.1 基本步骤</h3>`,7),d=n("p",null,[s("一致性哈希算法将 key 映射到 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"32")])]),n("annotation",{encoding:"application/x-tex"},"2^{32}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"32")])])])])])])])])])])]),s(" 的空间中，将数组首位相连成"),n("strong",null,"环"),s("。")],-1),k=e(`<ol><li>计算节点/机器（通常为节点名、编号、IP）的哈希值，放到环上</li><li>计算 key 的哈希值，放到环上，顺时针找到的第一个节点就是应该选取的节点/机器</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310101925239.jpeg" alt="一致性哈希添加节点 consistent hashing add peer" tabindex="0" loading="lazy"><figcaption>一致性哈希添加节点 consistent hashing add peer</figcaption></figure><p>如上图所示，当新增节点<code>peer8</code>时，只有<code>key27</code>的映射会发生改变。</p><p>所以，使用一致性哈希算法，只有在新增/删除节点时，会导致一小部分数据需要重新定位，不会导致所有的缓存失效从而引起缓存雪崩。</p><h3 id="_2-2-数据倾斜" tabindex="-1"><a class="header-anchor" href="#_2-2-数据倾斜" aria-hidden="true">#</a> 2.2 数据倾斜</h3><p>若节点过少，容易导致数据倾斜。例如上图中，节点2，4，6均分布在环的一侧，导致大量数据被分配到<code>peer2</code>上，导致负载不均。</p><p>通过引入<strong>虚拟节点</strong>可以解决数据倾斜问题：</p><ol><li>计算虚拟节点哈希值，放在环上</li><li>建立虚拟节点和真实节点的映射</li><li>计算key的哈希值，顺时针寻找虚拟节点，并映射到真实节点</li></ol><p>虚拟节点扩充了节点数量，解决了数据倾斜问题，且代价较小，只需维护虚拟/真实节点映射即可。</p><h3 id="_2-3-实现" tabindex="-1"><a class="header-anchor" href="#_2-3-实现" aria-hidden="true">#</a> 2.3 实现</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Hash maps bytes to uint32</span>
<span class="token keyword">type</span> Hash <span class="token keyword">func</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span>

<span class="token comment">// Map contains all hashed keys</span>
<span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	hash     Hash
	replicas <span class="token builtin">int</span>
	keys     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	hashMap  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>replicas <span class="token builtin">int</span><span class="token punctuation">,</span> fn Hash<span class="token punctuation">)</span> <span class="token operator">*</span>Map <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Map<span class="token punctuation">{</span>
		replicas<span class="token punctuation">:</span> replicas<span class="token punctuation">,</span>
		hash<span class="token punctuation">:</span>     fn<span class="token punctuation">,</span>
		hashMap<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>hash <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>hash <span class="token operator">=</span> crc32<span class="token punctuation">.</span>ChecksumIEEE
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> m
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Map</code>：一致性哈希算法主数据结构</p><ol><li><code>hash</code>：哈希函数</li><li><code>replicas</code>：虚拟节点倍数</li><li><code>keys</code>：哈希环</li><li><code>hashMap</code>：虚拟/真实节点映射表，key 为虚拟节点哈希值，value 为真实节点名称</li></ol></li><li><p><code>New</code>：可定义节点倍数和哈希函数，默认哈希函数使用<code>crc32.</code>ChecksumIEEE</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Add adds keys to the hash</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>replicas<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> key
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Add</code>：添加节点，可以传入多个真实节点名</p></li><li><p>对于每个真实节点，创建<code>m.replicas</code>个虚拟节点，虚拟节点按照<code>strconv.Itoa(i) + key</code> 的形式编号</p></li><li><p>计算虚拟节点的哈希值，并添加至虚拟/真实节点映射</p></li><li><p>哈希环上的数据按照升序排序</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Get gets the closest item in the hash to the provided key</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>

	hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// Binary search for appropriate replica</span>
	idx <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> hash
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>idx<span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>计算key的哈希值</li><li>顺时针寻找匹配的虚拟节点，若索引为<code>len(keys)</code>，则选择<code>keys[0]</code>，因为<code>m.keys</code>为环状结构所以使用模运算</li><li>通过<code>hashMap</code>获取真实节点</li></ol><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">TestHash</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hash <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
		i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">uint32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// Given the above hash function, this will give replicas with hashes:</span>
	<span class="token comment">// 2, 4, 6, 12, 14, 16, 22, 24, 26</span>
	hash<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>

	tests <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;2&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;11&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;23&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;27&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		<span class="token keyword">if</span> got <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> got <span class="token operator">!=</span> v <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Get(%q) = %v, want: %v&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> got<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 8, 18, 28</span>
	hash<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span>
	tests<span class="token punctuation">[</span><span class="token string">&quot;27&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;8&quot;</span>

	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		<span class="token keyword">if</span> got <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> got <span class="token operator">!=</span> v <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Get(%q) = %v, want: %v&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> got<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试时使用了简单的哈希算法进行测试。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,18),v={href:"https://geektutu.com/post/geecache-day4.html",target:"_blank",rel:"noopener noreferrer"};function m(h,b){const a=i("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[n("a",u,[s("https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeCache/day4-consistent-hash"),t(a)])]),r,d,k,n("ol",null,[n("li",null,[n("a",v,[s("https://geektutu.com/post/geecache-day4.html"),t(a)])])])])}const y=p(l,[["render",m],["__file","02.4.consistent_hash.html.vue"]]);export{y as default};
