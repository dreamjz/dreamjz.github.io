import{_ as e,X as p,Y as o,Z as n,$ as s,a0 as t,a1 as c,F as l}from"./framework-8cb7ec75.js";const i={},u=c(`<h2 id="_4-1-rpc" tabindex="-1"><a class="header-anchor" href="#_4-1-rpc" aria-hidden="true">#</a> 4.1 RPC</h2><p>RPC( Remote Procedure Call ) 远程过程调用，是分布式系统中不同节点之间流行的通信方式。在互联时代 RPC 和 IPC (Inter-process communication, 进程间通讯) 成为了不可或缺的基础构件。</p><h3 id="_4-1-1-hello-world" tabindex="-1"><a class="header-anchor" href="#_4-1-1-hello-world" aria-hidden="true">#</a> 4.1.1 Hello World</h3><p>创建 <code>server</code> ：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> request
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>

	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;listen tcp error: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;accept error: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Hello(request string, reply *string) error </code>: Hello 方法需要满足 Go 语言的 RPC 规则 <ul><li>只能有两个可序列化的参数</li><li>第二个参数为指针类型</li><li>返回值为 error 类型</li></ul></li><li><code>rpc.Register</code>: 将对象中所有满足 RPC 规则的函数注册为 RPC 函数</li><li><code>net.Listen</code>: 监听 TCP ，通过 TCP 提供 RPC 服务</li></ul><p>创建 <code>client</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to dial: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> reply <span class="token builtin">string</span>
	err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc error: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>client.Call</code>: 第一个参数为 RPC 服务名及调用的方法名，后面的两个参数为调用方法定义的参数</li></ul><h3 id="_4-1-2-更安全的-rpc-接口" tabindex="-1"><a class="header-anchor" href="#_4-1-2-更安全的-rpc-接口" aria-hidden="true">#</a> 4.1.2 更安全的 RPC 接口</h3><p>在设计 RPC 的应用中，开发人员一般有三种角色：</p><ul><li>服务端 RPC 方法开发</li><li>客户端 RPC 方法调用</li><li>服务端和客户端 RPC 接口规范设计</li></ul><p>在上面的例子中为了简化将三个角色的工作整合在一起，虽然看似实现简单，但是不易于后续的扩展和维护。于是下面就针对上述的例子进行重构。</p><p>首先将 RPC 接口规范分为三个部分：</p><ul><li>服务名称</li><li>服务方法列表</li><li>注册服务函数</li></ul><p>定义接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> rpc_objects

<span class="token keyword">type</span> HelloInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照三个部分来重构 <code>sever</code> 代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> HelloServiceName <span class="token operator">=</span> <span class="token string">&quot;path/example/HelloService&quot;</span>

<span class="token keyword">type</span> HelloService <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> request
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">RegisterHelloService</span><span class="token punctuation">(</span>svc rpc_objects<span class="token punctuation">.</span>HelloInterface<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span>HelloServiceName<span class="token punctuation">,</span> svc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">RegisterHelloService</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>
	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to listen tcp: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to accept conn: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免名称冲突，为服务名添加了包路径前缀（RPC 服务的抽象路径，并非完全等价于 package 路径）；注册服务通过 <code>RegisterHelloService</code> 函数传入 <code>HelloInterface</code> 接口来完成，这样不仅可以防止服务名称传入错误还可以保证方法满足 RPC 接口的定义，也为后续的扩展提供了便利（只需实现接口即可）。</p><p>同时也实现了支持多个 TCP 连接，为每个连接创建新的协程进行处理。</p><p>重构 <code>client</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> HelloServiceName <span class="token operator">=</span> <span class="token string">&quot;path/example/HelloService&quot;</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> rpc_objects<span class="token punctuation">.</span>HelloInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloServiceClient<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> HelloServiceClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloServiceClient<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>request <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> h<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>HelloServiceName<span class="token operator">+</span><span class="token string">&quot;.Hello&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">DialHelloService</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloServiceClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>HelloServiceClient<span class="token punctuation">{</span>
		Client<span class="token punctuation">:</span> client<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DialHelloService</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to dial tcp: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> reply <span class="token builtin">string</span>
	err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token string">&quot;kesa&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;call Hello error: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明如下：</p><ul><li><code>HelloServiceClient</code>: 新增类型，实现了 <code>HelloInterface</code> 接口，这样客户端可以直接调用对应的方法即可</li><li><code>DialHelloService</code>: 封装连接 TCP 方法，并返回 <code>HelloServiceClient</code> 类型</li><li><code>var _ rpc_objects.HelloInterface = (*HelloServiceClient)(nil)</code> : 确保 <code>HelloServiceClient</code> 实现了 <code>HelloInterface</code> 接口</li></ul><p>这样客户端将不会出现调用服务名称错误或参数类型不匹配的问题了。</p><h3 id="_4-1-3-跨语言-rpc" tabindex="-1"><a class="header-anchor" href="#_4-1-3-跨语言-rpc" aria-hidden="true">#</a> 4.1.3 跨语言 RPC</h3><p>标准的 RPC 库默认采用 gob 编码，对于其他语言应用调用不够友好。在互联网微服务时代，每个 RPC 以及服务使用者都可能采用不同的实现语言，因此跨语言是互联网时代 RPC 的一个首要条件。</p><p>Go 的 RPC 框架可以在 RPC 数据打包时使用自定义的编码和解码方式，并且 RPC 建立在 <code>io.ReadWriteCloser</code> 接口上，故可以将 RPC 服务架设在不同的协议上面。</p><p>接下来通过 <code>jsonrpc</code> 实现跨语言的 RPC, 首先定义类型 <code>Args</code> 及 <code>Multiply</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> rpc_objects

<span class="token keyword">type</span> Args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	M<span class="token punctuation">,</span> N <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>args <span class="token operator">*</span>Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>M <span class="token operator">*</span> args<span class="token punctuation">.</span>N
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>server</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	calc <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>rpc_objects<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>
	rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>calc<span class="token punctuation">)</span>

	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to listen tcp: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to accept conn: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewServerCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ServeCodec</code>: 和 <code>ServeConn</code>类似，但是使用了 json 格式进行 request 的解码和 response 的编码</li></ul><p><code>client</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:9090&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to dial tcp: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	client <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewClientWithCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewClientCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>

	args <span class="token operator">:=</span> <span class="token operator">&amp;</span>rpc_objects<span class="token punctuation">.</span>Args<span class="token punctuation">{</span>M<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> N<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> reply <span class="token builtin">int</span>

	err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Args.Multiply&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to call rpc: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d * %d = %d&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先建立 TCP 连接</li><li>基于连接使用 json 编码/解码器创建 RPC 客户端</li></ul><p>在确保客户端可以正常调用 RPC 服务后，我们启动一个普通的 TCP 服务来查看客户端发送的数据格式, nc( netcat ,网络工具中的瑞士军刀,能通过 TCP 和 UDP 在网络中读写数据,与其他工具结合和重定向)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">nc</span> <span class="token parameter variable">-l</span> <span class="token number">9090</span>
<span class="token punctuation">{</span><span class="token string">&quot;method&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Args.Multiply&quot;</span>,<span class="token string">&quot;params&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;M&quot;</span>:2,<span class="token string">&quot;N&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">&quot;id&quot;</span>:0<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>method</code>: RPC 服务及方法组成的名称</li><li><code>params</code>: 参数列表</li><li><code>id</code>: 调用端维护的唯一调用编号</li></ul><p>请求的 json 数据对象在内部对应两个结构体 <code>clientRequest</code> 和 <code>serverRequest</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> clientRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Method <span class="token builtin">string</span>         <span class="token string">\`json:&quot;method&quot;\`</span>
    Params <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">\`json:&quot;params&quot;\`</span>
    Id     <span class="token builtin">uint64</span>         <span class="token string">\`json:&quot;id&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> serverRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Method <span class="token builtin">string</span>           <span class="token string">\`json:&quot;method&quot;\`</span>
    Params <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;params&quot;\`</span>
    Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;id&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在获取到了 json 格式的请求后，模拟客户端发送给服务端</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;{&quot;method&quot;:&quot;Args.Multiply&quot;,&quot;params&quot;:[{&quot;M&quot;:2,&quot;N&quot;:3}],&quot;id&quot;:0}&#39;</span><span class="token operator">|</span> <span class="token function">nc</span> localhost <span class="token number">9090</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:0,<span class="token string">&quot;result&quot;</span>:6,<span class="token string">&quot;error&quot;</span>:null<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>id</code> 为 request 中对应的 id，<code>result</code>: 为返回结果，<code>error</code> 为错误信息。</p><p>对于同步调用，<code>id</code> 不是必须的，但对于异步调用时，若返回顺序和调用顺序不一致，可以通过<code>id</code>来识别对应的调用</p><p>返回的 json 数据也是对应内部的两个结构体：<code>clientResponse</code> 和 <code>serverResponse</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> clientResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Id     <span class="token builtin">uint64</span>           <span class="token string">\`json:&quot;id&quot;\`</span>
    Result <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;result&quot;\`</span>
    Error  <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token string">\`json:&quot;error&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> serverResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">\`json:&quot;id&quot;\`</span>
    Result <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token string">\`json:&quot;result&quot;\`</span>
    Error  <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token string">\`json:&quot;error&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此无论何种语言，只要遵循同样的数据结构即可实现跨语言的 RPC 通信。</p><h3 id="_4-1-4-http-上的-rpc" tabindex="-1"><a class="header-anchor" href="#_4-1-4-http-上的-rpc" aria-hidden="true">#</a> 4.1.4 HTTP 上的 RPC</h3><p>Go 的 RPC 框架支持在 HTTP 协议上提供服务，下面实现一个简单的基于 HTTP 协议的 RPC 服务</p><p><code>server</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>rpc_objects<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">)</span>

	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/jsonRPC&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> conn io<span class="token punctuation">.</span>ReadWriteCloser <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
			io<span class="token punctuation">.</span>Writer
			io<span class="token punctuation">.</span>ReadCloser
		<span class="token punctuation">}</span><span class="token punctuation">{</span>
			Writer<span class="token punctuation">:</span>     w<span class="token punctuation">,</span>
			ReadCloser<span class="token punctuation">:</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>

		rpc<span class="token punctuation">.</span><span class="token function">ServeRequest</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewServerCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:9090&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在处理函数中基于 <code>http.ResponseWriter</code> 和 <code>http.Request</code> 类型的参数构造了 <code>io.ReadWriteCloser</code> 类型的 <code>conn</code>(使用匿名 struct), 并基于 <code>conn</code> 使用服务端 <code>json</code> 编解码器，使用 <code>rpc.ServeRequest</code> 处理 RPC 请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&#39;http://localhost:9090/jsonRPC&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;method&quot;:&quot;Args.Multiply&quot;,&quot;params&quot;:[{&quot;M&quot;:2,&quot;N&quot;:3}],&quot;id&quot;:0}&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:0,<span class="token string">&quot;result&quot;</span>:6,<span class="token string">&quot;error&quot;</span>:null<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就实现了 HTTP 协议上的 RPC 服务了</p>`,57),r={href:"https://github.com/dreamjz/golang-notes/tree/main/OpenSourceBook/Advanced-Go-Programming/04-rpc-and-protobuf",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),k={href:"https://chai2010.cn/advanced-go-programming-book/ch4-rpc/ch4-01-rpc-intro.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://qvault.io/golang/anonymous-structs-golang/",target:"_blank",rel:"noopener noreferrer"};function b(m,g){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("示例代码参见"),n("a",r,[s("code"),t(a)])]),d,n("ol",null,[n("li",null,[n("a",k,[s("RPC 入门"),t(a)])]),n("li",null,[n("a",v,[s("Anonymous structs"),t(a)])])])])}const f=e(i,[["render",b],["__file","04.1.html.vue"]]);export{f as default};
