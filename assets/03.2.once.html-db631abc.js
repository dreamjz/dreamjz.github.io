const e=JSON.parse('{"key":"v-e6d3b74a","path":"/reading/golang/high-performance-go/03-concurrency/03.2.once.html","title":"3.2 sync.Once","lang":"zh-CN","frontmatter":{"title":"3.2 sync.Once","date":"2023-10-03T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"1. sync.Once 的使用场景","slug":"_1-sync-once-的使用场景","link":"#_1-sync-once-的使用场景","children":[]},{"level":2,"title":"2. 使用","slug":"_2-使用","link":"#_2-使用","children":[{"level":3,"title":"2.1 标准库中的使用","slug":"_2-1-标准库中的使用","link":"#_2-1-标准库中的使用","children":[]}]},{"level":2,"title":"3. 原理","slug":"_3-原理","link":"#_3-原理","children":[{"level":3,"title":"3.1 done在结构体中的位置","slug":"_3-1-done在结构体中的位置","link":"#_3-1-done在结构体中的位置","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1696770322000},"readingTime":{"minutes":3.06,"words":919},"filePathRelative":"reading/golang/high-performance-go/03-concurrency/03.2.once.md","localizedDate":"2023年10月3日","excerpt":"<h2> 1. sync.Once 的使用场景</h2>\\n<p><code>sync.Once</code> 是 Go 标准库提供的使函数只执行一次的实现，常应用于单例模式，例如初始化配置、保持数据库连接等。作用与 <code>init</code> 函数类似，但有区别。</p>\\n<ul>\\n<li>init 函数是当所在的 package 首次被加载时执行，若迟迟未被使用，则既浪费了内存，又延长了程序加载时间。</li>\\n<li>sync.Once 可以在代码的任意位置初始化和调用，因此可以延迟到使用时再执行，并发场景下是<strong>线程安全</strong>的。</li>\\n</ul>\\n<p>在多数情况下，<code>sync.Once</code> 被用于控制变量的初始化，这个变量的读写满足如下三个条件：</p>"}');export{e as data};
