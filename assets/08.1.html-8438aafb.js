const n=JSON.parse('{"key":"v-2ee7c7ff","path":"/note/golang/open-source-books/the-way-to-go/08/08.1.html","title":"8.1 Map 声明、初始化和make","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"8.1.1 概念","slug":"_8-1-1-概念","link":"#_8-1-1-概念","children":[]},{"level":2,"title":"8.1.2 容量","slug":"_8-1-2-容量","link":"#_8-1-2-容量","children":[]},{"level":2,"title":"8.1.3 切片作为值","slug":"_8-1-3-切片作为值","link":"#_8-1-3-切片作为值","children":[]}],"readingTime":{"minutes":0.72,"words":215},"filePathRelative":"note/golang/open-source-books/the-way-to-go/08/08.1.md","excerpt":"<h1> 8.1 Map 声明、初始化和make</h1>\\n<p>Map ：数据结构，由元素对(pair, key : value) 组成的无序集合。</p>\\n<h2> 8.1.1 概念</h2>\\n<ul>\\n<li>\\n<p>声明：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> m <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span>keytype<span class=\\"token punctuation\\">]</span>valuetype\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> m <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>key: 可以是使用<code>==</code>,<code>!=</code>操作符比较的类型</p>\\n<ul>\\n<li>数组和切片不能作为key</li>\\n<li>结构体可以提供<code>key()</code>和<code>hash()</code>方法来作为key</li>\\n</ul>\\n</li>\\n<li>\\n<p>value: 任意类型</p>\\n</li>\\n<li>\\n<p>map 的默认零值为：<code>nil</code></p>\\n</li>\\n<li>\\n<p>初始化：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>m <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span>keytype<span class=\\"token punctuation\\">]</span>valuetype<span class=\\"token punctuation\\">{</span>k1<span class=\\"token punctuation\\">:</span> v1<span class=\\"token punctuation\\">,</span> k2<span class=\\"token punctuation\\">:</span> v2<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>make: 使用<code>make()</code> 来初始化map</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span>key_type<span class=\\"token punctuation\\">]</span>val_type<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// with capacity</span>\\n<span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span>key_type<span class=\\"token punctuation\\">]</span>val_type<span class=\\"token punctuation\\">,</span> capacity<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>"}');export{n as data};
