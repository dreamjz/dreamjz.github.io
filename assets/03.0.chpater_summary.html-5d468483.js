import{_ as p,Z as o,$ as l,a0 as n,a1 as s,a2 as t,a3 as e,H as c}from"./framework-dee406ed.js";const i={},u=e(`<h2 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组" aria-hidden="true">#</a> 1. 数组</h2><h3 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义" aria-hidden="true">#</a> 1.1 定义</h3><p><strong>数组</strong>是由<strong>相同类型</strong>的<strong>元素</strong>组成的数据结构，使用一块<strong>连续的内存</strong>来保存数据。</p><h3 id="_1-2-类型" tabindex="-1"><a class="header-anchor" href="#_1-2-类型" aria-hidden="true">#</a> 1.2 类型</h3><p>Golang 数组的类型包含两点：</p><ul><li>数组长度</li><li>元素类型</li></ul><p>只有两者相同才是同一类型，例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 不是同一类型</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 不是同一类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-初始化" tabindex="-1"><a class="header-anchor" href="#_1-3-初始化" aria-hidden="true">#</a> 1.3 初始化</h3><p>使用<strong>字面量</strong>有两种初始化方式：</p><ul><li><strong>显式</strong>，指定数组长度，如：<code>[2]int{1, 2, 3}</code>，<code>[2]int{}</code></li><li><strong>隐式</strong>，不指定数组长度，使用<code>[...]</code>，如：<code>[...]int{1,2,3}</code></li></ul><h4 id="_1-3-1-上限推导" tabindex="-1"><a class="header-anchor" href="#_1-3-1-上限推导" aria-hidden="true">#</a> 1.3.1 上限推导</h4><p>编译期会对<strong>隐式</strong>初始化进行上限推导，并转化成显式的初始化。</p><h4 id="_1-3-2-语句转换" tabindex="-1"><a class="header-anchor" href="#_1-3-2-语句转换" aria-hidden="true">#</a> 1.3.2 语句转换</h4><p>根据元素数量不同，编译器做出不同的优化，在<strong>不考虑内存逃逸</strong>的情况下：</p><ul><li><p>元素数量<strong>小于等于 4</strong>，直接将数组放入<strong>栈</strong>上 ； 此时会将字面量转化成更原始的语句，：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// [3]int{1,2,3}</span>
<span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>元素数量<strong>大于 4</strong>，在<strong>静态存储区</strong>初始化数组，并将<strong>临时变量</strong>赋值给数组，即拷贝到<strong>栈</strong>上； <strong>伪代码</strong>如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
arr <span class="token operator">=</span> statictmp_0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-4-访问和赋值" tabindex="-1"><a class="header-anchor" href="#_1-4-访问和赋值" aria-hidden="true">#</a> 1.4 访问和赋值</h3><h4 id="_1-4-1-数组越界" tabindex="-1"><a class="header-anchor" href="#_1-4-1-数组越界" aria-hidden="true">#</a> 1.4.1 数组越界</h4><p>Golang 数组越界检查会有两种情况：</p><ul><li><strong>编译期</strong>检查，当使用<strong>字面量</strong>或<strong>常量</strong>访问数组时进行检查 越界则在编译期<strong>报错</strong></li><li><strong>运行时</strong>检查，当使用<strong>变量</strong>访问数组时进行检查 越界则会触发<strong>panic</strong></li></ul><h4 id="_1-4-2-赋值" tabindex="-1"><a class="header-anchor" href="#_1-4-2-赋值" aria-hidden="true">#</a> 1.4.2 赋值</h4><p>流程：</p><ol><li>确定目标<strong>数组内存地址</strong></li><li>获取目标<strong>元素内存地址</strong></li><li>将数据存入地址中</li></ol><p>SSA 代码示例：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>b1:
    ...
    v21 (5) = LocalAddr &lt;*[3]int&gt; {arr} v2 v19 // 获取数组地址
    v22 (5) = PtrIndex &lt;*int&gt; v21 v13		   // 获取元素地址
    v23 (5) = Store &lt;mem&gt; {int} v22 v20 v19	   // 存储数据
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-切片" tabindex="-1"><a class="header-anchor" href="#_2-切片" aria-hidden="true">#</a> 2. 切片</h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h3><blockquote><p>A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array.</p></blockquote><h3 id="_2-2-类型" tabindex="-1"><a class="header-anchor" href="#_2-2-类型" aria-hidden="true">#</a> 2.2 类型</h3><p>切片的类型只和元素类型有关，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-3-数据结构" aria-hidden="true">#</a> 2.3 数据结构</h3><p>编译期和运行时结构不同：</p>`,33),r={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.Slice",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"cmd/compile/internal/types.Slice",-1),k=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Elem <span class="token operator">*</span>Type <span class="token comment">// element type</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m={href:"https://draveness.me/golang/tree/reflect.SliceHeader",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"reflect.SliceHeader",-1),v=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
	Cap  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Data</code>: 指向数组的指针</li><li><code>Len</code>：长度</li><li><code>Cap</code>：容量，<code>Data</code>表示的数组的大小</li></ul>`,2),g=e(`<p>内存示意图：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309231949532.png" alt="golang-slice-struct" tabindex="0" loading="lazy"><figcaption>golang-slice-struct</figcaption></figure><h3 id="_2-4-初始化" tabindex="-1"><a class="header-anchor" href="#_2-4-初始化" aria-hidden="true">#</a> 2.4 初始化</h3><p>初始化方式有三种：</p><ol><li><p>通过<strong>下标</strong>获取数组或切片的一部分（Reslice）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>
s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
s2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化时，不会拷贝数组的数据，只会创建新的切片指向原数据；修改新切片和原切片/数组的修改会<strong>相互影响</strong></p></li><li><p><strong>字面量</strong>，例如：<code>[]int{1, 2, 3}</code>，会展开成如下所示的代码段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> vstat <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
vstat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
vstat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
vstat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">var</span> vauto <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token operator">*</span>vauto <span class="token operator">=</span> vstat
slice <span class="token operator">:=</span> vauto<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终会通过方式 1)，进行初始化</p></li><li><p><strong>make 关键字</strong>，<code>make(slice_type, len, cap)</code>，首先检查传入的长度和容量是否合法，之后根据不同情况进行处理：</p><ol><li><p>切片不会发生内存逃逸，且比较小，会转换成如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>
n <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将使用方式 1) 进行初始化</p></li><li><p>切片发生<strong>内存逃逸</strong>，或者<strong>比较大</strong>时将在<strong>堆</strong>上初始化 计算切片所需的内存大小并为其申请一片<strong>连续内存</strong></p></li></ol></li></ol><h3 id="_2-5-访问" tabindex="-1"><a class="header-anchor" href="#_2-5-访问" aria-hidden="true">#</a> 2.5 访问</h3><p>对于访问的元素或切片的长度和容量，若能够在<strong>编译期</strong>确认，则直接获取元素地址或直接获取长度和容量。</p><h3 id="_2-6-追加和扩容" tabindex="-1"><a class="header-anchor" href="#_2-6-追加和扩容" aria-hidden="true">#</a> 2.6 追加和扩容</h3><h4 id="_2-6-1-追加-append" tabindex="-1"><a class="header-anchor" href="#_2-6-1-追加-append" aria-hidden="true">#</a> 2.6.1 追加 append</h4><p>追加根据是否覆盖原切片变量，有两种情况：</p><ul><li><strong>覆盖</strong>原切片变量，直接<strong>修改</strong>切片结构体的字段值</li><li><strong>不覆盖</strong>原切片变量，<strong>创建</strong>新的切片结构体</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232214365.png" alt="golang-slice-append" tabindex="0" loading="lazy"><figcaption>golang-slice-append</figcaption></figure><h4 id="_2-6-2-扩容" tabindex="-1"><a class="header-anchor" href="#_2-6-2-扩容" aria-hidden="true">#</a> 2.6.2 扩容</h4><p>扩容策略：</p><ol><li>若期望容量<strong>大于</strong>原容量<strong>两倍</strong>，则使用<strong>期望容量</strong></li><li>若长度<strong>小于 1024</strong>，则容量<strong>翻倍</strong></li><li>若长度<strong>大于 1024</strong>，<strong>每次</strong>增加 25%，直到<strong>大于期望容量</strong></li></ol><p><strong>go v1.18</strong>之后，策略更改为：</p>`,16),b=n("ol",null,[n("li",null,"若期望容量大于原容量的两倍，使用期望容量"),n("li",null,[s("若切片长度"),n("strong",null,"小于 256"),s("，则"),n("strong",null,"翻倍")]),n("li",null,[s("若切片长度"),n("strong",null,"大于 256"),s("，则新容量由计算公式算出： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"w"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"p"),n("mo",null,"="),n("mi",null,"o"),n("mi",null,"l"),n("mi",null,"d"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"p"),n("mo",null,"+"),n("mo",{stretchy:"false"},"("),n("mi",null,"o"),n("mi",null,"l"),n("mi",null,"d"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"p"),n("mo",null,"+"),n("mn",null,"3"),n("mo",null,"×"),n("mn",null,"256"),n("mo",{stretchy:"false"},")"),n("mo",null,"÷"),n("mn",null,"4")]),n("annotation",{encoding:"application/x-tex"},"newcap=oldcap+(oldcap+3\\times 256)\\div 4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"256"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"4")])])])])],-1),_=n("p",null,[s("上述策略获取的是"),n("strong",null,"大致容量"),s("，具体容量会跟据切片元素的大小进行"),n("strong",null,"内存对齐"),s("后计算出来。")],-1),f={href:"https://draveness.me/golang/tree/runtime.class_to_size",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"runtime.class_to_size",-1),w=e(`<p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x=n("p",null,[s("容量为： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"p"),n("mo",null,"="),n("mi",null,"r"),n("mi",null,"o"),n("mi",null,"u"),n("mi",null,"n"),n("mi",null,"d"),n("mi",null,"u"),n("mi",null,"p"),n("mi",null,"s"),n("mi",null,"i"),n("mi",null,"z"),n("mi",null,"e"),n("mo",{stretchy:"false"},"("),n("mn",null,"5"),n("mo",null,"×"),n("mn",null,"8"),n("mo",{stretchy:"false"},")"),n("mo",null,"÷"),n("mn",null,"8"),n("mo",null,"="),n("mn",null,"48"),n("mo",null,"÷"),n("mn",null,"8"),n("mo",null,"="),n("mn",null,"6")]),n("annotation",{encoding:"application/x-tex"},"cap = roundupsize(5\\times 8)\\div 8 = 48\\div 8=6")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ro"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"ze"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"5"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"8"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"8"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"48"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"8"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"6")])])])],-1),z=e('<h3 id="_2-7-拷贝" tabindex="-1"><a class="header-anchor" href="#_2-7-拷贝" aria-hidden="true">#</a> 2.7 拷贝</h3><p>切片的拷贝会将<strong>整块的内存</strong>的内容拷贝到目标内存中：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232243466.png" alt="golang-slice-copy" tabindex="0" loading="lazy"><figcaption>golang-slice-copy</figcaption></figure><h2 id="_3-哈希表" tabindex="-1"><a class="header-anchor" href="#_3-哈希表" aria-hidden="true">#</a> 3. 哈希表</h2><h3 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义" aria-hidden="true">#</a> 3.1 定义</h3>',5),B={href:"https://en.wikipedia.org/wiki/Computing",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"hash table",-1),O=n("strong",null,"hash map",-1),q={href:"https://en.wikipedia.org/wiki/Data_structure",target:"_blank",rel:"noopener noreferrer"},M={href:"https://en.wikipedia.org/wiki/Associative_array",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Abstract_data_type",target:"_blank",rel:"noopener noreferrer"},P={href:"https://en.wikipedia.org/wiki/Unique_key",target:"_blank",rel:"noopener noreferrer"},D={href:"https://en.wikipedia.org/wiki/Value_(computer_science)",target:"_blank",rel:"noopener noreferrer"},L=n("h3",{id:"_3-2-设计原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-设计原理","aria-hidden":"true"},"#"),s(" 3.2 设计原理")],-1),C=n("p",null,"哈希表的设计由两个关键：",-1),j=n("ol",null,[n("li",null,"哈希函数，使用Key计算出哈希值"),n("li",null,"哈希冲突解决，当发生哈希冲突（不同的Key的哈希值相同）时如何解决")],-1),K=n("p",null,"常见的哈希冲突解决方法：",-1),V={href:"https://en.wikipedia.org/wiki/Open_addressing",target:"_blank",rel:"noopener noreferrer"},G=n("ul",null,[n("li",null,[s("装载因子："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"装载因子"),n("mo",null,"="),n("mtext",null,"元素数量"),n("mo",null,"÷"),n("mtext",null,"数组长度")]),n("annotation",{encoding:"application/x-tex"},"\\text{装载因子}=\\text{元素数量}\\div \\text{数组长度}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"装载因子")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"元素数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"数组长度")])])])])])],-1),E=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232345412.png",alt:"open-addressing-and-set",tabindex:"0",loading:"lazy"}),n("figcaption",null,"open-addressing-and-set")],-1),H=n("li",null,[n("p",null,"拉链法 数据结构：数组+链表（或红黑树） 核心思想： 通过哈希值定位桶，在桶中寻找目标元素"),n("ul",null,[n("li",null,"桶：数组元素，类型为链表"),n("li",null,[s("装载因子："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"装载因子"),n("mo",null,"="),n("mtext",null,"元素数量"),n("mo",null,"÷"),n("mtext",null,"桶的数量")]),n("annotation",{encoding:"application/x-tex"},"\\text{装载因子}=\\text{元素数量}\\div \\text{桶的数量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"装载因子")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"元素数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"桶的数量")])])])])])]),n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232354911.png",alt:"separate-chaing-and-set",tabindex:"0",loading:"lazy"}),n("figcaption",null,"separate-chaing-and-set")])],-1),I=n("h3",{id:"_3-3-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-数据结构","aria-hidden":"true"},"#"),s(" 3.3 数据结构")],-1),R={href:"https://draveness.me/golang/tree/runtime.hmap",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.hmap",-1),N=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count     <span class="token builtin">int</span>
	flags     <span class="token builtin">uint8</span>
	B         <span class="token builtin">uint8</span>
	noverflow <span class="token builtin">uint16</span>
	hash0     <span class="token builtin">uint32</span>

	buckets    unsafe<span class="token punctuation">.</span>Pointer
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer
	nevacuate  <span class="token builtin">uintptr</span>

	extra <span class="token operator">*</span>mapextra
<span class="token punctuation">}</span>

<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	nextOverflow <span class="token operator">*</span>bmap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Count</code>：哈希表元素数量</li><li><code>B</code>：用于表示哈希表持有的桶的数量；满足$\\text{BucketsCount} = 2^B $</li><li><code>hash0</code>：哈希种子，用于为哈希值计算引入随机性，创建哈希表时确定</li><li><code>oldbuckets</code>：哈希表扩容时用于保存原<code>buckets</code></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240007751.png" alt="hmap-and-buckets" tabindex="0" loading="lazy"><figcaption>hmap-and-buckets</figcaption></figure>`,3),X={href:"https://draveness.me/golang/tree/runtime.bmap",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"runtime.bmap",-1),Q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后会在运行时构建其他字段，相当于：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
    values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
    pad      <span class="token builtin">uintptr</span>
    overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>桶中存储的主要内容为：</p><ol><li>哈希值的高 8 位数组，长度 8</li><li>Key 的数组，长度 8</li><li>Value 的数组，长度 8</li></ol><h3 id="_3-4-初始化" tabindex="-1"><a class="header-anchor" href="#_3-4-初始化" aria-hidden="true">#</a> 3.4 初始化</h3><p>初始化有两种方式：</p><ol><li>字面量</li><li><code>make</code>关键字</li></ol><h4 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h4><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
	<span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
	<span class="token string">&quot;3&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
	<span class="token string">&quot;5&quot;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会根据元素数量不同，选择不同的方式：</p><ol><li><p>元素数量<strong>小于等于</strong> 25 个，转换成简单赋值代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>元素数量<strong>大于</strong> 25 个，创建两个数组分别存储Key和Value，通过 for 循环加入哈希表</p></li></ol><h4 id="make" tabindex="-1"><a class="header-anchor" href="#make" aria-hidden="true">#</a> make</h4>`,14),W=n("code",null,"make",-1),$={href:"https://draveness.me/golang/tree/runtime.makemap",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"runtime.makemap",-1),Z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token operator">*</span>hmap <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token punctuation">{</span>
		hint <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		h <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hmap<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	B <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		B<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>B <span class="token operator">=</span> B

	<span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> nextOverflow <span class="token operator">*</span>bmap
		h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> nextOverflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>mapextra<span class="token punctuation">)</span>
			h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> h
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要流程：</p>`,2),J=n("li",null,"检查哈希表占用内存是否溢出或超出可分配内存大小",-1),Y=n("li",null,"获取随机哈希种子",-1),nn=n("li",null,"计算最小需要的桶数量",-1),sn={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.makeBucketArray",-1),tn={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.makeBucketArray",-1),pn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> b <span class="token builtin">uint8</span><span class="token punctuation">,</span> dirtyalloc unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>buckets unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> nextOverflow <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	base <span class="token operator">:=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	nbuckets <span class="token operator">:=</span> base
	<span class="token keyword">if</span> b <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		nbuckets <span class="token operator">+=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
		sz <span class="token operator">:=</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size <span class="token operator">*</span> nbuckets
		up <span class="token operator">:=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
		<span class="token keyword">if</span> up <span class="token operator">!=</span> sz <span class="token punctuation">{</span>
			nbuckets <span class="token operator">=</span> up <span class="token operator">/</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	buckets <span class="token operator">=</span> <span class="token function">newarray</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>nbuckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> base <span class="token operator">!=</span> nbuckets <span class="token punctuation">{</span>
		nextOverflow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> base<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>nbuckets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last<span class="token punctuation">.</span><span class="token function">setoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> buckets<span class="token punctuation">,</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据桶的数量，会有不同的流程：</p>`,2),on=n("ol",null,[n("li",null,[s("桶数量"),n("strong",null,"小于"),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"4")])]),n("annotation",{encoding:"application/x-tex"},"2^4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])])])])]),s("，因数据较少使用溢出桶的概率较低，不会创建溢出桶")]),n("li",null,[s("桶数量"),n("strong",null,"大于等于"),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"4")])]),n("annotation",{encoding:"application/x-tex"},"2^4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])])])])]),s("，额外创建溢出桶，"),n("strong",null,"初始化"),s("时的"),n("strong",null,"溢出桶"),s("和桶是在同一块"),n("strong",null,"连续内存空间"),s("中的")])],-1),ln=e('<h3 id="_3-5-读写操作" tabindex="-1"><a class="header-anchor" href="#_3-5-读写操作" aria-hidden="true">#</a> 3.5 读写操作</h3><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h4><p>读取哈希表有两种形式：</p><ol><li><code>val := hash[key]</code></li><li><code>val, ok := hash[key]</code>，<code>ok</code>用于表示键值对是否存在，<code>bool</code>类型</li></ol><p>在编译期，会根据左边参数数量选择不同的操作：</p>',5),cn={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.mapaccess1",-1),rn={href:"https://draveness.me/golang/tree/runtime.mapaccess2",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"runtime.mapaccess2",-1),kn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> v
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问数据流程" tabindex="-1"><a class="header-anchor" href="#访问数据流程" aria-hidden="true">#</a> 访问数据流程</h4><ol><li><p>通过 Key 计算哈希值</p></li><li><p>通过哈希值的取模运算获取桶的在数组中的索引位置 计算结果是哈希值的 <strong>低 B 位</strong></p></li><li><p>遍历桶及其溢出桶</p><p>寻找哈希值的<strong>高 8 位</strong>，是否在桶的 <code>tophash</code>数组中：</p><ul><li><p>若不在，则在下一个<strong>溢出桶</strong>中寻找</p></li><li><p>若在，计算出<code>Key</code>的位置，比较<code>key</code>是否相同：</p><ul><li><p>若key相同，则计算value的位置，并返回</p></li><li><p>若key不同，继续比较<code>tophash</code>，继续步骤 3）</p></li></ul></li></ul></li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240043447.png" alt="hashmap-mapaccess" tabindex="0" loading="lazy"><figcaption>hashmap-mapaccess</figcaption></figure><h4 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h4><p><code>hash[key] = value</code>表示写入操作。</p>`,6),mn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime.mapassign",-1),vn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>flags <span class="token operator">^=</span> hashWriting

again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">)</span> <span class="token operator">+</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先根据传入的Key：</p><ol><li><p>计算哈希值</p></li><li><p>定位桶位置</p></li><li><p>获取哈希值高 8 位</p></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> inserti <span class="token operator">*</span><span class="token builtin">uint8</span>
	<span class="token keyword">var</span> insertk unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">var</span> val unsafe<span class="token punctuation">.</span>Pointer
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
					insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
					val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">goto</span> done
		<span class="token punctuation">}</span>
		ovf <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ovf <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		b <span class="token operator">=</span> ovf
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后遍历桶及其溢出桶：</p><ol><li>若找到相同的Key，返回对应的 Value 的地址</li><li>若未找到，则插入<code>tophash[i]</code>为空的位置，并返回对应的Key，Value地址</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		newb <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>newb<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>newb<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>insertk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token operator">*</span>inserti <span class="token operator">=</span> top
	h<span class="token punctuation">.</span>count<span class="token operator">++</span>

done<span class="token punctuation">:</span>
	<span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若桶以及溢出桶都已经满了，则：</p><ol><li>创建新的溢出桶，链接至当前已有桶的末尾</li><li>增加<code>noverflow</code>计数</li><li>返回新元素在新建溢出桶的插入位置</li></ol>`,9),gn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.mapassign",-1),_n=e(`<div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>00018 (+5) CALL runtime.mapassign_fast64(SB)
00020 (5) MOVQ 24(SP), DI               ;; DI = &amp;value
00026 (5) LEAQ go.string.&quot;88&quot;(SB), AX   ;; AX = &amp;&quot;88&quot;
00027 (5) MOVQ AX, (DI)                 ;; *DI = AX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写入数据流程" tabindex="-1"><a class="header-anchor" href="#写入数据流程" aria-hidden="true">#</a> 写入数据流程</h4><ol><li>根据 Key 计算哈希值</li><li>根据哈希值进行取模运算，得出桶在数组中的索引位置，结果是哈希值的 <strong>低 B 位</strong></li><li>遍历桶及其溢出桶，比较哈希值的高 8 位和桶中的<code>tophash</code>数组的元素： <ul><li>若<code>tophash</code>不同，则判断<code>tophash[i]</code>是否为空 <ul><li>若为空则表示当前位置为<strong>插入位置</strong>，计算Key和Value的地址后返回</li><li>不为空，则继续比较<strong>下一个</strong><code>tophash</code>，继续步骤 3）</li></ul></li><li>若<code>tophash</code>相同，则判断Key是否相同： <ul><li>若Key相同，则计算并返回Key和Value的地址</li><li>若Key不同，则继续比较<strong>下一个</strong><code>tophash</code>, 继续步骤 3）</li></ul></li></ul></li><li>若仍未找到插入位置，则表示桶及其溢出桶<strong>已满</strong>，<strong>创建</strong>新的溢出桶，链接至当前桶的末尾，写入哈希值的高 8 位，并返回Key和Value插入位置的地址。</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240837535.png" alt="hashmap-overflow-bucket" tabindex="0" loading="lazy"><figcaption>hashmap-overflow-bucket</figcaption></figure><h4 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h4><p>当触发特定条件时，哈希表会进行扩容。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> again
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),fn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"runtime.mapassign",-1),wn=n("ol",null,[n("li",null,[n("strong",null,"装载因子"),s("大于 6.5，触发"),n("strong",null,"翻倍扩容")]),n("li",null,[n("strong",null,"溢出桶"),s("的数量过多，触发"),n("strong",null,"等量扩容")])],-1),xn={href:"https://draveness.me/golang/tree/runtime.hashGrow",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"runtime.hashGrow",-1),Bn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	bigger <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		bigger <span class="token operator">=</span> <span class="token number">0</span>
		h<span class="token punctuation">.</span>flags <span class="token operator">|=</span> sameSizeGrow
	<span class="token punctuation">}</span>
	oldbuckets <span class="token operator">:=</span> h<span class="token punctuation">.</span>buckets
	newbuckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">:=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token operator">+</span>bigger<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>B <span class="token operator">+=</span> bigger
	h<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags
	h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> oldbuckets
	h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> newbuckets
	h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>
	h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>

	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>oldoverflow <span class="token operator">=</span> h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token boolean">nil</span>
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Sn={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"runtime.makeBucketArray",-1),qn=n("code",null,"oldbuckets",-1),Mn=n("code",null,"buckets",-1),An=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240957282.png",alt:"hashmap-hashgrow",tabindex:"0",loading:"lazy"}),n("figcaption",null,"hashmap-hashgrow")],-1),Pn={href:"https://draveness.me/golang/tree/runtime.hashGrow",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"runtime.hashGrow",-1),Ln={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime.evacuate",-1),jn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">evacuate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> oldbucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	newbit <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">noldbuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> xy <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>evacDst
		x <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		x<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>

		y <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
		y<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldbucket<span class="token operator">+</span>newbit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Kn={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime.evacuate",-1),Gn={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.evacDst",-1),Hn=n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241002414.png",alt:"hashmap-evacuate-destination",loading:"lazy"},null,-1),In=n("h5",{id:"等量扩容",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#等量扩容","aria-hidden":"true"},"#"),s(" 等量扩容")],-1),Rn={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"runtime.evacDst",-1),Nn=n("strong",null,"一个",-1),Xn=e(`<h5 id="翻倍扩容" tabindex="-1"><a class="header-anchor" href="#翻倍扩容" aria-hidden="true">#</a> 翻倍扩容</h5><p>若为翻倍扩容，旧桶数据会被分流到两个不同的新桶，流程如下：</p><ol><li>新桶1的位置和原桶位置索引相同，即<code>hash &amp; bucketMusk</code></li><li>新桶2的位置，将由原桶掩码增加一位计算得出，即<code>hash &amp; newBucketMusk</code></li></ol><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0xb72bfae3f3285244c4732ce457cca823bc189e0b &amp; 0b11 --&gt; 3 // 原桶和新桶1的位置
0xb72bfae3f3285244c4732ce457cca823bc189e0b &amp; 0b111 --&gt; 7 // 新桶2的位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241014588.png" alt="hashmap-bucket-evacuate" tabindex="0" loading="lazy"><figcaption>hashmap-bucket-evacuate</figcaption></figure><h5 id="数据分流" tabindex="-1"><a class="header-anchor" href="#数据分流" aria-hidden="true">#</a> 数据分流</h5>`,7),Fn=n("strong",null,"不是原子",-1),Qn=n("strong",null,"写入/删除",-1),Wn={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"runtime.growWork",-1),Un=n("p",null,[s("当进行"),n("strong",null,"访问"),s("操作时，若哈希表处于扩容期间，会在先去"),n("code",null,"oldbukets"),s("中寻找数据。")],-1),Zn=n("h4",{id:"删除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#删除","aria-hidden":"true"},"#"),s(" 删除")],-1),Jn=n("p",null,[s("删除哈希表元素使用"),n("code",null,"delete(hash, key)"),s("，此函数无论Key是否存在不会有返回值。")],-1),Yn=n("code",null,"delete",-1),ns=n("code",null,"ODELETE",-1),ss={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"runtime.mapdelete",-1),ts=n("p",null,[s("删除的流程和写入类似，但当遇到"),n("strong",null,"扩容时"),s("，会先进性数据迁移，然后再到桶中搜寻并删除元素。")],-1),es=n("h2",{id:"_4-字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-字符串","aria-hidden":"true"},"#"),s(" 4. 字符串")],-1),ps=n("h3",{id:"_4-1-定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-1-定义","aria-hidden":"true"},"#"),s(" 4.1 定义")],-1),os={href:"https://en.wikipedia.org/wiki/Computer_programming",target:"_blank",rel:"noopener noreferrer"},ls=n("strong",null,"string",-1),cs={href:"https://en.wikipedia.org/wiki/Sequence",target:"_blank",rel:"noopener noreferrer"},is={href:"https://en.wikipedia.org/wiki/Character_(computing)",target:"_blank",rel:"noopener noreferrer"},us={href:"https://en.wikipedia.org/wiki/Literal_(computer_programming)",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://en.wikipedia.org/wiki/Variable_(computer_science)",target:"_blank",rel:"noopener noreferrer"},ds=e('<h3 id="_4-2-类型" tabindex="-1"><a class="header-anchor" href="#_4-2-类型" aria-hidden="true">#</a> 4.2 类型</h3><p><code>string</code>是 Golang 中的基本类型，其值是<strong>只读的</strong>无法更改。</p><p>在编译期间，字符串会被标记成<code>SRODATA</code>。</p><h3 id="_4-3-数据结构" tabindex="-1"><a class="header-anchor" href="#_4-3-数据结构" aria-hidden="true">#</a> 4.3 数据结构</h3>',4),ks={href:"https://draveness.me/golang/tree/reflect.StringHeader",target:"_blank",rel:"noopener noreferrer"},ms=n("code",null,"reflect.StringHeader",-1),hs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Data</code>: 指向数组的指针</li><li><code>Len</code>：字符串长度</li></ul><h3 id="_4-4-初始化和解析" tabindex="-1"><a class="header-anchor" href="#_4-4-初始化和解析" aria-hidden="true">#</a> 4.4 初始化和解析</h3><p>字符串有两种方式表示:</p><ol><li>使用<strong>双引号</strong></li><li>使用<strong>反引号</strong></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 使用双引号</span>
s1 <span class="token operator">:=</span> <span class="token string">&quot;abcd&quot;</span>
<span class="token comment">// 使用反引号</span>
s2 <span class="token operator">:=</span> <span class="token string">\`ab
cd
e\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串的解析流程：</p>`,7),vs={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"cmd/compile/internal/syntax.scanner",-1),bs={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner.stdString",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"cmd/compile/internal/syntax.scanner.stdString",-1),fs=n("ol",null,[n("li",null,"标准字符串使用双引号表示开头和结尾；"),n("li",null,[s("标准字符串需要使用反斜杠 "),n("code",null,"\\"),s(" 来逃逸双引号；")]),n("li",null,[s("标准字符串不能出现如下所示的隐式换行 "),n("code",null,"\\n"),s("；")])],-1),ys={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner.rawString",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"cmd/compile/internal/syntax.scanner.rawString",-1),xs=n("h3",{id:"_4-5-拼接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-5-拼接","aria-hidden":"true"},"#"),s(" 4.5 拼接")],-1),zs=n("p",null,[s("拼接字符串使用"),n("code",null,"+"),s("号，编译器会将符号对应的"),n("code",null,"OADD"),s("节点变成"),n("code",null,"OADDSTR"),s("节点。")],-1),Bs={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.addstr",target:"_blank",rel:"noopener noreferrer"},Ss=n("code",null,"cmd/compile/internal/gc.addstr",-1),Os=e('<p>字符串拼接流程：</p><ol><li>将传入的字符串放入切片</li><li>过滤空字符串，并计算拼接后的长度</li><li>若非空字符串数量为1或字符串不在栈上，直接返回</li><li>正常情况下，将字符串拷贝到新的内存空间</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250106198.png" alt="string-concat-and-copy" tabindex="0" loading="lazy"><figcaption>string-concat-and-copy</figcaption></figure><h3 id="_4-6-类型转换" tabindex="-1"><a class="header-anchor" href="#_4-6-类型转换" aria-hidden="true">#</a> 4.6 类型转换</h3><h4 id="byte-string" tabindex="-1"><a class="header-anchor" href="#byte-string" aria-hidden="true">#</a> []byte-&gt; string</h4>',5),qs=n("li",null,"计算是否需要新内存空间",-1),Ms={href:"https://draveness.me/golang/tree/runtime.stringStruct",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"runtime.stringStruct",-1),Ps=n("code",null,"str",-1),Ds=n("code",null,"len",-1),Ls={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.memmove",-1),js=n("code",null,"[]byte",-1),Ks=n("h4",{id:"string-byte",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-byte","aria-hidden":"true"},"#"),s(" string -> []byte")],-1),Vs=n("li",null,[s("若传入缓冲区，使用缓冲区存储"),n("code",null,"[]byte")],-1),Gs={href:"https://draveness.me/golang/tree/runtime.rawbyteslice",target:"_blank",rel:"noopener noreferrer"},Es=n("code",null,"runtime.rawbyteslice",-1),Hs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250113603.png",alt:"string-bytes-conversion",tabindex:"0",loading:"lazy"}),n("figcaption",null,"string-bytes-conversion")],-1),Is=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Rs={href:"https://go.dev/tour/moretypes/7",target:"_blank",rel:"noopener noreferrer"},Ts={href:"https://draveness.me/golang/",target:"_blank",rel:"noopener noreferrer"},Ns={href:"https://en.wikipedia.org/wiki/Hash_table#Collision_resolution",target:"_blank",rel:"noopener noreferrer"},Xs={href:"https://en.wikipedia.org/wiki/String_(computer_science)",target:"_blank",rel:"noopener noreferrer"};function Fs(Qs,Ws){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("编译期，"),n("a",r,[d,t(a)]),s("：")]),k]),n("li",null,[n("p",null,[s("运行时，"),n("a",m,[h,t(a)]),s("：")]),v])]),g,b,_,n("p",null,[s("内存对齐会用到"),n("a",f,[y,t(a)]),s("数组。")]),w,x,z,n("blockquote",null,[n("p",null,[s("In "),n("a",B,[s("computing"),t(a)]),s(", a "),S,s(", also known as "),O,s(", is a "),n("a",q,[s("data structure"),t(a)]),s(" that implements an "),n("a",M,[s("associative array"),t(a)]),s(", also called dictionary, which is an "),n("a",A,[s("abstract data type"),t(a)]),s(" that maps "),n("a",P,[s("keys"),t(a)]),s(" to "),n("a",D,[s("values"),t(a)]),s(".")])]),L,C,j,K,n("ol",null,[n("li",null,[n("p",null,[n("a",V,[s("开放寻址法"),t(a)]),s(" 数据结构：数组 核心思想：依次探测和比较数组中的元素以判断键值是否在哈希表中")]),G,E]),H]),I,n("p",null,[s("Golang 使用多种结构体表示哈希表，"),n("a",R,[T,t(a)]),s("是最核心的结构体：")]),N,n("p",null,[s("桶的结构体"),n("a",X,[F,t(a)]),s("在源码中只有一个字段")]),Q,n("p",null,[s("使用"),W,s("关键字，将会调用"),n("a",$,[U,t(a)]),s(":")]),Z,n("ol",null,[J,Y,nn,n("li",null,[s("使用"),n("a",sn,[an,t(a)]),s(" 创建桶的数组")])]),n("p",null,[n("a",tn,[en,t(a)]),s("用于创建桶数组，其会在内存中分配一段连续的空间用于存储数据：")]),pn,on,ln,n("ol",null,[n("li",null,[s("只有一个参数，使用"),n("a",cn,[un,t(a)])]),n("li",null,[s("有两个参数，使用"),n("a",rn,[dn,t(a)])])]),kn,n("p",null,[s("在编译期间会转换成"),n("a",mn,[hn,t(a)]),s("函数的调用：")]),vn,n("p",null,[n("a",gn,[bn,t(a)]),s("函数并不会进行赋值操作，只会返回相应位置的地址，真正的赋值/写入操作在编译期间插入：")]),_n,n("p",null,[n("a",fn,[yn,t(a)]),s("函数会在两种情况下触发扩容，并且扩容策略也不同：")]),wn,n("p",null,[s("扩容的入口函数，"),n("a",xn,[zn,t(a)]),s("：")]),Bn,n("p",null,[s("扩容过程中会通过"),n("a",Sn,[On,t(a)]),s("创建新桶数组，并将原桶数组设置到"),qn,s("上，新桶设置到"),Mn,s("上；对于溢出桶采用同样的逻辑处理。")]),An,n("p",null,[n("a",Pn,[Dn,t(a)]),s("函数只是根据扩容的类型创建了相应数量的新桶，并未进行数据的迁移。数据的迁移工作交给"),n("a",Ln,[Cn,t(a)]),s("完成：")]),jn,n("p",null,[n("a",Kn,[Vn,t(a)]),s("会将一个旧桶中的数据分流到两个新桶中，会创建两个"),n("a",Gn,[En,t(a)]),s("结构体保存分配上下文，其分别指向不同的新桶： "),Hn]),In,n("p",null,[s("若为等量扩容，两个"),n("a",Rn,[Tn,t(a)]),s("结构体只会被初始化"),Nn,s("，新旧桶的是一对一的")]),Xn,n("p",null,[s("扩容并操作"),Fn,s("的，而是在每次进行"),Qn,s("操作时，触发"),n("a",Wn,[$n,t(a)]),s("将当前访问的桶中的数据拷贝至新桶。")]),Un,Zn,Jn,n("p",null,[s("编译期会将"),Yn,s("转换成"),ns,s("节点，并在"),n("a",ss,[as,t(a)]),s("系列函数中选择一个。")]),ts,es,ps,n("blockquote",null,[n("p",null,[s("In "),n("a",os,[s("computer programming"),t(a)]),s(", a "),ls,s(" is traditionally a "),n("a",cs,[s("sequence"),t(a)]),s(" of "),n("a",is,[s("characters"),t(a)]),s(", either as a "),n("a",us,[s("literal constant"),t(a)]),s(" or as some kind of "),n("a",rs,[s("variable"),t(a)]),s(".")])]),ds,n("p",null,[s("字符串在运行时，采用"),n("a",ks,[ms,t(a)]),s("：")]),hs,n("ol",null,[n("li",null,[s("编译器先先使用"),n("a",vs,[gs,t(a)]),s("将字符串转换成token流")]),n("li",null,[n("a",bs,[_s,t(a)]),s(" 用于解析标准字符串： "),fs]),n("li",null,[n("a",ys,[ws,t(a)]),s("解析原始字符串")])]),xs,zs,n("p",null,[n("a",Bs,[Ss,t(a)]),s("会根据字符串数目的不同选择不同的函数，但流程是类似的。")]),Os,n("ol",null,[qs,n("li",null,[s("将字符串指针换成"),n("a",Ms,[As,t(a)]),s("指针，设置"),Ps,s("和"),Ds]),n("li",null,[s("通过"),n("a",Ls,[Cs,t(a)]),s("将"),js,s("的字节复制到新的内存空间中")])]),Ks,n("ol",null,[Vs,n("li",null,[s("若没有，运行时会调用 "),n("a",Gs,[Es,t(a)]),s(" 创建新的字节切片并拷贝字符串的字节")])]),Hs,Is,n("ol",null,[n("li",null,[n("a",Rs,[s("https://go.dev/tour/moretypes/7"),t(a)])]),n("li",null,[n("a",Ts,[s("https://draveness.me/golang/"),t(a)])]),n("li",null,[n("a",Ns,[s("https://en.wikipedia.org/wiki/Hash_table#Collision_resolution"),t(a)])]),n("li",null,[n("a",Xs,[s("https://en.wikipedia.org/wiki/String_(computer_science)"),t(a)])])])])}const Us=p(i,[["render",Fs],["__file","03.0.chpater_summary.html.vue"]]);export{Us as default};
