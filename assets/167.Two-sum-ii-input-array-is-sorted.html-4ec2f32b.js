import{_ as p,X as o,Y as i,Z as n,$ as s,a0 as e,a1 as t,F as l}from"./framework-8cb7ec75.js";const c={},u=t(`<h2 id="_1-题目描述" tabindex="-1"><a class="header-anchor" href="#_1-题目描述" aria-hidden="true">#</a> 1. 题目描述</h2><p>给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1 &lt;= index1 &lt; index2 &lt;= numbers.length 。</p><p>以长度为 2 的整数数组 [index1, index2] 的形式返回这两个整数的下标 index1 和 index2。</p><p>你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>示例 1：
输入：numbers = [2,7,11,15], target = 9
输出：[1,2]
解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。

示例 2：
输入：numbers = [2,3,4], target = 6
输出：[1,3]
解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。

示例 3：
输入：numbers = [-1,0], target = -1
输出：[1,2]
解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-分析" tabindex="-1"><a class="header-anchor" href="#_2-分析" aria-hidden="true">#</a> 2. 分析</h2>`,7),r={href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="_3-题解" tabindex="-1"><a class="header-anchor" href="#_3-题解" aria-hidden="true">#</a> 3. 题解</h2><h3 id="_3-1-二分查找" tabindex="-1"><a class="header-anchor" href="#_3-1-二分查找" aria-hidden="true">#</a> 3.1 二分查找</h3><p>在数组中找到两个数，使得它们的和等于目标值，首先固定第一个数，然后寻找第二个数（等于目标值减去第一个数的差）。</p><p>因为数组是有序的，可以通过二分查找寻找第二个数。为避免重复查找，只在第一个数的右侧寻找。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>numbers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        left<span class="token punctuation">,</span> right <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
            mid <span class="token operator">:=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
            x <span class="token operator">:=</span> target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> x <span class="token operator">==</span> numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析：</p><ul><li>时间复杂度：<em>O(n logn)</em>，其中 n 为数组长度。遍历获取第一个数，复杂度为 <em>O(n)</em>，二分查找第二个数，复杂度为 <em>O(logn)</em>，因此总时间复杂度为 <em>O(n logn)</em></li><li>空间复杂度：<em>O(1)</em>。</li></ul><h3 id="_3-2-双指针" tabindex="-1"><a class="header-anchor" href="#_3-2-双指针" aria-hidden="true">#</a> 3.2 双指针</h3><p>初始时两个指针分别指向第一个元素和最后一个元素。每次计算指针指向的两个元素之和，与目标值比较。</p><ul><li>若和等于目标值，则发现唯一解。</li><li>若和小于目标值，则将左指针右移一位。</li><li>若和小于目标值，则将右指针左移一位。</li></ul><p>使用双指针的实质是缩小查找范围，会不会把可能的解过滤掉？</p><p>不会，假设 <em>numbers[i] + numbers[j] = target</em> 是唯一解，其中 <em>0 &lt;= i &lt; j &lt;= numbers.length - 1</em>，左指针指向的下标小于等于 <em>i</em>，右指针指向的下标大于或等于 <em>j</em>。除非初始时左指针和右指针已经位于下标 <em>i</em> 和 <em>j</em>，否则一定是左指针到达下标 <em>i</em> 或 右指到达下标 <em>j</em>：</p><ul><li>若左指针先到达下标 <em>i</em> 的位置，此时右指针还在 <em>j</em> 的右侧，<em>sum &gt; target</em>，因此一定是右指针左移，左指针不可能移动到 <em>i</em> 的右侧。</li><li>若右指针先到达下标 <em>j</em> 的位置，此时左指针还在下标 <em>i</em> 的左侧，<em>sum &lt; target</em>，因此一定是左指针右移，右指针不可能移动到 <em>j</em> 的左侧。</li></ul><p>由此可见，在移动过程中，左指针不可能到 <em>i</em> 的右侧，而右指针不可能移动到 <em>j</em> 的左侧，因此不会将可能的解漏掉。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>numbers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
        sum <span class="token operator">:=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
        <span class="token keyword">if</span> sum <span class="token operator">==</span> target <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target <span class="token punctuation">{</span>
            left<span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析：</p><ul><li>时间复杂度： <em>O(n)</em>，其中 n 为数组的长度。两个指针移动的总次数最多为 n 次。</li><li>空间复杂度：<em>O(1)</em>。</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,18),k={href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/solution/liang-shu-zhi-he-ii-shu-ru-you-xu-shu-zu-by-leet-2/",target:"_blank",rel:"noopener noreferrer"};function b(v,h){const a=l("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("此题可以使用「"),n("a",r,[s("1. 两数之和"),e(a)]),s("」的解法，暴力枚举或者使用哈希表（但是哈希表不满足常量级的空间复杂度）。但是没有利用上有序数组的特性，若利用好有序的特性，可以得到更优的算法。")]),d,n("ol",null,[n("li",null,[n("a",k,[s("167. Two sum ii input array is sorted"),e(a)])]),n("li",null,[n("a",m,[s("官方题解"),e(a)])])])])}const f=p(c,[["render",b],["__file","167.Two-sum-ii-input-array-is-sorted.html.vue"]]);export{f as default};
