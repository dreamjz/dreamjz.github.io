import{_ as e,Z as t,$ as p,a0 as n,a1 as s,a2 as o,a4 as c,H as i}from"./framework-d03928c9.js";const l={},u=n("h1",{id:"_17-组件注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-组件注册","aria-hidden":"true"},"#"),s(" 17. 组件注册")],-1),d=n("p",null,"组件注册有两种方式：",-1),r=n("ul",null,[n("li",null,"全局注册"),n("li",null,"局部注册")],-1),v=n("h2",{id:"_17-1-全局注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-1-全局注册","aria-hidden":"true"},"#"),s(" 17.1 全局注册")],-1),k={href:"https://cn.vuejs.org/guide/essentials/application.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"app.component()",-1),g=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>
  <span class="token comment">// 注册的名字</span>
  <span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 组件的实现</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用单文件组件，可以注册被导入的 <code>.vue</code> 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span> MyComponent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>app.component()</code> 方法可以被链式调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app
  <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentA&#39;</span><span class="token punctuation">,</span> ComponentA<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentB&#39;</span><span class="token punctuation">,</span> ComponentB<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentC&#39;</span><span class="token punctuation">,</span> ComponentC<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局注册的组件可以在此应用的任意组件的模板中使用.</p><h2 id="_17-2-局部注册" tabindex="-1"><a class="header-anchor" href="#_17-2-局部注册" aria-hidden="true">#</a> 17.2 局部注册</h2><p>全局注册有以下几个问题：</p><ul><li>没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</li><li>在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</li></ul><p>局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。</p><p>优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</p><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ComponentA
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>局部注册的组件在后代组件中并*不*可用</strong>。在这个例子中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h2 id="_17-3-组件名格式" tabindex="-1"><a class="header-anchor" href="#_17-3-组件名格式" aria-hidden="true">#</a> 17.3 组件名格式</h2><p>使用 PascalCase 作为组件名的注册格式，这是因为：</p><ol><li>PascalCase 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全。</li><li><code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。同时也能够将 Vue 组件和自定义元素 (web components) 区分开来。</li></ol><p>Vue 支持将模板中使用 kebab-case 的标签解析为使用 PascalCase 注册的组件。</p><p>这意味着一个以 <code>MyComponent</code> 为名注册的组件，在模板中可以通过 <code>&lt;MyComponent&gt;</code> 或 <code>&lt;my-component&gt;</code> 引用。能够使用同样的 JavaScript 组件注册代码来配合不同来源的模板。</p>`,21);function b(h,_){const a=i("ExternalLinkIcon");return t(),p("div",null,[u,d,r,v,n("p",null,[s("使用 "),n("a",k,[s("Vue 应用实例"),o(a)]),s("的 "),m,s(" 方法，让组件在当前 Vue 应用中全局可用。")]),g])}const f=e(l,[["render",b],["__file","02.1.registration.html.vue"]]);export{f as default};
