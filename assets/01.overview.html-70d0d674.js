import{_ as o,Z as e,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as i}from"./framework-09afcf0b.js";const l={},u=p(`<h2 id="_1-1-竞争" tabindex="-1"><a class="header-anchor" href="#_1-1-竞争" aria-hidden="true">#</a> 1.1 竞争</h2><p>当两个或多个操作必须按正确的顺序执行，而程序未保证这个顺序，将会发生<strong>竞争</strong>。</p><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">competition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> data <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		data<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;the value is %v.\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>go func()</code>和<code>main()</code>都尝试访问变量<code>data</code>，但是不能保证以确定的顺序访问，肯能会出现三种结果：</p><ol><li>不打印任何数据；<code>data++</code>在<code>if data == 0</code>之前执行</li><li>打印<code>the value is 0</code>，<code>if data == 0</code>和打印语句在<code>data++</code>之前</li><li>打印<code>the value is 1</code>，<code>if data == 0</code>在<code>data++</code>之前，但是打印语句在<code>data++</code>之后</li></ol><p>这为代码的运行带来了非常大的<strong>不确定性</strong>。</p><h2 id="_1-2-原子性" tabindex="-1"><a class="header-anchor" href="#_1-2-原子性" aria-hidden="true">#</a> 1.2 原子性</h2><p><strong>原子性</strong>表示一个操作在其<strong>运行的环境</strong>中是<strong>不可分割</strong>的或<strong>不可中断</strong>的。</p><p>判断一个事物是否是原子性的，一定要根据其<strong>运行的环境</strong>（或上下文Context）来判断，相同的事物在不同的环境中<strong>不一定</strong>都是原子性的。</p><h2 id="_1-3-临界区" tabindex="-1"><a class="header-anchor" href="#_1-3-临界区" aria-hidden="true">#</a> 1.3 临界区</h2><p>在上述的代码示例中，两个<strong>并发的协程</strong>(<code>go</code>开启的协程和<code>main</code>协程)试图<strong>访问</strong>相同的内存区域(<code>data</code>)，并且访问的<strong>操作不是原子性</strong>的，这样的情况带来了<strong>竞争</strong>。</p><p><strong>访问共享数据</strong>的代码被称为<strong>临界区</strong>。例如上例的代码中临界区有三个：</p><ul><li><code>data++</code></li><li><code>if data == 0</code></li><li><code>fmt.Printf(&quot;the value is %d\\n&quot;, data)</code></li></ul><h2 id="_1-4-死锁、活锁和饥饿" tabindex="-1"><a class="header-anchor" href="#_1-4-死锁、活锁和饥饿" aria-hidden="true">#</a> 1.4 死锁、活锁和饥饿</h2><h3 id="死锁-deadlock" tabindex="-1"><a class="header-anchor" href="#死锁-deadlock" aria-hidden="true">#</a> 死锁(deadlock)</h3><p>死锁程序是<strong>所有</strong>并发进程都在<strong>彼此等待</strong>的程序。</p><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> val <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		mu sync<span class="token punctuation">.</span>Mutex
		v  <span class="token builtin">int</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	printSum <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2 <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		v1<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> v1<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 尽可能让死锁发生的概率提高，因为无法保证 goroutine 的执行顺序</span>

		v2<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> v2<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;sum = %d\\n&quot;</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span>v<span class="token operator">+</span>v2<span class="token punctuation">.</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b val
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token comment">// 锁定 a, 等待 b</span>
	<span class="token keyword">go</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token comment">// 锁定 b, 等待 a</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，两个协程分别锁定了对方想要获得的资源，造成了<strong>死锁</strong>。（使用<code>sleep</code>的原因是因为无法保证goroutine的执行顺序）</p><h4 id="死锁的条件" tabindex="-1"><a class="header-anchor" href="#死锁的条件" aria-hidden="true">#</a> 死锁的条件</h4>`,21),r={href:"https://en.wikipedia.org/wiki/Edward_G._Coffman,_Jr.",target:"_blank",rel:"noopener noreferrer"},k=p(`<ol><li><strong>相互排斥</strong>，并发进程同时拥有资源<strong>独占</strong>权</li><li><strong>等待条件</strong>，并发进程必须同时<strong>拥有</strong>一个资源，并<strong>等待</strong>额外的资源</li><li><strong>没有抢占</strong>，并发进程拥有的资源<strong>只能</strong>被该进程释放</li><li><strong>循环等待</strong>，并发进程间<strong>相互等待</strong></li></ol><h3 id="活锁-livelock" tabindex="-1"><a class="header-anchor" href="#活锁-livelock" aria-hidden="true">#</a> 活锁(livelock)</h3><p>活锁程序是正在主动执行并发操作的程序，但是这些操作无法向前推进程序的状态。</p><p>一个现实的例子：走廊中相向而行的两个人，相遇之后，其中一个选择走向另一边把路让出来，而另一个人也是这么想的，此时就形成了<strong>活锁</strong>。两个程序一直在运行，但是没有任何的进展。</p><p>以下程序模拟上述过程：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> ch01

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;sync/atomic&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">livelock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cadence <span class="token operator">:=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cadence<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	takeStep <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cadence<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		cadence<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		cadence<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	tryDir <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>dirName <span class="token builtin">string</span><span class="token punctuation">,</span> dir <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">,</span> out <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot; %v&quot;</span><span class="token punctuation">,</span> dirName<span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">takeStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot; . Success!&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>

		<span class="token function">takeStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> left<span class="token punctuation">,</span> right <span class="token builtin">int32</span>
	tryLeft <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>out <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">tryDir</span><span class="token punctuation">(</span><span class="token string">&quot;left&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	tryRight <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>out <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">tryDir</span><span class="token punctuation">(</span><span class="token string">&quot;right&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	walk <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>walking <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> out bytes<span class="token punctuation">.</span>Buffer
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> walking<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">,</span> <span class="token string">&quot;%v is tring to scoot:&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token function">tryLeft</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tryRight</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">,</span> <span class="token string">&quot;\\n%v tosses her hand up in exasperation!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> peopleInHallway sync<span class="token punctuation">.</span>WaitGroup
	peopleInHallway<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>peopleInHallway<span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>peopleInHallway<span class="token punctuation">,</span> <span class="token string">&quot;Barbara&quot;</span><span class="token punctuation">)</span>
	peopleInHallway<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Alice is tring to scoot: left right left right left right left right left right
Alice tosses her hand up in exasperation!
Barbara is tring to scoot: left right left right left right left right left right
Barbara tosses her hand up in exasperation!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由输出可以看到，在程序强制（设定了最高尝试次数）退出前，两个协程会<strong>持续的进行竞争</strong>，并且程序毫无进展。</p><h3 id="饥饿-starvation" tabindex="-1"><a class="header-anchor" href="#饥饿-starvation" aria-hidden="true">#</a> 饥饿(starvation)</h3><p>饥饿指的是在<strong>任何情况下</strong>，并发进程都<strong>无法</strong>获取工作所需的<strong>全部资源</strong>。</p><p>饥饿发生时，通常意味着有一个或多个<strong>贪婪</strong>进程在<strong>不公平</strong>的阻止其他进程获取资源，以尽可能的有效完成工作。</p><p>下例中，创建了一个贪婪的goroutine和一个平和的goroutine：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">starvation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> runtime <span class="token operator">=</span> time<span class="token punctuation">.</span>Second
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">var</span> sharedLock sync<span class="token punctuation">.</span>Mutex

	greedyWorker <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">var</span> count <span class="token builtin">int</span>
		<span class="token keyword">for</span> begin <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> runtime<span class="token punctuation">;</span> <span class="token punctuation">{</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Nanosecond<span class="token punctuation">)</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			count<span class="token operator">++</span>
		<span class="token punctuation">}</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Greedy worker was able to execute %v work loops\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	politeWorker <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">var</span> count <span class="token builtin">int</span>
		<span class="token keyword">for</span> begin <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> runtime<span class="token punctuation">;</span> <span class="token punctuation">{</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Nanosecond<span class="token punctuation">)</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			sharedLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Nanosecond<span class="token punctuation">)</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			sharedLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Nanosecond<span class="token punctuation">)</span>
			sharedLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			count<span class="token operator">++</span>
		<span class="token punctuation">}</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Polite worker was able to execute %v work loops\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">greedyWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">politeWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Greedy worker was able to execute 33 work loops
Polite worker was able to execute 12 work loops
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，做同样的工作(3ns)，在相同的时间内，贪婪的协程的进行的工作量是平和协程的两倍多。</p><p>因为贪婪协程<strong>不必要的扩大</strong>了<strong>临界区</strong>，并且导致平和协程无法获取所有的共享资源，导致了饥饿问题。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,18),d={href:"https://book.douban.com/subject/30424330/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Critical_section",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Deadlock#Livelock",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const a=i("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[s("死锁的条件("),n("a",r,[s("coffman条件"),t(a)]),s(")，有四个：")]),k,n("ol",null,[n("li",null,[n("a",d,[s("Go 语言并发之道"),t(a)])]),n("li",null,[n("a",v,[s("https://en.wikipedia.org/wiki/Critical_section"),t(a)])]),n("li",null,[n("a",m,[s("https://en.wikipedia.org/wiki/Deadlock#Livelock"),t(a)])])])])}const w=o(l,[["render",b],["__file","01.overview.html.vue"]]);export{w as default};
