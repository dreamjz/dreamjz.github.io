const e=JSON.parse('{"key":"v-1189987a","path":"/blog/golang/re-zero-go-project/7-days-golang/GeeCache.html","title":"GeeCache 笔记总结","lang":"zh-CN","frontmatter":{"title":"GeeCache 笔记总结","date":"2023-10-13T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"1. LRU 缓存策略","slug":"_1-lru-缓存策略","link":"#_1-lru-缓存策略","children":[{"level":3,"title":"1.1 数据结构","slug":"_1-1-数据结构","link":"#_1-1-数据结构","children":[]}]},{"level":2,"title":"2. 设计","slug":"_2-设计","link":"#_2-设计","children":[{"level":3,"title":"2.1 ByteView","slug":"_2-1-byteview","link":"#_2-1-byteview","children":[]},{"level":3,"title":"2.2 并发缓存","slug":"_2-2-并发缓存","link":"#_2-2-并发缓存","children":[]},{"level":3,"title":"2.3 Group","slug":"_2-3-group","link":"#_2-3-group","children":[]},{"level":3,"title":"2.4 接口型函数","slug":"_2-4-接口型函数","link":"#_2-4-接口型函数","children":[]},{"level":3,"title":"2.4 一致性哈希算法","slug":"_2-4-一致性哈希算法","link":"#_2-4-一致性哈希算法","children":[]},{"level":3,"title":"2.5 分布式节点","slug":"_2-5-分布式节点","link":"#_2-5-分布式节点","children":[]},{"level":3,"title":"2.7 Single Flight","slug":"_2-7-single-flight","link":"#_2-7-single-flight","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1697339715000},"readingTime":{"minutes":6.76,"words":2029},"filePathRelative":"blog/golang/re-zero-go-project/7-days-golang/GeeCache.md","localizedDate":"2023年10月13日","excerpt":"<h2> 1. LRU 缓存策略</h2>\\n<figure><img src=\\"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131426770.jpeg\\" alt=\\"implement lru algorithm with golang\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>implement lru algorithm with golang</figcaption></figure>\\n<p>LRU（<a href=\\"https://leetcode.cn/problems/lru-cache/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">146. LRU 缓存</a>）由两部分组成：</p>"}');export{e as data};
