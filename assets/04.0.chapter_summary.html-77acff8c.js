import{_ as o,Z as l,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as p}from"./framework-09afcf0b.js";const i={},r=t('<h2 id="_1-函数调用" tabindex="-1"><a class="header-anchor" href="#_1-函数调用" aria-hidden="true">#</a> 1. 函数调用</h2><p>Go 语言函数调用：</p><ol><li>函数<strong>参数</strong>按照<strong>从右至左</strong>的顺序<strong>入栈</strong></li><li>函数<strong>返回值</strong>存储在<strong>栈</strong>上</li></ol><p>C 和 Go 在函数调用上的差异：</p><ol><li>C 使用<strong>寄存器</strong>和<strong>栈</strong>传递参数，使用<strong>寄存器</strong>传递返回值，无法返回多个返回值</li><li>Go 使用<strong>栈</strong>传递参数和返回值，可以返回多个返回值</li></ol><h3 id="_1-2-参数传递" tabindex="-1"><a class="header-anchor" href="#_1-2-参数传递" aria-hidden="true">#</a> 1.2 参数传递</h3><p>Golang 的参数传递采用<strong>值传递</strong>，即会对参数进行拷贝。</p><h2 id="_2-接口" tabindex="-1"><a class="header-anchor" href="#_2-接口" aria-hidden="true">#</a> 2. 接口</h2><h3 id="_2-1-定义及其优点" tabindex="-1"><a class="header-anchor" href="#_2-1-定义及其优点" aria-hidden="true">#</a> 2.1 定义及其优点</h3><p>在计算机科学中，接口是计算机系统中多个组件共享的边界，不同的组件能够在边界上交换信息。</p><p>使用接口可以：</p><ol><li>解耦有依赖关系的上下游</li><li>隐藏底层实现，减少关注点</li></ol><h3 id="_2-2-隐式实现" tabindex="-1"><a class="header-anchor" href="#_2-2-隐式实现" aria-hidden="true">#</a> 2.2 隐式实现</h3><p>Golang 的接口的实现是<strong>隐式</strong>的，实现接口定义的<strong>所有方法</strong>即可实现该接口，无需显式声明。</p><h3 id="_2-3-类型" tabindex="-1"><a class="header-anchor" href="#_2-3-类型" aria-hidden="true">#</a> 2.3 类型</h3><p>Golang 的接口有两种：</p>',16),u=n("strong",null,"空接口",-1),d=n("code",null,"interface{}",-1),k={href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"runtime.eface",-1),g=n("strong",null,"接口",-1),f={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.iface",-1),m=t('<p>空接口<strong>不是</strong>任意类型，若将变量赋值给空接口将发生隐式的<strong>类型转换</strong>。</p><h3 id="_2-4-接口和方法集" tabindex="-1"><a class="header-anchor" href="#_2-4-接口和方法集" aria-hidden="true">#</a> 2.4 接口和方法集</h3><p>将变量经过<strong>类型转换</strong>成接口类型后，根据原变量类型的不同（值类型或指针类型）能调用的方法集不同。</p><table><thead><tr><th>原变量类型\\方法接收者</th><th>值</th><th>指针</th></tr></thead><tbody><tr><td>值</td><td>可</td><td>不可</td></tr><tr><td>指针</td><td>可</td><td>可</td></tr></tbody></table><ul><li>原变量类型为<strong>指针</strong>，转换成<strong>接口</strong>类型后，接口持有的是原变量的<strong>指针</strong>，可以调用接收者为<strong>值</strong>类型（自动<strong>解引用</strong>）的方法和<strong>指针</strong>类型的方法</li><li>原变量类型为<strong>值</strong>，转换成<strong>接口</strong>类型后，接口持有的是原变量的<strong>值的拷贝</strong>，可以调用接收者为值类型的方法，<strong>不能</strong>调用<strong>指针</strong>类型的方法（已不可寻址）</li></ul><p>根本原因在于，Golang 的函数参数使用<strong>值传递</strong>，当原变量类型是值类型时，接口变量持有的是一份拷贝，在调用<strong>指针</strong>方法时<strong>无法获取</strong>原始的变量地址。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260057904.png" alt="golang-interface-method-receive" tabindex="0" loading="lazy"><figcaption>golang-interface-method-receive</figcaption></figure><h3 id="_2-5-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-5-数据结构" aria-hidden="true">#</a> 2.5 数据结构</h3><h4 id="空接口" tabindex="-1"><a class="header-anchor" href="#空接口" aria-hidden="true">#</a> 空接口</h4>',9),_={href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"runtime.eface",-1),y=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	_type <span class="token operator">*</span>_type
	data  unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>_type</code> ：指向表示类型的结构</li><li><code>data</code>：指向底层数据</li></ul><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4>`,3),x={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.iface",-1),V=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tab  <span class="token operator">*</span>itab
	data unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>tab</code>: 指向表示类型的结构</li><li><code>data</code>：指向底层数据</li></ul><h4 id="runtime-type" tabindex="-1"><a class="header-anchor" href="#runtime-type" aria-hidden="true">#</a> <code>runtime._type</code></h4>`,3),O={href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"runtime._type",-1),I=n("strong",null,"类型",-1),E=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	size       <span class="token builtin">uintptr</span>
	ptrdata    <span class="token builtin">uintptr</span>
	hash       <span class="token builtin">uint32</span>
	tflag      tflag
	align      <span class="token builtin">uint8</span>
	fieldAlign <span class="token builtin">uint8</span>
	kind       <span class="token builtin">uint8</span>
	equal      <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span>
	gcdata     <span class="token operator">*</span><span class="token builtin">byte</span>
	str        nameOff
	ptrToThis  typeOff
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>size</code>：类型占用的内存大小</li><li><code>hash</code>：用于快速判断类型是否相同</li><li><code>equal</code>：用于比较相同类型的变量是否相等</li></ul><h4 id="runtime-itab" tabindex="-1"><a class="header-anchor" href="#runtime-itab" aria-hidden="true">#</a> <code>runtime.itab</code></h4>`,3),q={href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.itab",-1),N=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	inter <span class="token operator">*</span>interfacetype
	_type <span class="token operator">*</span>_type
	hash  <span class="token builtin">uint32</span>
	<span class="token boolean">_</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	fun   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>inter</code>：指向表示<strong>接口类型</strong>的结构</li><li><code>_type</code>：指向表示<strong>具体类型</strong>的结构</li><li><code>hash</code>：<code>_type.hash</code>的拷贝，在惊醒类型转换时用于快速判断目标类型和具体类型</li><li><code>fun</code>：动态大小的数组，存储一组函数指针；声明类型为数组，但在使用时会根据指针获取数据，所以是动态的。</li></ul><h3 id="_2-6-类型转换" tabindex="-1"><a class="header-anchor" href="#_2-6-类型转换" aria-hidden="true">#</a> 2.6 类型转换</h3><h4 id="指针-接口" tabindex="-1"><a class="header-anchor" href="#指针-接口" aria-hidden="true">#</a> 指针 -&gt; 接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上述代码为例（Cat 实现了 Duck 接口，方法实现为指针方法）</p><p>将指针类型的变量转换成接口类型的流程：</p><ol><li>结构体 Cat 在<strong>堆</strong>上初始化，并将指针存放在<strong>栈</strong>上</li><li>进行类型转换，将 Cat 转换成 Duck 类型</li><li>调用接口方法</li></ol><p>完成类型转换之后的栈内容如下：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260134120.png" alt="golang-struct-pointer-to-iface" tabindex="0" loading="lazy"><figcaption>golang-struct-pointer-to-iface</figcaption></figure><h4 id="值-接口" tabindex="-1"><a class="header-anchor" href="#值-接口" aria-hidden="true">#</a> 值 -&gt; 接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c Duck <span class="token operator">=</span> Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上述代码为例（Cat 实现了 Duck 接口，方法实现为值类型方法）</p><p>将值类型变量转换成接口类型的流程如下：</p>`,14),z=n("li",null,[s("在"),n("strong",null,"栈"),s("上初始化结构体 Cat")],-1),B={href:"https://draveness.me/golang/tree/runtime.convT2I",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.convT2I",-1),P={href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.iface",-1),Q=n("code",null,"iface.data",-1),A=n("strong",null,"堆",-1),S=n("li",null,"调用接口方法",-1),j=t(`<p>完成类型转换之后的栈内容如下：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260147195.png" alt="golang-struct-to-iface" tabindex="0" loading="lazy"><figcaption>golang-struct-to-iface</figcaption></figure><h3 id="_2-7-类型断言" tabindex="-1"><a class="header-anchor" href="#_2-7-类型断言" aria-hidden="true">#</a> 2.7 类型断言</h3><p><strong>类型断言</strong>是将<strong>接口</strong>类型<strong>转换</strong>成<strong>具体类型</strong>。</p><h4 id="非空接口" tabindex="-1"><a class="header-anchor" href="#非空接口" aria-hidden="true">#</a> 非空接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>Cat<span class="token punctuation">:</span>
		cat <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span>
		cat<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>type-switch</code>为例，类型断言并调用方法的流程如下：</p><ol><li>获取目标类型的<code>_type.hash</code></li><li>和接口中的<code>iface.itab.hash</code>比较</li><li>若相同： <ol><li>获取<code>iface.data</code>，即<code>*Cat</code>指针</li><li>调用接口方法</li></ol></li><li>若不同，则直接返回</li></ol><h4 id="空接口-1" tabindex="-1"><a class="header-anchor" href="#空接口-1" aria-hidden="true">#</a> 空接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">switch</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token operator">*</span>Cat<span class="token punctuation">:</span>
	cat <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span>
	cat<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空接口和接口的流程类似，不过比较类型采用的是<code>eface._type.hash</code></p><h3 id="_2-8-动态派发" tabindex="-1"><a class="header-anchor" href="#_2-8-动态派发" aria-hidden="true">#</a> 2.8 动态派发</h3><p>动态派发（Dynamic dispatch）是在运行期间选择具体多态操作（方法或者函数）执行的过程。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c Duck <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上述代码为例，调用<code>c.Quack()</code>的流程如下：</p><ol><li>进行类型转换</li><li>调用接口方法<code>Quack</code>，此时会在<code>iface.itab.fun</code>中寻找对应的函数指针并调用</li></ol><p>在<code>iface.itab.fun</code>，即函数列表中查找需要的目标函数就是<strong>动态派发</strong>的过程。</p><h4 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h4><p>在关闭编译器优化的情况下，使用接口调用方法（动态派发）相较于直接调用，会有~18%左右的额外开销。</p><p>开启编译器优化之后，会降至~5%，此时和接口带来的好处相比往往可以忽略。</p><h4 id="值类型和指针类型变量调用接口方法性能比较" tabindex="-1"><a class="header-anchor" href="#值类型和指针类型变量调用接口方法性能比较" aria-hidden="true">#</a> 值类型和指针类型变量调用接口方法性能比较</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkDirectCall</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkDynamicDispatch</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">Duck</span><span class="token punctuation">(</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;draven&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">直接调用</th><th>动态派发</th></tr></thead><tbody><tr><td style="text-align:center;">指针</td><td style="text-align:center;">~3.03ns</td><td>~3.58ns</td></tr><tr><td style="text-align:center;">值</td><td style="text-align:center;">~3.09ns</td><td>~6.98ns</td></tr></tbody></table><p>值类型的接口方法调用要比指针类型额外消耗~125%的时间。</p><p>主要原因依然在于Golang 的参数传递是<strong>值传递</strong>，在值的（特别是大型结构体，数组等）的拷贝过程中可能会有大量的性能损耗。</p><h2 id="_3-反射" tabindex="-1"><a class="header-anchor" href="#_3-反射" aria-hidden="true">#</a> 3. 反射</h2>`,26),K={href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"reflect",-1),L={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"reflect.TypeOf",-1),H=n("strong",null,"接口",-1),R={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"reflect.ValueOf",-1),J=n("strong",null,"结构体",-1),M=t('<h3 id="_3-1-反射的三大法则" tabindex="-1"><a class="header-anchor" href="#_3-1-反射的三大法则" aria-hidden="true">#</a> 3.1 反射的三大法则</h3><p>反射可以作为元编程方式减少代码，但是过多的反射会使得程序逻辑难以理解并运行缓慢。</p><p>Golang 的反射由三大法则：</p><ol><li>从<code>interface{}</code>变量可以反射出反射对象</li><li>从反射对象可以获取<code>interface{}</code>变量</li><li>要修改反射对象，其值必须可以设置</li></ol><h4 id="从interface-中可以反射出反射对象" tabindex="-1"><a class="header-anchor" href="#从interface-中可以反射出反射对象" aria-hidden="true">#</a> 从<code>interface{}</code>中可以反射出反射对象</h4>',5),U={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"reflect.TypeOf",-1),X={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"reflect.ValueOf",-1),nn=n("strong",null,"入参",-1),sn=n("code",null,"interface{}",-1),an=n("strong",null,"类型转换",-1),en=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260259103.png",alt:"golang-interface-to-reflection",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-interface-to-reflection")],-1),tn=n("h4",{id:"从反射对象可以获取interface-变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#从反射对象可以获取interface-变量","aria-hidden":"true"},"#"),s(" 从反射对象可以获取"),n("code",null,"interface{}"),s("变量")],-1),on={href:"https://draveness.me/golang/tree/reflect.Value.Interface",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"reflect.Value.Interface",-1),cn=n("code",null,"interface{}",-1),pn=t(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260301496.png" alt="golang-reflection-to-interface" tabindex="0" loading="lazy"><figcaption>golang-reflection-to-interface</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309260302014.png" alt="golang-bidirectional-reflection" tabindex="0" loading="lazy"><figcaption>golang-bidirectional-reflection</figcaption></figure><h4 id="要修改反射对象-其值必须可以设置" tabindex="-1"><a class="header-anchor" href="#要修改反射对象-其值必须可以设置" aria-hidden="true">#</a> 要修改反射对象，其值必须可以设置</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">1</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run reflect<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token builtin">panic</span><span class="token punctuation">:</span> reflect<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>mustBeAssignable using unaddressable value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 Golang 的参数都是值传递，那么得到的反射对象和原变量没有任何关系，无法修改原变量。</p><p>若想要修改原值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> <span class="token number">1</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run reflect<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),rn={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"reflect.ValueOf",-1),dn={href:"https://draveness.me/golang/tree/reflect.Value.Elem",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"reflect.Value.Elem",-1),hn={href:"https://draveness.me/golang/tree/reflect.Value.SetInt",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"reflect.Value.SetInt",-1),fn=n("h3",{id:"_3-2-类型和值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-类型和值","aria-hidden":"true"},"#"),s(" 3.2 类型和值")],-1),vn=n("code",null,"interface{}",-1),mn={href:"https://draveness.me/golang/tree/reflect.emptyInterface",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"reflect.emptyInterface",-1),bn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> emptyInterface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	typ  <span class="token operator">*</span>rtype
	word unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>typ</code>：表示具体类型</li><li><code>word</code>：表示底层结构</li></ul>`,2),yn={href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"reflect.TypeOf",-1),wn=n("li",null,[s("接收参数为"),n("code",null,"interface{}"),s("，那么调用函数时会有隐式的类型转换")],-1),Vn=n("code",null,"interface",-1),On={href:"https://draveness.me/golang/tree/reflect.emptyInterface",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"reflect.emptyInterface",-1),In=n("li",null,[s("提取类型信息"),n("code",null,"emptyInterface.typ"),s("并返回")],-1),En={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"reflect.ValueOf",-1),Tn=n("li",null,[s("接收参数为"),n("code",null,"interface{}"),s("，那么调用函数时会有隐式的类型转换")],-1),Nn={href:"https://draveness.me/golang/tree/reflect.escapes",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"reflect.escapes",-1),Bn=n("strong",null,"逃逸",-1),Dn=n("strong",null,"堆",-1),Pn={href:"https://draveness.me/golang/tree/reflect.unpackEface",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"reflect.unpackEface",-1),Qn={href:"https://draveness.me/golang/tree/reflect.Value",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"reflect.Value",-1),Sn=n("h3",{id:"_3-3-更新变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-更新变量","aria-hidden":"true"},"#"),s(" 3.3 更新变量")],-1),jn={href:"https://draveness.me/golang/tree/reflect.Value.Set",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"reflect.Value.Set",-1),$n=n("strong",null,"更新",-1),Ln={href:"https://draveness.me/golang/tree/reflect.flag.mustBeAssignable",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"reflect.flag.mustBeAssignable",-1),Hn={href:"https://draveness.me/golang/tree/reflect.flag.mustBeExported",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"reflect.flag.mustBeExported",-1),Zn={href:"https://draveness.me/golang/tree/reflect.Value.assignTo",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"reflect.Value.assignTo",-1),Mn=n("h3",{id:"_3-4-实现协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-实现协议","aria-hidden":"true"},"#"),s(" 3.4 实现协议")],-1),Un={href:"https://draveness.me/golang/tree/reflect.rtype.Implements",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"reflect.rtype.Implements",-1),Xn=n("li",null,[s("检查入参，若入参为"),n("code",null,"nil"),s("或不是接口类型，触发对应的panic")],-1),Yn={href:"https://draveness.me/golang/tree/reflect.implements",target:"_blank",rel:"noopener noreferrer"},ns=n("code",null,"reflect.implements",-1),ss=t(`<p>使用示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> CustomError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>CustomError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	typeOfError <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 获取接口类型</span>
	customErrorPtr <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CustomError<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>		<span class="token comment">// 获取具体类型</span>
	customError <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>CustomError<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>			<span class="token comment">// 获取具体类型</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>customErrorPtr<span class="token punctuation">.</span><span class="token function">Implements</span><span class="token punctuation">(</span>typeOfError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; true</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>customError<span class="token punctuation">.</span><span class="token function">Implements</span><span class="token punctuation">(</span>typeOfError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-方法调用" tabindex="-1"><a class="header-anchor" href="#_3-5-方法调用" aria-hidden="true">#</a> 3.5 方法调用</h3>`,3),as={href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"reflect",-1),ts=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>Add<span class="token punctuation">)</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	argv <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> argv <span class="token punctuation">{</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	result <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #=&gt; 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),os=n("code",null,"reflect.ValueOf(Add)",-1),ls={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"reflect.ValueOf",-1),ps=n("code",null," v.Type().NumIn()",-1),is={href:"https://draveness.me/golang/tree/reflect.rtype.NumIn",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"reflect.rtype.NumIn",-1),us=n("strong",null,"入参个数",-1),ds={href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"reflect.ValueOf",-1),hs={href:"https://draveness.me/golang/tree/reflect.Value.Call",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"reflect.Value.Call",-1),fs=n("li",null,"获取结果，验证结果和类型",-1),vs=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),ms={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"};function _s(bs,ys){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,n("ol",null,[n("li",null,[u,s("，"),d,s("，不含任何方法，运行时数据结构为 "),n("a",k,[h,e(a)])]),n("li",null,[g,s("，包含方法，运行时数据结构为 "),n("a",f,[v,e(a)])])]),m,n("p",null,[n("a",_,[b,e(a)]),s("：")]),y,n("p",null,[n("a",x,[w,e(a)]),s("：")]),V,n("p",null,[n("a",O,[C,e(a)]),s("是Golang "),I,s("的运行时表示：")]),E,n("p",null,[n("a",q,[T,e(a)]),s("是接口类型的核心组成部分：")]),N,n("ol",null,[z,n("li",null,[s("进行类型转换，调用函数"),n("a",B,[D,e(a)]),s("，生成"),n("a",P,[G,e(a)]),s("结构体，其中"),Q,s("会在"),A,s("上初始化，并将栈上的 Cat 的内容拷贝过去")]),S]),j,n("p",null,[s("反射包"),n("a",K,[$,e(a)]),s("有两个主要的函数：")]),n("ol",null,[n("li",null,[n("a",L,[F,e(a)]),s(),H,s("类型，用于获取类型信息")]),n("li",null,[n("a",R,[Z,e(a)]),s(),J,s("类型，用于获取数据的运行时表示")])]),M,n("p",null,[n("a",U,[W,e(a)]),s("和"),n("a",X,[Y,e(a)]),s("的"),nn,s("都是"),sn,s("类型，在方法调用的过程中，会发生隐式的"),an,s("。")]),en,tn,n("p",null,[n("a",on,[ln,e(a)]),s("可以将反射变量转换成"),cn,s("变量。")]),pn,n("ol",null,[n("li",null,[n("a",rn,[un,e(a)]),s("传入变量的指针")]),n("li",null,[n("a",dn,[kn,e(a)]),s("获取指针指向的变量")]),n("li",null,[n("a",hn,[gn,e(a)]),s("更新变量的值")])]),fn,n("p",null,[vn,s("在反射包中使用"),n("a",mn,[_n,e(a)]),s("表示：")]),bn,n("p",null,[n("a",yn,[xn,e(a)]),s("的流程：")]),n("ol",null,[wn,n("li",null,[s("将"),Vn,s("转换成"),n("a",On,[Cn,e(a)])]),In]),n("p",null,[n("a",En,[qn,e(a)]),s("的流程：")]),n("ol",null,[Tn,n("li",null,[s("使用"),n("a",Nn,[zn,e(a)]),s("将类型"),Bn,s("到"),Dn,s("上")]),n("li",null,[s("使用"),n("a",Pn,[Gn,e(a)]),s("将传入的值构建成"),n("a",Qn,[An,e(a)]),s("结构体")])]),Sn,n("p",null,[s("使用"),n("a",jn,[Kn,e(a)]),s("可"),$n,s("反射变量，流程如下：")]),n("ol",null,[n("li",null,[s("使用"),n("a",Ln,[Fn,e(a)]),s("，检查是否可被设置")]),n("li",null,[s("使用"),n("a",Hn,[Rn,e(a)]),s("，检查是否是导出的")]),n("li",null,[s("使用"),n("a",Zn,[Jn,e(a)]),s("，根据新的值和原对象构建新的反射对象")])]),Mn,n("p",null,[s("使用"),n("a",Un,[Wn,e(a)]),s("方法可用于判断特定类型是否实现了某个接口，流程如下：")]),n("ol",null,[Xn,n("li",null,[s("调用"),n("a",Yn,[ns,e(a)]),s("检查类型的实现关系，会比较所有的接口方法，时间复杂度为O(n)")])]),ss,n("p",null,[s("使用"),n("a",as,[es,e(a)]),s("可以执行指定的函数，示例如下：")]),ts,n("ol",null,[n("li",null,[os,s("："),n("a",ls,[cs,e(a)]),s("获取函数的反射对象")]),n("li",null,[ps,s("："),n("a",is,[rs,e(a)]),s("获取函数的"),us]),n("li",null,[n("a",ds,[ks,e(a)]),s("设置入参")]),n("li",null,[n("a",hs,[gs,e(a)]),s("调用函数，并传入函数列表")]),fs]),vs,n("ol",null,[n("li",null,[n("a",ms,[s("https://draveness.me/golang"),e(a)])])])])}const ws=o(i,[["render",_s],["__file","04.0.chapter_summary.html.vue"]]);export{ws as default};
