import{_ as l,Y as i,Z as u,$ as n,a0 as s,a1 as a,a4 as o,a2 as e,F as c}from"./framework-d955655f.js";const r={},d=e(`<p>相较于数组，Go 语言中更常用的数据结构是切片，即动态数组，其长度并不固定，可以向切片中追加元素，它会在容量不足时自动扩容。</p><p>切片的声明和数组类似，因为切片的长度是动态的，所以声明时只需指定切片中元素类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),k=n("code",null,"int",-1),m=n("code",null,"interface{}",-1),v={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.NewSlice",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"cmd/compile/internal/types.NewSlice",-1),g=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewSlice</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t <span class="token operator">:=</span> elem<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span>slice<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> elem <span class="token punctuation">{</span>
			<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;elem mismatch&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> t
	<span class="token punctuation">}</span>

	t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TSLICE<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> Slice<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">}</span>
	elem<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span>slice <span class="token operator">=</span> t
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法返回的结构体中的 <code>Extra</code> 字段是一个只包含切片内元素类型的结构，也就是说切片内元素的类型都是在编译期间确定的，编译器确定了类型之后，会将类型存储在 <code>Extra</code> 字段中帮助程序在运行时动态获取。</p><h2 id="_3-2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_3-2-1-数据结构" aria-hidden="true">#</a> 3.2.1 数据结构</h2>`,3),h={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.Slice",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"cmd/compile/internal/types.Slice",-1),f={href:"https://draveness.me/golang/tree/reflect.SliceHeader",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"reflect.SliceHeader",-1),y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Data <span class="token builtin">uintptr</span>
    Len <span class="token builtin">int</span>
    Cap <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Data</code>: 指向数组的指针；</li><li><code>Len</code>：当前切片的长度；</li><li><code>Cap</code>：当前切片的容量，即 <code>Data</code> 数组的大小；</li></ul><p><code>Data</code> 是一片连续的内存空间，这片内存空间可以用于存储切片中的全部元素，数组中的元素只是逻辑上的概念，底层存储其实都是连续的，所以我们可以将切片理解成一片连续的内存空间加上长度和容量的标识。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-02-20-golang-slice-struct.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,4),x=n("b",null,"图 3-3 Go 语言切片结构体",-1),S=e(`<p>从上图可以看出，切片和数组的关系非常密切，切片引入了一个<strong>抽象层</strong>，提供了对数组中部分连续片段的引用，而作为数组的引用，我们可以在运行期间修改其长度和范围。当切片底层的数组长度不足时会触发扩容，切片指向的数组可能会发生变化，不过在上层看来切片是没有变化的，上层只需要与切片打交道而不需要关心数组的变化。</p><h2 id="_3-2-2-初始化" tabindex="-1"><a class="header-anchor" href="#_3-2-2-初始化" aria-hidden="true">#</a> 3.2.2 初始化</h2><p>Go 语言中包含三种初始化切片方式：</p><ol><li>通过下标的方式获取数组或切片的一部分；</li><li>使用字面量初始化新的切片；</li><li>使用关键字 <code>make</code> 创建切片；</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> or slcie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用下标" tabindex="-1"><a class="header-anchor" href="#使用下标" aria-hidden="true">#</a> 使用下标</h3><p>使用下标创建切片是最原始也最接近汇编语言的方式，它是所有方法中最为底层的一种，编译器将会 <code>arr[0:3]</code> 或者 <code>slice[0:3]</code> 等语句转换成 <code>OpSliceMake</code> 操作，示例代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> slice
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>GOSSAFUNC</code> 变量编译上述代码可以得到一系列 SSA 中间代码，其中 <code>slice := arr[0:1]</code> 语句在 <em>decompose builtin</em> 阶段对应的代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>v27 (+5) = SliceMake &lt;[]int&gt; v11 v14 v17

name &amp;arr[*[3]int]: v11
name slice.ptr[*int]: v11
name slice.len[int]: v14
name slice.cap[int]: v17
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SliceMake</code> 操作会接收 4 个参数创建新的切片，元素类型、数组指针、切片大小和容量，需要注意的是使用下标初始化切片不会拷贝原数组或原切片中的数据，只会创建一个指向原数组的切片结构体，所以修改新切片的数据会影响原切片。</p><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3>`,12),z=n("code",null,"[]int{1, 2, 3}",-1),O={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.slicelit",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"cmd/compile/internal/gc.slicelit",-1),N=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> vstat <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
vstat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
vstat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
vstat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">var</span> vauto <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token operator">*</span>vauto <span class="token operator">=</span> vstat
slice <span class="token operator">:=</span> vauto<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>根据切片中的元素数量对底层数组的大小进行推断并创建一个数组；</li><li>将这些字面量元素存储到初始化的数组中；</li><li>创建一个同样指向 <code>[3]int</code> 类型的数组指针；</li><li>将静态存储区的数组 <code>vstat</code> 赋值给 <code>vauto</code> 指针所在的地址；</li><li>通过 <code>[:]</code> 操作获取一个底层使用 <code>vatuo</code> 的切片；</li></ol><p>第 5 步中的 <code>[:]</code> 就是使用下标创建切片的方法，可以看出 <code>[:]</code> 操作是创建切片最底层的方法。</p><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3>`,4),M=n("code",null,"make",-1),C=n("code",null,"make",-1),L={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheck1",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"cmd/compile/internal/gc.typecheck1",-1),A=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">case</span> OMAKE<span class="token punctuation">:</span>
		args <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		i <span class="token operator">:=</span> <span class="token number">1</span>
		<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
		<span class="token keyword">case</span> TSLICE<span class="token punctuation">:</span>
			<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;missing len argument to make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
				<span class="token keyword">return</span> n
			<span class="token punctuation">}</span>

			l <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			i<span class="token operator">++</span>
			<span class="token keyword">var</span> r <span class="token operator">*</span>Node
			<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				r <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			<span class="token operator">...</span>
			<span class="token keyword">if</span> <span class="token function">Isconst</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> CTINT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Isconst</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> CTINT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>U<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Mpint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>U<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Mpint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;len larger than cap in make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
				<span class="token keyword">return</span> n
			<span class="token punctuation">}</span>

			n<span class="token punctuation">.</span>Left <span class="token operator">=</span> l
			n<span class="token punctuation">.</span>Right <span class="token operator">=</span> r
			n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OMAKESLICE
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T=n("code",null,"len",-1),I=n("code",null,"cap",-1),G=n("code",null,"len",-1),V=n("code",null,"OMAKE",-1),j=n("code",null,"OMAKESLICE",-1),q={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),K=n("code",null,"OMAKESLICE",-1),B={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),U=n("code",null,"OMAKESLICE",-1),F=n("ol",null,[n("li",null,"切片的大小和容量是否足够小；"),n("li",null,"切片是否发生了逃逸，最终在堆上初始化；")],-1),R={href:"https://draveness.me/golang/tree/runtime.makeslice",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"runtime.makeslice",-1),W=n("code",null,"make([]int, 3, 4)",-1),Y=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span> 
n <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码会初始化数组并通过下标 <code>[:3]</code> 得到数组对应的切片，这两部分操作都会在编译阶段完成，编译器会在栈上或者静态存储区创建数组并将 <code>[:3]</code> 转换成 <code>OpSliceMake</code> 操作。</p>`,2),Z={href:"https://draveness.me/golang/tree/runtime.makeslice",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.makeslice",-1),J=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
		mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数的主要工作是计算切片占用的内存空间并在堆上申请一片连续的内存，它使用如下方式计算：</p>`,2),Q=n("p",null,[s("​ "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"内存空间"),n("mo",null,"="),n("mtext",null,"切片中元素大小"),n("mo",null,"×"),n("mtext",null,"切片容量")]),n("annotation",{encoding:"application/x-tex"},"\\text{内存空间} = \\text{切片中元素大小} \\times \\text{切片容量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"内存空间")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片中元素大小")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"切片容量")])])])])],-1),nn=n("p",null,"虽然编译期间可以检查出很多错误，但是在创建切片的过程中如果发生了以下错误将直接触发运行时错误并崩溃：",-1),sn=n("ol",null,[n("li",null,"内存空间打下发生溢出；"),n("li",null,"申请的内存大于最大可分配内存；"),n("li",null,"传入的长度小于 0 或长度大于容量；")],-1),an={href:"https://draveness.me/golang/tree/runtime.makeslice",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"runtime.makeslice",-1),en={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.mallocgc",-1),on=n("h2",{id:"_3-2-3-访问元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-3-访问元素","aria-hidden":"true"},"#"),s(" 3.2.3 访问元素")],-1),cn=n("code",null,"len",-1),ln=n("code",null,"cap",-1),un=n("code",null,"OLEN",-1),rn=n("code",null,"OCAP",-1),dn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.expr",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"cmd/compile/internal/gc.state.expr",-1),mn=n("code",null,"OpSliceLen",-1),vn=n("code",null,"OpSliceCap",-1),bn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">expr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OLEN<span class="token punctuation">,</span> OCAP<span class="token punctuation">:</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			op <span class="token operator">:=</span> ssa<span class="token punctuation">.</span>OpSliceLen
			<span class="token keyword">if</span> n<span class="token punctuation">.</span>Op <span class="token operator">==</span> OCAP <span class="token punctuation">{</span>
				op <span class="token operator">=</span> ssa<span class="token punctuation">.</span>OpSliceCap
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问切片中的字段可能会触发 <em>decompose builtin</em> 阶段的优化， <code>len(slice)</code> 或者 <code>cap(slice)</code> 在一些情况下会直接替换成切片的长度或容量，无需在运行时获取：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(SlicePtr (SliceMake ptr _ _ )) -&gt; ptr
(SliceLen (SliceMake _ len _)) -&gt; len
(SliceCap (SliceMake _ _ cap)) -&gt; cap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除获取切片的长度和容量之外，访问切片中元素使用的 <code>OINDEX</code> 操作也会在中间代码生成期间转换成对地址的直接访问：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">expr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OINDEX<span class="token punctuation">:</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			p <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
		<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片的操作基本都是在编译期间完成的，除了访问切片的长度、容量或元素之外，编译期间也会将包含 <code>range</code> 关键字的遍历转换成形式更简单的循环。</p><h2 id="_3-2-4-追加和扩容" tabindex="-1"><a class="header-anchor" href="#_3-2-4-追加和扩容" aria-hidden="true">#</a> 3.2.4 追加和扩容</h2>`,7),gn=n("code",null,"append",-1),hn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.append",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"cmd/compile/internal/gc.state.append",-1),fn=n("code",null,"append",-1),wn=n("strong",null,"新切片不需要赋值回原有的变量",-1),yn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// append(slice, 1, 2, 3)</span>
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> slice
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">if</span> newlen <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
    ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
    newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">return</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xn=n("strong",null,"数组指针",-1),Sn=n("strong",null,"大小",-1),zn=n("strong",null,"容量",-1),On={href:"https://draveness.me/golang/tree/runtime.growslice",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.growslice",-1),Nn=n("code",null,"slice = appen(slicec, 1, 2, 3)",-1),Mn=n("code",null,"append",-1),Cn=n("strong",null,"新切片会覆盖原切片",-1),Ln={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.append",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"cmd/compile/internal/gc.state.append",-1),An=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// slice = append(slice, 1, 2, 3)</span>
a <span class="token operator">:=</span> <span class="token operator">&amp;</span>slice
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> slice
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newlen<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   newptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> newcap <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
   <span class="token function">vardef</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
   <span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">=</span> newcap
   <span class="token operator">*</span>a<span class="token punctuation">.</span>ptr <span class="token operator">=</span> newptr
<span class="token punctuation">}</span>
newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> newlen
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是否覆盖原变量的逻辑类似，最大区别在于得到的新切片是否会赋值回原变量。若选择覆盖原变量，就无需担心切片发生拷贝影响性能，Go 语言对这种情况做出了优化。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2020-03-12-15839729948451-golang-slice-append.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,3),Tn=n("b",null,"图 3-4 向 Go 语言的切片追加元素",-1),In={href:"https://draveness.me/golang/tree/runtime.growslice",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.growslice",-1),Vn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
	newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
	doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
	<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
		newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>
			newcap <span class="token operator">=</span> doublecap
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在分配内存空间之前需要先确定新的切片容量，运行时根据切片的当前容量选择不同的策略进行扩容：</p><ol><li>如果期望容量<strong>大于</strong>当前容量的<strong>两倍</strong>则会使用期望容量；</li><li>若当前切片的长度<strong>小于</strong> <strong>1024</strong> 就会将容量翻倍；</li><li>若当前切片的长度<strong>大于</strong> 1024 就会每次增加 25% 的容量，直到新容量大于期望容量；</li></ol><p>上述代码片段仅会确定切片的大致容量，之后需要根据切片中的元素大小对其内存，当元素所占字节大小为 1、8 或 2 的次幂时，运行时会使用如下代码进行内存对齐：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> overflow <span class="token builtin">bool</span>
	<span class="token keyword">var</span> lenmem<span class="token punctuation">,</span> newlenmem<span class="token punctuation">,</span> capmem <span class="token builtin">uintptr</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
	<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc<span class="token operator">/</span>sys<span class="token punctuation">.</span>PtrSize
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token operator">...</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),jn={href:"https://draveness.me/golang/tree/runtime.roundupsize",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"runtime.roundupsize",-1),Dn={href:"https://draveness.me/golang/tree/runtime.class_to_size",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"runtime.class_to_size",-1),Bn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> class_to_size <span class="token operator">=</span> <span class="token punctuation">[</span>_NumSizeClasses<span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">{</span>
	<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在默认情况下，我们会将目标容量和元素大小相乘得到占用的内存大小。若计算新容量时发生了内存溢出或请求内存超过上限，就会直接崩溃退出程序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> overflow <span class="token builtin">bool</span>
	<span class="token keyword">var</span> newlenmem<span class="token punctuation">,</span> capmem <span class="token builtin">uintptr</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
		capmem<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> p unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">if</span> et<span class="token punctuation">.</span>kind<span class="token operator">&amp;</span>kindNoPointers <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>capmem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
		<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> newlenmem<span class="token punctuation">)</span><span class="token punctuation">,</span> capmem<span class="token operator">-</span>newlenmem<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>capmem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> writeBarrier<span class="token punctuation">.</span>enabled <span class="token punctuation">{</span>
			<span class="token function">bulkBarrierPreWriteSrcOnly</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> lenmem<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> old<span class="token punctuation">.</span>array<span class="token punctuation">,</span> lenmem<span class="token punctuation">)</span>
	<span class="token keyword">return</span> slice<span class="token punctuation">{</span>p<span class="token punctuation">,</span> old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> newcap<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Hn={href:"https://draveness.me/golang/tree/runtime.memclrNoHeapPointers",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime.memclrNoHeapPointers",-1),Fn={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.memmove",-1),Xn={href:"https://draveness.me/golang/tree/runtime.growslice",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.growslice",-1),Yn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Zn={href:"https://draveness.me/golang/tree/runtime.growslice",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"runtime.growslice",-1),Jn=n("code",null,"arr",-1),Qn=n("code",null,"sys.PtrSize",-1),ns={href:"https://draveness.me/golang/tree/runtime.roundupsize",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"runtime.roundupsize",-1),as=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"48"),n("mo",null,"÷"),n("mn",null,"8"),n("mo",null,"="),n("mn",null,"6")]),n("annotation",{encoding:"application/x-tex"},"48 \\div 8 = 6")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"48"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"8"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"6")])])],-1),ts=n("h2",{id:"_3-2-5-拷贝切片",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-5-拷贝切片","aria-hidden":"true"},"#"),s(" 3.2.5 拷贝切片")],-1),es=n("code",null,"copy(a, b)",-1),ps={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.copyany",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"cmd/compile/internal/gc.copyany",-1),cs=n("strong",null,"两种情况",-1),ls=n("code",null,"copy",-1),is=n("strong",null,"不是在运行时",-1),us=n("code",null,"copy(a, b)",-1),rs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> a<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> b<span class="token punctuation">.</span>ptr <span class="token punctuation">{</span>
    <span class="token function">memmove</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> b<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> n<span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ds={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.memmove",-1),ms=n("code",null,"go copy(a, b)",-1),vs={href:"https://draveness.me/golang/tree/runtime.slicecopy",target:"_blank",rel:"noopener noreferrer"},bs=n("code",null,"runtime.slicecopy",-1),gs=n("code",null,"copy",-1),hs=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicecopy</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> fm slice<span class="token punctuation">,</span> width <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> fm<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> to<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	n <span class="token operator">:=</span> fm<span class="token punctuation">.</span><span class="token builtin">len</span>
	<span class="token keyword">if</span> to<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
		n <span class="token operator">=</span> to<span class="token punctuation">.</span><span class="token builtin">len</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> width <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>

	size <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> width
	<span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fm<span class="token punctuation">.</span>array<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>array<span class="token punctuation">,</span> fm<span class="token punctuation">.</span>array<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_s=n("strong",null,"编译期",-1),fs=n("strong",null,"运行时",-1),ws={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"runtime.memmove",-1),xs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-02-20-golang-slice-copy.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Ss=n("b",null,"图 3-5 Go 语言切片的拷贝",-1),zs={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},Os=n("code",null,"runtime.memmove",-1),Es=n("h2",{id:"_3-2-6-小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-6-小结","aria-hidden":"true"},"#"),s(" 3.2.6 小结")],-1),Ns=n("p",null,"切片很多功能都是由运行时实现的，无论是初始化切片，还是对切片进行追加或扩容都需要运行时的支持，需要注意的是在遇到大切片扩容或复制时可能会发生大规模的内存拷贝，一定要减少类似操作以避免影响性能。",-1),Ms=n("h2",{id:"_3-2-7-延伸阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-7-延伸阅读","aria-hidden":"true"},"#"),s(" 3.2.7 延伸阅读")],-1),Cs={href:"https://blog.golang.org/slices",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://blog.golang.org/go-slices-usage-and-internals",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://stackoverflow.com/questions/30525184/array-vs-slice-accessing-speed",target:"_blank",rel:"noopener noreferrer"},As=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Ts={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"},Is={href:"https://github.com/dreamjz/go/blob/go1.17.8/src/runtime/sizeclasses.go",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://github.com/golang/go/commit/020a18c545bf49ffc087ca93cd238195d8dcc411",target:"_blank",rel:"noopener noreferrer"};function Vs(js,qs){const t=c("ExternalLinkIcon"),p=c("center");return i(),u("div",null,[d,n("p",null,[s("从切片的定义可以看出，切片在编译期间的生成的类型只会包含切片中的元素类型，即 "),k,s(" 或者 "),m,s(" 等。"),n("a",v,[b,a(t)]),s(" 就是编译期间用于创建切片类型的函数：")]),g,n("p",null,[s("编译期间的切片是 "),n("a",h,[_,a(t)]),s(" 类型的，但是在运行时切片可以由如下的 "),n("a",f,[w,a(t)]),s(" 结构体表示：")]),y,a(p,null,{default:o(()=>[x]),_:1}),S,n("p",null,[s("当我们使用字面量 "),z,s(" 创建新的切片时，"),n("a",O,[E,a(t)]),s(" 函数会在编译期间将其展开成如下代码片段：")]),N,n("p",null,[s("如果使用字面量的方式创建切片，大部分工作将会在编译期间完成。但是当我们使用 "),M,s(" 关键字创建切片时，很多工作将会需要运行时的参与；调用方必须向 "),C,s(" 函数传入切片的大小以及可选容量，类型检查期间的 "),n("a",L,[P,a(t)]),s(" 函数会校验入参：")]),A,n("p",null,[s("上述函数不仅会检查 "),T,s(" 是否传入，还会保证传入的容量 "),I,s(" 一定大于或等于 "),G,s("。除了校验参数之外，当前函数会将 "),V,s(" 节点转换成 "),j,s("，中间代码生成的 "),n("a",q,[D,a(t)]),s(" 函数会依据下面两个条件转换 "),K,s("，中间代码生成的 "),n("a",B,[H,a(t)]),s(" 函数会依据下面的两个条件转换 "),U,s(" 类型的节点：")]),F,n("p",null,[s("当切片发生逃逸或者非常大时，运行时需要 "),n("a",R,[X,a(t)]),s(" 在堆上初始化切片，若当前的切片不会发生逃逸并且切片非常小时，"),W,s(" 会被直接转换成如下代码：")]),Y,n("p",null,[s("分析了主要由编译器处理的分支后，现在回到创建切片的运行时函数 "),n("a",Z,[$,a(t)]),s(" :")]),J,Q,nn,sn,n("p",null,[n("a",an,[tn,a(t)]),s(" 在最后调用 "),n("a",en,[pn,a(t)]),s(" 用于申请内存，若遇到比较小的对象会直接初始化在 Go 调度器中的 P 结构中，而大于 32 KB 的对象会在堆上初始化。")]),on,n("p",null,[s("使用 "),cn,s(" 和 "),ln,s(" 获取长度或者容量是切片最常见的操作，编译器将其看成两种特殊操作，即 "),un,s(" 和 "),rn,s(" ，"),n("a",dn,[kn,a(t)]),s(" 函数会在 [SSA 生成阶段](// TODO) 将其分别转换成 "),mn,s(" 和 "),vn,s("。")]),bn,n("p",null,[s("使用 "),gn,s(" 关键字向切片中追加元素是常见的切片操作，中间代码生成阶段的 "),n("a",hn,[_n,a(t)]),s(" 方法会根据返回值是否会覆盖原变量，选择进入两种流程，若 "),fn,s(" 返回的"),wn,s("，会进入如下流程：")]),yn,n("p",null,[s("先解构切片结构体获取其"),xn,s("、"),Sn,s("和"),zn,s("，如果在追加元素后切片的大小大于容量，会调用 "),n("a",On,[En,a(t)]),s(" 对切片进行扩容并将新的元素依次加入切片。")]),n("p",null,[s("若使用 "),Nn,s(" 语句，那么 "),Mn,s(" 后的"),Cn,s("，此时 "),n("a",Ln,[Pn,a(t)]),s(" 会使用另一种方式展开关键字：")]),An,a(p,null,{default:o(()=>[Tn]),_:1}),n("p",null,[s("当切片容量不足时，会调用 "),n("a",In,[Gn,a(t)]),s(" 函数为切片扩容，扩容是为切片分配新的内存空间并拷贝原切片中元素的过程：")]),Vn,n("p",null,[n("a",jn,[qn,a(t)]),s(" 函数会将待申请的内存向上取整，取整时使用 "),n("a",Dn,[Kn,a(t)]),s(" 数组，使用该数组中的整数可以提高内存的分配效率并减少碎片：")]),Bn,n("p",null,[s("若切片中元素不是指针类型，则会调用 "),n("a",Hn,[Un,a(t)]),s(" 将超出切片当前长度的位置清空并在最后使用 "),n("a",Fn,[Rn,a(t)]),s(" 将原数组内存中的内容拷贝到新申请的内存中。")]),n("p",null,[n("a",Xn,[Wn,a(t)]),s(" 函数最终会返回一个新的切片，其中包含了新的数组指针、大小和容量，返回的三元组将会覆盖原切片。")]),Yn,n("p",null,[s("简单总结扩容过程：当我们执行上述代码时，会触发 "),n("a",Zn,[$n,a(t)]),s(" 函数扩容 "),Jn,s(" 切片并传入期望的新容量 5；此时期望分配的内存大小为 40 字节；不过因为切片中的元素大小等于 "),Qn,s("，所以运行时会调用 "),n("a",ns,[ss,a(t)]),s(" 向上取整内存到 48 字节，故新切片容量为 "),as,s("。")]),ts,n("p",null,[s("当我们使用 "),es,s(" 的形式对切片进行拷贝时，编译期间的 "),n("a",ps,[os,a(t)]),s(" 也会分"),cs,s("处理拷贝操作，若当前 "),ls,s(),is,s("调用的，"),us,s(" 会被直接转换成如下代码：")]),rs,n("p",null,[s("上述代码中的 "),n("a",ds,[ks,a(t)]),s(" 会负责拷贝内存。若拷贝是在运行时发生的，如 "),ms,s(" ，编译器会使用 "),n("a",vs,[bs,a(t)]),s(" 替换运行期间调用的 "),gs,s(":")]),hs,n("p",null,[s("无论是"),_s,s("间的拷贝还是"),fs,s("拷贝，两种拷贝方式都会通过 "),n("a",ws,[ys,a(t)]),s(" 将整块内存的内容拷贝到目标的内存区域中：")]),xs,a(p,null,{default:o(()=>[Ss]),_:1}),n("p",null,[s("相较于依次拷贝元素，"),n("a",zs,[Os,a(t)]),s(" 能够提供更好的性能。需要注意的是，整块拷贝内存仍会占用非常多的资源，在大切片上执行拷贝时要注意对性能的影响。")]),Es,Ns,Ms,n("ul",null,[n("li",null,[n("a",Cs,[s("Arrays, slices (and strings): The mechanics of ‘append’"),a(t)])]),n("li",null,[n("a",Ls,[s("Go Slices: usage and internals"),a(t)])]),n("li",null,[n("a",Ps,[s("Array vs Slice: accessing speed"),a(t)])])]),As,n("ol",null,[n("li",null,[n("a",Ts,[s("Go 语言设计与实现"),a(t)])]),n("li",null,[n("a",Is,[s("sizeofclasses"),a(t)])]),n("li",null,[n("a",Gs,[s("cmd/compile: move slice construction to callers of makeslice"),a(t)])])])])}const Ks=l(r,[["render",Vs],["__file","03.2.html.vue"]]);export{Ks as default};
