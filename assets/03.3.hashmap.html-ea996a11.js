import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as p,H as l}from"./framework-dee406ed.js";const i={},u=n("h2",{id:"_3-3-1-设计原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-1-设计原理","aria-hidden":"true"},"#"),s(" 3.3.1 设计原理")],-1),r=n("p",null,[s("哈希表的读写性能为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("，同时提供键值对的映射。")],-1),k=p('<p>设计一个性能优异的哈希表，需要两个关键点：</p><ul><li>哈希函数</li><li>解决哈希冲突</li></ul><h3 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h3><p>哈希函数的选择在很大程度上能够决定哈希表的读写性能。</p><p>理想的哈希函数，能够将不同的<code>Key</code>映射到不同的<code>Val</code>上，即一对一映射。</p><p>但因为<code>Key</code>的数目是远大于<code>Val</code>的数目的，完美的哈希函数很难实现的。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232337164.png" alt="perfect-hash-function" tabindex="0" loading="lazy"><figcaption>perfect-hash-function</figcaption></figure>',7),d=n("p",null,[s("那么实际设计哈希函数，需要让结果尽可能的均匀分布，否则将带来更多哈希冲突和更差的读写性能。性能较差的哈希函数将会使得所有的操作变成"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("。")],-1),m=p('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232339879.png" alt="bad-hash-function" tabindex="0" loading="lazy"><figcaption>bad-hash-function</figcaption></figure><h3 id="冲突解决" tabindex="-1"><a class="header-anchor" href="#冲突解决" aria-hidden="true">#</a> 冲突解决</h3><p>哈希冲突常见的解决办法有两种：</p><ul><li>开放寻址法</li><li>拉链法</li></ul><h4 id="开放寻址" tabindex="-1"><a class="header-anchor" href="#开放寻址" aria-hidden="true">#</a> 开放寻址</h4>',5),v={href:"https://en.wikipedia.org/wiki/Open_addressing",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"依次探测和比较数组中的元素以判断目标键值对是否在哈希表中",-1),b=p(`<p>开放寻址法的底层数据结构是<strong>数组</strong>，因为数组长度优先，故使用模运算来将数据放入数组中。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>index <span class="token operator">:=</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span> <span class="token operator">%</span> array<span class="token punctuation">.</span>Lenght
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若发生哈希冲突，则写入下一个为空的位置。例如：下图中的 <code>key1</code>，<code>key2</code>处发生冲突，则写入后序的空位。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232345412.png" alt="open-addressing-and-set" tabindex="0" loading="lazy"><figcaption>open-addressing-and-set</figcaption></figure><p>当读取<code>key3</code>的值时，计算的索引位置为<code>key1</code> 的位置，然后依次向后寻找<code>key3</code>查找元素直到找到或结束。</p><p>开放寻址法中对性能影响最大的是<strong>装载因子</strong>：</p>`,6),g=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"装载因子"),n("mo",null,"="),n("mtext",null,"数组元素数量"),n("mo",null,"÷"),n("mtext",null,"数组长度")]),n("annotation",{encoding:"application/x-tex"},"\\text{装载因子}=\\text{数组元素数量} \\div \\text{数组长度}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"装载因子")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"数组元素数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"数组长度")])])])])],-1),f=p(`<p>当装载因子达到 70% 之后，性能急剧下降；达到 100% 时将完全失效，所有操作都是O(n)。</p><h4 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法" aria-hidden="true">#</a> 拉链法</h4><p>拉链法一般使用<strong>数组</strong>和<strong>链表</strong>（可引入红黑树以优化性能），数组的每个元素是一个链表，也被称作桶。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232354911.png" alt="separate-chaing-and-set" tabindex="0" loading="lazy"><figcaption>separate-chaing-and-set</figcaption></figure><p>当写入数据时，先通过哈希函数计算桶的位置：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>index <span class="token operator">:=</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span> <span class="token operator">%</span> array<span class="token punctuation">.</span>Length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后到桶中寻找键值对：</p><ul><li>若找到，则更新对应<code>Value</code></li><li>未找到，则在链表末尾追加新的元素</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309232355149.png" alt="separate-chaing-and-get" tabindex="0" loading="lazy"><figcaption>separate-chaing-and-get</figcaption></figure><p>拉链法中的装载因子，计算方式如下：</p>`,10),_=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"装载因子"),n("mo",null,"="),n("mtext",null,"元素数量"),n("mo",null,"÷"),n("mtext",null,"桶的数量")]),n("annotation",{encoding:"application/x-tex"},"\\text{装载因子}=\\text{元素数量} \\div \\text{桶的数量}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"装载因子")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"元素数量")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"÷"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"桶的数量")])])])])],-1),y=n("p",null,"当装载因子较大时，可以进行扩容，增加桶的数量，以防止性能下降。",-1),w=n("h2",{id:"_3-2-2-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-2-数据结构","aria-hidden":"true"},"#"),s(" 3.2.2 数据结构")],-1),x={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/map.go",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"runtime.hmap",-1),B=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go1.17 runtime/map.go</span>

<span class="token comment">// A header for a Go map.</span>
<span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count     <span class="token builtin">int</span> <span class="token comment">// # live cells == size of map.  Must be first (used by len() builtin)</span>
	flags     <span class="token builtin">uint8</span>
	B         <span class="token builtin">uint8</span>  <span class="token comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span>
	noverflow <span class="token builtin">uint16</span> <span class="token comment">// approximate number of overflow buckets; see incrnoverflow for details</span>
	hash0     <span class="token builtin">uint32</span> <span class="token comment">// hash seed</span>

	buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// array of 2^B Buckets. may be nil if count==0.</span>
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// previous bucket array of half the size, non-nil only when growing</span>
	nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// progress counter for evacuation (buckets less than this have been evacuated)</span>

	extra <span class="token operator">*</span>mapextra <span class="token comment">// optional fields</span>
<span class="token punctuation">}</span>

<span class="token comment">// mapextra holds fields that are not present on all maps.</span>
<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap

	<span class="token comment">// nextOverflow holds a pointer to a free overflow bucket.</span>
	nextOverflow <span class="token operator">*</span>bmap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O=n("ul",null,[n("li",null,[n("code",null,"count"),s("：哈希表元素的数量")]),n("li",null,[n("code",null,"B"),s("：用于表示哈希表中的"),n("code",null,"bucket"),s("数量，因为哈希表中的桶的数量为 2 的倍数，所以 "),n("code",null,"B"),s("存的是对数，即"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"b"),n("mi",null,"u"),n("mi",null,"c"),n("mi",null,"k"),n("mi",null,"e"),n("mi",null,"t"),n("mi",{mathvariant:"normal"},"_"),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"u"),n("mi",null,"n"),n("mi",null,"t"),n("mo",null,"="),n("msup",null,[n("mn",null,"2"),n("mi",null,"B")])]),n("annotation",{encoding:"application/x-tex"},"bucket\\_count = 2^B")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0044em","vertical-align":"-0.31em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),n("span",{class:"mord mathnormal"},"co"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])])])])])])])])]),n("li",null,[n("code",null,"hash0"),s(": 哈希种子，为哈希函数的结果引入随机性，在创建哈希表时确定。调用哈希函数时使用")]),n("li",null,[n("code",null,"oldbuckets"),s(": 哈希表扩容时，保存原"),n("code",null,"buckets")])],-1),M=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240007751.png",alt:"hmap-and-buckets",tabindex:"0",loading:"lazy"}),n("figcaption",null,"hmap-and-buckets")],-1),P=n("p",null,[s("每个"),n("code",null,"bmap"),s("中能够存储 8(1 << 3) 个键值对，当哈希表中的元素过多，单个桶装满时，就会使用溢出桶"),n("code",null,"extra.nextOverflow"),s("来存储溢出的数据。")],-1),q=n("p",null,"正常桶（黄色）和溢出桶（绿色）在内存中实际上是连续的。",-1),L=n("code",null,"hmap",-1),C={href:"https://github.com/golang/go/blob/release-branch.go1.17/src/runtime/map.go",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.bmap",-1),A=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// Maximum number of key/elem pairs a bucket can hold.</span>
	bucketCntBits <span class="token operator">=</span> <span class="token number">3</span>
	bucketCnt     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bucketCntBits
    <span class="token operator">...</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bmap</code>实际上只存储了哈希值的高 8 位，通过比较不同键的高 8 位可以减少访问键值对次数以提高性能。</p><p>因为哈希表可以存储不同类型的键值对，所以上述的<code>bmap</code>实际上是在运行时才能构建的。</p><p>根据运行时函数可以重建结构：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
    values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
    pad      <span class="token builtin">uintptr</span>
    overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-3-初始化" tabindex="-1"><a class="header-anchor" href="#_3-3-3-初始化" aria-hidden="true">#</a> 3.3.3 初始化</h2><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
	<span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
	<span class="token string">&quot;3&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
	<span class="token string">&quot;5&quot;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素数量小于 25 个时，会转换成以下代码，将所有键值对一次性加入哈希表：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
hash<span class="token punctuation">[</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素数量大于 25 个时，将会创建两个数组分别存储键值，然后使用<code>for</code>循环加入哈希表。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>
vstatk <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span> ， <span class="token string">&quot;26&quot;</span><span class="token punctuation">}</span>
vstatv <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>vstak<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    hash<span class="token punctuation">[</span>vstatk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> vstatv<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><p>若哈希表被分配到栈上，并且容量小于<code>BUCKETSIZE = 8</code>时，在编译阶段会快速初始化：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> h <span class="token operator">*</span>hmap
<span class="token keyword">var</span> hv hmap
<span class="token keyword">var</span> bv bmap
h <span class="token operator">:=</span> <span class="token operator">&amp;</span>hv
b <span class="token operator">:=</span> <span class="token operator">&amp;</span>bv
h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> b
h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fashtrand0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),j={href:"https://draveness.me/golang/tree/runtime.makemap",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.makemap",-1),V=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token operator">*</span>hmap <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token punctuation">{</span>
		hint <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		h <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hmap<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	B <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		B<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	h<span class="token punctuation">.</span>B <span class="token operator">=</span> B

	<span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> nextOverflow <span class="token operator">*</span>bmap
		h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> nextOverflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>mapextra<span class="token punctuation">)</span>
			h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> h
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=n("li",null,"计算哈希表内存是否会溢出或超过最大可分配容量",-1),N={href:"https://draveness.me/golang/tree/runtime.fastrand",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"runtime.fastrand",-1),I=n("li",null,[s("根据传入的 "),n("code",null,"hint"),s(" 计算出需要的最小需要的桶的数量")],-1),K={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"runtime.makeBucketArray",-1),X={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.makeBucketArray",-1),F=n("code",null,"B",-1),R=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> b <span class="token builtin">uint8</span><span class="token punctuation">,</span> dirtyalloc unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>buckets unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> nextOverflow <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	base <span class="token operator">:=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	nbuckets <span class="token operator">:=</span> base
	<span class="token keyword">if</span> b <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		nbuckets <span class="token operator">+=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
		sz <span class="token operator">:=</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size <span class="token operator">*</span> nbuckets
		up <span class="token operator">:=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
		<span class="token keyword">if</span> up <span class="token operator">!=</span> sz <span class="token punctuation">{</span>
			nbuckets <span class="token operator">=</span> up <span class="token operator">/</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>size
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	buckets <span class="token operator">=</span> <span class="token function">newarray</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>nbuckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> base <span class="token operator">!=</span> nbuckets <span class="token punctuation">{</span>
		nextOverflow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> base<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>nbuckets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		last<span class="token punctuation">.</span><span class="token function">setoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> buckets<span class="token punctuation">,</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y=n("ul",null,[n("li",null,[s("桶的数目小于 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"4")])]),n("annotation",{encoding:"application/x-tex"},"2^4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])])])])]),s(" ，数据较少，使用溢出桶的概率低，省略创建过程以减小开销")]),n("li",null,[s("桶的数目大于 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"4")])]),n("annotation",{encoding:"application/x-tex"},"2^4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])])])])]),s("，额外创建 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"B"),n("mo",null,"−"),n("mn",null,"4")])])]),n("annotation",{encoding:"application/x-tex"},"2^{B-4}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"4")])])])])])])])])])])]),s("个溢出桶")])],-1),Q=p(`<p>可以看出<strong>正常桶</strong>和<strong>溢出桶</strong>在内存中是连续的。</p><h2 id="_3-3-4-读写操作" tabindex="-1"><a class="header-anchor" href="#_3-3-4-读写操作" aria-hidden="true">#</a> 3.3.4 读写操作</h2><p>使用<code>hashmap[key]</code>可以对哈希表进行增删改查操作：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 查询</span>
hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val 	 <span class="token comment">// 增加 或 修改</span>
<span class="token function">delete</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h3>`,5),$={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"hash[key]",-1),Z=n("code",null,"OINDEXMAP",-1),H={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),sn=n("code",null,"OINDEXMAP",-1),an=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v     <span class="token operator">:=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// =&gt; v     := *mapaccess1(maptype, hash, &amp;key)</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// =&gt; v, ok := mapaccess2(maptype, hash, &amp;key)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值语句左侧接受参数的个数会决定使用的运行时方法：</p>`,2),tn={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.mapaccess1",-1),en={href:"https://draveness.me/golang/tree/runtime.mapaccess2",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.mapaccess2",-1),cn=n("code",null,"bool",-1),ln={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.mapaccess1",-1),rn={href:"https://draveness.me/golang/tree/runtime.bucketMask",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"runtime.bucketMask",-1),dn={href:"https://draveness.me/golang/tree/runtime.add",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"runtime.add",-1),vn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> v
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>bucketloop</code> 循环中，哈希会依次遍历正常桶和溢出桶中的数据:</p><ol><li><p>先比较哈希的高 8 位和桶中存储的 <code>tophash</code>，</p></li><li><p>后比较传入的和桶中的值以加速数据的读写。</p></li></ol><p>用于选择桶序号的是哈希的<strong>最低几位</strong>，而用于<strong>加速访问</strong>的是哈希的<strong>高 8 位</strong>，这种设计能够减少同一个桶中有大量相等 <code>tophash</code> 的概率影响性能。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240043447.png" alt="hashmap-mapaccess" tabindex="0" loading="lazy"><figcaption>hashmap-mapaccess</figcaption></figure><p>如上图所示，每一个桶都是一整片的内存空间，当发现桶中的 <code>tophash</code> 与传入键的 <code>tophash</code> 匹配之后，会通过指针和偏移量获取哈希中存储的键 <code>keys[0]</code> 并与 <code>key</code> 比较，如果两者相同就会获取目标值的指针 <code>values[0]</code> 并返回。</p>`,6),hn={href:"https://draveness.me/golang/tree/runtime.mapaccess2",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.mapaccess2",-1),gn=n("code",null,"mapaccess1",-1),fn=n("code",null,"bool",-1),_n=n("h3",{id:"写入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#写入","aria-hidden":"true"},"#"),s(" 写入")],-1),yn=n("code",null,"hash[key]",-1),wn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"runtime.mapassign",-1),zn=p(`<p>首先获取计算<strong>哈希值</strong>，获取其对应的<strong>桶</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>flags <span class="token operator">^=</span> hashWriting

again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">)</span> <span class="token operator">+</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	top <span class="token operator">:=</span> <span class="token function">tophash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过遍历桶和溢出桶，比较<code>tohash</code>和<code>key</code>，找到就返回目标位置的地址。</p><ul><li><code>inserti</code>: 插入的<code>tophash</code>的地址</li><li><code>insertk</code>: 插入的 Key 的地址</li><li><code>val</code>: 插入的 value 的地址</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> inserti <span class="token operator">*</span><span class="token builtin">uint8</span>
	<span class="token keyword">var</span> insertk unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">var</span> val unsafe<span class="token punctuation">.</span>Pointer
bucketloop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
					insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
					val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> bucketloop
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">goto</span> done
		<span class="token punctuation">}</span>
		ovf <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ovf <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		b <span class="token operator">=</span> ovf
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240837535.png" alt="hashmap-overflow-bucket" tabindex="0" loading="lazy"><figcaption>hashmap-overflow-bucket</figcaption></figure>`,6),Bn=n("strong",null,"当前桶已满",-1),On={href:"https://draveness.me/golang/tree/runtime.hmap.newoverflow",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"runtime.hmap.newoverflow",-1),Pn=n("code",null,"noverflow",-1),qn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> inserti <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		newb <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		inserti <span class="token operator">=</span> <span class="token operator">&amp;</span>newb<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		insertk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>newb<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		val <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>insertk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token operator">*</span>inserti <span class="token operator">=</span> top
	h<span class="token punctuation">.</span>count<span class="token operator">++</span>

done<span class="token punctuation">:</span>
	<span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ln=n("strong",null,"不存在",-1),Cn={href:"https://draveness.me/golang/tree/runtime.typedmemmove",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.typedmemmove",-1),An=n("code",null,"key",-1),jn=n("code",null,"Value",-1),Dn=n("p",null,[s("若键值对"),n("strong",null,"存在"),s("，则直接返回目标区域的地址。")],-1),Vn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.mapassign",-1),Nn=p(`<div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>00018 (+5) CALL runtime.mapassign_fast64(SB)
00020 (5) MOVQ 24(SP), DI               ;; DI = &amp;value
00026 (5) LEAQ go.string.&quot;88&quot;(SB), AX   ;; AX = &amp;&quot;88&quot;
00027 (5) MOVQ AX, (DI)                 ;; *DI = AX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> again
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Sn={href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.mapassign",-1),Kn=p('<ul><li><strong>装载因子</strong>大于 6.5</li><li><strong>溢出桶</strong>数量过多</li></ul><p>因为 Golang 的哈希表扩容不是原子过程，所以还需要判断当前是否处于扩容阶段，避免二次扩容。</p><p>扩容方式根据触发条件不同分为两种：</p><ul><li>溢出桶过多，则进行<strong>等量扩容</strong></li><li>装载因子过大，则进行<strong>翻倍扩容</strong></li></ul><h4 id="等量扩容-和-翻倍扩容" tabindex="-1"><a class="header-anchor" href="#等量扩容-和-翻倍扩容" aria-hidden="true">#</a> 等量扩容 和 翻倍扩容</h4><p>当持续向哈希表中插入数据，删除数据时，若哈希表的数据量没有超过阈值，就会不断积累溢出桶导致<strong>内存泄漏</strong>。</p><p>等量扩容创建新桶保存数据，并让垃圾回收清理旧的溢出桶并释放内存。</p>',7),Wn={href:"https://draveness.me/golang/tree/runtime.hashGrow",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"runtime.hashGrow",-1),Tn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	bigger <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		bigger <span class="token operator">=</span> <span class="token number">0</span>
		h<span class="token punctuation">.</span>flags <span class="token operator">|=</span> sameSizeGrow
	<span class="token punctuation">}</span>
	oldbuckets <span class="token operator">:=</span> h<span class="token punctuation">.</span>buckets
	newbuckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">:=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token operator">+</span>bigger<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>B <span class="token operator">+=</span> bigger
	h<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags
	h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> oldbuckets
	h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> newbuckets
	h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>
	h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>

	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>oldoverflow <span class="token operator">=</span> h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token boolean">nil</span>
	h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Fn={href:"https://draveness.me/golang/tree/runtime.makeBucketArray",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.makeBucketArray",-1),Yn=n("code",null,"oldbuckets",-1),Qn=n("code",null,"buckets",-1),$n=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309240957282.png",alt:"hashmap-hashgrow",tabindex:"0",loading:"lazy"}),n("figcaption",null,"hashmap-hashgrow")],-1),Un=n("code",null,"hashGrow",-1),Zn={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime.evacuate",-1),Jn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">evacuate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> oldbucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	newbit <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">noldbuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> xy <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>evacDst
		x <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		x<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		x<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>

		y <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
		y<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldbucket<span class="token operator">+</span>newbit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
		y<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ns={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"runtime.evacuate",-1),as={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"runtime.evacDst",-1),ps=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241002414.png",alt:"hashmap-evacuate-destination",tabindex:"0",loading:"lazy"}),n("figcaption",null,"hashmap-evacuate-destination")],-1),es=n("strong",null,"等量扩容",-1),os={href:"https://draveness.me/golang/tree/runtime.evacDst",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"runtime.evacDst",-1),ls=p(`<p>若是<strong>翻倍扩容</strong>，每个旧桶元素都将分流至两个新桶中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>		<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
			v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				top <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
				k2 <span class="token operator">:=</span> k
				<span class="token keyword">var</span> useY <span class="token builtin">uint8</span>
				hash <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> hash<span class="token operator">&amp;</span>newbit <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					useY <span class="token operator">=</span> <span class="token number">1</span>
				<span class="token punctuation">}</span>
				b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedX <span class="token operator">+</span> useY
				dst <span class="token operator">:=</span> <span class="token operator">&amp;</span>xy<span class="token punctuation">[</span>useY<span class="token punctuation">]</span>

				<span class="token keyword">if</span> dst<span class="token punctuation">.</span>i <span class="token operator">==</span> bucketCnt <span class="token punctuation">{</span>
					dst<span class="token punctuation">.</span>b <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
					dst<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span>
					dst<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>
					dst<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				dst<span class="token punctuation">.</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>dst<span class="token punctuation">.</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span>bucketCnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> top
				<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
				<span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
				dst<span class="token punctuation">.</span>i<span class="token operator">++</span>
				dst<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
				dst<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哈希值通过取模运算来获取桶的编号：</p><p>$index = hash \\bmod 2^B $</p>`,4),is=n("p",null,[s("使用二进制运算： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"d"),n("mi",null,"e"),n("mi",null,"x"),n("mo",null,"="),n("mi",null,"h"),n("mi",null,"a"),n("mi",null,"s"),n("mi",null,"h"),n("mi",{mathvariant:"normal"},"&"),n("mo",{stretchy:"false"},"("),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",null,"<"),n("mo",null,"<"),n("mi",null,"B"),n("mo",{stretchy:"false"},")"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"index = hash \\& ((1<<B)-1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ha"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord"},"&"),n("span",{class:"mopen"},"(("),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<<"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])],-1),us=n("p",null,[s("即"),n("code",null,"index"),s("为"),n("code",null,"hash"),s("值的低 B 位。")],-1),rs=n("p",null,[s("例如："),n("code",null,"b72bfae3f3285244c4732ce457cca823bc189e0b"),s(" ，桶数目为 4，则哈希值对应的索引为 3")],-1),ks=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`b72bfae3f3285244c4732ce457cca823bc189e0b & 0b11 = 3
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),ds=n("code",null,"0b11",-1),ms=n("code",null,"0b111",-1),vs={href:"https://draveness.me/golang/tree/runtime.typedmemmove",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"runtime.typedmemmove",-1),bs=n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241014588.png",alt:"hashmap-bucket-evacuate",loading:"lazy"},null,-1),gs={href:"https://draveness.me/golang/tree/runtime.evacuate",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"runtime.evacuate",-1),_s={href:"https://draveness.me/golang/tree/runtime.advanceEvacuationMark",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"runtime.advanceEvacuationMark",-1),ws=n("code",null,"nevacuate",-1),xs=n("code",null,"oldbuckets",-1),zs=n("code",null,"oldoverflow",-1),Bs=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">advanceEvacuationMark</span><span class="token punctuation">(</span>h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> newbit <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span>
	stop <span class="token operator">:=</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">+</span> <span class="token number">1024</span>
	<span class="token keyword">if</span> stop <span class="token operator">&gt;</span> newbit <span class="token punctuation">{</span>
		stop <span class="token operator">=</span> newbit
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">!=</span> stop <span class="token operator">&amp;&amp;</span> <span class="token function">bucketEvacuated</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">==</span> newbit <span class="token punctuation">{</span> <span class="token comment">// newbit == # of oldbuckets</span>
		h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token keyword">if</span> h<span class="token punctuation">.</span>extra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>oldoverflow <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> sameSizeGrow
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据分流" tabindex="-1"><a class="header-anchor" href="#数据分流" aria-hidden="true">#</a> 数据分流</h4>`,2),Os=n("strong",null,"访问元素",-1),Ms=n("code",null,"oldbuckets",-1),Ps={href:"https://draveness.me/golang/tree/runtime.mapaccess1",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"runtime.mapaccess1",-1),Ls=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg
	hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	m <span class="token operator">:=</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c <span class="token operator">:=</span> h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			m <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
		oldb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>oldb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			b <span class="token operator">=</span> oldb
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
bucketloop<span class="token punctuation">:</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Cs={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},Es=n("code",null,"runtime.growWork",-1),As=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	<span class="token operator">...</span>
again<span class="token punctuation">:</span>
	bucket <span class="token operator">:=</span> hash <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),js={href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"},Ds=n("code",null,"runtime.growWork",-1),Vs=n("h3",{id:"删除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#删除","aria-hidden":"true"},"#"),s(" 删除")],-1),Gs=n("p",null,[n("code",null,"delete"),s(" 关键字的唯一作用就是将某一个键对应的元素从哈希表中删除，无论是该键对应的值是否存在，函数不会返回任何的结果。")],-1),Ns=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241028455.png",alt:"hashmap-delete",tabindex:"0",loading:"lazy"}),n("figcaption",null,"hashmap-delete")],-1),Ss=n("code",null,"delete",-1),Is=n("code",null,"ODELETE",-1),Ks={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},Ws=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),Xs=n("code",null,"ODELETE",-1),Ts={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Fs=n("code",null,"runtime.mapdelete",-1),Rs={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Ys=n("code",null,"runtime.mapdelete",-1),Qs=n("code",null,"mapdelete_faststr",-1),$s=n("code",null,"mapdelete_fast32",-1),Us=n("code",null,"mapdelete_fast64",-1),Zs=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ODELETE<span class="token punctuation">:</span>
		init<span class="token punctuation">.</span><span class="token function">AppendNodes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">.</span>Ninit<span class="token punctuation">)</span>
		map_ <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		key <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		map_ <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>map_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
		key <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

		t <span class="token operator">:=</span> map_<span class="token punctuation">.</span>Type
		fast <span class="token operator">:=</span> <span class="token function">mapfast</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token keyword">if</span> fast <span class="token operator">==</span> mapslow <span class="token punctuation">{</span>
			key <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> <span class="token function">mkcall1</span><span class="token punctuation">(</span><span class="token function">mapfndel</span><span class="token punctuation">(</span>mapdelete<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> <span class="token function">typename</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> map_<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Hs={href:"https://draveness.me/golang/tree/runtime.mapdelete",target:"_blank",rel:"noopener noreferrer"},Js=n("code",null,"runtime.mapdelete",-1),na=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapdelete</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">growWork</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
search<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>
				<span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> emptyRest <span class="token punctuation">{</span>
					<span class="token keyword">break</span> search
				<span class="token punctuation">}</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			k2 <span class="token operator">:=</span> k
			<span class="token keyword">if</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emptyOne
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除操作实际上是将key, value 的指针置空。</p><h2 id="_3-3-5-小结" tabindex="-1"><a class="header-anchor" href="#_3-3-5-小结" aria-hidden="true">#</a> 3.3.5 小结</h2><p>Golang 使用<strong>拉链法</strong>来解决哈希冲突。</p><p>哈希表的桶中主要存储 哈希值高8位的数组，Key数组，Value数组（长度均为8）以及指向溢出桶的链接。</p><p>在比较Key之前会先比较<code>tophash</code>以加速遍历。</p><p>若桶中的元素已满，则会创建溢出桶并链接至桶的尾部（链表）。</p><p>当装载因子或溢出桶数量过大时，会触发扩容。</p><p>扩容操作只会在写入和删除时增量进行，不会导致性能的巨大抖动。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,10),sa={href:"https://github.com/golang/go/tree/release-branch.go1.17",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf",target:"_blank",rel:"noopener noreferrer"},pa=n("li",null,null,-1);function ea(oa,ca){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,k,d,m,n("p",null,[n("a",v,[s("开放寻址法"),t(a)]),s("的核心思想是"),h,s("。")]),b,g,f,_,y,w,n("p",null,[n("a",x,[z,t(a)]),s("是最核心的结构体：")]),B,O,M,P,q,n("p",null,[L,s("中的桶是"),n("a",C,[E,t(a)]),s(":")]),A,n("p",null,[s("除此之外，使用 "),n("a",j,[D,t(a)]),s("进行初始化：")]),V,n("ul",null,[G,n("li",null,[s("调用 "),n("a",N,[S,t(a)]),s(" 获取一个随机的哈希种子")]),I,n("li",null,[s("使用 "),n("a",K,[W,t(a)]),s(" 创建用于保存桶的数组")])]),n("p",null,[n("a",X,[T,t(a)]),s(" 会根据传入的 "),F,s(" 计算出的需要创建的桶数量并在内存中分配一片连续的空间用于存储数据：")]),R,Y,Q,n("p",null,[s("在编译的"),n("a",$,[s("类型检查"),t(a)]),s("期间，"),U,s(" 以及类似的操作都会被转换成哈希的 "),Z,s(" 操作，"),n("a",H,[s("中间代码生成"),t(a)]),s("阶段会在 "),n("a",J,[nn,t(a)]),s(" 函数中将这些 "),sn,s(" 操作转换成如下的代码：")]),an,n("ul",null,[n("li",null,[s("当接受一个参数时，会使用 "),n("a",tn,[pn,t(a)]),s("，该函数仅会返回一个指向目标值的指针；")]),n("li",null,[s("当接受两个参数时，会使用 "),n("a",en,[on,t(a)]),s("，除了返回目标值之外，它还会返回一个用于表示当前键对应的值是否存在的 "),cn,s(" 值")])]),n("p",null,[n("a",ln,[un,t(a)]),s(" 会先通过哈希表设置的哈希函数、种子获取当前键对应的哈希，再通过 "),n("a",rn,[kn,t(a)]),s(" 和 "),n("a",dn,[mn,t(a)]),s(" 拿到该键值对所在的桶序号和哈希高位的 8 位数字。")]),vn,n("p",null,[n("a",hn,[bn,t(a)]),s(" 只是在"),gn,s(" 的基础上多返回了一个标识键值对是否存在的"),fn,s("值。")]),_n,n("p",null,[s("当表达式"),yn,s("出现在赋值符左侧时，表达式将在编译期被转换成"),n("a",wn,[xn,t(a)]),s("。")]),zn,n("p",null,[s("若"),Bn,s("，则会使用"),n("a",On,[Mn,t(a)]),s("创建新桶并或者预创建的溢出桶来存储数据；新创建的桶会被追加到已有桶的末尾，并增加哈希表的"),Pn,s("计数器。")]),qn,n("p",null,[s("若键值对"),Ln,s("，则为新的键值对规划存储的内存地址，"),n("a",Cn,[En,t(a)]),s(" 将"),An,s("移动到对应的内存空间，并返回"),jn,s("对应的地址。")]),Dn,n("p",null,[n("a",Vn,[Gn,t(a)]),s("并不会进行赋值操作，只会返回内存地址，赋值操作会在编译期插入：")]),Nn,n("p",null,[n("a",Sn,[In,t(a)]),s(" 函数会在两种情况发生时触发哈希的扩容：")]),Kn,n("p",null,[s("扩容入口"),n("a",Wn,[Xn,t(a)]),s("：")]),Tn,n("p",null,[s("扩容过程中会使用"),n("a",Fn,[Rn,t(a)]),s(" 创建一组新桶和预创建的溢出桶，然后将原有桶数组设置到"),Yn,s("上，新桶数组放到"),Qn,s("上；溢出桶也是如此。")]),$n,n("p",null,[Un,s("只是完成新桶的创建，而数据的迁移使用"),n("a",Zn,[Hn,t(a)]),s(" ，其会对传入桶中的数据进行再分配。")]),Jn,n("p",null,[n("a",ns,[ss,t(a)]),s(" 会将一个旧桶中的数据分流到两个新桶，所以创建了两个用于保存分配上下文的结构体"),n("a",as,[ts,t(a)]),s(" 分别指向一个新桶：")]),ps,n("p",null,[s("若是"),es,s("，新桶和旧桶是一对一的关系，此时只会初始化一个"),n("a",os,[cs,t(a)]),s(" 。")]),ls,is,us,rs,ks,n("p",null,[s("若新的哈希表有 8 个桶，在大多数情况下，原来经过桶掩码 "),ds,s(" 结果为 3 的数据会因为桶掩码增加了一位变成 "),ms,s(" 而分流到新的 3 号和 7 号桶，所有数据也都会被 "),n("a",vs,[hs,t(a)]),s(" 拷贝到目标桶中："),bs]),n("p",null,[n("a",gs,[fs,t(a)]),s(" 最后会调用 "),n("a",_s,[ys,t(a)]),s(" 增加哈希的 "),ws,s(" 计数器并在所有的旧桶都被分流后清空哈希的 "),xs,s(" 和 "),zs,s("：")]),Bs,n("p",null,[s("当"),Os,s("时，若"),Ms,s(" 存在，"),n("a",Ps,[qs,t(a)]),s("会先到旧桶中获取数据。")]),Ls,n("p",null,[s("当进行处于扩容状态时，每次进行写入操作都会触发"),n("a",Cs,[Es,t(a)]),s(" 增量拷贝哈希表中的内容：")]),As,n("p",null,[s("删除操作也会在哈希表扩容期间触发 "),n("a",js,[Ds,t(a)]),s("，也是计算当前值所在的桶，然后拷贝桶中的元素。")]),Vs,Gs,Ns,n("p",null,[s("在编译期间，"),Ss,s(" 关键字会被转换成操作为 "),Is,s(" 的节点，而 "),n("a",Ks,[Ws,t(a)]),s(" 会将 "),Xs,s(" 节点转换成 "),n("a",Ts,[Fs,t(a)]),s(" 函数簇中的一个，包括 "),n("a",Rs,[Ys,t(a)]),s("、"),Qs,s("、"),$s,s(" 和 "),Us,s("：")]),Zs,n("p",null,[n("a",Hs,[Js,t(a)]),s(" 如果在删除期间遇到了哈希表的扩容，就会分流桶中的元素，分流结束之后会找到桶中的目标元素完成键值对的删除工作。")]),na,n("ol",null,[n("li",null,[n("a",sa,[s("https://github.com/golang/go/tree/release-branch.go1.17"),t(a)])]),n("li",null,[n("a",aa,[s("https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/"),t(a)])]),n("li",null,[n("a",ta,[s("https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf"),t(a)])]),pa])])}const ia=e(i,[["render",ea],["__file","03.3.hashmap.html.vue"]]);export{ia as default};
