import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as e,H as i}from"./framework-d03928c9.js";const l={},u=e(`<p>Golang 中的循环有两种：</p><ol><li><code>for</code></li><li><code>for-range</code></li></ol><p><code>for-range</code>在编译时将会被转换成普通的<code>for</code>循环，在最终编译的汇编中的结构是相同的。</p><h2 id="_5-1-1-现象" tabindex="-1"><a class="header-anchor" href="#_5-1-1-现象" aria-hidden="true">#</a> 5.1.1 现象</h2><h3 id="循环永动机" tabindex="-1"><a class="header-anchor" href="#循环永动机" aria-hidden="true">#</a> 循环永动机</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若遍历切片时，在<strong>循环</strong>体中为切片<strong>追加元素</strong>，<strong>不会改变</strong>循环次数。</p><h3 id="神奇的指针" tabindex="-1"><a class="header-anchor" href="#神奇的指针" aria-hidden="true">#</a> 神奇的指针</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	newArr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		newArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> newArr <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若在循环体中获取<code>i, v := range</code>中的<code>&amp;v</code>将会得到预期之外的结果。</p><h3 id="清空" tabindex="-1"><a class="header-anchor" href="#清空" aria-hidden="true">#</a> 清空</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次遍历数组/切片/哈希表的元素，将其置为0时非常耗时的。此操作在编译时将会优化为<strong>清空整片内存</strong>中的内容。</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>&quot;&quot;.main STEXT size=93 args=0x0 locals=0x30
	0x0000 00000 (main.go:3)	TEXT	&quot;&quot;.main(SB), $48-0
	...
	0x001d 00029 (main.go:4)	MOVQ	&quot;&quot;.statictmp_0(SB), AX
	0x0024 00036 (main.go:4)	MOVQ	AX, &quot;&quot;..autotmp_3+16(SP)
	0x0029 00041 (main.go:4)	MOVUPS	&quot;&quot;.statictmp_0+8(SB), X0
	0x0030 00048 (main.go:4)	MOVUPS	X0, &quot;&quot;..autotmp_3+24(SP)
	0x0035 00053 (main.go:5)	PCDATA	$2, $1
	0x0035 00053 (main.go:5)	LEAQ	&quot;&quot;..autotmp_3+16(SP), AX
	0x003a 00058 (main.go:5)	PCDATA	$2, $0
	0x003a 00058 (main.go:5)	MOVQ	AX, (SP)
	0x003e 00062 (main.go:5)	MOVQ	$24, 8(SP)
	0x0047 00071 (main.go:5)	CALL	runtime.memclrNoHeapPointers(SB)
	...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),r={href:"https://draveness.me/golang/tree/runtime.memclrNoHeapPointers",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.memclrNoHeapPointers",-1),k=e(`<h3 id="哈希表的随机遍历" tabindex="-1"><a class="header-anchor" href="#哈希表的随机遍历" aria-hidden="true">#</a> 哈希表的随机遍历</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hash <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token string">&quot;2&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token string">&quot;3&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> hash <span class="token punctuation">{</span>
		<span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在运行时可能输出的结果顺序完全不同。</p><h2 id="_5-1-2-for" tabindex="-1"><a class="header-anchor" href="#_5-1-2-for" aria-hidden="true">#</a> 5.1.2 for</h2><p><code>for</code>循环被编译器视作<code>OFOR</code>类型的节点，由四个部分组成：</p><ol><li><code>Ninit</code>：循环<strong>初始化</strong></li><li><code>Left</code>：循环<strong>执行条件</strong></li><li><code>Right</code>：循环体<strong>结束后执行</strong>的操作</li><li><code>NBody</code>：<strong>循环体</strong></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> Ninit<span class="token punctuation">;</span> Left<span class="token punctuation">;</span> Right <span class="token punctuation">{</span>
    NBody
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SSA 中间代码的生成阶段，<code>for</code>循环会被转换成如下结构：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309271921037.png" alt="golang-for-loop-ssa" tabindex="0" loading="lazy"><figcaption>golang-for-loop-ssa</figcaption></figure><h2 id="_5-1-3-for-range" tabindex="-1"><a class="header-anchor" href="#_5-1-3-for-range" aria-hidden="true">#</a> 5.1.3 for-range</h2><p>对于<code>for-range</code>，编译器会将<code>ORANGE</code>节点转换成<code>OFOR</code>节点：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309271922845.png" alt="Golang-For-Range-Loop" tabindex="0" loading="lazy"><figcaption>Golang-For-Range-Loop</figcaption></figure><h3 id="数组和切片" tabindex="-1"><a class="header-anchor" href="#数组和切片" aria-hidden="true">#</a> 数组和切片</h3>`,13),v=n("code",null,"for-range",-1),m={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkrange",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"cmd/compile/internal/gc.walkrange",-1),g=e(`<ol><li>分析遍历数组和切片清空元素的情况；</li><li>分析使用 <code>for range a {}</code> 遍历数组和切片，不关心索引和数据的情况</li><li>分析使用 <code>for i := range a {}</code> 遍历数组和切片，只关心索引的情况</li><li>分析使用 <code>for i, elem := range a {}</code> 遍历数组和切片，关心索引和数据的情况</li></ol><h4 id="遍历清空元素" tabindex="-1"><a class="header-anchor" href="#遍历清空元素" aria-hidden="true">#</a> 遍历清空元素</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkrange</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
	<span class="token keyword">case</span> TARRAY<span class="token punctuation">,</span> TSLICE<span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token function">arrayClear</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.arrayClear",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"cmd/compile/internal/gc.arrayClear",-1),_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 原代码</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
	a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> zero
<span class="token punctuation">}</span>

<span class="token comment">// 优化后</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
	hp <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	hn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
	i <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={href:"https://draveness.me/golang/tree/runtime.memclrNoHeapPointers",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.memclrNoHeapPointers",-1),x={href:"https://draveness.me/golang/tree/runtime.memclrHasPointers",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.memclrHasPointers",-1),S=e(`<h4 id="for-range-a" tabindex="-1"><a class="header-anchor" href="#for-range-a" aria-hidden="true">#</a> <code>for range a</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	ha <span class="token operator">:=</span> a

		hv1 <span class="token operator">:=</span> <span class="token function">temp</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span>
		hn <span class="token operator">:=</span> <span class="token function">temp</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span>

		init <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> hv1<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		init <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> hn<span class="token punctuation">,</span> <span class="token function">nod</span><span class="token punctuation">(</span>OLEN<span class="token punctuation">,</span> ha<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		n<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OLT<span class="token punctuation">,</span> hv1<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> hv1<span class="token punctuation">,</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADD<span class="token punctuation">,</span> hv1<span class="token punctuation">,</span> <span class="token function">nodintconst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> v1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当循环形式为<code>for range a</code>时，满足<code>v1 == nil</code>，此时循环会被转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-i-range-a" tabindex="-1"><a class="header-anchor" href="#for-i-range-a" aria-hidden="true">#</a> <code>for i := range a</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>		<span class="token keyword">if</span> v2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span><span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> hv1<span class="token punctuation">)</span><span class="token punctuation">}</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时满足<code>v2 == nil</code>，此时循环会被转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    v1 <span class="token operator">=</span> hv1
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种形式将会记录遍历时的索引。</p><h4 id="for-i-v-range-a" tabindex="-1"><a class="header-anchor" href="#for-i-v-range-a" aria-hidden="true">#</a> <code>for i, v := range a</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>		tmp <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OINDEX<span class="token punctuation">,</span> ha<span class="token punctuation">,</span> hv1<span class="token punctuation">)</span>
		tmp<span class="token punctuation">.</span><span class="token function">SetBounded</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS2<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		a<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Set2</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
		a<span class="token punctuation">.</span>Rlist<span class="token punctuation">.</span><span class="token function">Set2</span><span class="token punctuation">(</span>hv1<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
		body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span>a<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	n<span class="token punctuation">.</span>Ninit<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>init<span class="token operator">...</span><span class="token punctuation">)</span>
	n<span class="token punctuation">.</span>Nbody<span class="token punctuation">.</span><span class="token function">Prepend</span><span class="token punctuation">(</span>body<span class="token operator">...</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时<code>i, v</code>都需要，那么会被转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
v2 <span class="token operator">:=</span> <span class="token boolean">nil</span>
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    tmp <span class="token operator">:=</span> ha<span class="token punctuation">[</span>hv1<span class="token punctuation">]</span>
    v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> hv1<span class="token punctuation">,</span> tmp
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述所有形式的<code>for-range</code>结构：</p><ol><li><code>ha</code>：原切片的<strong>拷贝</strong></li><li><code>hn</code>：记录了<strong>切片的长度</strong></li><li><code>v2</code>：在每次循环时，会被重新赋值，其地址并不会发生改变</li></ol><p>所以有：</p><ul><li>在<strong>循环期</strong>间为切片<strong>追加元素</strong>并<strong>不会</strong>改变循环<strong>次数</strong></li><li>若获取<code>&amp;v</code>，因其地址是不变的，其值会是循环结束时赋予的最后一个值</li></ul><h3 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h3>`,18),N={href:"https://draveness.me/golang/tree/runtime.mapiterinit",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"runtime.mapiterinit",-1),O={href:"https://draveness.me/golang/tree/runtime.mapiternext",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.mapiternext",-1),T=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// for key, val := range hash {}</span>

ha <span class="token operator">:=</span> a
hit <span class="token operator">:=</span> <span class="token function">hiter</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
th <span class="token operator">:=</span> hit<span class="token punctuation">.</span>Type
<span class="token function">mapiterinit</span><span class="token punctuation">(</span><span class="token function">typename</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hit<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">;</span> hit<span class="token punctuation">.</span>key <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token function">mapiternext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    key <span class="token operator">:=</span> <span class="token operator">*</span>hit<span class="token punctuation">.</span>key
    val <span class="token operator">:=</span> <span class="token operator">*</span>hit<span class="token punctuation">.</span>val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkrange",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"cmd/compile/internal/gc.walkrange",-1),L=n("code",null,"TMAP",-1),C=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309271959531.png",alt:"golang-range-map",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-range-map")],-1),R={href:"https://draveness.me/golang/tree/runtime.mapiterinit",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.mapiterinit",-1),V=n("strong",null,"初始化",-1),X=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapiterinit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> it <span class="token operator">*</span>hiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	it<span class="token punctuation">.</span>t <span class="token operator">=</span> t
	it<span class="token punctuation">.</span>h <span class="token operator">=</span> h
	it<span class="token punctuation">.</span>B <span class="token operator">=</span> h<span class="token punctuation">.</span>B
	it<span class="token punctuation">.</span>buckets <span class="token operator">=</span> h<span class="token punctuation">.</span>buckets

	r <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>startBucket <span class="token operator">=</span> r <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> h<span class="token punctuation">.</span>B <span class="token operator">&amp;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>bucket <span class="token operator">=</span> it<span class="token punctuation">.</span>startBucket
	<span class="token function">mapiternext</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H={href:"https://draveness.me/golang/tree/runtime.hiter",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.hiter",-1),I={href:"https://draveness.me/golang/tree/runtime.fastrand",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"runtime.fastrand",-1),D={href:"https://draveness.me/golang/tree/runtime.mapiternext",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.mapiternext",-1),Q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapiternext</span><span class="token punctuation">(</span>it <span class="token operator">*</span>hiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h <span class="token operator">:=</span> it<span class="token punctuation">.</span>h
	t <span class="token operator">:=</span> it<span class="token punctuation">.</span>t
	bucket <span class="token operator">:=</span> it<span class="token punctuation">.</span>bucket
	b <span class="token operator">:=</span> it<span class="token punctuation">.</span>bptr
	i <span class="token operator">:=</span> it<span class="token punctuation">.</span>i
	alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg

next<span class="token punctuation">:</span>
	<span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> bucket <span class="token operator">==</span> it<span class="token punctuation">.</span>startBucket <span class="token operator">&amp;&amp;</span> it<span class="token punctuation">.</span>wrapped <span class="token punctuation">{</span>
			it<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token boolean">nil</span>
			it<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> bucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		bucket<span class="token operator">++</span>
		<span class="token keyword">if</span> bucket <span class="token operator">==</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			bucket <span class="token operator">=</span> <span class="token number">0</span>
			it<span class="token punctuation">.</span>wrapped <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
		i <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>待遍历的桶为空时，选择需要遍历的新桶</li><li>不存在待遍历的桶时，返回 <code>(nil, nil)</code> 键值对并中止遍历</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		offi <span class="token operator">:=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> it<span class="token punctuation">.</span>offset<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
		k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span><span class="token function">uintptr</span><span class="token punctuation">(</span>offi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>
		v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">uintptr</span><span class="token punctuation">(</span>offi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>offi<span class="token punctuation">]</span> <span class="token operator">!=</span> evacuatedX <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>offi<span class="token punctuation">]</span> <span class="token operator">!=</span> evacuatedY<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token operator">!</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">reflexivekey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			it<span class="token punctuation">.</span>key <span class="token operator">=</span> k
			it<span class="token punctuation">.</span>value <span class="token operator">=</span> v
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			rk<span class="token punctuation">,</span> rv <span class="token operator">:=</span> <span class="token function">mapaccessK</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
			it<span class="token punctuation">.</span>key <span class="token operator">=</span> rk
			it<span class="token punctuation">.</span>value <span class="token operator">=</span> rv
		<span class="token punctuation">}</span>
		it<span class="token punctuation">.</span>bucket <span class="token operator">=</span> bucket
		it<span class="token punctuation">.</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	i <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">goto</span> next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),j=n("li",null,"从桶中找到下一个遍历的元素，",-1),F={href:"https://draveness.me/golang/tree/runtime.mapaccessK",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.mapaccessK",-1),U={href:"https://draveness.me/golang/tree/runtime.bmap.overflow",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.bmap.overflow",-1),Z=e(`<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309272004837.png" alt="golang-range-map-and-buckets" tabindex="0" loading="lazy"><figcaption>golang-range-map-and-buckets</figcaption></figure><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>遍历时会获取字符串中索引对应的字节并将字节转换成 <code>rune</code>。</p><p><code>for i, r := range s {}</code> 的结构会被转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> s
<span class="token keyword">for</span> hv1 <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
    hv1t <span class="token operator">:=</span> hv1
    hv2 <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span>hv1<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> hv2 <span class="token operator">&lt;</span> utf8<span class="token punctuation">.</span>RuneSelf <span class="token punctuation">{</span>
        hv1<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hv2<span class="token punctuation">,</span> hv1 <span class="token operator">=</span> <span class="token function">decoderune</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> hv1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> hv1t<span class="token punctuation">,</span> hv2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),J=n("li",null,[s("当前 "),n("code",null,"rune"),s(" 是 ASCII 的，占用一个字节，只需要将索引加一")],-1),W=n("code",null,"rune",-1),nn={href:"https://draveness.me/golang/tree/runtime.decoderune",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"runtime.decoderune",-1),an=e(`<h3 id="通道" tabindex="-1"><a class="header-anchor" href="#通道" aria-hidden="true">#</a> 通道</h3><p><code>for v := range ch {}</code> 的语句最终会被转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> a
hv1<span class="token punctuation">,</span> hb <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ha
<span class="token keyword">for</span> <span class="token punctuation">;</span> hb <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> hv1<span class="token punctuation">,</span> hb <span class="token operator">=</span> <span class="token operator">&lt;-</span>ha <span class="token punctuation">{</span>
    v1 <span class="token operator">:=</span> hv1
    hv1 <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),tn=n("code",null,"<-ch",-1),en={href:"https://draveness.me/golang/tree/runtime.chanrecv2",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.chanrecv2",-1),on={href:"https://draveness.me/golang/tree/runtime.chanrecv2",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"runtime.chanrecv2",-1),ln=n("code",null,"hb",-1),un=n("ul",null,[n("li",null,"如果不存在当前值，意味着当前的管道已经被关闭"),n("li",null,[s("如果存在当前值，会为 "),n("code",null,"v1"),s(" 赋值并清除 "),n("code",null,"hv1"),s(" 变量中的数据，然后重新陷入阻塞等待新数据")])],-1),rn=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),dn={href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-for-range/",target:"_blank",rel:"noopener noreferrer"};function kn(vn,mn){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("其中编译器会直接使用 "),n("a",r,[d,t(a)]),s(" 清空切片中的数据。")]),k,n("p",null,[v,s("遍历数组和切片时，"),n("a",m,[b,t(a)]),s("会将其转换成不同的控制逻辑：")]),g,n("p",null,[n("a",h,[f,t(a)]),s("会优化 Go 语言遍历数组或者切片并删除全部元素的逻辑：")]),_,n("p",null,[s("此时会使用 "),n("a",y,[w,t(a)]),s(" 或者 "),n("a",x,[A,t(a)]),s(" 清除目标数组内存空间中的全部数据，并在执行完成后更新遍历数组的索引。")]),S,n("p",null,[s("遍历哈希表时，编译器会使用 "),n("a",N,[P,t(a)]),s(" 和 "),n("a",O,[q,t(a)]),s(" 两个运行时函数重写原始的 for-range 循环：")]),T,n("p",null,[n("a",B,[z,t(a)]),s(" 处理 "),L,s(" 节点时，编译器会根据 range 返回值的数量在循环体中插入需要的赋值语句：")]),C,n("p",null,[s("遍历哈希表时会使用 "),n("a",R,[E,t(a)]),s(" 函数"),V,s("遍历开始的元素：")]),X,n("ul",null,[n("li",null,[s("初始化 "),n("a",H,[$,t(a)]),s(" 结构体中的字段")]),n("li",null,[s("通过 "),n("a",I,[M,t(a)]),s(" 生成一个随机数，随机选择一个遍历桶的起始位置")])]),n("p",null,[s("遍历时使用 "),n("a",D,[G,t(a)]),s("：")]),Q,n("ul",null,[j,n("li",null,[s("若哈希表处于扩容期间就会调用 "),n("a",F,[K,t(a)]),s(" 获取键值对")])]),n("p",null,[s("遍历了正常桶后，会通过 "),n("a",U,[Y,t(a)]),s(" 遍历哈希中的溢出桶。")]),Z,n("ul",null,[J,n("li",null,[s("当前 "),W,s(" 占用了多个字节就会使用 "),n("a",nn,[sn,t(a)]),s(" 函数解码")])]),an,n("p",null,[s("使用 "),tn,s(" 从管道中取出等待处理的值，这个操作会调用 "),n("a",en,[pn,t(a)]),s(" 并阻塞当前的协程，当 "),n("a",on,[cn,t(a)]),s(" 返回时会根据布尔值 "),ln,s(" 判断当前的值是否存在：")]),un,rn,n("ol",null,[n("li",null,[n("a",dn,[s("https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-for-range/"),t(a)])])])])}const gn=p(l,[["render",kn],["__file","05.1.for_range.html.vue"]]);export{gn as default};
