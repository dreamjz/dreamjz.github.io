import{_ as i,Z as t,$ as a,a4 as e}from"./framework-d03928c9.js";const n={},r=e('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191147194.png" alt="提纲" tabindex="0" loading="lazy"><figcaption>提纲</figcaption></figure><h2 id="_2-1-http-是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-http-是什么" aria-hidden="true">#</a> 2.1 HTTP 是什么</h2><p>HTTP(<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol)，超文本传输协议。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191149170.png" alt="三个部分" tabindex="0" loading="lazy"><figcaption>三个部分</figcaption></figure><ul><li>协议：确定通信规范</li><li>传输：HTTP 是双向传输，客户端和服务端互相通信</li><li>超文本：不仅包含纯文本内容（只有文字），还包含图片，视频，二进制文件等内容。</li></ul><h2 id="_2-2-常见状态码" tabindex="-1"><a class="header-anchor" href="#_2-2-常见状态码" aria-hidden="true">#</a> 2.2 常见状态码</h2><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191152205.png" alt=" 五大类 HTTP 状态码 " tabindex="0" loading="lazy"><figcaption> 五大类 HTTP 状态码 </figcaption></figure><ul><li><code>1xx</code> 类状态码属于<strong>提示信息</strong>，是协议处理中的一种中间状态，实际用到的比较少。</li><li><code>2xx</code> 类状态码表示服务器<strong>成功</strong>处理了客户端的请求，也是我们最愿意看到的状态。 <ul><li>「<strong>200 OK</strong>」是最常见的成功状态码，表示一切正常。如果是非 <code>HEAD</code> 请求，服务器返回的响应头都会有 body 数据。</li><li>「<strong>204 No Content</strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</li><li>「<strong>206 Partial Content</strong>」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</li></ul></li><li><code>3xx</code> 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是<strong>重定向</strong>。 <ul><li>「<strong>301 Moved Permanently</strong>」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</li><li>「<strong>302 Found</strong>」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</li><li>「<strong>304 Not Modified</strong>」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。</li></ul></li><li><code>4xx</code> 类状态码表示客户端发送的<strong>报文有误</strong>，服务器无法处理，也就是错误码的含义。 <ul><li>「<strong>400 Bad Request</strong>」表示客户端请求的报文有错误，但只是个笼统的错误。</li><li>「<strong>403 Forbidden</strong>」表示服务器禁止访问资源，并不是客户端的请求出错。</li><li>「<strong>404 Not Found</strong>」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</li></ul></li><li><code>5xx</code> 类状态码表示客户端请求报文正确，但是<strong>服务器处理时内部发生了错误</strong>，属于服务器端的错误码。 <ul><li>「<strong>500 Internal Server Error</strong>」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。</li><li>「<strong>501 Not Implemented</strong>」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</li><li>「<strong>502 Bad Gateway</strong>」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</li><li>「<strong>503 Service Unavailable</strong>」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。</li></ul></li></ul><h2 id="_2-3-http-常见字段" tabindex="-1"><a class="header-anchor" href="#_2-3-http-常见字段" aria-hidden="true">#</a> 2.3 HTTP 常见字段</h2><h2 id="host" tabindex="-1"><a class="header-anchor" href="#host" aria-hidden="true">#</a> Host</h2><p>客户端发送请求时，用来指定服务器的域名。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191155164.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="content-length-字段" tabindex="-1"><a class="header-anchor" href="#content-length-字段" aria-hidden="true">#</a> Content-Length 字段</h3><p>服务器在返回数据时，会有 <code>Content-Length</code> 字段，表明本次回应的数据长度。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191156056.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="connection-字段" tabindex="-1"><a class="header-anchor" href="#connection-字段" aria-hidden="true">#</a> Connection 字段</h3><p><code>Connection</code> 字段最常用于客户端要求服务器使用「HTTP 长连接」机制，以便其他请求复用。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191156585.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>HTTP 长连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p><h3 id="content-type-和-accept-字段" tabindex="-1"><a class="header-anchor" href="#content-type-和-accept-字段" aria-hidden="true">#</a> Content-Type 和 Accept 字段</h3><p><code>Content-Type</code> 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</p><p><code>Accept</code>：用于客户端，表示其可以接收的格式类型</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191157122.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="content-encoding-和-accept-encoding-字段" tabindex="-1"><a class="header-anchor" href="#content-encoding-和-accept-encoding-字段" aria-hidden="true">#</a> Content-Encoding 和 Accept-Encoding 字段</h3><p><code>Content-Encoding</code> 表示服务器返回的数据使用了什么编码方式</p><p><code>Accept-Encoding</code>表示客户端可接受的编码方式</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191224395.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-get-和-post-区别" tabindex="-1"><a class="header-anchor" href="#_2-4-get-和-post-区别" aria-hidden="true">#</a> 2.4 GET 和 POST 区别</h2><p><strong>GET 的语义是从服务器获取指定的资源</strong>，这个资源可以是静态的文本、页面、图片视频等。</p><p><strong>POST 的语义是根据请求负荷（报文body）对指定的资源做出处理</strong>，具体的处理方式视资源类型而不同。POST 请求携带数据的位置一般是写在报文 body 中，body 中的数据可以是任意格式的数据。</p><h2 id="_2-5-get-和-post-是安全和幂等的么" tabindex="-1"><a class="header-anchor" href="#_2-5-get-和-post-是安全和幂等的么" aria-hidden="true">#</a> 2.5 GET 和 POST 是安全和幂等的么</h2><ul><li>「安全」是指请求方法不会「破坏」服务器上的资源</li><li>「幂等」，意思是多次执行相同的操作，结果都是「相同」的</li></ul><p>若<strong>仅根据 RFC 规范定义</strong>分析：</p><p>GET 的语义是请求获取指定的资源。GET 方法是安全、幂等、可被缓存的。</p><p>POST 的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。POST 不安全，不幂等，（大部分实现）不可缓存。</p><p>但是，<strong>若不按照规范实现</strong>：</p><ul><li>可以用 GET 方法实现新增或删除数据的请求，这样实现的 GET 方法自然就不是安全和幂等。</li><li>可以用 POST 方法实现查询数据的请求，这样实现的 POST 方法自然就是安全和幂等。</li></ul><h2 id="_2-6-http-缓存的实现方式有哪些" tabindex="-1"><a class="header-anchor" href="#_2-6-http-缓存的实现方式有哪些" aria-hidden="true">#</a> 2.6 HTTP 缓存的实现方式有哪些</h2><p>HTTP 缓存有两种实现方式，分别是<strong>强制缓存和协商缓存</strong></p><h2 id="_2-7-什么是强制缓存" tabindex="-1"><a class="header-anchor" href="#_2-7-什么是强制缓存" aria-hidden="true">#</a> 2.7 什么是强制缓存</h2><p>强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191230660.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如图，返回的是 200 状态码，但在 size 项中标识的是 from disk cache，就是使用了强制缓存。</p><p>强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：</p><ul><li><code>Cache-Control</code>， 是一个相对时间；</li><li><code>Expires</code>，是一个绝对时间；</li></ul><p>如果 HTTP 响应头部同时有 Cache-Control 和 Expires 字段的话，<strong>Cache-Control 的优先级高于 Expires</strong> 。</p><p>Cache-control 选项更多一些，设置更加精细，所以建议使用 Cache-Control 来实现强缓存。具体的实现流程如下：</p><ul><li>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 Cache-Control，Cache-Control 中设置了过期时间大小；</li><li>浏览器再次请求访问服务器中的该资源时，会先<strong>通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期</strong>，如果没有，则使用该缓存，否则重新请求服务器；</li><li>服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control</li></ul><h2 id="_2-8-什么是协商缓存" tabindex="-1"><a class="header-anchor" href="#_2-8-什么是协商缓存" aria-hidden="true">#</a> 2.8 什么是协商缓存</h2><p>某些请求的响应码是 <code>304</code>，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191232032.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图就是一个协商缓存的过程，所以<strong>协商缓存就是与服务端协商之后，通过协商结果来判断是否使用本地缓存</strong>。</p><p>协商缓存可以基于两种头部来实现：</p><ol><li>请求头部中的 <code>If-Modified-Since</code> 字段与响应头部中的 <code>Last-Modified</code> 字段实现，这两个字段的意思是： <ul><li>响应头部中的 <code>Last-Modified</code>：标示这个响应资源的最后修改时间</li><li>请求头部中的 <code>If-Modified-Since</code>：当资源过期了，发现响应头中具有 Last-Modified 声明，则再次发起请求的时候带上 Last-Modified 的时间，服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行对比（Last-Modified），如果最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK；如果最后修改时间较旧（小），说明资源无新修改，响应 HTTP 304 走缓存。</li></ul></li><li>求头部中的 <code>If-None-Match</code> 字段与响应头部中的 <code>ETag</code> 字段，这两个字段的意思是： <ul><li>响应头部中 <code>Etag</code>：唯一标识响应资源</li><li>请求头部中的 <code>If-None-Match</code>：当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器发起请求时，会将请求头 If-None-Match 值设置为 Etag 的值。服务器收到请求后进行比对，如果资源没有变化返回 304，如果资源变化了返回 200。</li></ul></li></ol><p>第一种实现方式是基于时间实现的，第二种实现方式是基于一个唯一标识实现的，相对来说后者可以更加准确地判断文件内容是否被修改，避免由于<strong>时间篡改</strong>导致的不可靠问题。</p><p>如果在第一次请求资源的时候，服务端返回的 HTTP 响应头部同时有 Etag 和 Last-Modified 字段，那么客户端再下一次请求的时候，如果带上了 ETag 和 Last-Modified 字段信息给服务端，<strong>这时 Etag 的优先级更高</strong>，也就是服务端先会判断 Etag 是否变化了，如果 Etag 有变化就不用在判断 Last-Modified 了，如果 Etag 没有变化，然后再看 Last-Modified。</p><p><strong>协商缓存这两个字段都需要配合强制缓存中 Cache-Control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求</strong>。</p><p>强制缓存和协商缓存的工作流程：<img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191235181.png" alt="img" loading="lazy"></p><p>当使用 ETag 字段实现的协商缓存的过程：</p><ul><li>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 ETag 唯一标识，这个唯一标识的值是根据当前请求的资源生成的；</li><li>当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期： <ul><li>如果没有过期，则直接使用本地缓存；</li><li>如果缓存过期了，会在 Request 头部加上 If-None-Match 字段，该字段的值就是 ETag 唯一标识；</li></ul></li><li>服务器再次收到请求后，会根据请求中的 If-None-Match 值与当前请求的资源生成的唯一标识进行比较： <ul><li><strong>如果值相等，则返回 304 Not Modified，不会返回资源</strong>；</li><li>如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；</li></ul></li><li>如果浏览器收到 304 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源</li></ul><h2 id="_2-9-http-有哪些版本" tabindex="-1"><a class="header-anchor" href="#_2-9-http-有哪些版本" aria-hidden="true">#</a> 2.9 HTTP 有哪些版本</h2><p>HTTP 常见到版本有 HTTP/1.1，HTTP/2.0，HTTP/3.0</p><h2 id="_2-10-http-1-1-的优点和缺点以及性能" tabindex="-1"><a class="header-anchor" href="#_2-10-http-1-1-的优点和缺点以及性能" aria-hidden="true">#</a> 2.10 HTTP/1.1 的优点和缺点以及性能</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li><p>简单： HTTP 基本的报文格式就是 <code>header + body</code>，头部信息也是 <code>key-value</code> 简单文本的形式，<strong>易于理解</strong>，降低了学习和使用的门槛。</p></li><li><p>易于扩展：</p><ul><li><p>HTTP 协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定，都允许开发人员<strong>自定义和扩充</strong>。</p></li><li><p>HTTP 由于是工作在应用层（ <code>OSI</code> 第七层），则它<strong>下层可以随意变化</strong>，比如：</p><ul><li><p>HTTPS 就是在 HTTP 与 TCP 层之间增加了 SSL/TLS 安全传输层；</p></li><li><p>HTTP/1.1 和 HTTP/2.0 传输协议使用的是 TCP 协议，而到了 HTTP/3.0 传输协议改用了 UDP 协议。</p></li></ul></li></ul></li><li><p>应用广泛和跨平台</p></li></ol><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ol><li>无状态： <ul><li>好处：服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。</li><li>坏处：服务器没有记忆能力，它在完成有关联性的操作时会非常麻烦。</li><li>可通过多种方案解决，如使用 Cookie ： <img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191242328.png" alt="Cookie 技术" loading="lazy"></li></ul></li><li>明文传输：信息传输采用明文，可以被直接读取</li><li>不安全： <ul><li>使用明文</li><li>不验证通信方身份</li><li>无法证明报文完整性</li></ul></li></ol><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>HTTP 协议是基于 <strong>TCP/IP</strong>，并且使用了「<strong>请求 - 应答</strong>」的通信模式，所以性能的关键就在这<strong>两点</strong>里。</p><ol><li><p>长连接：</p><ul><li>HTTP/1.1 提出了<strong>长连接</strong>的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</li><li>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。如果某个 HTTP 长连接超过一定时间没有任何数据交互，服务端就会主动断开这个连接。 <img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191245294.png" alt="短连接与长连接" loading="lazy"></li></ul></li><li><p>管道网络传输</p><ul><li>即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以<strong>减少整体的响应时间。</strong><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191246431.png" alt="管道网络传输" loading="lazy"></li><li>实际上 HTTP/1.1 管道化技术不是默认开启，而且浏览器基本都没有支持</li></ul></li><li><p>队头阻塞</p><ul><li>当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会招致客户端一直请求不到数据 <img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191248237.png" alt="队头阻塞" loading="lazy"></li></ul></li></ol><h2 id="_2-11-http-和-https-的区别" tabindex="-1"><a class="header-anchor" href="#_2-11-http-和-https-的区别" aria-hidden="true">#</a> 2.11 HTTP 和 HTTPS 的区别</h2><ul><li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</li><li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li><li>两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。</li><li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的</li></ul><h2 id="_2-12-https-解决了-http-哪些问题" tabindex="-1"><a class="header-anchor" href="#_2-12-https-解决了-http-哪些问题" aria-hidden="true">#</a> 2.12 HTTPS 解决了 HTTP 哪些问题</h2><p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p><ul><li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容</li><li><strong>篡改风险</strong></li><li><strong>冒充风险</strong></li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191250780.jpeg" alt="HTTP 与 HTTPS 网络层" tabindex="0" loading="lazy"><figcaption>HTTP 与 HTTPS 网络层</figcaption></figure><p>HTTP<strong>S</strong> 在 HTTP 与 TCP 层之间加入了 <code>SSL/TLS</code> 协议，可以很好的解决了上述的风险：</p><ul><li><strong>信息加密</strong>：交互信息无法被窃取</li><li><strong>校验机制</strong>：无法篡改通信内容</li><li><strong>身份证书</strong></li></ul><h2 id="_2-13-https-如何保证安全性" tabindex="-1"><a class="header-anchor" href="#_2-13-https-如何保证安全性" aria-hidden="true">#</a> 2.13 HTTPS 如何保证安全性</h2><h3 id="混合加密" tabindex="-1"><a class="header-anchor" href="#混合加密" aria-hidden="true">#</a> 混合加密</h3><p>通过<strong>混合加密</strong>的方式可以保证信息的<strong>机密性</strong>，解决了窃听的风险。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191253458.png" alt="混合加密" tabindex="0" loading="lazy"><figcaption>混合加密</figcaption></figure><p>HTTPS 采用的是<strong>对称加密</strong>和<strong>非对称加密</strong>结合的「混合加密」方式：</p><ul><li>在通信建立前采用<strong>非对称加密</strong>的方式交换「会话秘钥」，后续就不再使用非对称加密。</li><li>在通信过程中全部使用<strong>对称加密</strong>的「会话秘钥」的方式加密明文数据。</li></ul><p>采用「混合加密」的方式的原因：</p><ul><li><strong>对称加密</strong>只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换。</li><li><strong>非对称加密</strong>使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢。</li></ul><h3 id="摘要算法和数字签名" tabindex="-1"><a class="header-anchor" href="#摘要算法和数字签名" aria-hidden="true">#</a> 摘要算法和数字签名</h3><h4 id="摘要算法" tabindex="-1"><a class="header-anchor" href="#摘要算法" aria-hidden="true">#</a> 摘要算法</h4><p><strong>摘要算法（哈希函数）计算出内容的哈希值</strong>，也就是内容的「指纹」，这个<strong>哈希值是唯一的，且无法通过哈希值推导出内容</strong>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191256590.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过哈希算法可以确保内容不会被篡改，<strong>但是并不能保证「内容 + 哈希值」不会被中间人替换，因为这里缺少对客户端收到的消息是否来源于服务端的证明</strong>。</p><h4 id="数字签名" tabindex="-1"><a class="header-anchor" href="#数字签名" aria-hidden="true">#</a> 数字签名</h4><p><strong>数字签名算法，通过「私钥加密，公钥解密」的方式，对内容的哈希值加密来确认消息的身份</strong></p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191258648.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="数字证书" tabindex="-1"><a class="header-anchor" href="#数字证书" aria-hidden="true">#</a> 数字证书</h3><p>由于公钥可能被伪造，需要CA （数字证书认证机构），将服务器公钥放在数字证书（由数字证书认证机构颁发）中，只要证书是可信的，公钥就是可信的。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191300890.jpeg" alt="数子证书工作流程" tabindex="0" loading="lazy"><figcaption>数子证书工作流程</figcaption></figure><h2 id="_2-14-https-连接建立流程" tabindex="-1"><a class="header-anchor" href="#_2-14-https-连接建立流程" aria-hidden="true">#</a> 2.14 HTTPS 连接建立流程</h2><p>SSL/TLS 协议基本流程：</p><ul><li>客户端向服务器索要并验证服务器的公钥。</li><li>双方协商生产「会话秘钥」。</li><li>双方采用「会话秘钥」进行加密通信。</li></ul><p>前两步也就是 SSL/TLS 的建立过程，也就是 TLS 握手阶段。TLS 的「握手阶段」涉及<strong>四次</strong>通信，使用不同的密钥交换算法，TLS 握手流程也会不一样的，现在常用的密钥交换算法有两种：RSA 算法和ECDHE 算法。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191303412.jpeg" alt="HTTPS 连接建立过程" tabindex="0" loading="lazy"><figcaption>HTTPS 连接建立过程</figcaption></figure><h3 id="tls-协议建立的详细流程" tabindex="-1"><a class="header-anchor" href="#tls-协议建立的详细流程" aria-hidden="true">#</a> TLS 协议建立的详细流程</h3><p><em>1. ClientHello</em></p><p>首先，由客户端向服务器发起加密通信请求，也就是 <code>ClientHello</code> 请求。</p><p>在这一步，客户端主要向服务器发送以下信息：</p><p>（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。</p><p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生成「会话秘钥」条件之一。</p><p>（3）客户端支持的密码套件列表，如 RSA 加密算法。</p><p><em>2. SeverHello</em></p><p>服务器收到客户端请求后，向客户端发出响应，也就是 <code>SeverHello</code>。服务器回应的内容有如下内容：</p><p>（1）确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。</p><p>（2）服务器生产的随机数（<code>Server Random</code>），也是后面用于生产「会话秘钥」条件之一。</p><p>（3）确认的密码套件列表，如 RSA 加密算法。</p><p>（4）服务器的数字证书。</p><p><em>3.客户端回应</em></p><p>客户端收到服务器的回应之后，首先通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。</p><p>如果证书没有问题，客户端会<strong>从数字证书中取出服务器的公钥</strong>，然后使用它加密报文，向服务器发送如下信息：</p><p>（1）一个随机数（<code>pre-master key</code>）。该随机数会被服务器公钥加密。</p><p>（2）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。</p><p>上面第一项的随机数是整个握手阶段的第三个随机数，会发给服务端，所以这个随机数客户端和服务端都是一样的。</p><p><strong>服务器和客户端有了这三个随机数（Client Random、Server Random、pre-master key），接着就用双方协商的加密算法，各自生成本次通信的「会话秘钥」</strong>。</p><p><em>4. 服务器的最后回应</em></p><p>服务器收到客户端的第三个随机数（<code>pre-master key</code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。</p><p>然后，向客户端发送最后的信息：</p><p>（1）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</p><p>至此，整个 TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用「会话秘钥」加密内容。</p><h3 id="数字证书校验" tabindex="-1"><a class="header-anchor" href="#数字证书校验" aria-hidden="true">#</a> 数字证书校验</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191304685.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>CA 签发证书的过程，如上图左边部分：</p><ul><li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；</li><li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；</li><li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；</li></ul><p>客户端校验服务端的数字证书的过程，如上图右边部分：</p><ul><li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；</li><li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；</li><li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。</li></ul><h3 id="证书信任链" tabindex="-1"><a class="header-anchor" href="#证书信任链" aria-hidden="true">#</a> 证书信任链</h3><p>证书的验证过程中<strong>还存在一个证书信任链的问题</strong>，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的，比如百度的证书，从下图你可以看到，证书的层级有三级：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191305167.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191306590.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样的一层层地验证就构成了一条信任链路，整个证书信任链验证流程如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191306248.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-15-https-如何保证数据完整性" tabindex="-1"><a class="header-anchor" href="#_2-15-https-如何保证数据完整性" aria-hidden="true">#</a> 2.15 HTTPS 如何保证数据完整性</h2><p>TLS 在实现上分为<strong>握手协议</strong>和<strong>记录协议</strong>两层：</p><ul><li>TLS 握手协议就是 TLS 四次握手的过程，负责协商加密算法和生成对称密钥，后续用此密钥来保护应用程序数据（即 HTTP 数据）；</li><li>TLS 记录协议负责保护应用程序数据并验证其完整性和来源，所以对 HTTP 数据加密是使用记录协议；</li></ul><p>TLS 记录协议主要负责消息（HTTP 数据）的压缩，加密及数据的认证：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191308811.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>首先，消息被分割成多个较短的片段,然后分别对每个片段进行压缩。</li><li>接下来，经过压缩的片段会被<strong>加上消息认证码（MAC 值，这个是通过哈希算法生成的），这是为了保证完整性，并进行数据的认证</strong>。通过附加消息认证码的 MAC 值，可以识别出篡改。与此同时，为了防止重放攻击，在计算消息认证码时，还加上了片段的编码。</li><li>再接下来，经过压缩的片段再加上消息认证码会一起通过对称密码进行加密。</li><li>最后，上述经过加密的数据再加上由数据类型、版本号、压缩后的长度组成的报头就是最终的报文数据。</li></ul><p>记录协议完成后，最终的报文数据将传递到传输控制协议 (TCP) 层进行传输。</p><h2 id="_2-16-https-一定安全可靠吗" tabindex="-1"><a class="header-anchor" href="#_2-16-https-一定安全可靠吗" aria-hidden="true">#</a> 2.16 HTTPS 一定安全可靠吗</h2><h3 id="中间人服务器" tabindex="-1"><a class="header-anchor" href="#中间人服务器" aria-hidden="true">#</a> 中间人服务器</h3><p>客户端通过浏览器向服务端发起 HTTPS 请求时，被「假基站」转发到了一个「中间人服务器」，于是客户端是和「中间人服务器」完成了 TLS 握手，然后这个「中间人服务器」再与真正的服务端完成 TLS 握手。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191311463.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要发生这种场景是有前提的，前提是用户点击接受了中间人服务器的证书。</p><p>中间人服务器与客户端在 TLS 握手过程中，实际上发送了自己伪造的证书给浏览器，而这个伪造的证书是能被浏览器（客户端）识别出是非法的，于是就会提醒用户该证书存在问题。</p><p>另外，如果电脑被恶意导入了中间人的根证书，那么在验证中间人的证书的时候，由于你操作系统信任了中间人的根证书，那么等同于中间人的证书是合法的，这种情况下，浏览器是不会弹出证书存在问题的风险提醒的。</p><p>所以，<strong>HTTPS 协议本身到目前为止还是没有任何漏洞的，即使你成功进行中间人攻击，本质上是利用了客户端的漏洞（用户点击继续访问或者被恶意导入伪造的根证书），并不是 HTTPS 不够安全</strong>。</p><h2 id="_2-17-为何抓包工具能截取-https-数据" tabindex="-1"><a class="header-anchor" href="#_2-17-为何抓包工具能截取-https-数据" aria-hidden="true">#</a> 2.17 为何抓包工具能截取 HTTPS 数据</h2><p>很多抓包工具 之所以可以明文看到 HTTPS 数据，工作原理与中间人一致的。</p><p>对于 HTTPS 连接来说，中间人要满足以下两点，才能实现真正的明文代理:</p><ol><li>中间人，作为客户端与真实服务端建立连接这一步不会有问题，因为服务端不会校验客户端的身份；</li><li>中间人，作为服务端与真实客户端建立连接，这里会有客户端信任服务端的问题，也就是服务端必须有对应域名的私钥；</li></ol><p>中间人要拿到私钥只能通过如下方式：</p><ol><li>去网站服务端拿到私钥；</li><li>去CA处拿域名签发私钥；</li><li>自己签发证书，切要被浏览器信任；</li></ol><p>抓包工具只能使用第三种方式取得中间人的身份。使用抓包工具进行 HTTPS 抓包的时候，需要在客户端安装 Fiddler 的根证书，这里实际上起认证中心（CA）的作用。</p><p>抓包工具能够抓包的关键是客户端会往系统受信任的根证书列表中导入抓包工具生成的证书，而这个证书会被浏览器信任，也就是抓包工具给自己创建了一个认证中心 CA，客户端拿着中间人签发的证书去中间人自己的 CA 去认证，当然认为这个证书是有效的。</p><h2 id="_2-18-如何避免中间人监听" tabindex="-1"><a class="header-anchor" href="#_2-18-如何避免中间人监听" aria-hidden="true">#</a> 2.18 如何避免中间人监听</h2><p>保证计算机安全，不要被病毒乘虚而入，而且也不要点击任何证书非法的网站，这样 HTTPS 数据就不会被中间人截取到了。</p><p>还可以通过 <strong>HTTPS 双向认证</strong>来避免这种问题。</p><p>一般 HTTPS 是单向认证，客户端只会验证了服务端的身份，但是服务端并不会验证客户端的身份。</p><p>如果用了双向认证方式，不仅客户端会验证服务端的身份，而且服务端也会验证客户端的身份。服务端一旦验证到请求自己的客户端为不可信任的，服务端就拒绝继续通信，客户端如果发现服务端为不可信任的，那么也中止通信。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191316608.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-19-http-1-1、http-2、http-3-演变" tabindex="-1"><a class="header-anchor" href="#_2-19-http-1-1、http-2、http-3-演变" aria-hidden="true">#</a> 2.19 HTTP/1.1、HTTP/2、HTTP/3 演变</h2><h3 id="http-1-1-相比-http-1-0-提高了什么性能" tabindex="-1"><a class="header-anchor" href="#http-1-1-相比-http-1-0-提高了什么性能" aria-hidden="true">#</a> HTTP/1.1 相比 HTTP/1.0 提高了什么性能？</h3><p>HTTP/1.1 相比 HTTP/1.0 性能上的改进：</p><ul><li>使用长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。</li><li>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</li></ul><p>但 HTTP/1.1 还是有性能瓶颈：</p><ul><li>请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 <code>Body</code> 的部分；</li><li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多；</li><li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；</li><li>没有请求优先级控制；</li><li>请求只能从客户端开始，服务器只能被动响应</li></ul><h3 id="http-2-做了什么优化" tabindex="-1"><a class="header-anchor" href="#http-2-做了什么优化" aria-hidden="true">#</a> HTTP/2 做了什么优化？</h3><p>HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191319353.jpeg" alt="HTT/1 ~ HTTP/2" tabindex="0" loading="lazy"><figcaption>HTT/1 ~ HTTP/2</figcaption></figure><p>HTTP/2 相比 HTTP/1.1 性能上的改进：</p><ul><li>头部压缩</li><li>二进制格式</li><li>并发传输</li><li>服务器主动推送资源</li></ul><p><em>1. 头部压缩</em></p><p>HTTP/2 会<strong>压缩头</strong>（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你<strong>消除重复的部分</strong>。</p><p>这就是所谓的 <code>HPACK</code> 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就<strong>提高速度</strong>了。</p><p><em>2. 二进制格式</em></p><p>HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了<strong>二进制格式</strong>，头信息和数据体都是二进制，并且统称为帧（frame）：<strong>头信息帧（Headers Frame）和数据帧（Data Frame）</strong>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191320976.png" alt="HTTP/1 与 HTTP/2 " tabindex="0" loading="lazy"><figcaption>HTTP/1 与 HTTP/2 </figcaption></figure><p><em>3. 并发传输</em></p><p>HTTP/1.1 的实现是基于请求-响应模型的。同一个连接中，HTTP 完成一个事务（请求与响应），才能处理下一个事务，也就是说在发出请求等待响应的过程中，是没办法做其他事情的，如果响应迟迟不来，那么后续的请求是无法发送的，也造成了<strong>队头阻塞</strong>的问题</p><p>HTTP/2 引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191321679.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看到，1 个 TCP 连接包含多个 Stream，Stream 里可以包含 1 个或多个 Message，Message 对应 HTTP/1 中的请求或响应，由 HTTP 头部和包体构成。Message 里包含一条或者多个 Frame，Frame 是 HTTP/2 最小单位，以二进制压缩格式存放 HTTP/1 中的内容（头部和包体）。</p><p><strong>针对不同的 HTTP 请求用独一无二的 Stream ID 来区分，接收端可以通过 Stream ID 有序组装成 HTTP 消息，不同 Stream 的帧是可以乱序发送的，因此可以并发不同的 Stream ，也就是 HTTP/2 可以并行交错地发送请求和响应</strong>。</p><p>比如下图，服务端<strong>并行交错地</strong>发送了两个响应： Stream 1 和 Stream 3，这两个 Stream 都是跑在一个 TCP 连接上，客户端收到后，会根据相同的 Stream ID 有序组装成 HTTP 消息。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191321724.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>4、服务器推送</em></p><p>HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务端不再是被动地响应，可以<strong>主动</strong>向客户端发送消息。</p><p>客户端和服务器<strong>双方都可以建立 Stream</strong>， Stream ID 也是有区别的，客户端建立的 Stream 必须是奇数号，而服务器建立的 Stream 必须是偶数号。</p><p>比如下图，Stream 1 是客户端向服务端请求的资源，属于客户端建立的 Stream，所以该 Stream 的 ID 是奇数（数字 1）；Stream 2 和 4 都是服务端主动向客户端推送的资源，属于服务端建立的 Stream，所以这两个 Stream 的 ID 是偶数（数字 2 和 4）。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191321924.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再比如，客户端通过 HTTP/1.1 请求从服务器那获取到了 HTML 文件，而 HTML 可能还需要依赖 CSS 来渲染页面，这时客户端还要再发起获取 CSS 文件的请求，需要两次消息往返，如下图左边部分：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191322377.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图右边部分，在 HTTP/2 中，客户端在访问 HTML 时，服务器可以直接主动推送 CSS 文件，减少了消息传递的次数。</p><h3 id="http-2-有什么缺陷" tabindex="-1"><a class="header-anchor" href="#http-2-有什么缺陷" aria-hidden="true">#</a> HTTP/2 有什么缺陷</h3><p>HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。</p><p><strong>HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。</strong></p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191322665.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举个例子，如下图：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191322317.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图中发送方发送了很多个 packet，每个 packet 都有自己的序号，你可以认为是 TCP 的序列号，其中 packet 3 在网络中丢失了，即使 packet 4-6 被接收方收到后，由于内核中的 TCP 数据不是连续的，于是接收方的应用层就无法从内核中读取到，只有等到 packet 3 重传后，接收方的应用层才可以从内核中读取到数据，这就是 HTTP/2 的队头阻塞问题，是在 TCP 层面发生的。</p><p>所以，一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的<strong>所有的 HTTP 请求都必须等待这个丢了的包被重传回来</strong>。</p><h3 id="http-3-做了哪些优化" tabindex="-1"><a class="header-anchor" href="#http-3-做了哪些优化" aria-hidden="true">#</a> HTTP/3 做了哪些优化</h3><p>HTTP/1.1 和 HTTP/2 都有队头阻塞的问题：</p><ul><li>HTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是<strong>没有解决响应的队头阻塞</strong>，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。</li><li>HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是<strong>一旦发生丢包，就会阻塞住所有的 HTTP 请求</strong>，这属于 TCP 层队头阻塞。</li></ul><p>HTTP/2 队头阻塞的问题是因为 TCP，所以 <strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP</strong></p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191323152.jpeg" alt="HTTP/1 ~ HTTP/3" tabindex="0" loading="lazy"><figcaption>HTTP/1 ~ HTTP/3</figcaption></figure><p>UDP 发送是不管顺序，也不管丢包的，所以不会出现像 HTTP/2 队头阻塞的问题。大家都知道 UDP 是不可靠传输的，但基于 UDP 的 <strong>QUIC 协议</strong> 可以实现类似 TCP 的可靠性传输。</p><p>QUIC 有以下 3 个特点。</p><ul><li>无队头阻塞</li><li>更快的连接建立</li><li>连接迁移</li></ul><p><em>1、无队头阻塞</em></p><p>QUIC 协议也有类似 HTTP/2 Stream 与多路复用的概念，也是可以在同一条连接上并发传输多个 Stream，Stream 可以认为就是一条 HTTP 请求。</p><p>QUIC 有自己的一套机制可以保证传输的可靠性的。<strong>当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题</strong>。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。</p><p>所以，QUIC 连接上的多个 Stream 之间并没有依赖，都是独立的，某个流发生丢包了，只会影响该流，其他流不受影响。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191324248.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>2、更快的连接建立</em></p><p>对于 HTTP/1 和 HTTP/2 协议，TCP 和 TLS 是分层的，分别属于内核实现的传输层、openssl 库实现的表示层，因此它们难以合并在一起，需要分批次来握手，先 TCP 握手，再 TLS 握手。</p><p>HTTP/3 在传输数据前虽然需要 QUIC 协议握手，但是这个握手过程只需要 1 RTT，握手的目的是为确认双方的「连接 ID」，连接迁移就是基于连接 ID 实现的。</p><p>但是 HTTP/3 的 QUIC 协议并不是与 TLS 分层，而是 QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS/1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，如下图：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191325661.jpeg" alt="TCP HTTPS（TLS/1.3） 和 QUIC HTTPS " tabindex="0" loading="lazy"><figcaption>TCP HTTPS（TLS/1.3） 和 QUIC HTTPS </figcaption></figure><p>甚至，在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果。</p><p>如下图右边部分，HTTP/3 当会话恢复时，有效负载数据与第一个数据包一起发送，可以做到 0-RTT（下图的右下角）：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191327772.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>3、连接迁移</em></p><p>基于 TCP 传输协议的 HTTP 协议，由于是通过四元组（源 IP、源端口、目的 IP、目的端口）确定一条 TCP 连接。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310191327857.png" alt="TCP 四元组" tabindex="0" loading="lazy"><figcaption>TCP 四元组</figcaption></figure><p>那么<strong>当移动设备的网络从 4G 切换到 WIFI 时，意味着 IP 地址变化了，那么就必须要断开连接，然后重新建立连接</strong>。而建立连接的过程包含 TCP 三次握手和 TLS 四次握手的时延，以及 TCP 慢启动的减速过程，给用户的感觉就是网络突然卡顿了一下，因此连接的迁移成本是很高的。</p><p>而 QUIC 协议没有用四元组的方式来“绑定”连接，而是通过<strong>连接 ID</strong> 来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感，达到了<strong>连接迁移</strong>的功能。</p><p>所以， QUIC 是一个在 UDP 之上的<strong>伪</strong> TCP + TLS + HTTP/2 的多路复用的协议。</p><p>QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题，因为有的网络设备是会丢掉 UDP 包的，而 QUIC 是基于 UDP 实现的，那么如果网络设备无法识别这个是 QUIC 包，那么就会当作 UDP包，然后被丢弃。</p>',239),o=[r];function p(g,s){return t(),a("div",null,o)}const c=i(n,[["render",p],["__file","2.http.html.vue"]]);export{c as default};
