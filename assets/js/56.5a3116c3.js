(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{706:function(e,t,s){"use strict";s.r(t);var n=s(5),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"environment-variables-in-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#environment-variables-in-compose"}},[e._v("#")]),e._v(" Environment variables in Compose")]),e._v(" "),s("p",[e._v("本节代码参见"),s("a",{attrs:{href:""}},[e._v("compose-test")])]),e._v(" "),s("h2",{attrs:{id:"_1-substitute-environment-variables-in-compose-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-substitute-environment-variables-in-compose-files"}},[e._v("#")]),e._v(" 1. Substitute environment variables in Compose files")]),e._v(" "),s("p",[e._v("It’s possible to use environment varibles in your shell to populate values inside a Compose file:")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" \n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"webapp:${TAG}"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("If you have multiple environment variables, you can substitute them by adding them to a default environment variable file named "),s("code",[e._v(".env")]),e._v(" or by providing a path to your enviroment variables file using the "),s("code",[e._v("--env-file")]),e._v(" command line option")]),e._v(" "),s("p",[e._v("If an environment variable is not set, Compose substitutues with an empty string. In the example above, if "),s("code",[e._v("TAG")]),e._v(" is not set, the value for the "),s("code",[e._v("image")]),e._v(" option is "),s("code",[e._v("webapp:")])]),e._v(" "),s("p",[e._v("You can set default values for environment variables using a "),s("code",[e._v(".env")]),e._v(" file, which Compose automatically looks for in project directory (parent folder of your Compose file). Values set in the shell enviroment override those set in the "),s("code",[e._v(".env")]),e._v(" file")]),e._v(" "),s("blockquote",[s("h4",{attrs:{id:"note-when-using-docker-stack-deploy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#note-when-using-docker-stack-deploy"}},[e._v("#")]),e._v(" Note when using docker stack deploy")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v(".env file")]),e._v(" feature only works when you use the "),s("code",[e._v("docker-compose up")]),e._v(" command and does not work with "),s("code",[e._v("docker stack deploy")]),e._v(".")])]),e._v(" "),s("p",[e._v("Both "),s("code",[e._v("$VARIABLE")]),e._v(" and "),s("code",[e._v("${VARIABLE}")]),e._v(" syntax are supported. Additionally when using the "),s("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/compose-versioning/#version-21",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.1 file format"),s("OutboundLink")],1),e._v(", it is possible to provide inline default values using typical shell syntax:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("${VARIBALE:-default}")]),e._v(": evaluates to "),s("code",[e._v("default")]),e._v(" if "),s("code",[e._v("VARIABLE")]),e._v(" is "),s("strong",[e._v("uset or empty")]),e._v(" in the environment")]),e._v(" "),s("li",[s("code",[e._v("${VARIABLE-default}")]),e._v(": evaluates to "),s("code",[e._v("default")]),e._v(" only if "),s("code",[e._v("VARIABLE")]),e._v(" is "),s("strong",[e._v("unset")]),e._v(" in the environment")])]),e._v(" "),s("p",[e._v("Other extended shell-syntax features, such as "),s("code",[e._v("${VARIABLE/foo/bar}")]),e._v(", are not supported")]),e._v(" "),s("p",[e._v("You can use a "),s("code",[e._v("$$")]),e._v(" (double-dollar sign) when your configuration needs a literal dollar sign. This also prevents Compose from interpolating a value, so a "),s("code",[e._v("$$")]),e._v(" allows you to refer to enviroment variables that you don’t want processed by Compose")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" .\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$$VAR_NOT_INTERPOLATED_BY_COMPOSE"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("If you foget and use a single dollar sign, Compose interprets the value as an environment variable and warns you:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("The VAR_NOT_INTERPOLATED_BY_COMPOSE is not set. Substituting an empty string.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"_2-env-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-env-file"}},[e._v("#")]),e._v(" 2. "),s("code",[e._v(".env")]),e._v(" file")]),e._v(" "),s("p",[e._v("You can set default values for any environment variables referenced in the Compose file, or used to configure Compose, in an environment file named "),s("code",[e._v(".env")]),e._v(". The path is as follows:")]),e._v(" "),s("ul",[s("li",[e._v("Starting with "),s("code",[e._v("+v1.28")]),e._v(", "),s("code",[e._v(".env")]),e._v(" file is placed at the base of the project directory")]),e._v(" "),s("li",[e._v("Project directory can be explicitly defined with the "),s("code",[e._v("--file")]),e._v(" option or "),s("code",[e._v("COMPOSE_FILE")]),e._v(" environment variable. Otherwise, it is the current working directory where the "),s("code",[e._v("docker compose")]),e._v(" command is executed ("),s("code",[e._v("+1.28")]),e._v(").")]),e._v(" "),s("li",[e._v("For previous versions, it might have trouble resolving "),s("code",[e._v(".env")]),e._v(" file with "),s("code",[e._v("--file")]),e._v(" or "),s("code",[e._v("COMPOSE_FILE")]),e._v(". To work around it, it is recommended to use "),s("code",[e._v("--project-directory")]),e._v(", which overrides the path for the "),s("code",[e._v(".env")]),e._v(" file. This inconsistency is addressed in "),s("code",[e._v("+v1.28")]),e._v(" by limiting the filepath to the project directory")])]),e._v(" "),s("p",[e._v("You can verify this with the config command, which prints your resolved application config to the terminal")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("$ docker compose config\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Values in the shell take precedence over those specified in the "),s("code",[e._v(".env")]),e._v(" file")]),e._v(" "),s("p",[e._v("If you set "),s("code",[e._v("TAG")]),e._v(" to a different value in your shell, the substitution uses that instead")]),e._v(" "),s("h3",{attrs:{id:"_2-1-using-the-env-file-option"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-using-the-env-file-option"}},[e._v("#")]),e._v(" 2.1 Using the "),s("code",[e._v("--env-file")]),e._v(" option")]),e._v(" "),s("p",[e._v("You can override the environment file path using a command line argument "),s("code",[e._v("--env-file")])]),e._v(" "),s("p",[e._v("By passing the file as an argument, you can store it anywhere and name it appropriately, for example "),s("code",[e._v(".env.ci")]),e._v(", "),s("code",[e._v(".env.dev")]),e._v(", "),s("code",[e._v(".env.prod")]),e._v(". Passing the file path is done using the "),s("code",[e._v("--env-file")]),e._v(" option:")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("$ docker compose --env-file ./.env.prod config\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("When an invalid file path is being passed as "),s("code",[e._v("--env-file")]),e._v(" argument, Compose returns an error:")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("$ docker-compose --env-file ./doesnotexist/.env.dev  config\nERROR: Couldn't "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" file: /home/user/./doesnotexist/.env.dev\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"_3-set-environment-variables-in-containers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-set-environment-variables-in-containers"}},[e._v("#")]),e._v(" 3. Set environment variables in containers")]),e._v(" "),s("p",[e._v("You can set environment variables in a service’s containers with the "),s("code",[e._v("environment")]),e._v(" key")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" DEBUG=1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"_3-1-pass-environment-variables-to-containers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-pass-environment-variables-to-containers"}},[e._v("#")]),e._v(" 3.1 Pass environment variables to containers")]),e._v(" "),s("p",[e._v("ou can pass environment variables from your shell straight through to a service’s containers with the "),s("code",[e._v("environment")]),e._v(" by not giving them a value, just like with "),s("code",[e._v("docker run -e VARIABLE ...")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" DEBUG\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("The value of the "),s("code",[e._v("DEBUG")]),e._v(" variable in the container is taken from the value for the same variable in the shell in which Compose is run.")]),e._v(" "),s("p",[e._v("// TODO: complete it later ,2021-12-18")])])}),[],!1,null,null,null);t.default=a.exports}}]);