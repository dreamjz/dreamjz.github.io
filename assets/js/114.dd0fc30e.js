(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{782:function(t,_,v){"use strict";v.r(_);var a=v(5),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"_1-事务的四个特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务的四个特性"}},[t._v("#")]),t._v(" 1. 事务的四个特性")]),t._v(" "),v("p",[t._v("ACID (Atomicity, Correspondence, Isolation, Durability)。")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("原子性")]),t._v("（Atomicity)：事务中的操作，要么"),v("strong",[t._v("全部成功")]),t._v("，要么"),v("strong",[t._v("全部失败")]),t._v("。事务在执行过程中发生错误，就会回滚（Rollback）到事务开始前的状态，就像事务从未发生过一样。")]),t._v(" "),v("li",[v("strong",[t._v("一致性")]),t._v(" (Correspondence)：事务开始前和结束后，必须使数据库从一个一致性状态变换到另一个一致性状态，数据库的完整性约束没有被破坏。\n假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。")]),t._v(" "),v("li",[v("strong",[t._v("隔离性")]),t._v(" (Isolation)：多个用户并发访问数据库时，每个事务之间不能相互干扰，由此引申出"),v("strong",[t._v("隔离级别")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("持久性")]),t._v(" (Durability):  事务一旦被提交，对数据库的改动是永久性的。")])]),t._v(" "),v("h2",{attrs:{id:"_2-视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-视图"}},[t._v("#")]),t._v(" 2. 视图")]),t._v(" "),v("p",[t._v("视图是"),v("strong",[t._v("虚拟")]),t._v("表，只包含查询的数据。")]),t._v(" "),v("p",[t._v("使用视图可以简化复杂的 SQL 操作。")]),t._v(" "),v("p",[t._v("视图不能被索引，也不能有关联的触发器或默认值，若视图内有 "),v("code",[t._v("order by")]),t._v(" ，在使用视图时将会覆盖。")]),t._v(" "),v("p",[t._v("创建视图：")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" view_name "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" sql_statement"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("h2",{attrs:{id:"_3-drop-delete-truncate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-drop-delete-truncate"}},[t._v("#")]),t._v(" 3. drop, delete, truncate")]),t._v(" "),v("ol",[v("li",[t._v("drop 直接删除表；")]),t._v(" "),v("li",[t._v("truncate 删除表中所有数据，相关的触发器和索引等会被删除，重新添加数据则 ID 从新开始；")]),t._v(" "),v("li",[t._v("delete 删除数据，但依赖的 约束，触发器和索引等不会被删除；")]),t._v(" "),v("li",[t._v("delete 属于 DML，可以回滚；drop 和 truncate 属于 DDL 不能回滚。")]),t._v(" "),v("li",[t._v("执行效率：drop > truncate > delete。")])]),t._v(" "),v("h2",{attrs:{id:"_4-join"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-join"}},[t._v("#")]),t._v(" 4. JOIN")]),t._v(" "),v("h2",{attrs:{id:"_5-mysql-索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-mysql-索引"}},[t._v("#")]),t._v(" 5. MySQL 索引")]),t._v(" "),v("p",[t._v("MySQL 索引使用 B+ 树，查询效率高（时间复杂度 "),v("em",[t._v("O(logN)")]),t._v(" ），适配磁盘的页，尽量减少磁盘 IO 操作，适合"),v("strong",[t._v("读多写少")]),t._v("的场景。")]),t._v(" "),v("h2",{attrs:{id:"_6-mysql-存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-mysql-存储引擎"}},[t._v("#")]),t._v(" 6. MySQL 存储引擎")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Decription")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("InnoDB")]),t._v(" "),v("td",[t._v("默认引擎")])])])]),t._v(" "),v("h2",{attrs:{id:"_7-mysql-事务隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-mysql-事务隔离级别"}},[t._v("#")]),t._v(" 7. MySQL 事务隔离级别")]),t._v(" "),v("h3",{attrs:{id:"_7-1-事务并发的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-事务并发的问题"}},[t._v("#")]),t._v(" 7.1 事务并发的问题")]),t._v(" "),v("ol",[v("li",[v("p",[v("strong",[t._v("脏读 (Dirty Read)")]),t._v("\n一个事务读取了另一个事务未提交的数据。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("不可重复读 (Non-repeatable Read)")])]),t._v(" "),v("p",[t._v("在一个事务中两次查询的数据不一致。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("幻读 (Phantom Read)")]),t._v("\n当用户读取某一范围的数据行时，另一事物又在该范围插入新行，再次读取时会发现出现“幻影”行。")])])]),t._v(" "),v("h3",{attrs:{id:"_7-2-mysql-事务隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-mysql-事务隔离级别"}},[t._v("#")]),t._v(" 7.2 MySQL 事务隔离级别")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("事务隔离级别")]),t._v(" "),v("th",[t._v("脏读")]),t._v(" "),v("th",[t._v("不可重复读")]),t._v(" "),v("th",[t._v("幻读")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("读未提交")]),t._v(" "),v("td",[t._v("Y")]),t._v(" "),v("td",[t._v("Y")]),t._v(" "),v("td",[t._v("Y")])]),t._v(" "),v("tr",[v("td",[t._v("读已提交")]),t._v(" "),v("td",[t._v("N")]),t._v(" "),v("td",[t._v("Y")]),t._v(" "),v("td",[t._v("Y")])]),t._v(" "),v("tr",[v("td",[t._v("可重复读")]),t._v(" "),v("td",[t._v("N")]),t._v(" "),v("td",[t._v("N")]),t._v(" "),v("td",[t._v("Y")])]),t._v(" "),v("tr",[v("td",[t._v("串行化（序列化）")]),t._v(" "),v("td",[t._v("N")]),t._v(" "),v("td",[t._v("N")]),t._v(" "),v("td",[t._v("N")])])])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("读未提交 (Read Uncommitted)")]),t._v("\n一个事务可以读取另一个未提交事务的数据。\n"),v("ul",[v("li",[t._v("所有事务都可以看到其他事务的执行结果；")]),t._v(" "),v("li",[t._v("此隔离级别使用较少；")]),t._v(" "),v("li",[t._v("引发的问题为 "),v("strong",[t._v("脏读 (Dirty Read)")]),t._v("：读取未提交的数据；")])])]),t._v(" "),v("li",[v("strong",[t._v("读已提交 (Read Committed)")]),t._v("\n一个事务等另一事物提交后才能提交数据，可以避免脏读。\n"),v("ul",[v("li",[t._v("出现的问题是 "),v("strong",[t._v("不可重复读 (Non-Repeatable Read)")]),t._v("；")])])]),t._v(" "),v("li",[v("strong",[t._v("可重复读 (Repeatable Read)")]),t._v("\n开始事务时，已读取的数据无法进行修改操作，可避免脏读和不可重复读。\n"),v("ul",[v("li",[t._v("MySQL 默认隔离级别；")]),t._v(" "),v("li",[t._v("确保同一事务的多个实例在并发读取数据时，会看到同样的数据行；")]),t._v(" "),v("li",[t._v("出现的问题是 "),v("strong",[t._v("幻读 (Phantom Read)")]),t._v("：当事务读取某一范围的数据行之后，另一事物在范围内插入了新行，再次读取时出现了“幻影”行；")]),t._v(" "),v("li",[t._v("InnoDB 和 Falcon 通过 MVCC (Multiversion Concurrency Control, 多版本并发控制)机制解决该问题；")]),t._v(" "),v("li",[t._v("InnoDB 通过 MVCC 支持高并发，默认为可重复度，通过间隙锁 (Netx-key Locks) 策略防止幻读出现；")])])]),t._v(" "),v("li",[t._v("可串行化 (Serializable)\n事务串行化顺序执行，可避免脏读、不可重复度和幻读。\n"),v("ul",[v("li",[t._v("强制事务排序，不可能冲突，在每个读数据上添加共享锁，解决幻读问题；")]),t._v(" "),v("li",[t._v("会导致大量的超时现象和锁竞争；")])])])]),t._v(" "),v("h2",{attrs:{id:"_8-utf8-和-utf8mb4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-utf8-和-utf8mb4"}},[t._v("#")]),t._v(" 8. utf8 和 utf8mb4")]),t._v(" "),v("p",[t._v("utf8mb4 中的 mb4 为 "),v("em",[t._v("most bytes 4")]),t._v("，专门用于兼容四字节的 unicode；")]),t._v(" "),v("p",[t._v("MySQL 中的 utf8 最多支持长度为 3 字节；")]),t._v(" "),v("h2",{attrs:{id:"_9-mysql-乐观锁和悲观锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-mysql-乐观锁和悲观锁"}},[t._v("#")]),t._v(" 9. MySQL 乐观锁和悲观锁")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("悲观锁 (Pessimistic Lock)")]),t._v("\n每次获取数据时都会认为会被别人修改，所以在每次获取数据时都会上锁。\n适用于"),v("strong",[t._v("写多读少")]),t._v("的场景；")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("乐观锁 (Optimistic Lock)")]),t._v("\n每次获取数据时，认为别人不会修改，所以不会上锁，但是在更新时会判断期间数据是否被更新，一般有两种方式：")]),t._v(" "),v("ol",[v("li",[t._v("使用数据版本 (Version) 记录机制。为数据增加一个版本标识，每次更新数据时则将 version 加一，当提交时，将第一次读取的 ver 和数据库当前的 ver 进行比较，若相同则继续更新；")]),t._v(" "),v("li",[t._v("增加控制字段，时间戳，在更新时比较时间戳；")])]),t._v(" "),v("p",[t._v("乐观锁适用于"),v("strong",[t._v("读多写少")]),t._v("的场景。")]),t._v(" "),v("p",[t._v("乐观锁一般流程如下：")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("1. SELECT data AS old_data, version AS old_version FROM …;\n2. 根据获取的数据进行业务操作，得到new_data和new_version\n3. UPDATE SET data = new_data, version = new_version WHERE version = old_version\nif (updated row > 0) {\n    // 乐观锁获取成功，操作完成\n} else {\n    // 乐观锁获取失败，回滚并重试\n}\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br")])])])]),t._v(" "),v("h2",{attrs:{id:"_10-mvcc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-mvcc"}},[t._v("#")]),t._v(" 10. MVCC")]),t._v(" "),v("h2",{attrs:{id:"_11"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11"}},[t._v("#")]),t._v(" 11.")])])}),[],!1,null,null,null);_.default=s.exports}}]);