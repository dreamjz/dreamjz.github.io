(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{692:function(s,a,t){"use strict";t.r(a);var n=t(5),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-golang-调度器的由来"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-golang-调度器的由来"}},[s._v("#")]),s._v(" 1. Golang 调度器的由来")]),s._v(" "),t("h3",{attrs:{id:"_1-1-单进程时代无需调度器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单进程时代无需调度器"}},[s._v("#")]),s._v(" 1.1 单进程时代无需调度器")]),s._v(" "),t("p",[s._v("在早期的操作系统中一个程序就是一个进程，只有一个进程运行完毕之后才能运行下一个进程，所有的进程只能串行发生。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/06IoYRyruP.png!large",alt:""}})]),s._v(" "),t("p",[s._v("早期的单进程操作系统，面临着两个问题：")]),s._v(" "),t("ol",[t("li",[s._v("单一的执行流程，计算机只能串行处理任务。")]),s._v(" "),t("li",[s._v("进程阻塞会带来 CPU 时间的浪费。")])]),s._v(" "),t("p",[s._v("后来操作系统有了最早的并发能力：多进程并发。当一个进程阻塞的时候，切换到另外等待执行的进程，这样避免了 CPU 时间的浪费。")]),s._v(" "),t("h3",{attrs:{id:"_1-2-多进程-线程时代的调度器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-多进程-线程时代的调度器"}},[s._v("#")]),s._v(" 1.2 多进程 / 线程时代的调度器")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/sLve6TagD3.png!large",alt:""}})]),s._v(" "),t("p",[s._v("在多进程 / 多线程的操作系统中，解决了阻塞问题，因为一个进程阻塞后 CPU 可以切换至其他进程中执行，调度 CPU 的算法可以保证在运行的进程都可以被分配到 CPU 时间片，宏观上多个进程是在同时运行。")]),s._v(" "),t("p",[s._v("但是这样会出现新的问题，进程拥有太多的资源，进程的创建、切换及销毁均会产生时间成本，CPU 虽然利用起来了，但是当进程数量过多时，CPU 耗费很大一部分时间用于进程调度。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/dNWd00AiEZ-16418839778108.png!large",alt:""}})]),s._v(" "),t("p",[s._v("虽然进程看起来很美好，但实际上多线程开发设计会变得更加复杂，需要考虑很多同步竞争的问题。")]),s._v(" "),t("h3",{attrs:{id:"_1-3-使用协程来提高-cpu-利用率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-使用协程来提高-cpu-利用率"}},[s._v("#")]),s._v(" 1.3 使用协程来提高 CPU 利用率")]),s._v(" "),t("p",[s._v("多进程、多线程已经提高了系统的并发能力，但是在当今互联网高并发的场景下，为每个任务均创建一个线程是不现实的，会消耗大量的内存（进程虚拟内存会占用 4GiB (32 位)，而线程也要大约 4MiB）。")]),s._v(" "),t("p",[s._v("此时也出现了新的问题：")]),s._v(" "),t("ul",[t("li",[s._v("高内存占用")]),s._v(" "),t("li",[s._v("进程 / 线程调度高消耗 CPU")])]),s._v(" "),t("p",[s._v("之后工程师发现，一个线程可分为“内核态”和“用户态”两种。一个“用户态线程”必须绑定一个“内核态线程”，对于 CPU 来说其并不知道“用户态线程”的存在，只知道运行的是“内核态线程”。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/TfStmYsfyF.png!large",alt:""}})]),s._v(" "),t("p",[s._v("此时，我们将“内核态线程”称作 线程（Thread），“用户态线程”称作 协程（co-routine）.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/vgzlKzvOUL.png!large",alt:""}})]),s._v(" "),t("p",[s._v("既然协程可以和线程进行绑定，那么就有三种对应关系：")]),s._v(" "),t("ul",[t("li",[s._v("1:1 (一对一)")]),s._v(" "),t("li",[s._v("N:1 (多对一)")]),s._v(" "),t("li",[s._v("N:M (多对多)")])]),s._v(" "),t("h4",{attrs:{id:"_1-3-1-多对一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-多对一"}},[s._v("#")]),s._v(" 1.3.1 多对一")]),s._v(" "),t("p",[s._v("N 个协程绑定一个线程，优点在于"),t("strong",[s._v("协程在用户态线程完成切换，不会陷入到内核态，这种切换非常的轻量快速")]),s._v("，但是也会有很大的缺点，多个协程绑定在一个线程上：")]),s._v(" "),t("ul",[t("li",[s._v("某个程序无法使用硬件的多核加速能力")]),s._v(" "),t("li",[s._v("一旦某个协程阻塞导致线程阻塞，当前进程文档其他协程均无法执行，此时失去了并发的能力。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/kfPbThcyRU.png!large",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_1-3-2-一对一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-一对一"}},[s._v("#")]),s._v(" 1.3.2 一对一")]),s._v(" "),t("p",[s._v("一个协程绑定一个线程，此时协程的调度都交由 CPU 完成，但是其创建、销毁和切换的成本较高。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/EhNQY2VCpk.png!large",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_1-3-3-多对多"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-多对多"}},[s._v("#")]),s._v(" 1.3.3 多对多")]),s._v(" "),t("p",[s._v("多个协程绑定多个线程，克服了上述关系的缺点，但是实现起来较为复杂。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/ANDQLx3g9U.png!large",alt:""}})]),s._v(" "),t("p",[s._v("协程和线程的区别：")]),s._v(" "),t("ul",[t("li",[s._v("线程由 CPU 进行调度，是抢占式的")]),s._v(" "),t("li",[s._v("协程由用户态调度，是协作式的（当一个协程让出 CPU 后才可执行下一协程）")])]),s._v(" "),t("h3",{attrs:{id:"_1-4-go-协程-goroutine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-go-协程-goroutine"}},[s._v("#")]),s._v(" 1.4 Go 协程 goroutine")]),s._v(" "),t("p",[s._v("Go 为了提供更容易的并发方法，使用了 goroutine 和 channel，goroutine 概念来自协程，让一组可复用的函数运行于一组线程之上，即使由协程阻塞了，该线程的其他协程可以被 "),t("code",[s._v("runtime")]),s._v(" 调度，转移至其他可以运行的线程上。这些对与开发人员来说是透明的，为开发提供了便利。")]),s._v(" "),t("p",[s._v("一个 goroutine 非常的轻量，仅占用几 KiB，这样就能在有限的内存空间创建大量的 goroutine，支持更多的并发。虽然一个 goroutine 的栈仅占几KiB，但实际是可伸缩的，"),t("code",[s._v("runtime")]),s._v(" 会自动为 goroutine 分配。")]),s._v(" "),t("h3",{attrs:{id:"_1-5-已废弃的-groutine-调度器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-已废弃的-groutine-调度器"}},[s._v("#")]),s._v(" 1.5 已废弃的 groutine 调度器")]),s._v(" "),t("p",[s._v("Golang 目前使用的调度器为 2012 年重新设计，之前的调度器存在性能问题，使用了 4 年已被废弃，下面来看看其如何运作的")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/Af6GQ3GSlb.png!large",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/uWk9pzdREk.png!large",alt:""}})]),s._v(" "),t("p",[s._v("M (Thread) 想要执行、放回 G (goroutine) 必须访问全局 G 队列，并且 M 由多个，即多线程访问同一资源需要加锁以保证互斥 / 同步，所以全局 G 队列是有互斥锁进行保护的。")]),s._v(" "),t("p",[s._v("老的调度器存在以下缺点：")]),s._v(" "),t("ul",[t("li",[s._v("创建、销毁、调度 G 都需要每个 M 获取锁，这样会形成激烈的 "),t("strong",[s._v("锁竞争")]),s._v("。")]),s._v(" "),t("li",[s._v("M 转移 G 会造成 "),t("strong",[s._v("延迟和额外的系统负载")]),s._v("。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G’，需要将 G’ 交给 M’ 来执行，也会造成了 "),t("strong",[s._v("很差的局部性")]),s._v("，因为 G’ 和 G 是相关的，最好的是在 M 上执行而不是其他的 M’。")]),s._v(" "),t("li",[s._v("系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。")])]),s._v(" "),t("h2",{attrs:{id:"_2-gmp-模型设计思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-gmp-模型设计思想"}},[s._v("#")]),s._v(" 2. GMP 模型设计思想")]),s._v(" "),t("p",[s._v("为了解决之前的问题，Go 设计了新的调度器，除了 M (Machine, 实际上为 Thread) 和 G (goroutine) 外，引进了 P (Processor)。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/zaZ4nQYcZe.png!large",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("Processor 包含了运行 goroutine 的资源")]),s._v("，若线程想要运行 goroutine 必须获取 P，P 中还包含了可运行的 G 队列。")]),s._v(" "),t("h3",{attrs:{id:"_2-1-gmp-模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-gmp-模型"}},[s._v("#")]),s._v(" 2.1 GMP 模型")]),s._v(" "),t("p",[s._v("在 Go 中，"),t("strong",[s._v("线程为运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/Ugu3C2WSpM.jpeg!large",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("全局队列 (Global Queue)")]),s._v(": 存放等待运行的 G。")]),s._v(" "),t("li",[t("strong",[s._v("P 的本地队列")]),s._v("： 同全局队列类似，存放的也是等待运行的 G, 存储数量不超过 256 个。新建 G’ 时，G’ 优先加入 P 的本地队列，若队列已满，则会把本地队列中的一半的 G 移动到全局队列。")]),s._v(" "),t("li",[t("strong",[s._v("P 列表")]),s._v("：所有的 P 都在程序启动时创建，并保存在数组中，最多为 "),t("code",[s._v("GOMAXPROCS")]),s._v(" 个。")]),s._v(" "),t("li",[t("strong",[s._v("M")]),s._v("： 线程想要运行任务就需要获取 P，从 P 的本地队列获取 G，P 队列为空时，M 会尝试从全局队列中获取一些 G 放入 P 的本地队列，或者从其他的 P 的本地队列中"),t("strong",[s._v("偷取")]),s._v("一半放入自己的 P 本地队列，M 会按照队列先进先出的顺序执行 G。")])]),s._v(" "),t("p",[t("strong",[s._v("Goroutine 调度器和 OS 调度器通过 M 结合起来，每个 M 代表一个内核线程， OS 调度器负责把内核线程分配至 CPU 核心运行")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"_2-1-1-p-和-m-的数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-p-和-m-的数量"}},[s._v("#")]),s._v(" 2.1.1  P 和 M 的数量")]),s._v(" "),t("p",[t("strong",[s._v("P")]),s._v(" 的数量由启动时环境变量 "),t("code",[s._v("GOMAXPROCS")]),s._v(" 或 "),t("code",[s._v("runtime.GOMAXPROCS(int)")]),s._v(" 决定，这意味着程序执行的任意时刻只会有 "),t("code",[s._v("GOMAXPROCS")]),s._v("个 goroutine 在 "),t("strong",[s._v("同时")]),s._v(" 运行。")]),s._v(" "),t("p",[t("strong",[s._v("M")]),s._v(" 的数量：")]),s._v(" "),t("ul",[t("li",[s._v("go 语言本身的限制：go 程序启动时，会设置 M 的最大数量， 默认为 10000")]),s._v(" "),t("li",[t("code",[s._v("runtime/debug")]),s._v(" 包中的 "),t("code",[s._v("SetMaxThreads")]),s._v(" 函数手动设置最大数量")]),s._v(" "),t("li",[s._v("当一个 M 阻塞了会创建新的 M")])]),s._v(" "),t("p",[s._v("P 和 M 的数量之前没有绝对关系，一个 M 阻塞了，P 就会创建或者切换另一个 M，所以即使 P 的数量为 1，也可能会有多个 M。")]),s._v(" "),t("h4",{attrs:{id:"_2-1-2-p-和-m-何时创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-p-和-m-何时创建"}},[s._v("#")]),s._v(" 2.1.2 P 和 M 何时创建")]),s._v(" "),t("p",[s._v("**P **：在确定了 P 的最大数量 n 之后，运行时系统会根据配置创建 n 个 P。")]),s._v(" "),t("p",[t("strong",[s._v("M")]),s._v("： 没有足够的 M 来关联 P 并运行其中的可运行的 G，当 M 被阻塞了，P 就会寻找空闲的 M，若没有则创建新的 M。")]),s._v(" "),t("h3",{attrs:{id:"_2-2-调度器的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-调度器的设计"}},[s._v("#")]),s._v(" 2.2 调度器的设计")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("复用线程")]),s._v("： 避免了频繁创建、销毁线程，而是对线程的复用\n"),t("ul",[t("li",[s._v("Work Stealing\n当本线程无可运行的 G, 尝试从其他线程绑定的 P 中偷取 G, 而不是销毁线程")]),s._v(" "),t("li",[s._v("Hand Off\n当线程因 G 进行系统调用而阻塞时，线程释放绑定的 P,将 P 转移至其他空闲的线程执行")])])]),s._v(" "),t("li",[t("strong",[s._v("利用并行")]),s._v("： "),t("code",[s._v("GOMAXPROCS")]),s._v(" 设置 P 的数量，最多有 "),t("code",[s._v("GOMAXPROCS")]),s._v(" 个线程分布在多个 CPU 上同时运行。"),t("code",[s._v("GOMAXPROCS")]),s._v(" 也限制了并行的程度，比如当 "),t("code",[s._v("GOMAXPROCS = CPU 核心数 / 2")]),s._v(" 时最多利用一半的 CPU 核心进行并行。")]),s._v(" "),t("li",[t("strong",[s._v("抢占")]),s._v("：对于协程 (coroutine) 来说需要协程主动让出 CPU 才能执行下一个，而 go 协程 (goroutine) 最多占用 CPU 10ms，防止其他的 goroutine 饿死。")]),s._v(" "),t("li",[t("strong",[s._v("全局 G 队列")]),s._v("：在新的调度器中依然有全局 G 队列，但功能已被弱化，仅当 M 执行 Work Stealing 无法从其他的 P 本地队列中获取 G 是才会从全局队列中获取。")])]),s._v(" "),t("h3",{attrs:{id:"_2-3-go-func-调度流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-go-func-调度流程"}},[s._v("#")]),s._v(" 2.3 "),t("code",[s._v("go func()")]),s._v(" 调度流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/a4vWtvRWGQ.jpeg!large",alt:""}})]),s._v(" "),t("p",[s._v("由上图可以看到：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("go func()")]),s._v(" 创建一个 goroutine")]),s._v(" "),t("li",[s._v("由两个存储 G 的队列，一个是局部调度器 P 的本地队列，一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，若 P 的本地队列已经满了就会保存在全局的队列中")]),s._v(" "),t("li",[s._v("G 只能运行在 M 中，一个 M 必须持有一个 P, M 与 P 是 1:1 的关系。M 与 P 是 1:1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会从其他的 MP 组合中偷取可执行的 G。")]),s._v(" "),t("li",[s._v("一个 M 调度 G 执行对的过程是一个循环机制")]),s._v(" "),t("li",[s._v("当 M 执行某一个 G 时若发生了 "),t("code",[s._v("syscall")]),s._v(" 或则其余阻塞操作，M 会阻塞，若当前有一些 G 在执行，"),t("code",[s._v("runtime")]),s._v(" 会将此线程 M 从 P 中摘除(detach), 然后再创建一个新的操作系统线程（若有空闲线程则服用）来服务这个 P。")]),s._v(" "),t("li",[s._v("当 M 系统调用结束时，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。若获取不到 P，那么这个线程 M 编程休眠状态，加入到空闲线程中，然后这个 G 会被放入全局队列中。")])]),s._v(" "),t("h3",{attrs:{id:"_2-4-调度器的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-调度器的生命周期"}},[s._v("#")]),s._v(" 2.4 调度器的生命周期")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/j37FX8nek9.png!large",alt:""}})]),s._v(" "),t("p",[s._v("上图中出现的特殊的 M 和 G:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("M0")]),s._v(": 启动程序后的编号为 0 的主线程，这个 M 对应的实例会在全局变量 "),t("code",[s._v("runtime.m0")]),s._v(" 中，不需要在 heap 上分配，M0 负责执行初始化操作和启动第一个 G，在之后 M0 就和其他的 M 一样了。")]),s._v(" "),t("li",[t("strong",[s._v("G0")]),s._v(": 每次启动一个 M 都会第一个创建的 goroutine， G0 仅用于负责调度的 G，G0 不指向任何可执行的函数，每个 M 都会有一个自己的 G0。在调度或系统调用时会使用 G0 的栈空间，全局变量的 G0 是 M0 的 G0。")])]),s._v(" "),t("p",[s._v("下面追踪一段代码：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("runtime")]),s._v(" 创建最初的线程 "),t("code",[s._v("M0")]),s._v(" 和 goroutine "),t("code",[s._v("g0")]),s._v(" , 并关联二者")]),s._v(" "),t("li",[s._v("调度器初始化，初始化 M0, 栈，GC 以及有 GOMAXPROCS 个 P 构成的列表")]),s._v(" "),t("li",[s._v("示例代码中的 main 函数 "),t("code",[s._v("main.main")]),s._v(", "),t("code",[s._v("runtime")]),s._v(" 中也有一个 main 函数 "),t("code",[s._v("runtime.main")]),s._v("，代码经过编译后，"),t("code",[s._v("runtime.main")]),s._v(" 会调用 "),t("code",[s._v("main.main")]),s._v(" ，程序启动时会为 "),t("code",[s._v("runtime.main")]),s._v(" 创建 goroutine，称其为主协程，然后将主协程加入 P 的本地队列。")]),s._v(" "),t("li",[s._v("启动 M0，M0 已经绑定了 P, 会从 P 的本地队列获取 G，此例中获取到主协程")]),s._v(" "),t("li",[s._v("G 拥有栈内存，M 根据 G 中的栈信息和调度信息设置运行环境")]),s._v(" "),t("li",[s._v("M 执行 G")]),s._v(" "),t("li",[s._v("G 退出，再次回到 M，M 会再次尝试获取 G ，如此重复下去直到 "),t("code",[s._v("main.main")]),s._v(" 退出，"),t("code",[s._v("runtime.main")]),s._v("  会执行 Defer 和 Panic 处理，或者调用 "),t("code",[s._v("runtime.exit")]),s._v(" 退出")])]),s._v(" "),t("p",[s._v("调度器的生命周期几乎占满了 Go 程序的一生， "),t("code",[s._v("runtime.main")]),s._v(" 的 goroutine 执行之前都是为调度器做准备工作，"),t("code",[s._v("runtime.main")]),s._v("  的 goroutine 的运行才是调度器真正的开始，直到 "),t("code",[s._v("runtime.main")]),s._v("  的结束。")]),s._v(" "),t("h3",{attrs:{id:"_2-5-可视化-gmp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-可视化-gmp"}},[s._v("#")]),s._v(" 2.5 可视化 GMP")]),s._v(" "),t("h4",{attrs:{id:"_2-5-1-go-tool-trace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-go-tool-trace"}},[s._v("#")]),s._v(" 2.5.1 go tool trace")]),s._v(" "),t("p",[s._v("trace 工具可以记录运行时信息，能提供可视化的 Web 页面")]),s._v(" "),t("p",[s._v("以下是简单的测试代码，创建 trace （会运行在独立的 goroutine 中），然后 main 打印 “Hello World” 退出：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"log"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"os"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"runtime/trace"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// create trace file")]),s._v("\n\tf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("OpenFile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"trace.out"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("O_CREATE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("O_WRONLY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0666")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Fatalf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to create trace file: %v"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// remember to close")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defer")]),s._v(" f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// start trace goroutine")]),s._v("\n\terr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" trace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Fatalf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to start trace: %v"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// remember to stop")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defer")]),s._v(" trace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Stop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("执行程序会生成 "),t("code",[s._v("trace.out")]),s._v("，使用 trace 工具分析文件就可以在浏览器访问了")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ go tool trace trace.out\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("/01/12 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":57:41 Parsing trace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("/01/12 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":57:41 Splitting trace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("/01/12 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":57:41 Opening browser. Trace viewer is listening on http://127.0.0.1:37259\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在首页点击 "),t("code",[s._v("view trace")]),s._v(" 即可看到可视化的调度流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/image-20220112221549447.png",alt:"image-20220112221549447"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/vYyO9YJmam.png!large",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("G 信息")])]),s._v(" "),t("p",[s._v("点击 Gotoutine 的一段条形图，可以看到")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/image-20220112221803958.png",alt:"image-20220112221803958"}})]),s._v(" "),t("p",[s._v("其中 G0 为每个 M 一定会有的初始化的 G，而 G1 就是执行中的主协程了，在所选的这段时间中处于可运行和运行态。")]),s._v(" "),t("p",[t("strong",[s._v("M 信息")])]),s._v(" "),t("p",[s._v("点击 Threads 的一段可以看到：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/image-20220112222138530.png",alt:"image-20220112222138530"}})]),s._v(" "),t("p",[s._v("其中 M0 是初始化的 M0，而 M1 是用于执行主协程 G1 的线程")]),s._v(" "),t("p",[t("strong",[s._v("P 信息")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/image-20220112222432548.png",alt:"image-20220112222432548"}})]),s._v(" "),t("p",[s._v("G1 中调用了  "),t("code",[s._v("main.main")]),s._v(" ， 创建了 "),t("code",[s._v("trace goroutine")]),s._v(" G6。 G1 运行于 P0 上，G6 运行在 P1 上， 由于 M 和 P 是一一绑定的，这是看下 M 的信息会发现新的线程 M2 执行G6。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/image-20220112222824759.png",alt:"image-20220112222824759"}})]),s._v(" "),t("h4",{attrs:{id:"_2-5-2-debug-trace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-debug-trace"}},[s._v("#")]),s._v(" 2.5.2 debug trace")]),s._v(" "),t("p",[s._v("下面利用 debug 的形式来进行跟踪")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"time"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\ttime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Second"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ go build -o trace ./trace.go\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("GODEBUG")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("schedtrace"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" ./trace\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("GODEBUG")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("schedtrace"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" ./trace\nSCHED 0ms: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gomaxprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idleprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("threads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("spinningthreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idlethreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("runqueue")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nHello World\nSCHED 1005ms: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gomaxprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idleprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("threads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("spinningthreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idlethreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("runqueue")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nHello World\nSCHED 2006ms: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gomaxprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idleprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("threads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("spinningthreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idlethreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("runqueue")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nHello World\nSCHED 3007ms: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gomaxprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idleprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("threads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("spinningthreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idlethreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("runqueue")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nHello World\nSCHED 4009ms: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gomaxprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idleprocs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("threads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("spinningthreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("idlethreads")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("runqueue")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nHello World\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("SCHED")]),s._v(": 调试信息输出标志字符串，代表本行为 goroutine 调度器的输出")]),s._v(" "),t("li",[t("code",[s._v("1005ms")]),s._v(": 为程序启动到输出日志的时间")]),s._v(" "),t("li",[t("code",[s._v("gomaxprocs")]),s._v(": P 的数量，本例中为 16， 因为 gomaxprocs 默认与 CPU 的核心数量一致")]),s._v(" "),t("li",[t("code",[s._v("idleprocs")]),s._v(": 处于空闲状态的 P 的数量")]),s._v(" "),t("li",[t("code",[s._v("thread")]),s._v(": 线程数")]),s._v(" "),t("li",[t("code",[s._v("spiningthreads")]),s._v(": 自旋线程数，当 M 在本地队列，全局运行队列中找不到 G 则可以认为 M 正在自旋，也就是说 M 进入了循环寻找可运行 G 的状态")]),s._v(" "),t("li",[t("code",[s._v("runqueue")]),s._v(": Scheduler 全局队列中的 G 数量")]),s._v(" "),t("li",[t("code",[s._v("[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]")]),s._v(":  各个 P 中本地队列的 G 数量")])]),s._v(" "),t("h2",{attrs:{id:"_3-调度器场景解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-调度器场景解析"}},[s._v("#")]),s._v(" 3. 调度器场景解析")]),s._v(" "),t("h3",{attrs:{id:"_3-1-g1-创建-g2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-g1-创建-g2"}},[s._v("#")]),s._v(" 3.1 G1 创建 G2")]),s._v(" "),t("p",[s._v("P 拥有 G1，M1 获取 P 后开始运行 G1，G1 使用 "),t("code",[s._v("go func()")]),s._v(" 创建 G2，为了保证局部性 G2 优先加入到 P1 的本地队列。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/Pm8LOYcsWQ.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-2-本地队列执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-本地队列执行"}},[s._v("#")]),s._v(" 3.2 本地队列执行")]),s._v(" "),t("p",[s._v("G1 运行完成后 （"),t("code",[s._v("goexit")]),s._v(" 函数），M 上运行的 goroutine 切换为 G0， G0 负责调度时协程的切换（"),t("code",[s._v("schedule")]),s._v(" 函数）。从 P 的本地队列获取 G2，从 G0 切换到 G2，并开始运行 G2（"),t("code",[s._v("execute")]),s._v(" 函数）。实现了线程 M1 的复用。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/JWDtmKG3rK.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-3-本地队列容量已满"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-本地队列容量已满"}},[s._v("#")]),s._v(" 3.3 本地队列容量已满")]),s._v(" "),t("p",[s._v("假设每个 P 的队列长度为 3，G2 在运行时创建了 6 个 G，前 3 G（G3，G4，G5）已经加入 P1 的队列，此时 P1 的容量已满。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/UpjRxzIBd3.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-4-负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-负载均衡"}},[s._v("#")]),s._v(" 3.4 负载均衡")]),s._v(" "),t("p",[s._v("紧接着上面的场景，G2 创建 G7 时，P1 的本地队列已满，需要执行 "),t("strong",[s._v("负载均衡")]),s._v("（将 P1 中本地队列中前一半的 G 以及新创建的 G "),t("strong",[s._v("转移")]),s._v(" 至全局队列。实际上 不一定是新的 G，如果 G 在 G2 之后就会执行，就会被保存在本地队列，而已存在的 G 会被移动到全局队列）")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/chqTgsiuWi.png!large",alt:""}})]),s._v(" "),t("p",[s._v("移动至全局队列时，G 的顺序会被打乱，此时加入队列的顺序为 G3 G7 G4。")]),s._v(" "),t("h3",{attrs:{id:"_3-5-本地队列容量未满"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-本地队列容量未满"}},[s._v("#")]),s._v(" 3.5 本地队列容量未满")]),s._v(" "),t("p",[s._v("G2 创建 G8 时，P1 的本地队列未满，所以 G8 会被 "),t("strong",[s._v("优先")]),s._v(" 加入到 P1 的本地队列。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/nukEY92G6D.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-6-唤醒正在休眠的-m"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-唤醒正在休眠的-m"}},[s._v("#")]),s._v(" 3.6 唤醒正在休眠的 M")]),s._v(" "),t("p",[t("strong",[s._v("在创建 G 时，运行的 G 会尝试唤醒休眠的 P M 组合")])]),s._v(" "),t("p",[s._v("假设 G2 唤醒了 M2（和 P2 绑定），此时 M2 会运行 G0，但 P2 队列没有 G，此时 M2 就处于 "),t("strong",[s._v("自旋")]),s._v(" 状态（没有可运行 G 但处于运行状态，不断寻找 G）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/2FWNXSuHfX.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-7-从全局队列中获取-g"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-从全局队列中获取-g"}},[s._v("#")]),s._v(" 3.7 从全局队列中获取 G")]),s._v(" "),t("p",[s._v("M2 尝试从全局队列（GQ）取一批 G 放入 P2 的本地队列（函数："),t("code",[s._v("findrunnable()")]),s._v("）,M2 从全局队列取的 G 数量满足下列公式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("n = min( len(GQ)/GOMAXPROCS + 1, len(GQ/2) ) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("至少从 GQ 中获取一个 G，但不会一次获取过多的 G 到 P 的本地队列，这时 "),t("strong",[s._v("全局队列到 P 本地队列的负载均衡")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/0fn8DGqI8N.jpeg!large",alt:""}})]),s._v(" "),t("p",[s._v("假设场景中一共有 4 个 P （ "),t("code",[s._v("GOMAXPROCS")]),s._v(" 为 4 ），所以 M2 只能从全局队列取 1 个 G （G3）移动到 P2 本地队列，然后完成 G0 到 G3 的切换，运行 G3。")]),s._v(" "),t("h3",{attrs:{id:"_3-8-从-p-的本地队列中偷取-g-work-stealing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-从-p-的本地队列中偷取-g-work-stealing"}},[s._v("#")]),s._v(" 3.8 从 P 的本地队列中偷取 G (work stealing)")]),s._v(" "),t("p",[s._v("假设 G2 一直在 M1 上运行，经过 2 轮之后， M2 已经把 G7, G4 从全局队列中获取并完成运行，全局队列和 P2 的本地队列均已无可运行 G，如下图左半部分所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/image/golang/concurrency/gmp/qn1NRMLqnp.png!large",alt:""}})]),s._v(" "),t("p",[s._v("全局队列已经没有 G, 那么 M 就会执行 work stealing, 从其他持有 G 的 P 中偷取一半 G 放入自己的 P 本地队列。上图右半部分， M2 从 M1 的 P1 本地队列获取 G8 来运行。")]),s._v(" "),t("h3",{attrs:{id:"_3-9-自旋线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-自旋线程"}},[s._v("#")]),s._v(" 3.9 自旋线程")]),s._v(" "),t("p",[s._v("G1 本地队列 G5、G6 已经被其他 M 偷走并运行完成，当前 M1 和 M2 分别在运行 G2 和 G8，M3 和 M4 没有可运行的 G，此时 M3 和 M4 处于 "),t("strong",[s._v("自旋状态")]),s._v("，它们不断寻找可运行的 G。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.learnku.com/uploads/images/202003/12/58489/1DjlseEGTT.png!large",alt:""}})]),s._v(" "),t("p",[s._v("处于自旋状态的线程是正在运行的，没有执行 G 而是寻找可运行的 G 。")]),s._v(" "),t("p",[s._v("那么为什么不销毁线程呢？")]),s._v(" "),t("p",[s._v("因为需要 "),t("strong",[s._v("当有新的 G 创建时，立刻有 M 能够运行它")]),s._v("，线程的创建和销毁是需要时间成本的，频繁的创建和销毁会增加时延降低效率。但是过多的自旋线程也会造成 CPU 资源的浪费，所以系统中最多有 "),t("code",[s._v("GOMAXPROCS")]),s._v(" 个自旋线程，而多余的空线程会进入休眠状态。")]),s._v(" "),t("h3",{attrs:{id:"_3-10-g-发生阻塞系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-g-发生阻塞系统调用"}},[s._v("#")]),s._v(" 3.10 G 发生阻塞系统调用")]),s._v(" "),t("p",[s._v("假设当前除了 M3 和 M4 为自旋线程，还有 M5 和 M6 为空闲线程（没有和 P 绑定，处于休眠状态。当前 P 的最大数量为 4，M 的数量满足 M >= P）。当 M2（P2 绑定）执行的 G8 创建了 G9 并且 G8 进行了 "),t("strong",[s._v("阻塞的系统调用")]),s._v("，此时 P2 会和 M2 解绑，P2 会进行如下判断：")]),s._v(" "),t("ul",[t("li",[s._v("若 P2 的本地队列有 G 或者 全局队列中有 G，且存在空闲的 M ，P2 会马上唤醒一个 M 与之绑定")]),s._v(" "),t("li",[s._v("否则，P 会加入到空闲 P 列表，等待 M 来获取可用的 P")])]),s._v(" "),t("p",[s._v("下图中，P2 的本地队列中有 G9，故可以和 M5 绑定")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.learnku.com/uploads/images/202003/12/58489/k3HKE9U21M.png!large",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-11-g-发生非阻塞系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-g-发生非阻塞系统调用"}},[s._v("#")]),s._v(" 3.11 G 发生非阻塞系统调用")]),s._v(" "),t("p",[s._v("当 G8 创建了 G9，加入此时 G8 发生了 "),t("strong",[s._v("非阻塞的系统调用")]),s._v("。")]),s._v(" "),t("p",[s._v("M2 和 P2 会解绑，但 M2 会记住 P2 ，之后 G8 和 M2 进入 "),t("strong",[s._v("系统调用状态")]),s._v("。当 G8 和 M2 退出系统调用时，会尝试再次获取 P2：")]),s._v(" "),t("ul",[t("li",[s._v("若无法获取 P2，则获取空闲的 P")]),s._v(" "),t("li",[s._v("若无空闲 P ，则 G8 将被标记为可运行状态，加入全局队列。此时 M2 因无 P 与之绑定将进入休眠状态（长时间的休眠等待将被 GC 回收销毁）")])]),s._v(" "),t("h2",{attrs:{id:"_4-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[s._v("#")]),s._v(" 4. 小结")]),s._v(" "),t("p",[s._v("Go 的调度器轻量且简单，让 Go 具有原生的并发能力。"),t("strong",[s._v("其本质是将大量的 goroutine 分配到少量的线程上执行，并利用多核并行，实现更强大的并发")])]),s._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[s._v("#")]),s._v(" Reference")]),s._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://learnku.com/articles/41728",target:"_blank",rel:"noopener noreferrer"}},[s._v("Golang 调度器 GMP 原理与调度全分析"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://learnku.com/blog/Aceld",target:"_blank",rel:"noopener noreferrer"}},[s._v("Aceld"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[s._v("进程控制块"),t("OutboundLink")],1),s._v(" wikipedia")])])])}),[],!1,null,null,null);a.default=r.exports}}]);