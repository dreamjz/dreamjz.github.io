import{_ as n,Z as s,$ as a,a3 as e}from"./framework-dee406ed.js";const o={},t=e(`<h1 id="_14-13-在多核心上并行计算" tabindex="-1"><a class="header-anchor" href="#_14-13-在多核心上并行计算" aria-hidden="true">#</a> 14.13 在多核心上并行计算</h1><p>假设有 <code>NCPU</code> 个 CPU 核心，想把计算量分成 <code>NCPU</code> 个部分，每一个部分都和其他部分并行运行。</p><p>这可以通过以下代码所示的方式完成</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">DoAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sem <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> NCPU<span class="token punctuation">)</span> <span class="token comment">// Buffering optional but sensible</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">go</span> <span class="token function">DoPart</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Drain the channel sem, waiting for NCPU tasks to complete</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token operator">&lt;-</span>sem <span class="token comment">// wait for one task to complete</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// All done.</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">DoPart</span><span class="token punctuation">(</span>sem <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do the part of the computation</span>
    sem <span class="token operator">&lt;-</span><span class="token number">1</span> <span class="token comment">// signal that this piece is done</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span>NCPU<span class="token punctuation">)</span> <span class="token comment">// runtime.GOMAXPROCS = NCPU</span>
    <span class="token function">DoAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>DoAll()</code> 函数创建了一个 <code>sem</code> 通道，每个并行计算都将在对其发送完成信号；在一个 <code>for</code> 循环中 <code>NCPU</code> 个协程被启动了，每个协程会承担 <code>1/NCPU</code> 的工作量。每一个 <code>DoPart()</code> 协程都会向 <code>sem</code> 通道发送完成信号。</p></li><li><p><code>DoAll()</code> 会在 <code>for</code> 循环中等待 <code>NCPU</code> 个协程完成：<code>sem</code> 通道就像一个信号量，这份代码展示了一个经典的信号量模式。</p></li></ul>`,5),p=[t];function c(l,i){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","14.13.html.vue"]]);export{d as default};
