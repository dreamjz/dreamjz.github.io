import{_ as o,Z as p,$ as l,a0 as n,a2 as e,a1 as s,a4 as t,H as c}from"./framework-d03928c9.js";const i={},r=t(`<h2 id="_6-6-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_6-6-1-设计原理" aria-hidden="true">#</a> 6.6.1 设计原理</h2><h3 id="i-o-模型" tabindex="-1"><a class="header-anchor" href="#i-o-模型" aria-hidden="true">#</a> I/O 模型</h3><p>操作系统中包含：</p><ol><li>阻塞 I/O</li><li>非阻塞 I/O</li><li>信号驱动 I/O</li><li>异步 I/O</li><li>I/O 多路复用</li></ol><h4 id="阻塞-i-o" tabindex="-1"><a class="header-anchor" href="#阻塞-i-o" aria-hidden="true">#</a> 阻塞 I/O</h4><p>阻塞 I/O 是最常见的 I/O 模型，通过 <code>read</code> 或者 <code>write</code> 等系统调用读写文件或者网络时，应用程序会被阻塞：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>read</code> 系统调用时，应用程序会从用户态陷入内核态，内核会检查文件描述符是否可读；当文件描述符中存在数据时，操作系统内核会将准备好的数据拷贝给应用程序并交回控制权。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030149993.png" alt="blocking-io-mode" tabindex="0" loading="lazy"><figcaption>blocking-io-mode</figcaption></figure><h4 id="非阻塞-i-o" tabindex="-1"><a class="header-anchor" href="#非阻塞-i-o" aria-hidden="true">#</a> 非阻塞 I/O</h4><p>当进程把一个文件描述符设置成非阻塞时，执行 <code>read</code> 和 <code>write</code> 等 I/O 操作会立刻返回。</p><p>在 C 语言中，可以使用如下所示的代码片段将一个文件描述符设置成非阻塞的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flags <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),u={href:"https://github.com/torvalds/linux/blob/f757165705e92db62f85a1ad287e9251d1f2cd82/fs/fcntl.c#L448",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"fcntl",-1),k=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030151972.png",alt:"non-blocking-io-mode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"non-blocking-io-mode")],-1),m=n("p",null,"进程使用非阻塞的 I/O 操作时，可以在等待过程中执行其他任务，提高 CPU 的利用率。",-1),v=n("h4",{id:"i-o-多路复用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-o-多路复用","aria-hidden":"true"},"#"),s(" I/O 多路复用")],-1),_=n("p",null,"I/O 多路复用被用来处理同一个事件循环中的多个 I/O 事件。I/O 多路复用需要使用特定的系统调用。",-1),b={href:"https://github.com/torvalds/linux/blob/f757165705e92db62f85a1ad287e9251d1f2cd82/fs/select.c#L722",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"select",-1),h=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>restrict readfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>restrict writefds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>restrict errorfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>restrict timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>poll</code> 函数，它使用链表存储文件描述符，摆脱了 1024 的数量上限。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030152214.png" alt="io-multiplexing" tabindex="0" loading="lazy"><figcaption>io-multiplexing</figcaption></figure><p>多路复用函数会阻塞的监听一组文件描述符，当文件描述符的状态转变为可读或者可写时，<code>select</code> 会返回可读或者可写事件的个数，应用程序可以在输入的文件描述符中查找哪些可读或者可写，然后执行相应的操作。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030152024.png" alt="io-multiplexing-mode" tabindex="0" loading="lazy"><figcaption>io-multiplexing-mode</figcaption></figure><p>I/O 多路复用模型是效率较高的 I/O 模型，它可以同时阻塞监听了一组文件描述符的状态。很多高性能的服务和应用程序都会使用这一模型来处理 I/O 操作，例如：Redis 和 Nginx 等。</p><h3 id="多模块" tabindex="-1"><a class="header-anchor" href="#多模块" aria-hidden="true">#</a> 多模块</h3><p>虽然 <code>select</code> 也可以提供 I/O 多路复用的能力，但是使用它有比较多的限制：</p><ul><li>监听能力有限 — 最多只能监听 1024 个文件描述符</li><li>内存拷贝开销大 ， 需要维护一个较大的数据结构存储文件描述符，该结构需要拷贝到内核中；</li><li>时间复杂度 O(n) ， 返回准备就绪的事件个数后，需要遍历所有的文件描述符</li></ul><p>为了提高 I/O 多路复用的性能，不同的操作系统也都实现了自己的 I/O 多路复用函数，例如：<code>epoll</code>、<code>kqueue</code> 和 <code>evport</code> 等。</p><p>Go 语言为了提高在不同操作系统上的 I/O 操作性能，使用平台特定的函数实现了多个版本的网络轮询模块：</p>`,11),f={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_epoll.go",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"src/runtime/netpoll_epoll.go",-1),y={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_kqueue.go",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"src/runtime/netpoll_kqueue.go",-1),x={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_solaris.go",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"src/runtime/netpoll_solaris.go",-1),O={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_windows.go",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"src/runtime/netpoll_windows.go",-1),G={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_aix.go",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"src/runtime/netpoll_aix.go",-1),z={href:"https://github.com/golang/go/blob/master/src/runtime/netpoll_fake.go",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"src/runtime/netpoll_fake.go",-1),R=t(`<p>这些模块在不同平台上实现了相同的功能，构成了一个常见的树形结构。编译器在编译 Go 语言程序时，会根据<strong>目标平台</strong>选择树中特定的分支进行编译：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030154960.png" alt="netpoll-modules" tabindex="0" loading="lazy"><figcaption>netpoll-modules</figcaption></figure><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><p><code>epoll</code>、<code>kqueue</code>、<code>solaries</code> 等多路复用模块都要实现以下五个函数，这五个函数构成一个虚拟的接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpollinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">netpollopen</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">,</span> pd <span class="token operator">*</span>pollDesc<span class="token punctuation">)</span> <span class="token builtin">int32</span>
<span class="token keyword">func</span> <span class="token function">netpoll</span><span class="token punctuation">(</span>delta <span class="token builtin">int64</span><span class="token punctuation">)</span> gList
<span class="token keyword">func</span> <span class="token function">netpollBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">netpollIsPollDescriptor</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q={href:"https://draveness.me/golang/tree/runtime.netpollinit",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.netpollinit",-1),S={href:"https://draveness.me/golang/tree/sync.Once",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"sync.Once",-1),N=n("code",null,"netpollInited",-1),W={href:"https://draveness.me/golang/tree/runtime.netpollopen",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.netpollopen",-1),F={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.netpoll",-1),A=n("ul",null,[n("li",null,"若参数小于 0，无限期等待文件描述符就绪"),n("li",null,"若参数等于 0，非阻塞地轮询网络"),n("li",null,"若参数大于 0，阻塞特定时间轮询网络")],-1),U={href:"https://draveness.me/golang/tree/runtime.netpollBreak",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"runtime.netpollBreak",-1),V={href:"https://draveness.me/golang/tree/runtime.netpollIsPollDescriptor",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.netpollIsPollDescriptor",-1),X=n("h2",{id:"_6-6-2-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-6-2-数据结构","aria-hidden":"true"},"#"),s(" 6.6.2 数据结构")],-1),Z={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.pollDesc",-1),J=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> pollDesc <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	link <span class="token operator">*</span>pollDesc

	lock    mutex
	fd      <span class="token builtin">uintptr</span>
	<span class="token operator">...</span>
	rseq    <span class="token builtin">uintptr</span>
	rg      <span class="token builtin">uintptr</span>
	rt      timer
	rd      <span class="token builtin">int64</span>
	wseq    <span class="token builtin">uintptr</span>
	wg      <span class="token builtin">uintptr</span>
	wt      timer
	wd      <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>rseq</code> 和 <code>wseq</code> ， 表示文件描述符被重用或者计时器被重置</li><li><code>rg</code> 和 <code>wg</code> ， 表示二进制的信号量，可能为 <code>pdReady</code>、<code>pdWait</code>、等待文件描述符可读或者可写的 Goroutine 以及 <code>nil</code></li><li><code>rd</code> 和 <code>wd</code> ， 等待文件描述符可读或者可写的截止日期</li><li><code>rt</code> 和 <code>wt</code> ， 用于等待文件描述符的计时器</li></ul>`,2),M={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"runtime.pollDesc",-1),Y=n("code",null,"link",-1),nn=n("strong",null,"链表",-1),sn={href:"https://draveness.me/golang/tree/runtime.pollCache",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.pollCache",-1),en=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> pollCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	lock  mutex
	first <span class="token operator">*</span>pollDesc
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),tn={href:"https://draveness.me/golang/tree/runtime.pollCache",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.pollCache",-1),pn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030158521.png",alt:"poll-desc-list",tabindex:"0",loading:"lazy"}),n("figcaption",null,"poll-desc-list")],-1),ln={href:"https://draveness.me/golang/tree/runtime.pollCache.alloc",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"runtime.pollCache.alloc",-1),rn={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.pollDesc",-1),dn={href:"https://draveness.me/golang/tree/runtime.persistentAlloc",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"runtime.persistentAlloc",-1),mn=n("code",null,"epoll",-1),vn=n("code",null,"kqueue",-1),_n=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>pollCache<span class="token punctuation">)</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>pollDesc <span class="token punctuation">{</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> pdSize <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>pollDesc<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		n <span class="token operator">:=</span> pollBlockSize <span class="token operator">/</span> pdSize
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			n <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
		mem <span class="token operator">:=</span> <span class="token function">persistentalloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span>pdSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			pd <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> i<span class="token operator">*</span>pdSize<span class="token punctuation">)</span><span class="token punctuation">)</span>
			pd<span class="token punctuation">.</span>link <span class="token operator">=</span> c<span class="token punctuation">.</span>first
			c<span class="token punctuation">.</span>first <span class="token operator">=</span> pd
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	pd <span class="token operator">:=</span> c<span class="token punctuation">.</span>first
	c<span class="token punctuation">.</span>first <span class="token operator">=</span> pd<span class="token punctuation">.</span>link
	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">return</span> pd
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),bn={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime.pollDesc",-1),hn={href:"https://draveness.me/golang/tree/runtime.pollCache.free",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"runtime.pollCache.free",-1),wn={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"runtime.pollDesc",-1),Dn=n("strong",null,"插入链表的最前面",-1),xn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>pollCache<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	pd<span class="token punctuation">.</span>link <span class="token operator">=</span> c<span class="token punctuation">.</span>first
	c<span class="token punctuation">.</span>first <span class="token operator">=</span> pd
	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),In={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"runtime.pollDesc",-1),Ln={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollOpen",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.poll_runtime_pollOpen",-1),Pn=n("h2",{id:"_6-6-3-多路复用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-6-3-多路复用","aria-hidden":"true"},"#"),s(" 6.6.3 多路复用")],-1),zn=n("p",null,[s("网络轮询器实际上是对 I/O "),n("strong",null,"多路复用技术"),s("的封装.")],-1),En=n("h3",{id:"初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化","aria-hidden":"true"},"#"),s(" 初始化")],-1),Rn=n("p",null,"因为文件 I/O、网络 I/O 以及计时器都依赖网络轮询器，所以 Go 语言会通过以下两条不同路径初始化网络轮询器：",-1),qn={href:"https://draveness.me/golang/tree/internal/poll.pollDesc.init",target:"_blank",rel:"noopener noreferrer"},Bn=n("code",null,"internal/poll.pollDesc.init",-1),Sn={href:"https://draveness.me/golang/tree/net.netFD.init",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"net.netFD.init",-1),Nn={href:"https://draveness.me/golang/tree/os.newFile",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"os.newFile",-1),jn={href:"https://draveness.me/golang/tree/runtime.doaddtimer",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"runtime.doaddtimer",-1),Tn={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollServerInit",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.poll_runtime_pollServerInit",-1),Un={href:"https://draveness.me/golang/tree/runtime.netpollGenericInit",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"runtime.netpollGenericInit",-1),Vn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">poll_runtime_pollServerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">netpollGenericInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">netpollGenericInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netpollInited<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netpollInitLock<span class="token punctuation">)</span>
		<span class="token keyword">if</span> netpollInited <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">netpollinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netpollInited<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netpollInitLock<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Kn={href:"https://draveness.me/golang/tree/runtime.netpollGenericInit",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"runtime.netpollGenericInit",-1),Zn={href:"https://draveness.me/golang/tree/runtime.netpollinit",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"runtime.netpollinit",-1),Jn=n("code",null,"epoll",-1),Mn=n("li",null,[s("是调用 "),n("code",null,"epollcreate1"),s(" 创建一个新的 "),n("code",null,"epoll"),s(" 文件描述符，这个文件描述符会在整个程序的生命周期中使用；")],-1),Qn={href:"https://draveness.me/golang/tree/runtime.nonblockingPipe",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"runtime.nonblockingPipe",-1),ns=n("li",null,[s("使用 "),n("code",null,"epollctl"),s(" 将用于读取数据的文件描述符打包成 "),n("code",null,"epollevent"),s(" 事件加入监听；")],-1),ss=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	epfd <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	netpollBreakRd<span class="token punctuation">,</span> netpollBreakWr <span class="token builtin">uintptr</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">netpollinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	epfd <span class="token operator">=</span> <span class="token function">epollcreate1</span><span class="token punctuation">(</span>_EPOLL_CLOEXEC<span class="token punctuation">)</span>
	r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">nonblockingPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ev <span class="token operator">:=</span> epollevent<span class="token punctuation">{</span>
		events<span class="token punctuation">:</span> _EPOLLIN<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>netpollBreakRd
	<span class="token function">epollctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span> _EPOLL_CTL_ADD<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span>
	netpollBreakRd <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	netpollBreakWr <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),as={href:"https://draveness.me/golang/tree/runtime.netpollBreak",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.netpollBreak",-1),ts=n("code",null,"epoll",-1),os=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpollBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> b <span class="token builtin">byte</span>
		n <span class="token operator">:=</span> <span class="token function">write</span><span class="token punctuation">(</span>netpollBreakWr<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token operator">-</span>_EINTR <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token operator">-</span>_EAGAIN <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="轮询事件" tabindex="-1"><a class="header-anchor" href="#轮询事件" aria-hidden="true">#</a> 轮询事件</h3>`,2),ps={href:"https://draveness.me/golang/tree/internal/poll.pollDesc.init",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"internal/poll.pollDesc.init",-1),cs={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollOpen",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"runtime.poll_runtime_pollOpen",-1),rs={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},us=n("code",null,"runtime.pollDesc",-1),ds={href:"https://draveness.me/golang/tree/runtime.netpollopen",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.netpollopen",-1),ms=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">poll_runtime_pollOpen</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pd <span class="token operator">:=</span> pollcache<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">if</span> pd<span class="token punctuation">.</span>wg <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>wg <span class="token operator">!=</span> pdReady <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: blocked write on free polldesc&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	pd<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd
	pd<span class="token punctuation">.</span>closing <span class="token operator">=</span> <span class="token boolean">false</span>
	pd<span class="token punctuation">.</span>everr <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token operator">...</span>
	pd<span class="token punctuation">.</span>wseq<span class="token operator">++</span>
	pd<span class="token punctuation">.</span>wg <span class="token operator">=</span> <span class="token number">0</span>
	pd<span class="token punctuation">.</span>wd <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>

	<span class="token keyword">var</span> errno <span class="token builtin">int32</span>
	errno <span class="token operator">=</span> <span class="token function">netpollopen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> pd<span class="token punctuation">)</span>
	<span class="token keyword">return</span> pd<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vs={href:"https://draveness.me/golang/tree/runtime.netpollopen",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"runtime.netpollopen",-1),bs=n("code",null,"epollctl",-1),gs=n("code",null,"epfd",-1),hs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpollopen</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">,</span> pd <span class="token operator">*</span>pollDesc<span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ev epollevent
	ev<span class="token punctuation">.</span>events <span class="token operator">=</span> _EPOLLIN <span class="token operator">|</span> _EPOLLOUT <span class="token operator">|</span> _EPOLLRDHUP <span class="token operator">|</span> _EPOLLET
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> pd
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token function">epollctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span> _EPOLL_CTL_ADD<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h3><h4 id="等待事件" tabindex="-1"><a class="header-anchor" href="#等待事件" aria-hidden="true">#</a> 等待事件</h4>`,3),fs={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollWait",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"runtime.poll_runtime_pollWait",-1),ys={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},Ds=n("code",null,"runtime.pollDesc",-1),xs={href:"https://draveness.me/golang/tree/runtime.netpollblock",target:"_blank",rel:"noopener noreferrer"},Is=n("code",null,"runtime.netpollblock",-1),Os=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">poll_runtime_pollWait</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">netpollblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">netpollblock</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">,</span> waitio <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	gpp <span class="token operator">:=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rg
	<span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token char">&#39;w&#39;</span> <span class="token punctuation">{</span>
		gpp <span class="token operator">=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>wg
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> waitio <span class="token operator">||</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">gopark</span><span class="token punctuation">(</span>netpollblockcommit<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>gpp<span class="token punctuation">)</span><span class="token punctuation">,</span> waitReasonIOWait<span class="token punctuation">,</span> traceEvGoBlockNet<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ls={href:"https://draveness.me/golang/tree/runtime.netpollblock",target:"_blank",rel:"noopener noreferrer"},Gs=n("code",null,"runtime.netpollblock",-1),Ps={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},zs=n("code",null,"runtime.gopark",-1),Es=n("h4",{id:"轮询等待",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#轮询等待","aria-hidden":"true"},"#"),s(" 轮询等待")],-1),Rs={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"runtime.netpoll",-1),Bs=t(`<ol><li>根据传入的 <code>delay</code> 计算 <code>epoll</code> 系统调用需要等待的时间；</li><li>调用 <code>epollwait</code> 等待可读或者可写事件的发生；</li><li>在循环中依次处理 <code>epollevent</code> 事件；</li></ol><p>因为传入 <code>delay</code> 的单位是纳秒，下面这段代码会将纳秒转换成毫秒：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpoll</span><span class="token punctuation">(</span>delay <span class="token builtin">int64</span><span class="token punctuation">)</span> gList <span class="token punctuation">{</span>
	<span class="token keyword">var</span> waitms <span class="token builtin">int32</span>
	<span class="token keyword">if</span> delay <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		waitms <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> delay <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		waitms <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> delay <span class="token operator">&lt;</span> <span class="token number">1e6</span> <span class="token punctuation">{</span>
		waitms <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> delay <span class="token operator">&lt;</span> <span class="token number">1e15</span> <span class="token punctuation">{</span>
		waitms <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>delay <span class="token operator">/</span> <span class="token number">1e6</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		waitms <span class="token operator">=</span> <span class="token number">1e9</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Ss={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.netpoll",-1),Ns=n("code",null,"epollwait",-1),Ws=n("code",null,"epollwait",-1),js=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> events <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span>epollevent
retry<span class="token punctuation">:</span>
	n <span class="token operator">:=</span> <span class="token function">epollwait</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>events<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> waitms<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> waitms <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> gList<span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">goto</span> retry
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>epollwait</code> 系统调用返回的值大于 0 时，意味着被监控的文件描述符出现了待处理的事件，我们在如下所示的循环中会依次处理这些事件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> toRun gList
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ev <span class="token operator">:=</span> <span class="token operator">&amp;</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>netpollBreakRd <span class="token punctuation">{</span>
			<span class="token operator">...</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">var</span> mode <span class="token builtin">int32</span>
		<span class="token keyword">if</span> ev<span class="token punctuation">.</span>events<span class="token operator">&amp;</span><span class="token punctuation">(</span>_EPOLLIN<span class="token operator">|</span>_EPOLLRDHUP<span class="token operator">|</span>_EPOLLHUP<span class="token operator">|</span>_EPOLLERR<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			mode <span class="token operator">+=</span> <span class="token char">&#39;r&#39;</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> mode <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			pd <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			pd<span class="token punctuation">.</span>everr <span class="token operator">=</span> <span class="token boolean">false</span>
			<span class="token function">netpollready</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>toRun<span class="token punctuation">,</span> pd<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> toRun
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理的事件总共包含两种：</p>`,4),Fs={href:"https://draveness.me/golang/tree/runtime.netpollBreak",target:"_blank",rel:"noopener noreferrer"},Ts=n("code",null,"runtime.netpollBreak",-1),As={href:"https://draveness.me/golang/tree/runtime.netpollready",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"runtime.netpollready",-1),Hs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpollready</span><span class="token punctuation">(</span>toRun <span class="token operator">*</span>gList<span class="token punctuation">,</span> pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> rg<span class="token punctuation">,</span> wg <span class="token operator">*</span>g
	<span class="token operator">...</span>
	<span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">||</span> mode <span class="token operator">==</span> <span class="token char">&#39;r&#39;</span><span class="token operator">+</span><span class="token char">&#39;w&#39;</span> <span class="token punctuation">{</span>
		wg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token char">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> wg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		toRun<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vs={href:"https://draveness.me/golang/tree/runtime.netpollunblock",target:"_blank",rel:"noopener noreferrer"},Ks=n("code",null,"runtime.netpollunblock",-1),Xs={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},Zs=n("code",null,"runtime.pollDesc",-1),$s=n("code",null,"pdReady",-1),Js=n("code",null,"toRun",-1),Ms={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},Qs=n("code",null,"runtime.netpoll",-1),Ys={href:"https://draveness.me/golang/tree/runtime.injectglist",target:"_blank",rel:"noopener noreferrer"},na=n("code",null,"runtime.injectglist",-1),sa=n("h3",{id:"截止日期",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#截止日期","aria-hidden":"true"},"#"),s(" 截止日期")],-1),aa=n("p",null,"网络轮询器和计时器的关系非常紧密，因为：",-1),ea=n("ol",null,[n("li",null,"网络轮询器负责计时器的唤醒"),n("li",null,"文件和网络 I/O 的截止日期也由网络轮询器负责处理； 截止日期在 I/O 操作中，尤其是网络调用中很关键，网络请求存在很高的不确定因素，需要设置一个截止日期保证程序的正常运行")],-1),ta={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollSetDeadline",target:"_blank",rel:"noopener noreferrer"},oa=n("code",null,"runtime.poll_runtime_pollSetDeadline",-1),pa=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">poll_runtime_pollSetDeadline</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> d <span class="token builtin">int64</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rd0<span class="token punctuation">,</span> wd0 <span class="token operator">:=</span> pd<span class="token punctuation">.</span>rd<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>wd
	<span class="token keyword">if</span> d <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		d <span class="token operator">+=</span> <span class="token function">nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	pd<span class="token punctuation">.</span>rd <span class="token operator">=</span> d
	<span class="token operator">...</span>
	<span class="token keyword">if</span> pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>f <span class="token operator">=</span> netpollReadDeadline
			pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>arg <span class="token operator">=</span> pd
			pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>seq <span class="token operator">=</span> pd<span class="token punctuation">.</span>rseq
			<span class="token function">resettimer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rt<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>rd<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> pd<span class="token punctuation">.</span>rd <span class="token operator">!=</span> rd0 <span class="token punctuation">{</span>
		pd<span class="token punctuation">.</span>rseq<span class="token operator">++</span>
		<span class="token keyword">if</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">modtimer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rt<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>rd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> rtf<span class="token punctuation">,</span> pd<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>rseq<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token function">deltimer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rt<span class="token punctuation">)</span>
			pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),la={href:"https://draveness.me/golang/tree/runtime.pollDesc",target:"_blank",rel:"noopener noreferrer"},ca=n("code",null,"runtime.pollDesc",-1),ia={href:"https://draveness.me/golang/tree/runtime.resettimer",target:"_blank",rel:"noopener noreferrer"},ra=n("code",null,"runtime.resettimer",-1),ua={href:"https://draveness.me/golang/tree/runtime.modtimer",target:"_blank",rel:"noopener noreferrer"},da=n("code",null,"runtime.modtimer",-1),ka={href:"https://draveness.me/golang/tree/runtime.deltimer",target:"_blank",rel:"noopener noreferrer"},ma=n("code",null,"runtime.deltimer",-1),va={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollSetDeadline",target:"_blank",rel:"noopener noreferrer"},_a=n("code",null,"runtime.poll_runtime_pollSetDeadline",-1),ba=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> rg <span class="token operator">*</span>g
	<span class="token keyword">if</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			rg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> rg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">netpollgoready</span><span class="token punctuation">(</span>rg<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ga={href:"https://draveness.me/golang/tree/runtime.netpollgoready",target:"_blank",rel:"noopener noreferrer"},ha=n("code",null,"runtime.netpollgoready",-1),fa={href:"https://draveness.me/golang/tree/runtime.poll_runtime_pollSetDeadline",target:"_blank",rel:"noopener noreferrer"},wa=n("code",null,"runtime.poll_runtime_pollSetDeadline",-1),ya={href:"https://draveness.me/golang/tree/runtime.netpollgoready",target:"_blank",rel:"noopener noreferrer"},Da=n("code",null,"runtime.netpollgoready",-1),xa={href:"https://draveness.me/golang/tree/runtime.netpollDeadline",target:"_blank",rel:"noopener noreferrer"},Ia=n("code",null,"runtime.netpollDeadline",-1),Oa={href:"https://draveness.me/golang/tree/runtime.netpollReadDeadline",target:"_blank",rel:"noopener noreferrer"},La=n("code",null,"runtime.netpollReadDeadline",-1),Ga={href:"https://draveness.me/golang/tree/runtime.netpollWriteDeadline",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"runtime.netpollWriteDeadline",-1),za=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030206429.png",alt:"netpoll-deadline",tabindex:"0",loading:"lazy"}),n("figcaption",null,"netpoll-deadline")],-1),Ea={href:"https://draveness.me/golang/tree/runtime.netpolldeadlineimpl",target:"_blank",rel:"noopener noreferrer"},Ra=n("code",null,"runtime.netpolldeadlineimpl",-1),qa={href:"https://draveness.me/golang/tree/runtime.netpollgoready",target:"_blank",rel:"noopener noreferrer"},Ba=n("code",null,"runtime.netpollgoready",-1),Sa=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpolldeadlineimpl</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">,</span> read<span class="token punctuation">,</span> write <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	currentSeq <span class="token operator">:=</span> pd<span class="token punctuation">.</span>rseq
	<span class="token keyword">if</span> <span class="token operator">!</span>read <span class="token punctuation">{</span>
		currentSeq <span class="token operator">=</span> pd<span class="token punctuation">.</span>wseq
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> seq <span class="token operator">!=</span> currentSeq <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> rg <span class="token operator">*</span>g
	<span class="token keyword">if</span> read <span class="token punctuation">{</span>
		pd<span class="token punctuation">.</span>rd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
		atomic<span class="token punctuation">.</span><span class="token function">StorepNoWB</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		rg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> rg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">netpollgoready</span><span class="token punctuation">(</span>rg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Goroutine 在被唤醒之后会意识到当前的 I/O 操作已经超时，可以根据需要选择重试请求或者中止调用。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,3),Ca={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-netpoller/",target:"_blank",rel:"noopener noreferrer"};function Na(Wa,ja){const a=c("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[n("a",u,[d,e(a)]),s("提供了操作文件描述符的能力，可以通过它修改文件描述符的特性。当我们将文件描述符修改成非阻塞后，读写文件会经历以下流程：")]),k,m,v,_,n("p",null,[s("最常见的系统调用是 "),n("a",b,[g,e(a)]),s("，该函数可以同时监听最多 1024 个文件描述符的可读或者可写状态：")]),h,n("ul",null,[n("li",null,[n("a",f,[w,e(a)])]),n("li",null,[n("a",y,[D,e(a)])]),n("li",null,[n("a",x,[I,e(a)])]),n("li",null,[n("a",O,[L,e(a)])]),n("li",null,[n("a",G,[P,e(a)])]),n("li",null,[n("a",z,[E,e(a)])])]),R,n("ul",null,[n("li",null,[n("a",q,[B,e(a)]),s(" — 初始化网络轮询器，通过 "),n("a",S,[C,e(a)]),s(" 和 "),N,s(" 变量保证函数只会调用一次")]),n("li",null,[n("a",W,[j,e(a)]),s(" — 监听文件描述符上的边缘触发事件，创建事件并加入监听")]),n("li",null,[n("a",F,[T,e(a)]),s(" — 轮询网络并返回一组已经准备就绪的 Goroutine，传入的参数会决定它的行为 "),A]),n("li",null,[n("a",U,[H,e(a)]),s(" — 唤醒网络轮询器，例如：计时器向前修改时间时会通过该函数中断网络轮询器")]),n("li",null,[n("a",V,[K,e(a)]),s(" — 判断文件描述符是否被轮询器使用")])]),X,n("p",null,[s("Go 语言网络轮询器会监听 "),n("a",Z,[$,e(a)]),s(" 结构体的状态，其封装了操作系统的文件描述符：")]),J,n("p",null,[n("a",M,[Q,e(a)]),s(" 结构体会使用 "),Y,s(" 字段串联成"),nn,s("存储在 "),n("a",sn,[an,e(a)]),s(" 中：")]),en,n("p",null,[n("a",tn,[on,e(a)]),s(" 是运行时包中的全局变量，该结构体中包含一个用于保护轮询数据的互斥锁和链表头：")]),pn,n("p",null,[s("运行时会在第一次调用 "),n("a",ln,[cn,e(a)]),s(" 方法时初始化总大小约为 4KB 的 "),n("a",rn,[un,e(a)]),s(" 结构体，"),n("a",dn,[kn,e(a)]),s(" 会保证这些数据结构初始化在不会触发垃圾回收的内存中，让这些数据结构只能被内部的 "),mn,s(" 和 "),vn,s(" 模块引用：")]),_n,n("p",null,[s("每次调用该结构体都会返回链表头还没有被使用的 "),n("a",bn,[gn,e(a)]),s("，这种批量初始化的做法能够增加网络轮询器的吞吐量。Go 语言运行时会调用 "),n("a",hn,[fn,e(a)]),s(" 方法释放已经用完的 "),n("a",wn,[yn,e(a)]),s(" 结构，它会直接将结构体"),Dn,s("：")]),xn,n("p",null,[s("上述方法没有重置 "),n("a",In,[On,e(a)]),s(" 结构体中的字段，该结构体被重复利用时才会由 "),n("a",Ln,[Gn,e(a)]),s(" 函数重置。")]),Pn,zn,En,Rn,n("ol",null,[n("li",null,[n("a",qn,[Bn,e(a)]),s(" — 通过 "),n("a",Sn,[Cn,e(a)]),s(" 和 "),n("a",Nn,[Wn,e(a)]),s(" 初始化网络 I/O 和文件 I/O 的轮询信息时")]),n("li",null,[n("a",jn,[Fn,e(a)]),s(" — 向处理器中增加新的计时器时")])]),n("p",null,[s("网络轮询器的初始化会使用 "),n("a",Tn,[An,e(a)]),s(" 和 "),n("a",Un,[Hn,e(a)]),s(" 两个函数：")]),Vn,n("p",null,[n("a",Kn,[Xn,e(a)]),s(" 会调用平台上特定实现的 "),n("a",Zn,[$n,e(a)]),s("，以 Linux 的"),Jn,s("为例：")]),n("ol",null,[Mn,n("li",null,[s("通过 "),n("a",Qn,[Yn,e(a)]),s(" 创建一个用于通信的管道；")]),ns]),ss,n("p",null,[s("初始化的管道提供了中断多路复用等待文件描述符中事件的方法，"),n("a",as,[es,e(a)]),s(" 会向管道中写入数据唤醒 "),ts,s("：")]),os,n("p",null,[s("调用 "),n("a",ps,[ls,e(a)]),s(" 初始化文件描述符时不止会初始化网络轮询器，还会通过 "),n("a",cs,[is,e(a)]),s(" 重置轮询信息 "),n("a",rs,[us,e(a)]),s(" 并调用 "),n("a",ds,[ks,e(a)]),s(" 初始化轮询事件：")]),ms,n("p",null,[n("a",vs,[_s,e(a)]),s("会调用 "),bs,s(" 向全局的轮询文件描述符 "),gs,s(" 中加入新的轮询事件监听文件描述符的可读和可写状态：")]),hs,n("p",null,[s("在文件描述符上执行读写操作时，若文件描述符不可读或者不可写，当前 Goroutine 会执行 "),n("a",fs,[ws,e(a)]),s(" 检查 "),n("a",ys,[Ds,e(a)]),s(" 的状态并调用 "),n("a",xs,[Is,e(a)]),s(" 等待文件描述符的可读或者可写：")]),Os,n("p",null,[n("a",Ls,[Gs,e(a)]),s(" 是 Goroutine 等待 I/O 事件的关键函数，它会使用运行时提供的 "),n("a",Ps,[zs,e(a)]),s(" 让出当前线程，将 Goroutine 转换到休眠状态并等待运行时的唤醒。")]),Es,n("p",null,[s("Go 语言的运行时会在调度或者系统监控中调用 "),n("a",Rs,[qs,e(a)]),s(" 轮询网络，该函数的执行过程可以分成以下几个部分：")]),Bs,n("p",null,[s("计算了需要等待的时间之后，"),n("a",Ss,[Cs,e(a)]),s(" 会执行 "),Ns,s(" 等待文件描述符转换成可读或者可写，若该函数返回了负值，可能会返回空的 Goroutine 列表或者重新调用 "),Ws,s(" 陷入等待：")]),js,n("ol",null,[n("li",null,[s("调用 "),n("a",Fs,[Ts,e(a)]),s(" 触发的事件，作用是中断网络轮询器；")]),n("li",null,[s("其他文件描述符的正常读写事件，对于这些事件，会交给 "),n("a",As,[Us,e(a)]),s(" 处理")])]),Hs,n("p",null,[n("a",Vs,[Ks,e(a)]),s(" 会在读写事件发生时，将 "),n("a",Xs,[Zs,e(a)]),s(" 中的读或者写信号量转换成 "),$s,s(" 并返回其中存储的 Goroutine；若返回的 Goroutine 不会为空，那么运行时会将该 Goroutine 会加入 "),Js,s(" 列表，并将列表中的全部 Goroutine 加入运行队列并等待调度器的调度。")]),n("p",null,[n("a",Ms,[Qs,e(a)]),s(" 返回的 Goroutine 列表都会被 "),n("a",Ys,[na,e(a)]),s(" 注入到处理器或者全局的运行队列上。因为系统监控 Goroutine 直接运行在线程上，所以它获取的 Goroutine 列表会直接加入全局的运行队列，其他 Goroutine 获取的列表都会加入 Goroutine 所在处理器的运行队列上。")]),sa,aa,ea,n("p",null,[s("设置截至日期需要"),n("a",ta,[oa,e(a)]),s("函数：")]),pa,n("p",null,[s("先使用截止日期计算出过期的时间点，然后根据 "),n("a",la,[ca,e(a)]),s(" 的状态做出以下不同的处理：")]),n("ol",null,[n("li",null,[s("若结构体中的计时器没有设置执行的函数时，该函数会设置计时器到期后执行的函数、传入的参数并调用 "),n("a",ia,[ra,e(a)]),s(" 重置计时器；")]),n("li",null,[s("若结构体的读截止日期已经被改变，我们会根据新的截止日期做出不同的处理： "),n("ol",null,[n("li",null,[s("若新的截止日期大于 0，调用 "),n("a",ua,[da,e(a)]),s(" 修改计时器；")]),n("li",null,[s("若新的截止日期小于 0，调用 "),n("a",ka,[ma,e(a)]),s(" 删除计时器；")])])])]),n("p",null,[s("在 "),n("a",va,[_a,e(a)]),s(" 的最后，会重新检查轮询信息中存储的截止日期：")]),ba,n("p",null,[s("若截止日期小于 0，上述代码会调用 "),n("a",ga,[ha,e(a)]),s(" 直接唤醒对应的 Goroutine。")]),n("p",null,[s("在 "),n("a",fa,[wa,e(a)]),s(" 中直接调用 "),n("a",ya,[Da,e(a)]),s(" 是相对比较特殊的情况。在正常情况下，运行时都会在计时器到期时调用 "),n("a",xa,[Ia,e(a)]),s("、"),n("a",Oa,[La,e(a)]),s(" 和 "),n("a",Ga,[Pa,e(a)]),s(" 三个函数：")]),za,n("p",null,[s("上述三个函数都会通过 "),n("a",Ea,[Ra,e(a)]),s(" 调用 "),n("a",qa,[Ba,e(a)]),s(" 直接唤醒相应的 Goroutine:")]),Sa,n("ol",null,[n("li",null,[n("a",Ca,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-netpoller/"),e(a)])])])])}const Ta=o(i,[["render",Na],["__file","06.6.netpoll.html.vue"]]);export{Ta as default};
