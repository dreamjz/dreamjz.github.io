import{_ as a,Z as t,$ as c,a0 as e,a1 as o,a2 as n,a4 as l,H as s}from"./framework-d03928c9.js";const i={},d=l('<h2 id="_1-rpc" tabindex="-1"><a class="header-anchor" href="#_1-rpc" aria-hidden="true">#</a> 1. RPC</h2><p>RPC(Remote Procedure Call，远程过程调用)是一种计算机通信协议，允许调用不同进程空间的程序。</p><p>RPC 的客户端和服务器可以在一台机器上，也可以在不同的机器上。使用时就像调用本地程序一样，无需关注内部的实现细节。</p><p>不同的应用程序之间的通信方式有很多，比如浏览器和服务器之间广泛使用的基于 HTTP 协议的 Restful API。与 RPC 相比，Restful API 有相对统一的标准，因而更通用，兼容性更好，支持不同的语言。HTTP 协议是基于文本的，一般具备更好的可读性。但是缺点也很明显：</p><ul><li>Restful 接口需要额外的定义，无论是客户端还是服务端，都需要额外的代码来处理，而 RPC 调用则更接近于直接调用。</li><li>基于 HTTP 协议的 Restful 报文冗余，承载了过多的无效信息，而 RPC 通常使用自定义的协议格式，减少冗余报文。</li><li>RPC 可以采用更高效的序列化协议，将文本转为二进制传输，获得更高的性能。</li><li>因为 RPC 的灵活性，所以更容易扩展和集成诸如注册中心、负载均衡等功能。</li></ul><h2 id="_2-geerpc" tabindex="-1"><a class="header-anchor" href="#_2-geerpc" aria-hidden="true">#</a> 2. GeeRPC</h2><p>GeeRPC 选择从零实现 Go 语言官方的标准库 <code>net/rpc</code>，并在此基础上，新增了协议交换(protocol exchange)、注册中心(registry)、服务发现(service discovery)、负载均衡(load balance)、超时处理(timeout processing)等特性。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',8),p={href:"https://geektutu.com/post/geerpc.html",target:"_blank",rel:"noopener noreferrer"};function h(_,u){const r=s("ExternalLinkIcon");return t(),c("div",null,[d,e("ol",null,[e("li",null,[e("a",p,[o("https://geektutu.com/post/geerpc.html"),n(r)])])])])}const P=a(i,[["render",h],["__file","04.0.preface.html.vue"]]);export{P as default};
