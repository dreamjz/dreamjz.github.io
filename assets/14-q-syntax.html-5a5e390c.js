import{_ as p,Z as o,$ as c,a0 as n,a1 as a,a2 as t,a3 as e,H as u}from"./framework-09afcf0b.js";const l={},i=e(`<p>比较两个切片可以使用两种方式：</p><ol><li>遍历切片比较每个元素，可以判断临界条件以快速失败提高性能</li><li>使用反射，<code>reflect.DeepEqual(x, y any) bool</code>，因为是通用型函数，并且使用反射获取类型信息，在有性能要求的场景中不建议使用</li></ol><h2 id="_1-实现" tabindex="-1"><a class="header-anchor" href="#_1-实现" aria-hidden="true">#</a> 1. 实现</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sliceEqual</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 异或运算</span>
	<span class="token comment">// 参与比较的切片不能为 nil</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>a2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a1 <span class="token punctuation">{</span>
		<span class="token keyword">if</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>判断临界条件：长度是否相同或比较的切片中含有 nil ，以快速失败提升性能</li><li>遍历比较每个元素</li></ol><h3 id="_1-1-单元测试" tabindex="-1"><a class="header-anchor" href="#_1-1-单元测试" aria-hidden="true">#</a> 1.1 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test_sliceEqual</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
       a1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
       a2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token punctuation">}</span>
    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
       name <span class="token builtin">string</span>
       args args
       want <span class="token builtin">bool</span>
    <span class="token punctuation">}</span><span class="token punctuation">{</span>
       <span class="token comment">// TODO: Add test cases.</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>a1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
       t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> got <span class="token operator">:=</span> <span class="token function">sliceEqual</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a1<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> got <span class="token operator">!=</span> tt<span class="token punctuation">.</span>want <span class="token punctuation">{</span>
             t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;sliceEqual() = %v, want %v&quot;</span><span class="token punctuation">,</span> got<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>want<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-benchmark" tabindex="-1"><a class="header-anchor" href="#_2-benchmark" aria-hidden="true">#</a> 2. Benchmark</h2><p>测试用例使用时间复杂度最差的情景，即两个非空且元素完全相同的切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">genSlice</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkSliceEqual</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		f    <span class="token keyword">func</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingIteration&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> sliceEqual<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingReflect&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> k <span class="token operator">*=</span> <span class="token number">10</span> <span class="token punctuation">{</span>
		val <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		a1 <span class="token operator">:=</span> <span class="token function">genSlice</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
		a2 <span class="token operator">:=</span> <span class="token function">genSlice</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> k<span class="token punctuation">)</span>

		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
			b<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s_%.0e&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
					tt<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkSliceEqual/UsingIteration__1e+01-12            212428482                5.885 ns/op           0 B/op          0 allocs/op
BenchmarkSliceEqual/UsingReflect____1e+01-12             3348832               301.5 ns/op            48 B/op          2 allocs/op
BenchmarkSliceEqual/UsingIteration__1e+02-12            25925092                45.72 ns/op            0 B/op          0 allocs/op
BenchmarkSliceEqual/UsingReflect____1e+02-12              752869              1548 ns/op              48 B/op          2 allocs/op
BenchmarkSliceEqual/UsingIteration__1e+03-12             3597279               328.5 ns/op             0 B/op          0 allocs/op
BenchmarkSliceEqual/UsingReflect____1e+03-12               86875             13862 ns/op              48 B/op          2 allocs/op
BenchmarkSliceEqual/UsingIteration__1e+04-12              295510              3861 ns/op               0 B/op          0 allocs/op
BenchmarkSliceEqual/UsingReflect____1e+04-12                7898            138434 ns/op              48 B/op          2 allocs/op
BenchmarkSliceEqual/UsingIteration__1e+05-12               28862             44241 ns/op               0 B/op          0 allocs/op
BenchmarkSliceEqual/UsingReflect____1e+05-12                 879           1367174 ns/op              48 B/op          2 allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，直接使用遍历的方式时间性能约为使用反射的约30倍。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,13),k={href:"https://stackoverflow.com/questions/23025694/is-there-no-xor-operator-for-booleans-in-golang",target:"_blank",rel:"noopener noreferrer"},r={href:"https://stackoverflow.com/questions/15311969/checking-the-equality-of-two-slices",target:"_blank",rel:"noopener noreferrer"};function d(v,b){const s=u("ExternalLinkIcon");return o(),c("div",null,[i,n("ol",null,[n("li",null,[n("a",k,[a("https://stackoverflow.com/questions/23025694/is-there-no-xor-operator-for-booleans-in-golang"),t(s)])]),n("li",null,[n("a",r,[a("https://stackoverflow.com/questions/15311969/checking-the-equality-of-two-slices"),t(s)])])])])}const g=p(l,[["render",d],["__file","14-q-syntax.html.vue"]]);export{g as default};
