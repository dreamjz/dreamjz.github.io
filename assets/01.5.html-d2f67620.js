import{_ as o,Z as p,$ as i,a0 as n,a1 as s,a2 as e,a4 as t,H as c}from"./framework-d03928c9.js";const l={},u=n("h2",{id:"_9-advanced-topics",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-advanced-topics","aria-hidden":"true"},"#"),s(" 9. Advanced Topics")],-1),r=n("h3",{id:"_9-1-dbresolver",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-dbresolver","aria-hidden":"true"},"#"),s(" 9.1 DBResolver")],-1),d=n("p",null,"DBResolver adds muliple databases support to GORM, the following features are supported",-1),k=n("li",null,[n("p",null,"Multiple sources, replicas")],-1),m=n("li",null,[n("p",null,"Read/Write Splitting")],-1),v=n("li",null,[n("p",null,"Automatic connection switching based on the working table/struct")],-1),b=n("li",null,[n("p",null,"Manual connection switching")],-1),g=n("li",null,[n("p",null,"Sources/Replicas load balancing")],-1),h=n("p",null,"Works for RAW SQL",-1),f={href:"https://github.com/go-gorm/dbresolver",target:"_blank",rel:"noopener noreferrer"},_=t('<h4 id="_9-1-1-usage" tabindex="-1"><a class="header-anchor" href="#_9-1-1-usage" aria-hidden="true">#</a> 9.1.1 Usage</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>\n  <span class="token string">&quot;gorm.io/gorm&quot;</span>\n  <span class="token string">&quot;gorm.io/plugin/dbresolver&quot;</span>\n  <span class="token string">&quot;gorm.io/driver/mysql&quot;</span>\n<span class="token punctuation">)</span>\n\ndb<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db1_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>\n  <span class="token comment">// use `db2` as sources, `db3`, `db4` as replicas</span>\n  Sources<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>Dialector<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db2_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Replicas<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>Dialector<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db3_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db4_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// sources/replicas load balancing policy</span>\n  Policy<span class="token punctuation">:</span> dbresolver<span class="token punctuation">.</span>RandomPolicy<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>\n  <span class="token comment">// use `db1` as sources (DB&#39;s default connection), `db5` as replicas for `User`, `Address`</span>\n  Replicas<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>Dialector<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db5_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>\n  <span class="token comment">// use `db6`, `db7` as sources, `db8` as replicas for `orders`, `Product`</span>\n  Sources<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>Dialector<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db6_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db7_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Replicas<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>Dialector<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;db8_dsn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Product<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;secondary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-1-2-transaction" tabindex="-1"><a class="header-anchor" href="#_9-1-2-transaction" aria-hidden="true">#</a> 9.1.2 Transaction</h4><p>when using transaction, DBResolver will use the transaction and wonâ€™t switch to sources/replicas</p><h4 id="_9-2-3-automatic-connection-switching" tabindex="-1"><a class="header-anchor" href="#_9-2-3-automatic-connection-switching" aria-hidden="true">#</a> 9.2.3 Automatic connection switching</h4><p>DBResolver will automatically switch connection based on the working table/struct</p><p>For RAW SQL, DBResolver will extract the table name from the SQL to match the resolver, and will use <code>sources</code> unless the SQL begins with <code>SELECT</code> (excepts <code>SELECT... FOR UPDATE</code>), for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// `User` Resolver Examples</span>\ndb<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// replicas `db5`</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>AdvancedUser<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// replicas `db5`</span>\ndb<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;update users set name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span> <span class="token comment">// sources `db1`</span>\ndb<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;select name from users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span> <span class="token comment">// replicas `db5`</span>\ndb<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span class="token comment">// sources `db1`</span>\ndb<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span> <span class="token comment">// sources `db1`</span>\ndb<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span> <span class="token comment">// sources `db1`</span>\n\n<span class="token comment">// Global Resolver Examples</span>\ndb<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Pet<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// replicas `db3`/`db4`</span>\ndb<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Pet<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// sources `db2`</span>\n\n<span class="token comment">// Orders Resolver Examples</span>\ndb<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Order<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// replicas `db8`</span>\ndb<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Report<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// replicas `db8`</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-4-read-write-splitting" tabindex="-1"><a class="header-anchor" href="#_9-2-4-read-write-splitting" aria-hidden="true">#</a> 9.2.4 Read/Write Splitting</h4>',9),q={href:"https://gorm.io/docs/write_plugins.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>For <code>Query</code>, <code>Row</code> callback, will use <code>replicas</code> unless <code>Write</code> mode specified For <code>Raw</code> callback, statements are considered read-only and will use <code>replicas</code> if the SQL starts with <code>SELECT</code></p><h4 id="_9-2-5-manual-connection-switching" tabindex="-1"><a class="header-anchor" href="#_9-2-5-manual-connection-switching" aria-hidden="true">#</a> 9.2.5 Manual connection switching</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Use Write Mode: read user from sources \`db1\`</span>
db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// Specify Resolver: read user from \`secondary\`&#39;s replicas: db8</span>
db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token string">&quot;secondary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// Specify Resolver and Write Mode: read user from \`secondary\`&#39;s sources: db6 or db7</span>
db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token string">&quot;secondary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dbresolver<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-6-load-balancing" tabindex="-1"><a class="header-anchor" href="#_9-2-6-load-balancing" aria-hidden="true">#</a> 9.2.6 Load Balancing</h4><p>GORM supports load balancing sources/relicas based on policy, the policy should be a struct implements following interface:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Policy <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>gorm<span class="token punctuation">.</span>ConnPool<span class="token punctuation">)</span> gorm<span class="token punctuation">.</span>ConnPool
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Currently only the <code>RandomPolicy</code> implemented and it is the default option if no other policy specified.</p><h4 id="_9-2-7-connection-pool" tabindex="-1"><a class="header-anchor" href="#_9-2-7-connection-pool" aria-hidden="true">#</a> 9.2.7 Connection Pool</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>
  dbresolver<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>dbresolver<span class="token punctuation">.</span>Config<span class="token punctuation">{</span> <span class="token comment">/* xxx */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token function">SetConnMaxIdleTime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-prometheus" tabindex="-1"><a class="header-anchor" href="#_9-2-prometheus" aria-hidden="true">#</a> 9.2 Prometheus</h3>`,10),y={href:"https://pkg.go.dev/database/sql?tab=doc#DBStats",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/go-gorm/prometheus",target:"_blank",rel:"noopener noreferrer"},C=t(`<h4 id="_9-2-1-usage" tabindex="-1"><a class="header-anchor" href="#_9-2-1-usage" aria-hidden="true">#</a> 9.2.1 Usage</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;gorm.io/gorm&quot;</span>
  <span class="token string">&quot;gorm.io/driver/sqlite&quot;</span>
  <span class="token string">&quot;gorm.io/plugin/prometheus&quot;</span>
<span class="token punctuation">)</span>

db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>prometheus<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>prometheus<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DBName<span class="token punctuation">:</span>          <span class="token string">&quot;db1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// use \`DBName\` as metrics label</span>
  RefreshInterval<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token comment">// Refresh metrics interval (default 15 seconds)</span>
  PushAddr<span class="token punctuation">:</span>        <span class="token string">&quot;prometheus pusher address&quot;</span><span class="token punctuation">,</span> <span class="token comment">// push metrics if \`PushAddr\` configured</span>
  StartServer<span class="token punctuation">:</span>     <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// start http server to expose metrics</span>
  HTTPServerPort<span class="token punctuation">:</span>  <span class="token number">8080</span><span class="token punctuation">,</span>  <span class="token comment">// configure http server port, default port 8080 (if you have configured multiple instances, only the first \`HTTPServerPort\` will be used to start server)</span>
  MetricsCollector<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>prometheus<span class="token punctuation">.</span>MetricsCollector <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>prometheus<span class="token punctuation">.</span>MySQL<span class="token punctuation">{</span>
      VariableNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Threads_running&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// user defined metrics</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-2-user-defined-metrics" tabindex="-1"><a class="header-anchor" href="#_9-2-2-user-defined-metrics" aria-hidden="true">#</a> 9.2.2 User-Defined Metrics</h4><p>You can define your metrics and collect them with GORM Prometheus plugin, which needs to implements <code>MetricsCollector</code> interface</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MetricsCollector <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">Metrics</span><span class="token punctuation">(</span><span class="token operator">*</span>Prometheus<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>prometheus<span class="token punctuation">.</span>Collector
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-3-mysql" tabindex="-1"><a class="header-anchor" href="#_9-2-3-mysql" aria-hidden="true">#</a> 9.2.3 MySQL</h4>`,6),R={href:"https://github.com/go-gorm/prometheus/blob/master/mysql.go",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">&amp;</span>prometheus<span class="token punctuation">.</span>MySQL<span class="token punctuation">{</span>
  Prefix<span class="token punctuation">:</span> <span class="token string">&quot;gorm_status_&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// Metrics name prefix, default is \`gorm_status_\`</span>
  <span class="token comment">// For example, Threads_running&#39;s metric name is \`gorm_status_Threads_running\`</span>
  Interval<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token comment">// Fetch interval, default use Prometheus&#39;s RefreshInterval</span>
  VariableNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Threads_running&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// Select variables from SHOW STATUS, if not set, uses all status variables</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-hints" tabindex="-1"><a class="header-anchor" href="#_9-3-hints" aria-hidden="true">#</a> 9.3 Hints</h3><p>GORM provides optimizer/index/comment hints support</p>`,3),O={href:"https://github.com/go-gorm/hints",target:"_blank",rel:"noopener noreferrer"},N=t(`<h4 id="_9-3-1-optimizer-hints" tabindex="-1"><a class="header-anchor" href="#_9-3-1-optimizer-hints" aria-hidden="true">#</a> 9.3.1 Optimizer Hints</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;gorm.io/hints&quot;</span>

db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;hint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * /*+ hint */ FROM \`users\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-3-2-index-hints" tabindex="-1"><a class="header-anchor" href="#_9-3-2-index-hints" aria-hidden="true">#</a> 9.3.2 Index Hints</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import &quot;gorm.io/hints&quot;

db.Clauses(hints.UseIndex(&quot;idx_user_name&quot;)).Find(&amp;User{})
// SELECT * FROM \`users\` USE INDEX (\`idx_user_name\`)

db.Clauses(hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForJoin()).Find(&amp;User{})
// SELECT * FROM \`users\` FORCE INDEX FOR JOIN (\`idx_user_name\`,\`idx_user_id\`)&quot;

db.Clauses(
  hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForOrderBy(),
  hints.IgnoreIndex(&quot;idx_user_name&quot;).ForGroupBy(),
).Find(&amp;User{})
// SELECT * FROM \`users\` FORCE INDEX FOR ORDER BY (\`idx_user_name\`,\`idx_user_id\`) IGNORE INDEX FOR GROUP BY (\`idx_user_name\`)&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-3-3-comment-hints" tabindex="-1"><a class="header-anchor" href="#_9-3-3-comment-hints" aria-hidden="true">#</a> 9.3.3 Comment Hints</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import &quot;gorm.io/hints&quot;

db.Clauses(hints.Comment(&quot;select&quot;, &quot;master&quot;)).Find(&amp;User{})
// SELECT /*master*/ * FROM \`users\`;

db.Clauses(hints.CommentBefore(&quot;insert&quot;, &quot;node2&quot;)).Create(&amp;user)
// /*node2*/ INSERT INTO \`users\` ...;

db.Clauses(hints.CommentAfter(&quot;select&quot;, &quot;node2&quot;)).Create(&amp;user)
// /*node2*/ INSERT INTO \`users\` ...;

db.Clauses(hints.CommentAfter(&quot;where&quot;, &quot;hint&quot;)).Find(&amp;User{}, &quot;id = ?&quot;, 1)
// SELECT * FROM \`users\` WHERE id = ? /* hint */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-database-indexes" tabindex="-1"><a class="header-anchor" href="#_9-4-database-indexes" aria-hidden="true">#</a> 9.4 Database Indexes</h3>`,7),D=n("code",null,"index",-1),M=n("code",null,"uniqueIndex",-1),I={href:"https://gorm.io/docs/migration.html",target:"_blank",rel:"noopener noreferrer"},F=t(`<h4 id="_9-4-1-index-tag" tabindex="-1"><a class="header-anchor" href="#_9-4-1-index-tag" aria-hidden="true">#</a> 9.4.1 Index Tag</h4><p>GORM accepts lots of index settings, like <code>class</code>, <code>type</code>, <code>where</code>, <code>comment</code>, <code>expression</code>, <code>sort</code>, <code>collate</code>, <code>option</code></p><p>Check the following example for how to use it</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name  <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index&quot;\`</span>
  Name2 <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:idx_name,unique&quot;\`</span>
  Name3 <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:,sort:desc,collate:utf8,type:btree,length:10,where:name3 != &#39;jinzhu&#39;&quot;\`</span>
  Name4 <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;uniqueIndex&quot;\`</span>
  Age   <span class="token builtin">int64</span>  <span class="token string">\`gorm:&quot;index:,class:FULLTEXT,comment:hello \\\\, world,where:age &gt; 10&quot;\`</span>
  Age2  <span class="token builtin">int64</span>  <span class="token string">\`gorm:&quot;index:,expression:ABS(age)&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// MySQL option</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:,class:FULLTEXT,option:WITH PARSER ngram INVISIBLE&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// PostgreSQL option</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:,option:CONCURRENTLY&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-4-2-uniqueindex" tabindex="-1"><a class="header-anchor" href="#_9-4-2-uniqueindex" aria-hidden="true">#</a> 9.4.2 uniqueIndex</h4><p>tag <code>uniqueIndex</code> works similar like <code>index</code>, it equals to <code>index:,unique</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name1 <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;uniqueIndex&quot;\`</span>
  Name2 <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;uniqueIndex:idx_name,sort:desc&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-4-3-composite-indexes" tabindex="-1"><a class="header-anchor" href="#_9-4-3-composite-indexes" aria-hidden="true">#</a> 9.4.3 Composite Indexes</h4><p>Use same index name for two fields will creates composite indexes, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type User struct {
  Name   string \`gorm:&quot;index:idx_member&quot;\`
  Number string \`gorm:&quot;index:idx_member&quot;\`
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-4-4-fields-priority" tabindex="-1"><a class="header-anchor" href="#_9-4-4-fields-priority" aria-hidden="true">#</a> 9.4.4 Fields Priority</h4><p>The column order of a composite index has an impact on its performance so it must be chosen carefully</p><p>You can specify the order with the <code>priority</code> option, the default priority value is <code>10</code>, if priority value is the same, the order will be based on model structâ€™s field index</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type User struct {
  Name   string \`gorm:&quot;index:idx_member&quot;\`
  Number string \`gorm:&quot;index:idx_member&quot;\`
}
// column order: name, number

type User struct {
  Name   string \`gorm:&quot;index:idx_member,priority:2&quot;\`
  Number string \`gorm:&quot;index:idx_member,priority:1&quot;\`
}
// column order: number, name

type User struct {
  Name   string \`gorm:&quot;index:idx_member,priority:12&quot;\`
  Number string \`gorm:&quot;index:idx_member&quot;\`
}
// column order: number, name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-4-5-multiple-indexes" tabindex="-1"><a class="header-anchor" href="#_9-4-5-multiple-indexes" aria-hidden="true">#</a> 9.4.5 Multiple indexes</h4><p>A field accepts multiple <code>index</code>, <code>uniqueIndex</code> tags that will create multiple indexes on a field</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type UserIndex struct {
  OID          int64  \`gorm:&quot;index:idx_id;index:idx_oid,unique&quot;\`
  MemberNumber string \`gorm:&quot;index:idx_id&quot;\`
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5-constraints" tabindex="-1"><a class="header-anchor" href="#_9-5-constraints" aria-hidden="true">#</a> 9.5 Constraints</h3>`,18),T={href:"https://gorm.io/docs/migration.html",target:"_blank",rel:"noopener noreferrer"},E=t('<h4 id="_9-5-1-check-constraint" tabindex="-1"><a class="header-anchor" href="#_9-5-1-check-constraint" aria-hidden="true">#</a> 9.5.1 CHECK Constraint</h4><p>Create CHECK constraints with tag <code>check</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> UserIndex <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n  Name  <span class="token builtin">string</span> <span class="token string">`gorm:&quot;check:name_checker,name &lt;&gt; &#39;jinzhu&#39;&quot;`</span>\n  Name2 <span class="token builtin">string</span> <span class="token string">`gorm:&quot;check:name &lt;&gt; &#39;jinzhu&#39;&quot;`</span>\n  Name3 <span class="token builtin">string</span> <span class="token string">`gorm:&quot;check:,name &lt;&gt; &#39;jinzhu&#39;&quot;`</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-5-2-index-constraint" tabindex="-1"><a class="header-anchor" href="#_9-5-2-index-constraint" aria-hidden="true">#</a> 9.5.2 Index Constraint</h4>',4),L={href:"https://gorm.io/docs/indexes.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<h4 id="_9-5-3-foreign-key-constraint" tabindex="-1"><a class="header-anchor" href="#_9-5-3-foreign-key-constraint" aria-hidden="true">#</a> 9.5.3 Foreign Key Constraint</h4><p>GORM will creates foreign keys constraints for associations, you can disable this feature during initialization:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DisableForeignKeyConstraintWhenMigrating<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GORM allows you setup FOREIGN KEY constraintsâ€™s <code>OnDelete</code>, <code>OnUpdate</code> option with tag <code>constraint</code>, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  CompanyID  <span class="token builtin">int</span>
  Company    Company    <span class="token string">\`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
  CreditCard CreditCard <span class="token string">\`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number <span class="token builtin">string</span>
  UserID <span class="token builtin">uint</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-6-composite-primary-key" tabindex="-1"><a class="header-anchor" href="#_9-6-composite-primary-key" aria-hidden="true">#</a> 9.6 Composite Primary Key</h3><p>Set multiple fields as primary key creates composite primary key, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID           <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  LanguageCode <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Code         <span class="token builtin">string</span>
  Name         <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong></p><p>integer <code>PrioritizedPrimaryField</code> enables <code>AutoIncrement</code> by default, to disable it, you need to turn off <code>autoIncrement</code> for the int fields:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  CategoryID <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;primaryKey;autoIncrement:false&quot;\`</span>
  TypeID     <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;primaryKey;autoIncrement:false&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-6-security" tabindex="-1"><a class="header-anchor" href="#_9-6-security" aria-hidden="true">#</a> 9.6 Security</h3><p>GORM uses the <code>database/sql</code>â€˜s argument placeholders to construct the SQL statement, which will automatically escape arguments to avoid SQL injection</p><p><strong>NOTE</strong></p><p>The SQL from Logger is not fully escaped like the one executed, be careful when copying and executing it in SQL console</p><h4 id="_9-6-1-query-condition" tabindex="-1"><a class="header-anchor" href="#_9-6-1-query-condition" aria-hidden="true">#</a> 9.6.1 Query Condition</h4><p>Userâ€™s input should be only used as an argument, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>userInput <span class="token operator">:=</span> <span class="token string">&quot;jinzhu;drop table users;&quot;</span>

<span class="token comment">// safe, will be escaped</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// SQL injection</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;name = %v&quot;</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-6-2-inline-condition" tabindex="-1"><a class="header-anchor" href="#_9-6-2-inline-condition" aria-hidden="true">#</a> 9.6.2 Inline Condition</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// will be escaped</span>
db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span>

<span class="token comment">// SQL injection</span>
db<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;name = %v&quot;</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-6-3-sql-injection-methods" tabindex="-1"><a class="header-anchor" href="#_9-6-3-sql-injection-methods" aria-hidden="true">#</a> 9.6.3 SQL injection Methods</h4><p>To support some features, some inputs are not escaped, be careful when using userâ€™s input with those methods</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name; drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token string">&quot;name; drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pluck</span><span class="token punctuation">(</span><span class="token string">&quot;name; drop table users;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>names<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;name; drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">&quot;1 = 1;drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;select name from users; drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;select name from users; drop table users;&quot;</span><span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;name; drop table users;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The general rule to avoid SQL injection is donâ€™t trust user-submitted data, you can perform whitelist validation to test user input against an existing set of known, approved, and defined input, and when using userâ€™s input, only use them as an argument.</p><h3 id="_9-7-gorm-config" tabindex="-1"><a class="header-anchor" href="#_9-7-gorm-config" aria-hidden="true">#</a> 9.7 Gorm Config</h3><p>GORM provides Config can be used during initialization</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  SkipDefaultTransaction   <span class="token builtin">bool</span>
  NamingStrategy           schema<span class="token punctuation">.</span>Namer
  Logger                   logger<span class="token punctuation">.</span>Interface
  NowFunc                  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time
  DryRun                   <span class="token builtin">bool</span>
  PrepareStmt              <span class="token builtin">bool</span>
  DisableNestedTransaction <span class="token builtin">bool</span>
  AllowGlobalUpdate        <span class="token builtin">bool</span>
  DisableAutomaticPing     <span class="token builtin">bool</span>
  DisableForeignKeyConstraintWhenMigrating <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-1-skipdefaulttransaction" tabindex="-1"><a class="header-anchor" href="#_9-7-1-skipdefaulttransaction" aria-hidden="true">#</a> 9.7.1 SkipDefaultTransaction</h4><p>GORM perform write (create/update/delete) operations run inside a transaction to ensure data consistency, you can disable it during initialization if it is not required</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  SkipDefaultTransaction<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-2-namingstrategy" tabindex="-1"><a class="header-anchor" href="#_9-7-2-namingstrategy" aria-hidden="true">#</a> 9.7.2 NamingStrategy</h4><p>GORM allows users to change the naming conventions by overriding the default <code>NamingStrategy</code> which need to implements interface <code>Namer</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">TableName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">SchemaName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">ColumnName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">JoinTableName</span><span class="token punctuation">(</span>table <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">RelationshipFKName</span><span class="token punctuation">(</span>Relationship<span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">CheckerName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">IndexName</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The default <code>NamingStrategy</code> also provides few options, like:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  NamingStrategy<span class="token punctuation">:</span> schema<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">{</span>
    TablePrefix<span class="token punctuation">:</span> <span class="token string">&quot;t_&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// table name prefix, table for \`User\` would be \`t_users\`</span>
    SingularTable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// use singular table name, table for \`User\` would be \`user\` with this option enabled</span>
    NameReplacer<span class="token punctuation">:</span> strings<span class="token punctuation">.</span><span class="token function">NewReplacer</span><span class="token punctuation">(</span><span class="token string">&quot;CID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// use name replacer to change struct/field name before convert it to db name</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-3-logger" tabindex="-1"><a class="header-anchor" href="#_9-7-3-logger" aria-hidden="true">#</a> 9.7.3 Logger</h4>`,36),P={href:"https://gorm.io/docs/logger.html",target:"_blank",rel:"noopener noreferrer"},G=t(`<h4 id="_9-7-4-nowfunc" tabindex="-1"><a class="header-anchor" href="#_9-7-4-nowfunc" aria-hidden="true">#</a> 9.7.4 NowFunc</h4><p>Change the function to be used when creating a new timestamp</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  NowFunc<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time <span class="token punctuation">{</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-5-dryrun" tabindex="-1"><a class="header-anchor" href="#_9-7-5-dryrun" aria-hidden="true">#</a> 9.7.5 DryRun</h4>`,4),A=n("code",null,"SQL",-1),B={href:"https://gorm.io/docs/session.html",target:"_blank",rel:"noopener noreferrer"},Q=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DryRun<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-6-preparestmt" tabindex="-1"><a class="header-anchor" href="#_9-7-6-preparestmt" aria-hidden="true">#</a> 9.7.6 PrepareStmt</h4>`,2),W=n("code",null,"PreparedStmt",-1),z={href:"https://gorm.io/docs/session.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  PrepareStmt<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-7-disablenestedtransaction" tabindex="-1"><a class="header-anchor" href="#_9-7-7-disablenestedtransaction" aria-hidden="true">#</a> 9.7.7 DisableNestedTransaction</h4>`,2),j=n("code",null,"Transaction",-1),H=n("code",null,"SavePoint(savedPointName)",-1),K=n("code",null,"RollbackTo(savedPointName)",-1),X=n("code",null,"DisableNestedTransaction",-1),Y={href:"https://gorm.io/docs/session.html",target:"_blank",rel:"noopener noreferrer"},Z=n("h4",{id:"_9-7-8-allowglobalupdate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-7-8-allowglobalupdate","aria-hidden":"true"},"#"),s(" 9.7.8 AllowGlobalUpdate")],-1),J={href:"https://gorm.io/docs/session.html",target:"_blank",rel:"noopener noreferrer"},$=t(`<h4 id="_9-7-9-disableautomaticping" tabindex="-1"><a class="header-anchor" href="#_9-7-9-disableautomaticping" aria-hidden="true">#</a> 9.7.9 DisableAutomaticPing</h4><p>GORM automatically ping database after initialized to check database availability, disable it by setting it to <code>true</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DisableAutomaticPing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-7-10-disableforeignkeyconstraintwhenmigrating" tabindex="-1"><a class="header-anchor" href="#_9-7-10-disableforeignkeyconstraintwhenmigrating" aria-hidden="true">#</a> 9.7.10 DisableForeignKeyConstraintWhenMigrating</h4>`,4),nn=n("code",null,"AutoMigrate",-1),sn=n("code",null,"CreateTable",-1),an=n("code",null,"true",-1),en={href:"https://gorm.io/docs/migration.html",target:"_blank",rel:"noopener noreferrer"},tn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;gorm.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
  DisableForeignKeyConstraintWhenMigrating<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-8-write-plugins" tabindex="-1"><a class="header-anchor" href="#_9-8-write-plugins" aria-hidden="true">#</a> 9.8 Write Plugins</h3><h4 id="_9-8-1-callbacks" tabindex="-1"><a class="header-anchor" href="#_9-8-1-callbacks" aria-hidden="true">#</a> 9.8.1 Callbacks</h4><p>GORM itself is powered by <code>Callbacks</code>, it has callbacks for <code>Create</code>, <code>Query</code>, <code>Update</code>, <code>Delete</code>, <code>Row</code>, <code>Raw</code>, you could fully customize GORM with them as you want</p><p>Callbacks are registered into the global <code>*gorm.DB</code>, not the session-level, if you require <code>*gorm.DB</code> with different callbacks, you need to initialize another <code>*gorm.DB</code></p><h4 id="_9-8-2-register-callback" tabindex="-1"><a class="header-anchor" href="#_9-8-2-register-callback" aria-hidden="true">#</a> 9.8.2 Register Callback</h4><p>Register a callback into callbacks</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">cropImage</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// crop image fields and upload them to CDN, dummy code</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Fields <span class="token punctuation">{</span>
      <span class="token keyword">switch</span> db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>ReflectValue<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>ReflectValue<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
          <span class="token comment">// Get value from field</span>
          <span class="token keyword">if</span> fieldValue<span class="token punctuation">,</span> isZero <span class="token operator">:=</span> field<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>ReflectValue<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>isZero <span class="token punctuation">{</span>
            <span class="token keyword">if</span> crop<span class="token punctuation">,</span> ok <span class="token operator">:=</span> fieldValue<span class="token punctuation">.</span><span class="token punctuation">(</span>CropInterface<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
              crop<span class="token punctuation">.</span><span class="token function">Crop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
        <span class="token comment">// Get value from field</span>
        <span class="token keyword">if</span> fieldValue<span class="token punctuation">,</span> isZero <span class="token operator">:=</span> field<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>ReflectValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>isZero <span class="token punctuation">{</span>
          <span class="token keyword">if</span> crop<span class="token punctuation">,</span> ok <span class="token operator">:=</span> fieldValue<span class="token punctuation">.</span><span class="token punctuation">(</span>CropInterface<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            crop<span class="token punctuation">.</span><span class="token function">Crop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Set value to field</span>
        err <span class="token operator">:=</span> field<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>ReflectValue<span class="token punctuation">,</span> <span class="token string">&quot;newValue&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// All fields for current model</span>
    db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Fields

    <span class="token comment">// All primary key fields for current model</span>
    db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>PrimaryFields

    <span class="token comment">// Prioritized primary key field: field with DB name \`id\` or the first defined primary key</span>
    db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>PrioritizedPrimaryField

    <span class="token comment">// All relationships for current model</span>
    db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Relationships

    <span class="token comment">// Find field with field name or db name</span>
    field <span class="token operator">:=</span> db<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span><span class="token function">LookUpField</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>

    <span class="token comment">// processing</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;crop_image&quot;</span><span class="token punctuation">,</span> cropImage<span class="token punctuation">)</span>
<span class="token comment">// register a callback for Create process</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-1-delete-callback" tabindex="-1"><a class="header-anchor" href="#_9-8-1-delete-callback" aria-hidden="true">#</a> 9.8.1 Delete Callback</h4><p>Delete a callback from callbacks</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:create&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// delete callback \`gorm:create\` from Create callbacks</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-3-replace-callback" tabindex="-1"><a class="header-anchor" href="#_9-8-3-replace-callback" aria-hidden="true">#</a> 9.8.3 Replace Callback</h4><p>Replace a callback having the same name with the new one</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:create&quot;</span><span class="token punctuation">,</span> newCreateFunction<span class="token punctuation">)</span>
<span class="token comment">// replace callback \`gorm:create\` with new function \`newCreateFunction\` for Create process</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-4-register-callback-with-orders" tabindex="-1"><a class="header-anchor" href="#_9-8-4-register-callback-with-orders" aria-hidden="true">#</a> 9.8.4 Register Callback with orders</h4><p>Register callbacks with orders</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// before gorm:create</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;update_created_at&quot;</span><span class="token punctuation">,</span> updateCreated<span class="token punctuation">)</span>

<span class="token comment">// after gorm:create</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;update_created_at&quot;</span><span class="token punctuation">,</span> updateCreated<span class="token punctuation">)</span>

<span class="token comment">// after gorm:query</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:query&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;my_plugin:after_query&quot;</span><span class="token punctuation">,</span> afterQuery<span class="token punctuation">)</span>

<span class="token comment">// after gorm:delete</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;my_plugin:after_delete&quot;</span><span class="token punctuation">,</span> afterDelete<span class="token punctuation">)</span>

<span class="token comment">// before gorm:update</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;my_plugin:before_update&quot;</span><span class="token punctuation">,</span> beforeUpdate<span class="token punctuation">)</span>

<span class="token comment">// before gorm:create and after gorm:before_create</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:before_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;my_plugin:before_create&quot;</span><span class="token punctuation">,</span> beforeCreate<span class="token punctuation">)</span>

<span class="token comment">// before any other callbacks</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;update_created_at&quot;</span><span class="token punctuation">,</span> updateCreated<span class="token punctuation">)</span>

<span class="token comment">// after any other callbacks</span>
db<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;update_created_at&quot;</span><span class="token punctuation">,</span> updateCreated<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-5-defined-callbacks" tabindex="-1"><a class="header-anchor" href="#_9-8-5-defined-callbacks" aria-hidden="true">#</a> 9.8.5 Defined Callbacks</h4>`,18),on={href:"https://github.com/go-gorm/gorm/blob/master/callbacks/callbacks.go",target:"_blank",rel:"noopener noreferrer"},pn=t(`<h4 id="_9-8-6-plugin" tabindex="-1"><a class="header-anchor" href="#_9-8-6-plugin" aria-hidden="true">#</a> 9.8.6 Plugin</h4><p>GORM provides a <code>Use</code> method to register plugins, the plugin needs to implement the <code>Plugin</code> interface</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Plugin <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Initialize</code> method will be invoked when registering the plugin into GORM first time, and GORM will save the registered plugins, access them like:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Plugins<span class="token punctuation">[</span>pluginName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),cn={href:"https://gorm.io/docs/prometheus.html",target:"_blank",rel:"noopener noreferrer"},ln=t('<h3 id="_9-9-write-driver" tabindex="-1"><a class="header-anchor" href="#_9-9-write-driver" aria-hidden="true">#</a> 9.9 Write Driver</h3><h4 id="_9-9-1-write-new-driver" tabindex="-1"><a class="header-anchor" href="#_9-9-1-write-new-driver" aria-hidden="true">#</a> 9.9.1 Write new driver</h4><p>GORM provides official support for <code>sqlite</code>, <code>mysql</code>, <code>postgres</code>, <code>sqlserver</code>.</p><p>Some databases may be compatible with the <code>mysql</code> or <code>postgres</code> dialect, in which case you could just use the dialect for those databases.</p>',4),un={href:"https://pkg.go.dev/gorm.io/gorm?tab=doc#Dialector",target:"_blank",rel:"noopener noreferrer"},rn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Dialector <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
  <span class="token function">Migrator</span><span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> Migrator
  <span class="token function">DataTypeOf</span><span class="token punctuation">(</span><span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">DefaultValueOf</span><span class="token punctuation">(</span><span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> clause<span class="token punctuation">.</span>Expression
  <span class="token function">BindVarTo</span><span class="token punctuation">(</span>writer clause<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> stmt <span class="token operator">*</span>Statement<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">QuoteTo</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
  <span class="token function">Explain</span><span class="token punctuation">(</span>sql <span class="token builtin">string</span><span class="token punctuation">,</span> vars <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),dn={href:"https://github.com/go-gorm/mysql",target:"_blank",rel:"noopener noreferrer"},kn=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),mn=n("li",null,[n("a",{href:"%5Bhttps://gorm.io%5D(https://gorm.io/)"},"gorm")],-1),vn={href:"https://github.com/go-gorm/gorm/issues/4218",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"Find",-1),gn=n("code",null,"Scan",-1),hn=n("code",null,"Scan",-1),fn=n("code",null,"Find",-1),_n={href:"https://stackoverflow.com/questions/45953553/what-is-the-syntax-for-select-in-statement-for-sqlite",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://www.sqlitetutorial.net/sqlite-full-outer-join/",target:"_blank",rel:"noopener noreferrer"};function xn(yn,wn){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,r,d,n("ul",null,[k,m,v,b,g,n("li",null,[h,n("p",null,[n("a",f,[s("https://github.com/go-gorm/dbresolver"),e(a)])])])]),_,n("p",null,[s("Read/Write splitting with DBResolver based on the current used "),n("a",q,[s("GORM callbacks"),e(a)]),s(".")]),x,n("p",null,[s("GORM provides Prometheus plugin to collect "),n("a",y,[s("DBStats"),e(a)]),s(" or user-defined metrics")]),n("p",null,[n("a",w,[s("https://github.com/go-gorm/prometheus"),e(a)])]),C,n("p",null,[s("GORM provides an example for how to collect MySQL Status as metrics, check it out "),n("a",R,[s("prometheus.MySQL"),e(a)])]),S,n("p",null,[n("a",O,[s("https://github.com/go-gorm/hints"),e(a)])]),N,n("p",null,[s("GORM allows create databases index with tag "),D,s(","),M,s(", those indexes will be created when "),n("a",I,[s("AutoMigrate or CreateTable with GORM"),e(a)])]),F,n("p",null,[s("GORM allows create database constraints with tag, constraints will be created when "),n("a",T,[s("AutoMigrate or CreateTable with GORM"),e(a)])]),E,n("p",null,[s("Checkout "),n("a",L,[s("Database Indexes"),e(a)])]),U,n("p",null,[s("Allow to change GORMâ€™s default logger by overriding this option, refer "),n("a",P,[s("Logger"),e(a)]),s(" for more details")]),G,n("p",null,[s("Generate "),A,s(" without executing, can be used to prepare or test generated SQL, refer "),n("a",B,[s("Session"),e(a)]),s(" for details")]),Q,n("p",null,[W,s(" creates a prepared statement when executing any SQL and caches them to speed up future calls, refer "),n("a",z,[s("Session"),e(a)]),s(" for details")]),V,n("p",null,[s("When using "),j,s(" method inside a db transaction, GORM will use "),H,s(", "),K,s(" to give you the nested transaction support, you could disable it by using the "),X,s(" option, refer "),n("a",Y,[s("Session"),e(a)]),s(" for details")]),Z,n("p",null,[s("Enable global update/delete, refer "),n("a",J,[s("Session"),e(a)]),s(" for details")]),$,n("p",null,[s("GORM creates database foreign key constraints automatically when "),nn,s(" or "),sn,s(", disable this by setting it to "),an,s(", refer "),n("a",en,[s("Migration"),e(a)]),s(" for details")]),tn,n("p",null,[s("GORM has defined "),n("a",on,[s("some callbacks"),e(a)]),s(" to power current GORM features, check them out before starting your plugins")]),pn,n("p",null,[s("Checkout "),n("a",cn,[s("Prometheus"),e(a)]),s(" as example")]),ln,n("p",null,[s("For others, you can create a new driver, it needs to implement "),n("a",un,[s("the dialect interface"),e(a)]),s(".")]),rn,n("p",null,[s("Checkout the "),n("a",dn,[s("MySQL Driver"),e(a)]),s(" as example")]),kn,n("ol",null,[mn,n("li",null,[n("a",vn,[s("What is the difference between "),bn,s(" and "),gn,s("ï¼Œ Can I replace "),hn,s(" with "),fn,s(" ï¼Ÿ"),e(a)]),s(" grom issue")]),n("li",null,[n("a",_n,[s("What is the syntax for SELECT IN statement for SQLITE?"),e(a)]),s(" stackoverflow")]),n("li",null,[n("a",qn,[s("SQLite FULL OUTER JOIN Emulation"),e(a)]),s(" sqlitetutorial")])])])}const Rn=o(l,[["render",xn],["__file","01.5.html.vue"]]);export{Rn as default};
