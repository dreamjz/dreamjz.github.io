import{_ as t,Z as o,$ as p,a0 as a,a1 as n,a2 as i,a4 as s,H as c}from"./framework-d03928c9.js";const l={},r=s(`<h1 id="_11-9-空接口" tabindex="-1"><a class="header-anchor" href="#_11-9-空接口" aria-hidden="true">#</a> 11.9 空接口</h1><h2 id="_11-9-1-概念" tabindex="-1"><a class="header-anchor" href="#_11-9-1-概念" aria-hidden="true">#</a> 11.9.1 概念</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>interface{}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>空接口或者最小接口</strong> 不包含任何方法，它对实现不做任何要求</p><p>可以给一个空接口类型的变量 <code>var val interface {}</code> 赋任何类型的值。</p><h2 id="_11-9-2-构建通用类型或包含不同类型变量的数组" tabindex="-1"><a class="header-anchor" href="#_11-9-2-构建通用类型或包含不同类型变量的数组" aria-hidden="true">#</a> 11.9.2 构建通用类型或包含不同类型变量的数组</h2><p>可以通过空接口作为数组元素类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时需要利用类型断言<code>type-switch</code></p><h2 id="_11-9-3-复制数据切片至空接口切片" tabindex="-1"><a class="header-anchor" href="#_11-9-3-复制数据切片至空接口切片" aria-hidden="true">#</a> 11.9.3 复制数据切片至空接口切片</h2><p>将切片中的数据复制到一个空接口切片中会出现编译错误</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> dataSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>myType <span class="token operator">=</span> <span class="token function">FuncReturnSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> interfaceSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> dataSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cannot use dataSlice (type []myType) as type []interface { } in assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),d={href:"https://github.com/golang/go/wiki/InterfaceSlice",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="_11-9-4-通用类型的节点数据结构" tabindex="-1"><a class="header-anchor" href="#_11-9-4-通用类型的节点数据结构" aria-hidden="true">#</a> 11.9.4 通用类型的节点数据结构</h2><p>在链表中，节点数据可以利用空接口实现通用数据字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	le   <span class="token operator">*</span>Node
	data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	ri   <span class="token operator">*</span>Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-9-5-接口到接口" tabindex="-1"><a class="header-anchor" href="#_11-9-5-接口到接口" aria-hidden="true">#</a> 11.9.5 接口到接口</h2><p>一个接口的值可以赋值给另一个接口变量，只要底层类型实现了必要的方法。这个转换是在运行时进行检查的，转换失败会导致一个运行时错误</p><p>假定：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ai AbsInterface <span class="token comment">// declares method Abs()</span>
<span class="token keyword">type</span> SqrInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> float
<span class="token punctuation">}</span>
<span class="token keyword">var</span> si SqrInterface
pp <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token comment">// say *Point implements Abs, Sqr</span>
<span class="token keyword">var</span> empty <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么下面的语句和类型断言是合法的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>empty <span class="token operator">=</span> pp                <span class="token comment">// everything satisfies empty</span>
ai <span class="token operator">=</span> empty<span class="token punctuation">.</span><span class="token punctuation">(</span>AbsInterface<span class="token punctuation">)</span> <span class="token comment">// underlying value pp implements Abs()</span>
<span class="token comment">// (runtime failure otherwise)</span>
si <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token punctuation">(</span>SqrInterface<span class="token punctuation">)</span> <span class="token comment">// *Point has Sqr() even though AbsInterface doesn’t</span>
empty <span class="token operator">=</span> si             <span class="token comment">// *Point implements empty set</span>
<span class="token comment">// Note: statically checkable so type assertion not necessary.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function k(v,m){const e=c("ExternalLinkIcon");return o(),p("div",null,[r,a("p",null,[n("原因是它们俩在内存中的布局是不一样的（参考 "),a("a",d,[n("Go wiki"),i(e)]),n("）")]),u])}const b=t(l,[["render",k],["__file","11.9.html.vue"]]);export{b as default};
