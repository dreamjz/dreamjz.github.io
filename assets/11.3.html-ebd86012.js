import{_ as l,Z as p,$ as o,a0 as n,a1 as s,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const c={},r=n("p",null,"使用二分查找的要点:",-1),d=n("ul",null,[n("li",null,"解的范围确定, 即解的最大/小值已知"),n("li",null,[s("每次都能将范围缩小"),n("strong",null,"一半")])],-1),u=n("h2",{id:"_11-3-1-问题72-平方根",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-3-1-问题72-平方根","aria-hidden":"true"},"#"),s(" 11.3.1 问题72: 平方根")],-1),m={href:"https://leetcode.cn/problems/jJ0w9p/",target:"_blank",rel:"noopener noreferrer"},k=t(`<blockquote><p>给定一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的平方根，即实现 <code>int sqrt(int x)</code> 函数。</p><p>正数的平方根有两个，只输出其中的正数平方根。</p><p>如果平方根不是整数，输出只保留整数的部分，小数部分将被舍去。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: x = 4
输出: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: x = 8
输出: 2
解释: 8 的平方根是 2.82842...，由于小数部分将被舍去，所以返回 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>0 &lt;= x &lt;= 2^31 - 1</code></li></ul></blockquote><h3 id="_11-3-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_11-3-1-1-分析-题解" aria-hidden="true">#</a> 11.3.1.1 分析&amp;题解</h3>`,2),v=n("p",null,[s("对于整数"),n("code",null,"n"),s(",若不为0, 其正数平方根"),n("code",null,"m"),s(" 取值范围为"),n("code",null,"[1, n]"),s(", 且满足 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"m"),n("mn",null,"2")]),n("mo",null,"≤"),n("mi",null,"n"),n("mo",{separator:"true"},","),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mn",null,"1"),n("msup",null,[n("mo",{stretchy:"false"},")"),n("mn",null,"2")]),n("mo",null,">"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"m^2 \\le n, (m+1)^2 > n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.9501em","vertical-align":"-0.136em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},[n("span",{class:"mclose"},")"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])])],-1),b=t(`<p>那么可以使用二分查找来求平方根.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> x
    <span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
        mid <span class="token operator">:=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        
        <span class="token keyword">if</span> mid <span class="token operator">&lt;=</span> x<span class="token operator">/</span>mid <span class="token punctuation">{</span>
            <span class="token keyword">if</span> mid<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;</span> x<span class="token operator">/</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mid
            <span class="token punctuation">}</span>

            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-3-2-问题73-狒狒吃香蕉" tabindex="-1"><a class="header-anchor" href="#_11-3-2-问题73-狒狒吃香蕉" aria-hidden="true">#</a> 11.3.2 问题73: 狒狒吃香蕉</h2>`,3),h={href:"https://leetcode.cn/problems/nZZqjQ/",target:"_blank",rel:"noopener noreferrer"},g=t(`<blockquote><p>狒狒喜欢吃香蕉。这里有 <code>N</code> 堆香蕉，第 <code>i</code> 堆中有 <code>piles[i]</code> 根香蕉。警卫已经离开了，将在 <code>H</code> 小时后回来。</p><p>狒狒可以决定她吃香蕉的速度 <code>K</code> （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>K</code> 根。如果这堆香蕉少于 <code>K</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉，下一个小时才会开始吃另一堆的香蕉。</p><p>狒狒喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 <code>H</code> 小时内吃掉所有香蕉的最小速度 <code>K</code>（<code>K</code> 为整数）。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: piles = [3,6,7,11], H = 8
输出: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: piles = [30,11,23,4,20], H = 5
输出: 30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: piles = [30,11,23,4,20], H = 6
输出: 23
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= piles.length &lt;= 10^4</code></li><li><code>piles.length &lt;= H &lt;= 10^9</code></li><li><code>1 &lt;= piles[i] &lt;= 10^9</code></li></ul></blockquote><h3 id="_11-3-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_11-3-2-1-分析-题解" aria-hidden="true">#</a> 11.3.2.1 分析&amp;题解</h3><p>猩猩每小时吃的个数范围为: <code>[1, maxPile]</code>, <code>maxPile</code>是堆中最大的香蕉数目.</p><p>使用二分查找寻找吃香蕉的最小速度, 其满足速度为<code>mid</code> 时间小于等于<code>H</code> 并且 <code>mid-1</code>时间大于<code>H</code>.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>piles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> h <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// find max pile</span>
	maxPile <span class="token operator">:=</span> math<span class="token punctuation">.</span>MinInt
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> piles <span class="token punctuation">{</span>
		<span class="token keyword">if</span> p <span class="token operator">&gt;</span> maxPile <span class="token punctuation">{</span>
			maxPile <span class="token operator">=</span> p
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// binary search</span>
	left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> maxPile
	<span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
		mid <span class="token operator">:=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>

		<span class="token comment">// 能吃完</span>
		<span class="token keyword">if</span> <span class="token function">getTime</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> h <span class="token punctuation">{</span>
			<span class="token comment">// 速度 1 或 能吃完的最小速度</span>
			<span class="token keyword">if</span> mid <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">getTime</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> h <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid
			<span class="token punctuation">}</span>

			<span class="token comment">// 减小速度</span>
			right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 加大速度</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getTime</span><span class="token punctuation">(</span>piles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> speed <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> piles <span class="token punctuation">{</span>
		<span class="token keyword">if</span> p <span class="token operator">%</span> speed <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			t <span class="token operator">+=</span> p<span class="token operator">/</span>speed
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			t <span class="token operator">+=</span> p<span class="token operator">/</span>speed <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,6),x={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function f(_,y){const a=i("ExternalLinkIcon");return p(),o("div",null,[r,d,u,n("p",null,[n("a",m,[s("LCR 072. x 的平方根"),e(a)])]),k,v,b,n("p",null,[n("a",h,[s("LCR 073. 爱吃香蕉的狒狒"),e(a)])]),g,n("ol",null,[n("li",null,[n("a",x,[s("剑指Offer（专项突破版）"),e(a)])])])])}const H=l(c,[["render",f],["__file","11.3.html.vue"]]);export{H as default};
