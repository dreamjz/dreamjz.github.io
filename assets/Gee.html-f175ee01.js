import{_ as p,Z as o,$ as i,a0 as n,a1 as s,a2 as e,a3 as t,H as c}from"./framework-dee406ed.js";const l={},r=t(`<h2 id="_1-核心思想" tabindex="-1"><a class="header-anchor" href="#_1-核心思想" aria-hidden="true">#</a> 1. 核心思想</h2><p>Gee 的基本原理是实现<code>http.Handler</code>接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> http

<span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span>address <span class="token builtin">string</span><span class="token punctuation">,</span> h Handler<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数<code>ListenAndServe(address string, h Handler) error</code>中，若<code>h</code>不为<code>nil</code>，则会将所有的 HTTP 请求交由<code>handler</code>的实例进行处理。</p><h2 id="_2-设计" tabindex="-1"><a class="header-anchor" href="#_2-设计" aria-hidden="true">#</a> 2. 设计</h2><h3 id="_2-1-上下文-context" tabindex="-1"><a class="header-anchor" href="#_2-1-上下文-context" aria-hidden="true">#</a> 2.1 上下文 Context</h3><p>Context 的生命周期贯穿整个 HTTP Request 的处理流程，用于：</p><ol><li>存储处理请求所需要的数据，如：<code>http.Request</code></li><li>存储处理过程中产生的数据，如：解析动态路由后得到的路由参数</li><li>封装重复代码，简化代码并降低出错率，如：封装返回类型为 JSON 的数据的代码，使得用户只需调用一个函数即可，无需编写详细的响应报文。</li><li>作为中间件和处理函数的参数，使得整个处理流程中共享同一个 Context</li></ol><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Writer http<span class="token punctuation">.</span>ResponseWriter
	Req    <span class="token operator">*</span>http<span class="token punctuation">.</span>Request
	<span class="token comment">// Request info</span>
	Path   <span class="token builtin">string</span>
	Method <span class="token builtin">string</span>
	Params <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// Dynamic route parameters</span>
	<span class="token comment">// Response info</span>
	StatusCode <span class="token builtin">int</span>
	<span class="token comment">// Middleware</span>
	handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc
	index    <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h4><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131323215.png" alt="Context的生命周期" tabindex="0" loading="lazy"><figcaption>Context的生命周期</figcaption></figure><h3 id="_2-2-动态路由" tabindex="-1"><a class="header-anchor" href="#_2-2-动态路由" aria-hidden="true">#</a> 2.2 动态路由</h3>`,13),u={href:"https://leetcode.cn/problems/QC3q1f/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h4 id="数据结构-1" tabindex="-1"><a class="header-anchor" href="#数据结构-1" aria-hidden="true">#</a> 数据结构</h4><h5 id="前缀树-trie" tabindex="-1"><a class="header-anchor" href="#前缀树-trie" aria-hidden="true">#</a> 前缀树 Trie</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> trieNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pattern  <span class="token builtin">string</span>      <span class="token comment">// 待匹配的路由</span>
	part     <span class="token builtin">string</span>      <span class="token comment">// 当前节点的内容</span>
	children <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode <span class="token comment">// 子节点</span>
	isWild   <span class="token builtin">bool</span>        <span class="token comment">// 是否进行精准匹配，默认 false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有<code>pattern</code>不为空时，表示当前路径为已注册的路由。</p><p>例如：<code>/hello/:name/age</code>,<code>/hello/:name</code>, <code>/asset/*filepath</code></p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131336746.png" alt="image-20231013133618919" tabindex="0" loading="lazy"><figcaption>image-20231013133618919</figcaption></figure><h5 id="路由表" tabindex="-1"><a class="header-anchor" href="#路由表" aria-hidden="true">#</a> 路由表</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> router <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	trieRoots <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode
	handlers  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>trieRoots</code>：每种 HTTP Method 对应一个路由前缀树</li><li><code>handlers</code>：注册的路由对应的处理函数</li></ul><h3 id="_2-3-路由分组" tabindex="-1"><a class="header-anchor" href="#_2-3-路由分组" aria-hidden="true">#</a> 2.3 路由分组</h3><h4 id="数据结构-2" tabindex="-1"><a class="header-anchor" href="#数据结构-2" aria-hidden="true">#</a> 数据结构</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RouterGroup <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    prefix      <span class="token builtin">string</span>        <span class="token comment">// 路由组前缀</span>
    middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc <span class="token comment">// 中间件</span>
    parent      <span class="token operator">*</span>RouterGroup  <span class="token comment">// 父母分组</span>
    engine      <span class="token operator">*</span>Engine       <span class="token comment">// 所有分组持有同一个 Engine 实例</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Engine 可以被视作顶层的路由分组：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>RouterGroup
	router <span class="token operator">*</span>router
	groups <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>RouterGroup <span class="token comment">// store all groups</span>
	<span class="token comment">// HTML rendering</span>
	htmlTmpls <span class="token operator">*</span>template<span class="token punctuation">.</span>Template
	funcMap   template<span class="token punctuation">.</span>FuncMap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>RouterGroup</code>：拥有<code>RoterGroup</code>的所有功能</li><li><code>groups</code>：存储所有的分组</li></ul><p>路由分组实际上构成了树形结构，子节点存在指向父母节点的指针：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310131349330.png" alt="image-20231013134920473" tabindex="0" loading="lazy"><figcaption>image-20231013134920473</figcaption></figure><h3 id="_2-4-中间件" tabindex="-1"><a class="header-anchor" href="#_2-4-中间件" aria-hidden="true">#</a> 2.4 中间件</h3><p>中间件(middlewares)，简单说，就是非业务的技术类组件。Web 框架本身不可能去理解所有的业务，因而不可能实现所有的功能。因此，框架需要有一个插口，允许用户自己定义功能，嵌入到框架中，仿佛这个功能是框架原生支持的一样。</p><p>中间件和处理函数是一样的数据结构：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>中间件应用于路由分组：</p><ol><li>每个分组有若干各中间件</li><li>子分组共享父母分组的中间件</li></ol><h4 id="中间件-处理函数调用链" tabindex="-1"><a class="header-anchor" href="#中间件-处理函数调用链" aria-hidden="true">#</a> 中间件-处理函数调用链</h4><p>在收到 HTTP 请求时：</p><ol><li>解析请求路径</li><li>将路径对应的路由分组中的 中间件 加入到 <code>Context.Handlers</code>中</li><li>获取路径对应的路由处理函数，加入到 <code>Context.Handlers</code></li><li>调用<code>Context.Next</code>开始执行</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>index<span class="token operator">++</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>
	<span class="token keyword">for</span> c<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>c<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>index<span class="token operator">++</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>c.Next()</code>用于执行下一个函数，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    part1
    c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    part2
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    part3
    c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    part4
<span class="token punctuation">}</span>

<span class="token comment">// 执行流程</span>
part1 <span class="token operator">-</span><span class="token operator">&gt;</span> part3 <span class="token operator">-</span><span class="token operator">&gt;</span> Handler <span class="token operator">-</span><span class="token operator">&gt;</span> part <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">&gt;</span> part2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-错误恢复" tabindex="-1"><a class="header-anchor" href="#_2-5-错误恢复" aria-hidden="true">#</a> 2.5 错误恢复</h3><p>将错误恢复功能作为中间件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				message <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">trace</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
				c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> <span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捕获 panic，调用<code>c.Fail</code>跳过剩下的函数，并返回错误</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Fail</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> errMsg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token comment">// 跳过剩下的函数</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> H<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> errMsg<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-处理流程" tabindex="-1"><a class="header-anchor" href="#_3-处理流程" aria-hidden="true">#</a> 3. 处理流程</h2><p>注册路由为<code>GET /hello/:name</code>,以处理 <code>GET /hello/Alice</code>为例：</p><ol><li>创建 Context 实例</li><li>将请求路径所在的路由组中的 中间件， 加入<code>Context.Handlers</code></li><li>解析路由，获取路由参数<code>name: Alice</code>，存入 <code>Context.Params</code></li><li>获取对应的处理函数，加入<code>Context.Handlers</code></li><li>调用<code>c.Next()</code>开始处理</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,38),k={href:"https://geektutu.com/post/gee.html",target:"_blank",rel:"noopener noreferrer"};function v(m,h){const a=c("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[s("哈希表只能支持静态路由，动态路由需要用到前缀树(Trie)（"),n("a",u,[s("LCR 062. 实现 Trie (前缀树)"),e(a)]),s("）。")]),d,n("ol",null,[n("li",null,[n("a",k,[s("七天用Go从零实现系列"),e(a)])])])])}const g=p(l,[["render",v],["__file","Gee.html.vue"]]);export{g as default};
