const n=JSON.parse('{"key":"v-2b3b28d2","path":"/note/golang/open-source-books/advanced-go-programming/04.3.html","title":"04.3 玩转 RPC","lang":"zh-CN","frontmatter":{"title":"04.3 玩转 RPC","date":"2021-12-24T00:00:00.000Z","category":["golang","rpc"],"timeline":true},"headers":[{"level":2,"title":"4.3  玩转 RPC","slug":"_4-3-玩转-rpc","link":"#_4-3-玩转-rpc","children":[{"level":3,"title":"4.3.1 客户端 RPC 实现原理","slug":"_4-3-1-客户端-rpc-实现原理","link":"#_4-3-1-客户端-rpc-实现原理","children":[]},{"level":3,"title":"4.3.2 基于 RPC 实现 Watch 功能","slug":"_4-3-2-基于-rpc-实现-watch-功能","link":"#_4-3-2-基于-rpc-实现-watch-功能","children":[]},{"level":3,"title":"4.3.3 反向 RPC","slug":"_4-3-3-反向-rpc","link":"#_4-3-3-反向-rpc","children":[]},{"level":3,"title":"4.3.4 上下文信息","slug":"_4-3-4-上下文信息","link":"#_4-3-4-上下文信息","children":[]}]},{"level":2,"title":"Referece","slug":"referece","link":"#referece","children":[]}],"readingTime":{"minutes":6.19,"words":1858},"filePathRelative":"note/golang/open-source-books/advanced-go-programming/04.3.md","localizedDate":"2021年12月24日","excerpt":"<h2> 4.3  玩转 RPC</h2>\\n<p>不同的场景中 RPC 有着不同的需求， 因此开源社区中诞生了各种 RPC 框架，本节将介绍 Go 内置的 RPC 框架在一些特殊场景的用法。</p>\\n<h3> 4.3.1 客户端 RPC 实现原理</h3>\\n<p>Go 语言的 RPC 库最简单的使用方式是通过 <code>Client.Call</code> 方法进行同步阻塞调用，方法实现如下：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Call invokes the named function, waits for it to complete, and returns its error status.</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>client <span class=\\"token operator\\">*</span>Client<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Call</span><span class=\\"token punctuation\\">(</span>serviceMethod <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> args <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> reply <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\tcall <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&lt;-</span>client<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Go</span><span class=\\"token punctuation\\">(</span>serviceMethod<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">,</span> reply<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">chan</span> <span class=\\"token operator\\">*</span>Call<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>Done\\n\\t<span class=\\"token keyword\\">return</span> call<span class=\\"token punctuation\\">.</span>Error\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
