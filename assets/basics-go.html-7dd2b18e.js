const e=JSON.parse('{"key":"v-34935b8c","path":"/note/rpc/protocol-buffers/basics-go.html","title":"Protocol Buffer Basics: Go","lang":"zh-CN","frontmatter":{"title":"Protocol Buffer Basics: Go","date":"2021-12-22T00:00:00.000Z","category":["golang","protocol buffers"],"timeline":true},"headers":[{"level":2,"title":"1. Why use protocol buffers","slug":"_1-why-use-protocol-buffers","link":"#_1-why-use-protocol-buffers","children":[]},{"level":2,"title":"2. Defining your protocol format","slug":"_2-defining-your-protocol-format","link":"#_2-defining-your-protocol-format","children":[]},{"level":2,"title":"3. Compiling your protocol buffers","slug":"_3-compiling-your-protocol-buffers","link":"#_3-compiling-your-protocol-buffers","children":[]},{"level":2,"title":"4. The Protocol Buffer API","slug":"_4-the-protocol-buffer-api","link":"#_4-the-protocol-buffer-api","children":[]},{"level":2,"title":"5. Writing a Message","slug":"_5-writing-a-message","link":"#_5-writing-a-message","children":[]},{"level":2,"title":"6. Reading a Message","slug":"_6-reading-a-message","link":"#_6-reading-a-message","children":[]},{"level":2,"title":"7. Extending a Protocol Buffer","slug":"_7-extending-a-protocol-buffer","link":"#_7-extending-a-protocol-buffer","children":[{"level":3,"title":"Reference","slug":"reference","link":"#reference","children":[]}]}],"readingTime":{"minutes":5.83,"words":1748},"filePathRelative":"note/rpc/protocol-buffers/basics-go.md","localizedDate":"2021年12月22日","excerpt":"<h1> Protocol Buffer Basics: Go</h1>\\n<p>This tutorial provides a basic Go programmer’s introduction to working with protocol buffers, using the <code>proto3</code> version of the protocol buffers language. By walking through creating a simple example application, it shows you how to</p>\\n<ul>\\n<li>Define message formats in a <code>.proto</code> file</li>\\n<li>Use the protocol buffer compiler</li>\\n<li>Use the Go protocol buffer API to write and read message</li>\\n</ul>"}');export{e as data};
