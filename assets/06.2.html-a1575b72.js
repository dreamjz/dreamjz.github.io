const e=JSON.parse('{"key":"v-3710e15e","path":"/note/golang/open-source-books/the-way-to-go/06/06.2.html","title":"6.2 函数参数与返回值","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.2.1 参数传递","slug":"_6-2-1-参数传递","link":"#_6-2-1-参数传递","children":[]},{"level":2,"title":"6.2.2 命名的返回值 named return variables","slug":"_6-2-2-命名的返回值-named-return-variables","link":"#_6-2-2-命名的返回值-named-return-variables","children":[]},{"level":2,"title":"6.2.3 空白符 (blank indentifier)","slug":"_6-2-3-空白符-blank-indentifier","link":"#_6-2-3-空白符-blank-indentifier","children":[]},{"level":2,"title":"6.2.4 改变外部变量 (outside variable)","slug":"_6-2-4-改变外部变量-outside-variable","link":"#_6-2-4-改变外部变量-outside-variable","children":[]}],"git":{"updatedTime":1684038853000},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"note/golang/open-source-books/the-way-to-go/06/06.2.md","excerpt":"<h1> 6.2 函数参数与返回值</h1>\\n<h2> 6.2.1 参数传递</h2>\\n<p><strong>指针也是变量类型，有自己的地址和值，通常指针的值指向一个变量的地址。所以，按引用传递也是按值传递</strong>。</p>"}');export{e as data};
