import{_ as o,Z as p,$ as i,a0 as n,a1 as s,a2 as e,a3 as t,H as c}from"./framework-dee406ed.js";const l={},r=t(`<p>When our primary interest is to go through a collection of items sequentially, one by one, we can organize the items as a <em>linked list</em>: a basic data structure where each item contains the information that we need to get to the next item. The primary advantage of linked lists over arrays is that the <mark>links provide us with the capability to rearrange the items efficiently</mark>. This flexibility is gained at the expense of quick access to any arbitrary item in the list, because the only way to get to an item in the list is to follow links, one node to the next. There are a number of ways to organize linked lists, all starting with the following basic definition.</p><h2 id="_3-3-1-definition" tabindex="-1"><a class="header-anchor" href="#_3-3-1-definition" aria-hidden="true">#</a> 3.3.1 Definition</h2><p><strong>Definition 3.2</strong> <em>A</em> <strong>linked list</strong> <em>is a set of items where each item is part of a</em> <strong>node</strong> <em>that also contains a</em> <strong>link</strong> <em>to a node</em>.</p><p>We define nodes in terms of references to nodes, so linked lists are sometimes referred to as <em>self-referent</em> structures. Moreover, although a node’s link usually refers to a different node, it could refer to the node itself, so linked lists can also be <em>cyclic</em> structures.</p><p>Normally, we think of linked lists as implementing a sequential arrangement of a set of items: Starting at a given node, we consider its item to be first in the sequence. Then, we follow its link to another node, which gives us an item that we consider to be second in the sequence, and so forth. In principle, the list could be cyclic and the sequence could seem infinite, but we most often work with lists that correspond to a simple sequential arrangement of a finite set of items, adopting one of the following conventions for the link in the final node:</p><ul><li>It is a <em>null link</em> that points to no node.</li><li>It refers to a <em>dummy node</em> that contains no item.</li><li>It refers back to the first node, making the list a <em>circular</em> list.</li></ul><p>In each case, following links from the first node to the final one defines a sequential arrangement of items. Arrays define a sequential ordering of items as well; in an array, however, the sequential organization is provided implicitly, by the position in the array. (Array also support arbitrary access by index, which lists do not.)</p><p>In C, we use points for links and structures for nodes. The <code>typedef</code> declaration gives us a way to refer to links and nodes. Links are pointers to nodes, and nodes consist of items and links. :</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
  Item item<span class="token punctuation">;</span>
  link next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>Memory allocation is a central consideration in the effective use of linked lists.</mark> Although we have defined a single structure, it is important to remember that we will have many instances of this. Generally, we do not know the number of nodes that we will need until our program is executing, and various parts of our programs might have similar calls on the available memory, so we make use of system programs to keep track of our memory usage.</p><p>To begin, whenever we want to use a new node, we need to create an instance of a node structure and to reserve memory for it :</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>link x <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The correspondence between links and C pointers is essential, but we must bear in mind that the former is an abstraction and the latter a concrete representation.</p><h2 id="_3-3-2-deletion-and-insertion" tabindex="-1"><a class="header-anchor" href="#_3-3-2-deletion-and-insertion" aria-hidden="true">#</a> 3.3.2 Deletion and Insertion</h2><p>Figures 3.3 and 3.4 show the two fundamental operations that perform on linked lists. We can <em>delete</em> any item from a linked list and <em>insert</em> an item into a linked list at any point.</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220127111118965.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>To delete the node following node x, we use the statement :</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>t <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token comment">// or simply </span>
x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220127111911018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>To insert node t into a list at a position following node x:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>t<span class="token operator">-&gt;</span>next <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The simplicity of insertion and deletion is the <em>raison d’etre</em> (reason to be, 这里为啥用法语。。。) of linked lists.</p><p>The corresponding operations are unnatural and inconvenient in arrays, because they require moving all of the array’s contents following the affected item.</p><p>By contrast, linked lists are <em>not</em> well suited for the <em>find the kth item</em> (find an item given its index) operation that simply by accessing a[k]; in a list,we have to traverse <em>k</em> links. Another operation that is unnatural on singly linked lists is <em>find the item before a given item</em>.</p><p>When we remove a node from a linked list using <code>x-&gt;next = x-&gt;next-&gt;next</code>, we may never be able to access it again. For small programs, this is no special concern, but we generally regard it as good programming practice to use the function <code>free</code>, which is the counterpart to <code>malloc</code>, for any node that we no longer wish to use.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>t <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Specifically, the sequence of instructions not only removes t from our list but also informs the system that the memory it occupies may be used for some other purpose. We pay particular attention to <code>free</code> when we have large list objects, or large numbers of them.</p><h2 id="_3-3-3-josephus-problem" tabindex="-1"><a class="header-anchor" href="#_3-3-3-josephus-problem" aria-hidden="true">#</a> 3.3.3 Josephus problem</h2>`,28),u={href:"https://en.wikipedia.org/wiki/Circle",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"The problem—given the number of people, starting point, direction, and number to be skipped—is to choose the position in the initial circle to avoid execution.",-1),k=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// program 3.9</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> Link<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> item<span class="token punctuation">;</span>
    Link next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Link t <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Link x <span class="token operator">=</span> t<span class="token punctuation">;</span>
    t<span class="token operator">-&gt;</span>item <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    t<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>

    <span class="token comment">// create a circular list</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        x<span class="token operator">-&gt;</span>item <span class="token operator">=</span> i<span class="token punctuation">;</span>
        x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// remove Mth item</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// delete node x</span>
        Link d <span class="token operator">=</span> x<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        x<span class="token operator">-&gt;</span>next <span class="token operator">=</span> d<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token comment">// release mem</span>
        <span class="token function">free</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        N<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">-&gt;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To represent people arranged in a circle, we build a circular linked list. The <code>i</code> represents the <code>i</code>th person in the circle. After building a one-node circular list for 1, we insert 2 through <em>N</em> after that node, resulting in a circle with 1 through <em>N</em>, leaving x pointing to N. Then we skip <code>M - 1</code> nodes, beginning with 1, and set the link of the <code>M - 1</code> st to skip the <code>M</code>th, continuing until only one node is left.</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220127160143243.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The Sieve of Eratosthenes and the Josephus problem clearly illustrate the distinction between using arrays and using linked lists to represent a sequentially organized collection of objects.</p><ul><li><strong>Sieve of Eratosthenes</strong>: Using a linked list would be <strong>costly</strong> because the algorithm’s efficiency depends on being able to access any array position quickly.</li><li><strong>Josephus problem</strong> : Using an array would be <strong>costly</strong> because the algorithm’s efficiency depends on the ability to delete items quickly.</li></ul><p>When we choose a data structure, we <em>must</em> be aware of the effects of that choice upon the efficiency of the algorithms that will process the data. This interplay between data structures and algorithms is at the heart of the design process.</p><h3 id="_3-3-3-1-using-array-for-josephus-problem" tabindex="-1"><a class="header-anchor" href="#_3-3-3-1-using-array-for-josephus-problem" aria-hidden="true">#</a> 3.3.3.1 Using array for Josephus Problem</h3><p>In C, pointers provide a direct and convenient concrete realization of the abstract concept of a linked list, but the essential value of the abstraction does not depend on any particular implementation. Figure 3.6 shous how we could use arrays of int to implement the linked list.</p><p>Linked lists are thus useful even in the simplest of programming environments. Linked lists were useful well before pointer constructs were available in high-level languages such as C. Eevn in modern systems, simple array-based implementations are sometimes convenient.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">print_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_indices</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_all</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:\\n\\t&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_indices</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_arr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_arr</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span><span class="token operator">*</span> item <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// start time</span>
    <span class="token class-name">clock_t</span> begin <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// print_all(item, next, N, &quot;Before&quot;);</span>

    <span class="token keyword">int</span> x <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> item<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> item<span class="token punctuation">[</span>next<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            x <span class="token operator">=</span> next<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// remove Mth item</span>
        next<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>next<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// end time</span>
    <span class="token class-name">clock_t</span> end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result: %d\\n&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// print_all(item, next, N, &quot;After&quot;);</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Mem usage: %d bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Time spent: %f s&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220127171124178.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对比两种实现：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> ./LinkedListInArray <span class="token number">100000</span> <span class="token number">100000</span>
Result: <span class="token number">66029</span>
Mem usage: <span class="token number">1600000</span> bytes
Time spent: <span class="token number">18.794240</span> s
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> ./LinkedListInPointer <span class="token number">100000</span> <span class="token number">100000</span>
Result: <span class="token number">66029</span>
Max mem usage: <span class="token number">1600000</span> bytes
Time spent: <span class="token number">27.371862</span> s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间上采用数组实现的链表运行时间要短一些（指针实现即使是注释掉了<code>free</code> 函数，但是运行时间还是比较长，可能是数组的随机访问要快些？）</p><p>内存使用上，数组实现占用的内存是固定不变的，而指针实现在删除节点元素时会释放掉不用的内存。</p><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises" aria-hidden="true">#</a> Exercises</h2><ul><li>3.24 Write</li><li>// TODO: complete it later 2022-01-28</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,18),m={href:"https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structures-dp-0201314525/dp/0201314525/ref=mt_other?_encoding=UTF8&me=&qid=",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Josephus_problem",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=c("ExternalLinkIcon");return p(),i("div",null,[r,n("blockquote",null,[n("p",null,[s("People are standing in a "),n("a",u,[s("circle"),e(a)]),s(" waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed.")]),d]),k,n("ol",null,[n("li",null,[n("a",m,[s("Algorithms in C"),e(a)])]),n("li",null,[n("a",v,[s("Josephus problem"),e(a)]),s(" wikipedia")])])])}const y=o(l,[["render",b],["__file","03.3.html.vue"]]);export{y as default};
