import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as e,a4 as t,H as i}from"./framework-d03928c9.js";const l={},u=t('<h2 id="_1-stack-and-heap" tabindex="-1"><a class="header-anchor" href="#_1-stack-and-heap" aria-hidden="true">#</a> 1. Stack and Heap</h2><p>Golang 程序会在两个区域为变量分配内存：</p><ol><li>栈(stack)，每个 goroutine 持有自身独有的栈空间</li><li>堆(heap)</li></ol><p>在栈上分配和回收内存开销很低，仅需两个CPU指令：<code>PUSH</code>和<code>POP</code>。</p><p>在堆上分配内存，很大的开销来自于 GC。</p>',5),d=n("p",null,"标记清除收集器是跟踪式垃圾收集器，其执行过程可以分成标记（Mark）和清除（Sweep）两个阶段：",-1),r=n("ul",null,[n("li",null,"标记阶段 — 从根对象出发查找并标记堆中所有存活的对象；"),n("li",null,"清除阶段 — 遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表。")],-1),k=n("p",null,"标记清除算法的一个典型耗时是在标记期间，需要暂停程序（Stop the world，STW），标记结束之后，用户程序才可以继续执行。",-1),v={href:"https://geektutu.com/post/qa-golang-2.html#Q5-%E7%AE%80%E8%BF%B0-Go-%E8%AF%AD%E8%A8%80GC-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="_2-逃逸分析" tabindex="-1"><a class="header-anchor" href="#_2-逃逸分析" aria-hidden="true">#</a> 2. 逃逸分析</h2><p>逃逸分析(escape analysis) 是编译器决定内存的分配位置的方式。</p><h3 id="_2-1-指针逃逸" tabindex="-1"><a class="header-anchor" href="#_2-1-指针逃逸" aria-hidden="true">#</a> 2.1 指针逃逸</h3><p>在函数中创建了一个对象，函数返回了对象的指针，此时对象无法分配在栈上，函数返回时将被回收，所以只能分配在堆上。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> s <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>s <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token function">getS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$go</span> build <span class="token parameter variable">-gcflags</span> <span class="token string">&quot;-m&quot;</span>  .<span class="token punctuation">\\</span>escape.go
.<span class="token punctuation">\\</span>escape.go:7:6: can inline getS
.<span class="token punctuation">\\</span>escape.go:11:6: can inline escape
.<span class="token punctuation">\\</span>escape.go:12:11: inlining call to getS
.<span class="token punctuation">\\</span>escape.go:8:9: <span class="token operator">&amp;</span>s<span class="token punctuation">{</span><span class="token punctuation">}</span> escapes to heap
.<span class="token punctuation">\\</span>escape.go:12:11: <span class="token operator">&amp;</span>s<span class="token punctuation">{</span><span class="token punctuation">}</span> does not escape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-gcflags -m</code>：查看编译器优化决策</li></ul><p>可以看到<code>&amp;s{}</code>被逃逸到堆上。</p><h3 id="_2-3-动态类型逃逸" tabindex="-1"><a class="header-anchor" href="#_2-3-动态类型逃逸" aria-hidden="true">#</a> 2.3 动态类型逃逸</h3><p><code>interface{}</code>可以存储任意类型，编译期难以判断具体类型，此时会发生逃逸。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">escapeAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token number">1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">readAny</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> v
	<span class="token boolean">_</span> <span class="token operator">=</span> c
<span class="token punctuation">}</span>
<span class="token comment">// escape analysis</span>
<span class="token punctuation">.</span>\\escape<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> b escapes to heap
<span class="token punctuation">.</span>\\escape<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> v does not escape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到此时<code>b</code>发生了逃逸。</p><h3 id="_2-4-栈空间不足" tabindex="-1"><a class="header-anchor" href="#_2-4-栈空间不足" aria-hidden="true">#</a> 2.4 栈空间不足</h3><p>操作系统对内核线程使用的栈空间是有大小限制的，64 位系统上通常是 8 MB。可以使用 <code>ulimit -a</code> 命令查看机器上栈允许占用的内存的大小。</p><p>因为栈空间通常比较小，因此递归函数实现不当时，容易导致栈溢出。</p><p>对于 Go 语言来说，运行时(runtime) 尝试在 goroutine 需要的时候动态地分配栈空间，goroutine 的初始栈大小为 2 KB。当 goroutine 被调度时，会绑定内核线程执行，栈空间大小也不会超过操作系统的限制。</p><p>若局部变量<strong>超过一定大小</strong>或<strong>大小不确定</strong>时，将发生逃逸。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">localEscape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    s3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span>
    s4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
    
    n <span class="token operator">:=</span> <span class="token number">1</span>
    s5 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

    <span class="token boolean">_</span> <span class="token operator">=</span> s1
    <span class="token boolean">_</span> <span class="token operator">=</span> s2
    <span class="token boolean">_</span> <span class="token operator">=</span> s3
    <span class="token boolean">_</span> <span class="token operator">=</span> s4
    <span class="token boolean">_</span> <span class="token operator">=</span> s5
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\escape.go:31:12: make([]int, 0) does not escape
.\\escape.go:32:12: make([]int, 1024) does not escape
.\\escape.go:33:12: make([]int, 2048) does not escape
.\\escape.go:34:12: make([]int, 10000) escapes to heap
.\\escape.go:36:12: make([]int, n) escapes to heap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-闭包" tabindex="-1"><a class="header-anchor" href="#_2-5-闭包" aria-hidden="true">#</a> 2.5 闭包</h3>`,20),b=n("p",null,"一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		n<span class="token operator">++</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	incre <span class="token operator">:=</span> <span class="token function">Increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">incre</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\escape.go:46:2: moved to heap: n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为函数<code>Increase</code>返回了闭包函数，闭包函数访问了外部变量<code>n</code>，此时<code>n</code>将发生逃逸。</p><h2 id="_3-根据逃逸分析提升性能" tabindex="-1"><a class="header-anchor" href="#_3-根据逃逸分析提升性能" aria-hidden="true">#</a> 3. 根据逃逸分析提升性能</h2><p>传值会拷贝整个对象，而传指针只会拷贝指针地址，指向的对象是同一个。</p><p>传指针可以减少值的拷贝，但是会导致内存分配逃逸到堆中，增加垃圾回收(GC)的负担。在对象频繁创建和删除的场景下，传递指针导致的 GC 开销可能会严重影响性能。</p><p>所以在一般情况下：</p><ul><li><p>对于需要修改原对象值，或占用内存比较大的结构体，选择传指针。</p></li><li><p>对于只读的占用内存较小的结构体，直接传值能够获得更好的性能。</p></li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,9),_={href:"https://geektutu.com/post/hpg-escape-analysis.html",target:"_blank",rel:"noopener noreferrer"};function f(x,y){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[d,r,k,n("p",null,[s("— "),n("a",v,[s("垃圾回收(GC)的工作原理"),e(a)])])]),m,n("blockquote",null,[b,n("p",null,[s("— "),n("a",h,[s("闭包"),e(a)])])]),g,n("ol",null,[n("li",null,[n("a",_,[s("https://geektutu.com/post/hpg-escape-analysis.html"),e(a)])])])])}const w=p(l,[["render",f],["__file","04.2.mem_escape.html.vue"]]);export{w as default};
