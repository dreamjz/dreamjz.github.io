import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as i}from"./framework-09afcf0b.js";const l={},u=n("h1",{id:"_23-依赖注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_23-依赖注入","aria-hidden":"true"},"#"),s(" 23. 依赖注入")],-1),r=n("h2",{id:"_23-1-prop-逐级透传问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_23-1-prop-逐级透传问题","aria-hidden":"true"},"#"),s(" 23.1 Prop 逐级透传问题")],-1),d={href:"https://cn.vuejs.org/guide/components/props.html",target:"_blank",rel:"noopener noreferrer"},k=t('<p>有一些多层级嵌套的组件，形成了一颗巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/prop-drilling.11201220.png" alt="Prop 逐级透传的过程图示" tabindex="0" loading="lazy"><figcaption>Prop 逐级透传的过程图示</figcaption></figure><p>注意，虽然这里的 <code>&lt;Footer&gt;</code> 组件可能根本不关心这些 props，但为了使 <code>&lt;DeepChild&gt;</code> 能访问到它们，仍然需要定义并向下传递。</p><p>如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“<strong>prop 逐级透传</strong>”，显然是我们希望尽量避免的情况。</p><p><code>provide</code> 和 <code>inject</code> 可以帮助我们解决这一问题。</p><p>一个父组件相对于其所有的后代组件，会作为<strong>依赖提供者</strong>。任何后代的组件树，无论层级有多深，都可以<strong>注入</strong>由父组件提供给整条链路的依赖。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/provide-inject.3e0505e4.png" alt="Provide/inject 模式" tabindex="0" loading="lazy"><figcaption>Provide/inject 模式</figcaption></figure><h2 id="_23-2-provide-提供" tabindex="-1"><a class="header-anchor" href="#_23-2-provide-提供" aria-hidden="true">#</a> 23.2 Provide (提供)</h2>',8),v={href:"https://cn.vuejs.org/api/composition-api-dependency-injection.html#provide",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"provide()",-1),g=t(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不使用 <code>&lt;script setup&gt;</code>，请确保 <code>provide()</code> 是在 <code>setup()</code> 同步调用的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>provide()</code> 函数接收两个参数</p><ul><li><p>第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个 <code>Symbol</code>。 后代组件会用注入名来查找期望注入的值。一个组件可以多次调用 <code>provide()</code>，使用不同的注入名，注入不同的依赖值。</p></li><li><p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供的响应式状态使后代组件可以由此和提供者建立响应式的联系。</p></li></ul><h2 id="_22-3-应用层-provide" tabindex="-1"><a class="header-anchor" href="#_22-3-应用层-provide" aria-hidden="true">#</a> 22.3 应用层 Provide</h2><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),b={href:"https://cn.vuejs.org/guide/reusability/plugins.html",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"_22-4-inject-注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_22-4-inject-注入","aria-hidden":"true"},"#"),s(" 22.4 Inject (注入)")],-1),f={href:"https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"inject()",-1),_=t(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而<strong>不会</strong>自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接。</p><p>如果没有使用 <code>&lt;script setup&gt;</code>，<code>inject()</code> 需要在 <code>setup()</code> 内同步调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-4-1-注入默认值" tabindex="-1"><a class="header-anchor" href="#_22-4-1-注入默认值" aria-hidden="true">#</a> 22.4.1 注入默认值</h3><p>默认情况下，<code>inject</code> 假设传入的注入名会被某个祖先链上的组件提供。</p><p>如果该注入名的确没有任何组件提供，则会抛出一个运行时警告。</p><p>如果在注入一个值时不要求必须有提供者，那么我们应该声明一个默认值，和 props 类似：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果没有祖先组件提供 &quot;message&quot;</span>
<span class="token comment">// \`value\` 会是 &quot;这是默认值&quot;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;这是默认值&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一些场景中，默认值可能需要通过调用一个函数或初始化一个类来取得。</p><p>为了避免在用不到默认值的情况下进行不必要的计算或产生副作用，我们可以使用工厂函数来创建默认值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_22-5-和响应式数据配合使用" tabindex="-1"><a class="header-anchor" href="#_22-5-和响应式数据配合使用" aria-hidden="true">#</a> 22.5 和响应式数据配合使用</h2><p>当提供 / 注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。</p><p>这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。</p><p>有的时候，我们可能需要在注入方组件中更改数据。在这种情况下，我们推荐在供给方组件内声明并提供一个更改数据的方法函数：</p>`,16),j=n("div",{class:"language-vue line-numbers-mode","data-ext":"vue"},[n("pre",{"7-9,":"",13:"",class:"language-vue"},[n("code",null,[n("span",{class:"token comment"},"<!-- 在供给方组件内 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"setup"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" provide"),n("span",{class:"token punctuation"},","),s(" ref "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'vue'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" location "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ref"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'North Pole'"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"updateLocation"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  location`),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'South Pole'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token function"},"provide"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'location'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  location`),n("span",{class:"token punctuation"},","),s(`
  updateLocation
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-vue line-numbers-mode","data-ext":"vue"},[n("pre",{vue:"",class:"language-vue"},[n("code",null,[n("span",{class:"token comment"},"<!-- 在注入方组件 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"setup"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" inject "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'vue'"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" location"),n("span",{class:"token punctuation"},","),s(" updateLocation "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"inject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'location'"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token attr-name"},"@click"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("updateLocation"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("{{ location }}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x={href:"https://cn.vuejs.org/api/reactivity-core.html#readonly",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"readonly()",-1),I=t(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> provide<span class="token punctuation">,</span> readonly <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;read-only-count&#39;</span><span class="token punctuation">,</span> <span class="token function">readonly</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-6-使用-symbol-作注入名" tabindex="-1"><a class="header-anchor" href="#_22-6-使用-symbol-作注入名" aria-hidden="true">#</a> 22.6 使用 Symbol 作注入名</h2><p>如果正在构建大型的应用，包含非常多的依赖提供</p><p>或者正在编写提供给其他开发者使用的组件库，建议最好使用 Symbol 来作为注入名以避免潜在的冲突。</p><p>我们通常推荐在一个单独的文件中导出这些注入名 Symbol：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// keys.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> myInjectionKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在供给方组件中</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myInjectionKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./keys.js&#39;</span>

<span class="token function">provide</span><span class="token punctuation">(</span>myInjectionKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/*
  要提供的数据
*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注入方组件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myInjectionKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./keys.js&#39;</span>

<span class="token keyword">const</span> injected <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>myInjectionKey<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function S(L,q){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("通常情况下，当需要从父组件向子组件传递数据时，会使用 "),n("a",d,[s("props"),e(a)]),s("。")]),k,n("p",null,[s("要为组件后代提供数据，需要使用到 "),n("a",v,[m,e(a)]),s(" 函数：")]),g,n("p",null,[s("在应用级别提供的数据在该应用内的所有组件中都可以注入。这在你编写"),n("a",b,[s("插件"),e(a)]),s("时会特别有用，因为插件一般都不会使用组件形式来提供值。")]),h,n("p",null,[s("要注入上层组件提供的数据，需使用 "),n("a",f,[y,e(a)]),s(" 函数：")]),_,j,w,n("p",null,[s("最后，如果你想确保提供的数据不能被注入方的组件更改，你可以使用 "),n("a",x,[P,e(a)]),s(" 来包装提供的值。")]),I])}const N=p(l,[["render",S],["__file","02.7.provide_inject.html.vue"]]);export{N as default};
