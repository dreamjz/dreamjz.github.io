import{_ as p,Z as o,$ as e,a0 as n,a1 as a,a2 as t,a4 as c,H as l}from"./framework-d03928c9.js";const i={},u={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day6-load-balance",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="_1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_1-负载均衡策略" aria-hidden="true">#</a> 1. 负载均衡策略</h2><p>假设有多个服务实例，每个实例提供相同的功能，为了提高整个系统的吞吐量，每个实例部署在不同的机器上。客户端需要使用负载均衡策略来选择目标服务器，常见的策略：</p><ul><li>随机选择策略 - 从服务列表中随机选择一个。</li><li>轮询算法(Round Robin) - 依次调度不同的服务器，每次调度执行 i = (i + 1) mode n。</li><li>加权轮询(Weight Round Robin) - 在轮询算法的基础上，为每个服务实例设置一个权重，高性能的机器赋予更高的权重，也可以根据服务实例的当前的负载情况做动态的调整，例如考虑最近5分钟部署服务器的 CPU、内存消耗情况。</li><li>哈希/一致性哈希策略 - 依据请求的某些特征，计算一个 hash 值，根据 hash 值将请求发送到对应的机器。一致性 hash 还可以解决服务实例动态添加情况下，调度抖动的问题。一致性哈希的一个典型应用场景是分布式缓存服务。</li><li>...</li></ul><h2 id="_2-服务发现" tabindex="-1"><a class="header-anchor" href="#_2-服务发现" aria-hidden="true">#</a> 2. 服务发现</h2><p>负载均衡的前提是有多个服务实例，首先实现一个最基础的服务发现模块 Discovery。为了与通信部分解耦，这部分的代码统一放置在 xclient 子目录下。</p><p><code>xclient/dicovery.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SelectMode <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	RandomSelect SelectMode <span class="token operator">=</span> <span class="token boolean">iota</span>
	RoundRobinSelect
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Discovery <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SelectMode</code>：负载均衡（选择）策略</li><li><code>Discovery</code>：接口 <ol><li><code>Refresh</code>：从注册中心更新服务列表</li><li><code>Update</code>：手动更新服务列表</li><li><code>Get</code>：根据负载均衡策略，选择服务实例</li><li><code>GetAll</code>：获取所有的服务实例</li></ol></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// MultiServerDiscovery is a discovery for multi servers without a registry center</span>
<span class="token comment">// user provides the server addresses explicitly instead</span>
<span class="token keyword">type</span> MultiServerDiscovery <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	r       <span class="token operator">*</span>rand<span class="token punctuation">.</span>Rand <span class="token comment">// generate random number</span>
	mu      sync<span class="token punctuation">.</span>RWMutex <span class="token comment">// protect following fields</span>
	servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	index   <span class="token builtin">int</span> <span class="token comment">// record the selected position for robin algorithm</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewMultiServerDiscovery creates a MultiServersDiscovery instance</span>
<span class="token keyword">func</span> <span class="token function">NewMultiServerDiscovery</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>MultiServerDiscovery <span class="token punctuation">{</span>
	d <span class="token operator">:=</span> <span class="token operator">&amp;</span>MultiServerDiscovery<span class="token punctuation">{</span>
		servers<span class="token punctuation">:</span> servers<span class="token punctuation">,</span>
		r<span class="token punctuation">:</span>       rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	d<span class="token punctuation">.</span>index <span class="token operator">=</span> d<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt32 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MultiServerDiscovery</code>：</p><ul><li><code>r</code>：用于产生随机数，使用时间戳作为种子</li><li><code>index</code>：记录 Round Robin 算法轮询到的位置，起始位置随机，避免每次从 0 开始</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token boolean">_</span> Discovery <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span> <span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d<span class="token punctuation">.</span>servers <span class="token operator">=</span> servers
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc discovery: no available servers&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> mode <span class="token punctuation">{</span>
	<span class="token keyword">case</span> RandomSelect<span class="token punctuation">:</span>
		<span class="token keyword">return</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> RoundRobinSelect<span class="token punctuation">:</span>
		s <span class="token operator">:=</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>index<span class="token operator">%</span>n<span class="token punctuation">]</span>
		d<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n
		<span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rpc discovery: not supported select mode&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServerDiscovery<span class="token punctuation">)</span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// return a copy of d.servers</span>
	servers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>servers<span class="token punctuation">,</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span>
	<span class="token keyword">return</span> servers<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现<code>Discovery</code>接口。</p><h2 id="_3-支持负载均衡的客户端" tabindex="-1"><a class="header-anchor" href="#_3-支持负载均衡的客户端" aria-hidden="true">#</a> 3. 支持负载均衡的客户端</h2><p><code>xclient/xclient.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> XClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	d       Discovery
	mode    SelectMode
	opt     <span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Option
	mu      sync<span class="token punctuation">.</span>Mutex <span class="token comment">// protect following</span>
	clients <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> io<span class="token punctuation">.</span>Closer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>XClient<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> key<span class="token punctuation">,</span> client <span class="token operator">:=</span> <span class="token keyword">range</span> xc<span class="token punctuation">.</span>clients <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewXClient</span><span class="token punctuation">(</span>d Discovery<span class="token punctuation">,</span> mode SelectMode<span class="token punctuation">,</span> opt <span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>XClient <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>XClient<span class="token punctuation">{</span>
		d<span class="token punctuation">:</span>       d<span class="token punctuation">,</span>
		mode<span class="token punctuation">:</span>    mode<span class="token punctuation">,</span>
		opt<span class="token punctuation">:</span>     opt<span class="token punctuation">,</span>
		clients<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>XClient</code>：</p><ul><li><code>d</code>：服务发现实例</li><li><code>mode</code>：负载均衡模式</li><li><code>opt</code>：通信选项</li><li><code>clients</code>：客户端实例，用于复用已存在的实例</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	client<span class="token punctuation">,</span> ok <span class="token operator">:=</span> xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">IsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>
		client <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		client<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> xc<span class="token punctuation">.</span>opt<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span> <span class="token operator">=</span> client
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// XDial calls different functions to connect to a RPC server</span>
<span class="token comment">// according the first parameter rpcAddr.</span>
<span class="token comment">// rpcAddr is a general format (protocol@addr) to represent a rpc server</span>
<span class="token comment">// eg, http@10.0.0.1:7001, tcp@10.0.0.1:9999, unix@/tmp/geerpc.sock</span>
<span class="token keyword">func</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>geerpc<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;rpc client err: wrong format &#39;%s&#39;, expect protocol@addr&quot;</span><span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	protocol<span class="token punctuation">,</span> addr <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">switch</span> protocol <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> geerpc<span class="token punctuation">.</span><span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">// tcp, unix or other transport protocol</span>
		<span class="token keyword">return</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	rpcAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>xc.dial</code>： <ol><li>若客户端已存在，则复用</li><li>创建新客户端</li><li>加入缓存并返回</li></ol></li><li><code>xc.Call</code>：根据负载均衡策略选择服务并调用</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Broadcast invokes the named function for every server registered in discovery</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	servers<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		wg sync<span class="token punctuation">.</span>WaitGroup
		mu sync<span class="token punctuation">.</span>Mutex
		e  <span class="token builtin">error</span>
	<span class="token punctuation">)</span>
	replyDone <span class="token operator">:=</span> reply <span class="token operator">==</span> <span class="token boolean">nil</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> rpcAddr <span class="token operator">:=</span> <span class="token keyword">range</span> servers <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">var</span> cloneReply any
			<span class="token keyword">if</span> reply <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				cloneReply <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> cloneReply<span class="token punctuation">)</span>

			mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				e <span class="token operator">=</span> err
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>replyDone <span class="token punctuation">{</span>
				reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>cloneReply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				replyDone <span class="token operator">=</span> <span class="token boolean">true</span>
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> e
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Broadcast</code>将请求广播到所有实例</p><ul><li>并发调用</li><li>若有一个实例出现错误或执行完成，则返回并取消其余服务实例的执行</li></ul><h2 id="_4-demo" tabindex="-1"><a class="header-anchor" href="#_4-demo" aria-hidden="true">#</a> 4. Demo</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;geerpc&quot;</span>
	<span class="token string">&quot;geerpc/xclient&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Foo <span class="token builtin">int</span>

<span class="token keyword">type</span> Args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Num1<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addrCh <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> f Foo
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:0&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;server listen tcp failed:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	server <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;server listen tcp failed:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;server runs at:&quot;</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	addrCh <span class="token operator">&lt;-</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>xc <span class="token operator">*</span>xclient<span class="token punctuation">.</span>XClient<span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">*</span>Args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		reply <span class="token builtin">int</span>
		err   <span class="token builtin">error</span>
	<span class="token punctuation">)</span>

	<span class="token keyword">switch</span> typ <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;call&quot;</span><span class="token punctuation">:</span>
		err <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token string">&quot;broadcast&quot;</span><span class="token punctuation">:</span>
		err <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s error: %v&quot;</span><span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s success: %d + %d = %d&quot;</span><span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">call</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewMultiServerDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;tcp@&quot;</span> <span class="token operator">+</span> addr1<span class="token punctuation">,</span> <span class="token string">&quot;tcp@&quot;</span> <span class="token operator">+</span> addr2<span class="token punctuation">}</span><span class="token punctuation">)</span>
	xc <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewXClient</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> xclient<span class="token punctuation">.</span>RandomSelect<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// send request &amp; receive response</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;call&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewMultiServerDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;tcp@&quot;</span> <span class="token operator">+</span> addr1<span class="token punctuation">,</span> <span class="token string">&quot;tcp@&quot;</span> <span class="token operator">+</span> addr2<span class="token punctuation">}</span><span class="token punctuation">)</span>
	xc <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewXClient</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> xclient<span class="token punctuation">.</span>RandomSelect<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;broadcast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo.Sum&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token comment">// expect 2 - 5 timeout</span>
			ctx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
			<span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">&quot;broadcast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo.Sleep&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span>

	addr1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1
	addr2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2

	<span class="token function">call</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2<span class="token punctuation">)</span>
	<span class="token function">broadcast</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,26),r={href:"https://geektutu.com/post/geerpc-day6.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=l("ExternalLinkIcon");return o(),e("div",null,[n("p",null,[n("a",u,[a("day6-load-balance"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",r,[a("https://geektutu.com/post/geerpc-day6.html"),t(s)])])])])}const f=p(i,[["render",d],["__file","04.6.load_balance.html.vue"]]);export{f as default};
