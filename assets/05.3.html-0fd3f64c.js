import{_ as p,Z as o,$ as l,a0 as n,a1 as s,a2 as t,a3 as e,H as c}from"./framework-09afcf0b.js";const i={},u=e(`<p>若哈希表的Key取值范围固定, 且范围不大, 那么可以使用数组来模拟哈希表.</p><h2 id="_5-3-1-问题32-有效的变位词" tabindex="-1"><a class="header-anchor" href="#_5-3-1-问题32-有效的变位词" aria-hidden="true">#</a> 5.3.1 问题32: 有效的变位词</h2><blockquote><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断它们是不是一组变位词（字母异位词）。</p><p><strong>注意：<strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同且</strong>字符顺序不完全相同</strong>，则称 <code>*s*</code> 和 <code>*t*</code> 互为变位词（字母异位词）。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;
输出: true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: s = &quot;rat&quot;, t = &quot;car&quot;
输出: false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: s = &quot;a&quot;, t = &quot;a&quot;
输出: false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li><li><code>s</code> and <code>t</code> 仅包含小写字母</li></ul><p><strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p></blockquote><h3 id="_5-3-1-1-分析" tabindex="-1"><a class="header-anchor" href="#_5-3-1-1-分析" aria-hidden="true">#</a> 5.3.1.1 分析</h3><h4 id="仅包含小写字母" tabindex="-1"><a class="header-anchor" href="#仅包含小写字母" aria-hidden="true">#</a> 仅包含小写字母</h4><p>若只包含小写字母, 那么使用长度为26的数组来模拟哈希表即可:</p><ol><li>创建哈希表 (字母, 出现次数)</li><li>录入字符串s1, 出现的字母次数加一</li><li>遍历字符串s2: <ol><li>若字母次数直接为0, 表示出现不同字母或相同字母次数不同</li><li>当前字母次数减一(用于判断相同字母)</li></ol></li></ol><h4 id="包含所有的unicode" tabindex="-1"><a class="header-anchor" href="#包含所有的unicode" aria-hidden="true">#</a> 包含所有的Unicode</h4><p>此时就需要使用真正哈希表来处理</p><h3 id="_5-3-1-2-题解" tabindex="-1"><a class="header-anchor" href="#_5-3-1-2-题解" aria-hidden="true">#</a> 5.3.1.2 题解</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">isAnagramWithArray</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// 边界条件</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> s <span class="token operator">==</span> t <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 仅包含小写字母, 使用数组</span>
	cnt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> t <span class="token punctuation">{</span>
		<span class="token keyword">if</span> cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isAnagramWithHashTable</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// 边界</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> s <span class="token operator">==</span> t <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 使用哈希表</span>
	cnt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">rune</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> t <span class="token punctuation">{</span>
		<span class="token keyword">if</span> cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-2-问题33-变位词分组" tabindex="-1"><a class="header-anchor" href="#_5-3-2-问题33-变位词分组" aria-hidden="true">#</a> 5.3.2 问题33: 变位词分组</h2>`,12),r={href:"https://leetcode.cn/problems/sfvd7V/",target:"_blank",rel:"noopener noreferrer"},d=e(`<blockquote><p>给定一个字符串数组 <code>strs</code> ，将 <strong>变位词</strong> 组合在一起。 可以按任意顺序返回结果列表。</p><p>**注意：**若两个字符串中每个字符出现的次数都相同，则称它们互为变位词。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]
输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: strs = [&quot;&quot;]
输出: [[&quot;&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: strs = [&quot;a&quot;]
输出: [[&quot;a&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 104</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul></blockquote><h3 id="_5-3-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_5-3-2-1-分析-题解" aria-hidden="true">#</a> 5.3.2.1 分析&amp;题解</h3><p>若单词互为异位词, 那么将其按字母排序后的字符串一定相同.</p><ol><li>构建哈希表 (排序后的单词, 单词组)</li><li>遍历数组, 对每个单词排序后进行分组</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>strs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token comment">// 哈希表</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>

	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> strs <span class="token punctuation">{</span>
		<span class="token comment">// 字符串排序</span>

		<span class="token comment">// using unsafe</span>
		<span class="token comment">// bts := unsafe.Slice(unsafe.StringData(s), len(s)) // go 1.20</span>
		<span class="token comment">// bts := *(*[]byte)(unsafe.Pointer(&amp;s)) // before go 1.20</span>
		<span class="token comment">// bs := make([]byte, len(bs))</span>
		<span class="token comment">// copy(bs, bts)</span>

		<span class="token comment">// not using unsafe</span>
		bs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
		sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> bs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> bs<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token comment">// sortedStr := unsafe.String(unsafe.SliceData(bs), len(bs))</span>
		sortedStr <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// before go 1.20</span>
		<span class="token comment">// 记录至哈希表</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>sortedStr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			m<span class="token punctuation">[</span>sortedStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">[</span>sortedStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>sortedStr<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k=n("code",null,"unsafe",-1),m={href:"https://stackoverflow.com/questions/26072921/how-do-i-convert-sizebyte-to-string-in-go",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"go1.20 之前和之后的方式不同(1.20之后有更方便的函数)"),n("li",null,[s("使用"),n("code",null,"unsafe"),s("转换的字节数组不能直接进行排序(引发panic), 需要复制到另一数组")])],-1),b=n("h2",{id:"_5-3-3-问题34-外星语言是否排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-3-3-问题34-外星语言是否排序","aria-hidden":"true"},"#"),s(" 5.3.3 问题34: 外星语言是否排序")],-1),h={href:"https://leetcode.cn/problems/lwyVBB/",target:"_blank",rel:"noopener noreferrer"},g=e(`<blockquote><p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p><p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;
输出：true
解释：在该语言的字母表中，&#39;h&#39; 位于 &#39;l&#39; 之前，所以单词序列是按字典序排列的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;
输出：false
解释：在该语言的字母表中，&#39;d&#39; 位于 &#39;l&#39; 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;
输出：false
解释：当前三个字符 &quot;app&quot; 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 &quot;apple&quot; &gt; &quot;app&quot;，因为 &#39;l&#39; &gt; &#39;∅&#39;，其中 &#39;∅&#39; 是空白字符，定义为比任何其他字符都小（更多信息）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>order.length == 26</code></li><li>在 <code>words[i]</code> 和 <code>order</code> 中的所有字符都是英文小写字母。</li></ul></blockquote><h3 id="_5-3-3-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_5-3-3-1-分析-题解" aria-hidden="true">#</a> 5.3.3.1 分析&amp;题解</h3><p>使用哈希表将字母表的字母及其顺序记录下来, 遍历数组进行比较.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">isAlienSorted</span><span class="token punctuation">(</span>words <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> order <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token comment">// 哈希表记录字母顺序</span>
    orderArr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> order <span class="token punctuation">{</span>
       orderArr<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 比较单词 </span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isSorted</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> orderArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isSorted</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2 <span class="token builtin">string</span><span class="token punctuation">,</span> orderArr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>
    i <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> orderArr<span class="token punctuation">[</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> orderArr<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-4-问题35-最小时间差" tabindex="-1"><a class="header-anchor" href="#_5-3-4-问题35-最小时间差" aria-hidden="true">#</a> 5.3.4 问题35: 最小时间差</h2>`,5),f={href:"https://leetcode.cn/problems/569nqc/",target:"_blank",rel:"noopener noreferrer"},w=e(`<blockquote><p>给定一个 24 小时制（小时:分钟 <strong>&quot;HH:MM&quot;</strong>）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：timePoints = [&quot;23:59&quot;,&quot;00:00&quot;]
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：timePoints = [&quot;00:00&quot;,&quot;23:59&quot;,&quot;00:00&quot;]
输出：0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= timePoints &lt;= 2 * 104</code></li><li><code>timePoints[i]</code> 格式为 <strong>&quot;HH:MM&quot;</strong></li></ul></blockquote><h3 id="_5-3-4-1-分析" tabindex="-1"><a class="header-anchor" href="#_5-3-4-1-分析" aria-hidden="true">#</a> 5.3.4.1 分析</h3><h4 id="暴力解法" tabindex="-1"><a class="header-anchor" href="#暴力解法" aria-hidden="true">#</a> 暴力解法</h4>`,3),y=n("p",null,[s("将数组元素配对求时间差, "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])])],-1),x=n("h4",{id:"排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#排序","aria-hidden":"true"},"#"),s(" 排序")],-1),q=n("p",null,[s("将数组元素排序之后, 只需求相邻元素的时间差即可, "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(nlogn+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("即 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(nlogn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),_=n("h4",{id:"哈希表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#哈希表","aria-hidden":"true"},"#"),s(" 哈希表")],-1),M=n("p",null,[s("由于一天内的时间是固定的, 而输入值只精确到分钟, 那么可以创建哈希表(时间, 是否出现)来表示所有的情况, 哈希表长度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1440"),n("mo",null,"="),n("mn",null,"24"),n("mo",null,"×"),n("mn",null,"60")]),n("annotation",{encoding:"application/x-tex"},"1440 = 24 \\times 60")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1440"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"24"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"60")])])]),s(" .")],-1),S=e(`<p>比较时间差时, 要考虑两种情况:</p><ol><li>当天的时间差 (当天零点和二十三点)</li><li>第二天之后的时间差(第二天零点和当天的二十三点)</li></ol><p>计算时只需考虑两种情况之后, 再取较小的值即可.</p><p>此时遍历哈希表一次即可, 计算相邻的元素时间差.</p><p><strong>边界条件</strong></p><p>若输入的时间数组长度大于1440, 那么必定有相同的时间, 最小时间差必为0</p><h3 id="_5-3-4-2-题解" tabindex="-1"><a class="header-anchor" href="#_5-3-4-2-题解" aria-hidden="true">#</a> 5.3.4.2 题解</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span>timePoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	totalMin <span class="token operator">:=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span>
	<span class="token comment">// 边界条件</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> totalMin <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 创建哈希表</span>
	minFlags <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> totalMin<span class="token punctuation">)</span>
	<span class="token comment">// 记录情况</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> t <span class="token operator">:=</span> <span class="token keyword">range</span> timePoints <span class="token punctuation">{</span>
		hour<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		min<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		mins <span class="token operator">:=</span> hour<span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> min
		<span class="token comment">// 出现重复的时间</span>
		<span class="token keyword">if</span> minFlags<span class="token punctuation">[</span>mins<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		minFlags<span class="token punctuation">[</span>mins<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 计算时间差</span>
	prev <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>                   <span class="token comment">// 前一时间</span>
	first <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>minFlags<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>   <span class="token comment">// 最早</span>
	last <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>                   <span class="token comment">// 最晚</span>
	minDiff <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>minFlags<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 最小时间差</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> minFlags <span class="token punctuation">{</span>
		<span class="token keyword">if</span> minFlags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> prev <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
				minDiff <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">-</span>prev<span class="token punctuation">,</span> minDiff<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			prev <span class="token operator">=</span> i
			first <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> first<span class="token punctuation">)</span>
			last <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> last<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 最早最晚的时间差</span>
	minDiff <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>first<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>minFlags<span class="token punctuation">)</span><span class="token operator">-</span>last<span class="token punctuation">,</span> minDiff<span class="token punctuation">)</span>

	<span class="token keyword">return</span> minDiff
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,9),A={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function O(D,L){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[n("a",r,[s("LCR 033. 字母异位词分组"),t(a)])]),d,n("p",null,[s("​ 使用"),k,s(" 进行字符串/字节数组的转换效率要高于直接的类型转换("),n("a",m,[s("How do I convert bytes to string in Go?"),t(a)]),s(")")]),v,b,n("p",null,[n("a",h,[s("LCR 034. 验证外星语词典"),t(a)])]),g,n("p",null,[n("a",f,[s("LCR 035. 最小时间差"),t(a)])]),w,y,x,q,_,M,S,n("ol",null,[n("li",null,[n("a",A,[s("剑指Offer（专项突破版）"),t(a)])])])])}const F=p(i,[["render",O],["__file","05.3.html.vue"]]);export{F as default};
