import{_ as n,Z as s,$ as a,a3 as e}from"./framework-09afcf0b.js";const i={},t=e(`<h1 id="_10-1-结构体" tabindex="-1"><a class="header-anchor" href="#_10-1-结构体" aria-hidden="true">#</a> 10.1 结构体</h1><ul><li><p><strong>定义</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> identifier <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    field1 type1
    field2 type2
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>new()</code>：为结构体变量分配内存并返回指针</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> t <span class="token operator">*</span>T
t <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体变量中的字段值为对应类型的零值</p></li><li><p><strong>声明</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> t T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明也会为变量分配内存，结构体变量中的字段值为对应类型的零值</p></li><li><p><strong>初始化</strong>：可以使用字面量初始化 例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Interval <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    start <span class="token builtin">int</span>
    end   <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按顺序给出值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>intr <span class="token operator">:=</span> Interval<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>intr <span class="token operator">:=</span> Interval<span class="token punctuation">{</span>end<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>忽略字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>intr <span class="token operator">:=</span> Interval<span class="token punctuation">{</span>end<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>​ 使用 <code>new()</code> 初始化：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/10.1_fig10.1-1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>​ 作为结构体字面量初始化：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/10.1_fig10.1-2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p><strong>访问字段</strong>：通过<strong>选择器符 (selector-notation)</strong> <code>.</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> t T
t<span class="token punctuation">.</span>fieldName1
t<span class="token punctuation">.</span>fieldName2
<span class="token comment">// 通过指针（会自动转换）</span>
t <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token comment">// t: *T</span>
t<span class="token punctuation">.</span>fieldName
<span class="token comment">// 也可以显式解指针</span>
<span class="token operator">*</span>t<span class="token punctuation">.</span>fieldName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结构体类型和字段的命名遵循可见性规则,一个导出的结构体类型中有些字段是导出的，另一些不是</p></li></ul><h2 id="结构体的内存布局" tabindex="-1"><a class="header-anchor" href="#结构体的内存布局" aria-hidden="true">#</a> 结构体的内存布局</h2><p>Go 语言中，结构体和它所包含的数据在内存中是以<strong>连续块</strong>的形式存在的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Rect1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>Min<span class="token punctuation">,</span> Max Point <span class="token punctuation">}</span>
<span class="token keyword">type</span> Rect2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>Min<span class="token punctuation">,</span> Max <span class="token operator">*</span>Point <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230504204811405.png" alt="image-20230504204811405" tabindex="0" loading="lazy"><figcaption>image-20230504204811405</figcaption></figure><h2 id="递归结构体" tabindex="-1"><a class="header-anchor" href="#递归结构体" aria-hidden="true">#</a> 递归结构体</h2><p>结构体类型可以通过引用自身来定义。</p><p>链表：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/10.1_fig10.3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这块的 <code>data</code> 字段用于存放有效数据（比如 <code>float64</code>），<code>su</code> 指针指向后继节点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    data    <span class="token builtin">float64</span>
    su      <span class="token operator">*</span>Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表中的第一个元素叫 <code>head</code>，它指向第二个元素；最后一个元素叫 <code>tail</code>，它没有后继元素，所以它的 <code>su</code> 为 <code>nil</code> 值。当然真实的链接会有很多数据节点，并且链表可以动态增长或收缩。</p><p>双向链表，它有一个前趋节点 <code>pr</code> 和一个后继节点 <code>su</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    pr      <span class="token operator">*</span>Node
    data    <span class="token builtin">float64</span>
    su      <span class="token operator">*</span>Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二叉树：</p><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/10.1_fig10.4.jpg" style="zoom:80%;"><p>二叉树中每个节点最多能链接至两个节点：左节点 (<code>le</code>) 和右节点 (<code>ri</code>)，这两个节点本身又可以有左右节点，依次类推。树的顶层节点叫根节点 (<strong>root</strong>)，底层没有子节点的节点叫叶子节点 (<strong>leaves</strong>)，叶子节点的 <code>le</code> 和 <code>ri</code> 指针为 <code>nil</code> 值。在 Go 中可以如下定义二叉树：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Tree <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    le      <span class="token operator">*</span>Tree
    data    <span class="token builtin">float64</span>
    ri      <span class="token operator">*</span>Tree
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),o=[t];function p(c,l){return s(),a("div",null,o)}const r=n(i,[["render",p],["__file","10.1.html.vue"]]);export{r as default};
