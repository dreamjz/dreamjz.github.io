import{_ as a,Z as n,$ as s,a3 as e}from"./framework-dee406ed.js";const o={},c=e(`<h1 id="_14-3-关闭通道" tabindex="-1"><a class="header-anchor" href="#_14-3-关闭通道" aria-hidden="true">#</a> 14.3 关闭通道</h1><p>通道可以被<code>close()</code>显式关闭，且只有发送者需要关闭通道。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给<strong>已关闭</strong>的通道发送数据或再次关闭将触发panic。</p><h2 id="_14-3-1-检测通道" tabindex="-1"><a class="header-anchor" href="#_14-3-1-检测通道" aria-hidden="true">#</a> 14.3.1 检测通道</h2><p>使用逗号ok模式可以检测通道是否关闭：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若ok为false，则通道被关闭。</p>`,8),t=[c];function i(d,l){return n(),s("div",null,t)}const r=a(o,[["render",i],["__file","14.3.html.vue"]]);export{r as default};
