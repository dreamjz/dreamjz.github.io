import{_ as i,Z as o,$ as l,a0 as n,a1 as s,a2 as t,a3 as e,H as p}from"./framework-09afcf0b.js";const c={},r=e(`<h2 id="_1-init-函数执行时机" tabindex="-1"><a class="header-anchor" href="#_1-init-函数执行时机" aria-hidden="true">#</a> 1. init() 函数执行时机</h2><p>Golang 包的初始化顺序：</p><ol><li>解析依赖（import），导入其他包</li><li>初始化常量（const）</li><li>初始化全局变量（var）</li><li>执行初始化函数（init），若包中包含多个<code>init</code>函数，则顺序未知</li><li>执行<code>main</code>函数</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;init1:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;init2:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;main:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 执行结果</span>
<span class="token comment">// init1: 10</span>
<span class="token comment">// init2: 10</span>
<span class="token comment">// main: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-局部变量内存分配在栈上还是堆上" tabindex="-1"><a class="header-anchor" href="#_2-局部变量内存分配在栈上还是堆上" aria-hidden="true">#</a> 2. 局部变量内存分配在栈上还是堆上</h2><p>需要根据编译器的内存逃逸分析(escape analysis)决定。</p><ul><li>未发生逃逸，则分配在栈上</li><li>发生逃逸，则分配在堆上</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> <span class="token number">11</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>v
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token comment">// 11</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>局部变量<code>v</code>，由于函数返回其指针，导致其作用域超出当前函数，所以需要分配在堆上。</p><h2 id="_3-空接口类型可以比较么" tabindex="-1"><a class="header-anchor" href="#_3-空接口类型可以比较么" aria-hidden="true">#</a> 3. 空接口类型可以比较么</h2><p>空接口类型(interface{})变量可以使用<code>==</code>,<code>!=</code>进行比较，在两种情况下相等：</p><ul><li>若均为 <code>nil</code></li><li>底层类型相同，并且值相同</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> stu <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		age  <span class="token builtin">int</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> s1<span class="token punctuation">,</span> s2 any <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> s3<span class="token punctuation">,</span> s4 any <span class="token operator">=</span> stu<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> stu<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token comment">// false</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>s1</code>, <code>s2</code>类型相同但值不同</li><li><code>s3</code>,<code>s4</code>类型相同且值相同</li></ul><h2 id="_4-两个-nil-可能不相等么" tabindex="-1"><a class="header-anchor" href="#_4-两个-nil-可能不相等么" aria-hidden="true">#</a> 4. 两个 nil 可能不相等么</h2><p>可能</p><p>当值为 nil 的变量转换成接口类型时，接口类型包含变量类型和其值 nil。</p><p>而值为 nil 的接口变量，其底层类型和值均为 nil 。</p><p>此时比较两者将被认定为不相等。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> p
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment">// true</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-简述-gc-的原理" tabindex="-1"><a class="header-anchor" href="#_5-简述-gc-的原理" aria-hidden="true">#</a> 5. 简述 GC 的原理</h2><p>Golang 的 GC 采用：</p><ol><li>三色标记法</li><li>混合写屏障</li></ol><p>GC 处理包含两个阶段：</p><ol><li>标记：从根对象触发标记所有的存活对象</li><li>清除：回收未被标记的对象</li></ol><h3 id="三色标记法" tabindex="-1"><a class="header-anchor" href="#三色标记法" aria-hidden="true">#</a> 三色标记法</h3><p>对象分为三类：</p><ol><li>黑色：活跃对象</li><li>灰色：待扫描对象</li><li>白色：待回收的对象</li></ol><p>标记流程：</p><ol><li>将根对象标记为<strong>灰色</strong>，加入灰色对象集合</li><li>从灰色对象集合取出对象，标记为 <strong>黑色</strong></li><li>将<strong>黑色</strong>对象指向的对象标记为<strong>灰色</strong></li><li>继续步骤 2）直到灰色对象不存在为止</li></ol><h3 id="写屏障" tabindex="-1"><a class="header-anchor" href="#写屏障" aria-hidden="true">#</a> 写屏障</h3><h4 id="三色不变性" tabindex="-1"><a class="header-anchor" href="#三色不变性" aria-hidden="true">#</a> 三色不变性</h4><ol><li>强三色不变性：<strong>黑色</strong>对象只会指向<strong>灰色/黑色</strong>对象，不能指向白色对象</li><li>弱三色不变性：黑色对象指向的白色对象，必须包含一条从<strong>灰色对象经由多个白色对象的可达路径</strong></li></ol><h4 id="插入写屏障" tabindex="-1"><a class="header-anchor" href="#插入写屏障" aria-hidden="true">#</a> 插入写屏障</h4><p>由 Dijkstra 提出，若新增了指向对象的指针：</p><ul><li>若对象为白色，则标记为<strong>灰色</strong></li><li>若为其他标记则不变</li></ul><p>满足<strong>强三色不变性</strong>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030414174.png" alt="dijkstra-insert-write-barrier" tabindex="0" loading="lazy"><figcaption>dijkstra-insert-write-barrier</figcaption></figure><h4 id="删除写屏障" tabindex="-1"><a class="header-anchor" href="#删除写屏障" aria-hidden="true">#</a> 删除写屏障</h4><p>由 Yuasa 提出，删除写屏障会保证开启写屏障时堆上所有对象的可达，所以也被称作快照垃圾收集（Snapshot GC）。</p><p>在对象的引用<strong>被删除</strong>时：</p><ul><li>若对象颜色为白色，则标记为灰色</li><li>其他标记则不改变</li></ul><p>满足弱三色不变性</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030419667.png" alt="yuasa-delete-write-barrier" tabindex="0" loading="lazy"><figcaption>yuasa-delete-write-barrier</figcaption></figure><h4 id="混合写屏障" tabindex="-1"><a class="header-anchor" href="#混合写屏障" aria-hidden="true">#</a> 混合写屏障</h4><p>同时使用插入和删除写屏障：</p><ol><li>对象新增指向其引用时，若为白色则标记成灰色</li><li>对象引用被删除，若为白色则标记成灰色</li><li>所有新创建的对象标记为黑色 <ul><li>防止新对象误回收</li><li>无需重新扫描栈空间</li></ul></li></ol><h3 id="完整流程" tabindex="-1"><a class="header-anchor" href="#完整流程" aria-hidden="true">#</a> 完整流程</h3><ol><li>标记准备(Mark Setup)，需要 STW，开启写屏障</li><li>使用三色标记法标记(Marking)，并发执行</li><li>标记结束(Mark Termination)，需要 STW，关闭写屏障</li><li>清理(Sweeping)，并发执行</li></ol><h2 id="_6-函数返回局部变量的指针是否安全" tabindex="-1"><a class="header-anchor" href="#_6-函数返回局部变量的指针是否安全" aria-hidden="true">#</a> 6. 函数返回局部变量的指针是否安全</h2><p>安全</p><p>编译器会进行逃逸分析，此时的局部变量会分配在堆上。</p><h2 id="_7-非接口类型的变量一定能狗调用指针方法集么" tabindex="-1"><a class="header-anchor" href="#_7-非接口类型的变量一定能狗调用指针方法集么" aria-hidden="true">#</a> 7. 非接口类型的变量一定能狗调用指针方法集么</h2><p>不一定</p><p>仅有变量是可以寻址的情况下能够调用。</p><p>以下类型的变量不可寻址：</p><ul><li>字符串中的字节</li><li>map 中的元素</li><li>常量</li><li>包级别的函数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> T <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> t1 T <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span>
	t1<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
	<span class="token keyword">const</span> t2 T <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span>
	t2<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// error: cannot call pointer method on t</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-简述变量在转换成接口类型后可调用方法集的情况" tabindex="-1"><a class="header-anchor" href="#_8-简述变量在转换成接口类型后可调用方法集的情况" aria-hidden="true">#</a> 8. 简述变量在转换成接口类型后可调用方法集的情况</h2><p>对于变量的类型和其接口方法的接收者类型，当其转换成接口后的方法调用情况如下:</p><table><thead><tr><th>变量类型\\接口方法接收者类型</th><th>值</th><th>指针</th></tr></thead><tbody><tr><td>值</td><td>可</td><td>不可</td></tr><tr><td>指针</td><td>可</td><td>可</td></tr></tbody></table><p>对于变量的类型：</p><ol><li><strong>指针</strong>类型，转换成接口后，<strong>接口</strong>变量<strong>持有</strong>的是<strong>原变量的指针</strong><ul><li>可直接调用接收者为指针类型的接口方法</li><li>可间接调用接收者为值类型（自动<strong>解引用</strong>）的接口方法</li></ul></li><li><strong>值</strong>类型，转换成接口后，<strong>接口</strong>变量<strong>持有</strong>的是<strong>原变量的拷贝</strong><ul><li>可直接调用接收者为值类型的接口方法</li><li><strong>不可</strong>调用接收者为指针类型的接口方法，无法获取原变量的指针，即接口持有的值类型变量<strong>无法寻址</strong></li></ul></li></ol><h2 id="_9-简述-golang-内存管理" tabindex="-1"><a class="header-anchor" href="#_9-简述-golang-内存管理" aria-hidden="true">#</a> 9. 简述 Golang 内存管理</h2><p>Golang 内存分配器包含：</p>`,65),u={href:"https://draveness.me/golang/tree/runtime.mspan",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"runtime.mspan",-1),g=n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030240585.png",alt:"mspan-and-linked-list",loading:"lazy"},null,-1),k={href:"https://draveness.me/golang/tree/runtime.mcache",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"runtime.mcache",-1),m={href:"https://draveness.me/golang/tree/runtime.mcentral",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.mcentral",-1),b={href:"https://draveness.me/golang/tree/runtime.mheap",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"runtime.mheap",-1),_=e('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030238577.png" alt="go-memory-layout" tabindex="0" loading="lazy"><figcaption>go-memory-layout</figcaption></figure><h3 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h3><ul><li>微对象：小于 16 字节的对象；会使用线程缓存上的微分配器提高微对象分配的性能</li><li>小对象：16 字节到 32,768 字节的对象；从线程缓存、中心缓存或者堆中获取内存管理单元并从内存管理单元找到空闲的内存空间；</li><li>大对象：大于 32KB 的大对象会单独处理；不会从线程缓存或者中心缓存中获取内存管理单元，而是直接分配大内存</li></ul><p>内存分配顺序：</p><ol><li>从线程缓存获取</li><li>若失败，则从中心缓存获取</li><li>若失败，则从页堆（mheap）中获取</li></ol><h2 id="_10-简述-gmp-模型" tabindex="-1"><a class="header-anchor" href="#_10-简述-gmp-模型" aria-hidden="true">#</a> 10. 简述 GMP 模型</h2><ul><li>G：Goroutine</li><li>M：Machine，内核态线程</li><li>P：Processor，调度器</li></ul><h3 id="gmp-流程" tabindex="-1"><a class="header-anchor" href="#gmp-流程" aria-hidden="true">#</a> GMP 流程</h3><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310171132970.jpeg!large" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>创建一个 G</li><li>加入队列： <ol><li>优先加入 P 的<strong>本地队列</strong>；</li><li>本地队列已满则加入<strong>全局队列</strong>；</li></ol></li><li>M 和 P <strong>一对一</strong>绑定，M 从 P 的<strong>本地队列</strong>获取 G 运行： <ol><li>若本地队列为<strong>空</strong>，则从<strong>全局队列</strong>获取；</li><li>若全局队列和本地队列均为<strong>空</strong>，则从其他的 MP 组合中<strong>偷取</strong>一半数量的 G 来运行；</li></ol></li><li>M 执行 G 若发生<strong>阻塞</strong>，则当前的 M 和 P 会解绑 (detach)，然后<strong>创建</strong> 或 <strong>唤醒</strong> 一个 M 与 P 绑定。</li></ol><h3 id="自旋" tabindex="-1"><a class="header-anchor" href="#自旋" aria-hidden="true">#</a> 自旋</h3><p>当 MP 组合无法获取 G 执行时，M 将进入<strong>自旋</strong>状态。</p><h3 id="休眠" tabindex="-1"><a class="header-anchor" href="#休眠" aria-hidden="true">#</a> 休眠</h3><p>当 M 一段时间内没有获取 P 与之绑定时，M 将进入<strong>休眠</strong>状态。</p><h2 id="_11-goroutine-何时发生阻塞" tabindex="-1"><a class="header-anchor" href="#_11-goroutine-何时发生阻塞" aria-hidden="true">#</a> 11. Goroutine 何时发生阻塞</h2><ul><li><strong>channel阻塞</strong>：当goroutine读写channel发生阻塞时，会调用gopark函数，该G脱离当前的M和P，调度器将新的G放入当前M。</li><li><strong>系统调用</strong>：当某个G由于系统调用陷入内核态，该P就会脱离当前M，此时P会更新自己的状态为Psyscall，M与G相互绑定，进行系统调用。结束以后，若该P状态还是Psyscall，则直接关联该M和G，否则使用闲置的处理器处理该G。</li><li><strong>系统监控</strong>：当某个G在P上运行的时间超过10ms时候，或者P处于Psyscall状态过长等情况就会调用retake函数，触发新的调度。</li><li><strong>主动让出</strong>：由于是协作式调度，该G会主动让出当前的P（通过GoSched），更新状态为Grunnable，该P会调度队列中的G运行。</li></ul><h2 id="_12-gmp-有哪些状态" tabindex="-1"><a class="header-anchor" href="#_12-gmp-有哪些状态" aria-hidden="true">#</a> 12. GMP 有哪些状态</h2><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310171136857.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>G 的状态：</p><p><strong>_Gidle</strong>：刚刚被分配并且还没有被初始化，值为0，为创建goroutine后的默认值</p><p><strong>_Grunnable</strong>： 没有执行代码，没有栈的所有权，存储在运行队列中，可能在某个P的本地队列或全局队列中(如上图)。</p><p><strong>_Grunning</strong>： 正在执行代码的goroutine，拥有栈的所有权(如上图)。</p><p><strong>_Gsyscall</strong>：正在执行系统调用，拥有栈的所有权，与P脱离，但是与某个M绑定，会在调用结束后被分配到运行队列(如上图)。</p><p><strong>_Gwaiting</strong>：被阻塞的goroutine，阻塞在某个channel的发送或者接收队列(如上图)。</p><p><strong>_Gdead</strong>： 当前goroutine未被使用，没有执行代码，可能有分配的栈，分布在空闲列表gFree，可能是一个刚刚初始化的goroutine，也可能是执行了goexit退出的goroutine(如上图)。</p><p><strong>_Gcopystac</strong>：栈正在被拷贝，没有执行代码，不在运行队列上，执行权在</p><p><strong>_Gscan</strong> ： GC 正在扫描栈空间，没有执行代码，可以与其他状态同时存在。</p><p>P的状态：</p><p><strong>_Pidle</strong> ：处理器没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空</p><p><strong>_Prunning</strong> ：被线程 M 持有，并且正在执行用户代码或者调度器(如上图)</p><p><strong>_Psyscall</strong>：没有执行用户代码，当前线程陷入系统调用(如上图)</p><p><strong>_Pgcstop</strong> ：被线程 M 持有，当前处理器由于垃圾回收被停止</p><p><strong>_Pdead</strong> ：当前处理器已经不被使用</p><p>M 状态：</p><p><strong>自旋线程</strong>：处于运行状态但是没有可执行goroutine的线程，数量最多为GOMAXPROC，若是数量大于GOMAXPROC就会进入休眠。</p><p><strong>非自旋线程</strong>：处于运行状态有可执行goroutine的线程。</p><h2 id="_13-gmp-中-p-的作用" tabindex="-1"><a class="header-anchor" href="#_13-gmp-中-p-的作用" aria-hidden="true">#</a> 13. GMP 中 P 的作用</h2><ul><li>每个 P 有自己的本地队列，大幅度的减轻了对全局队列的直接依赖，所带来的效果就是锁竞争的减少。而 GM 模型的性能开销大头就是锁竞争。</li><li>每个 P 相对的平衡上，在 GMP 模型中也实现了 Work Stealing 算法，如果 P 的本地队列为空，则会从全局队列或其他 P 的本地队列中窃取可运行的 G 来运行，减少空转，提高了资源利用率。</li></ul><h2 id="_14-什么是-work-stealing" tabindex="-1"><a class="header-anchor" href="#_14-什么是-work-stealing" aria-hidden="true">#</a> 14. 什么是 work stealing</h2><p>当某个 goroutine 一直占用资源 ，那么GMP模型会<strong>从正常模式转变为饥饿模式</strong>，允许其它goroutine使用work stealing抢占。</p><p>work stealing算法指，一个线程如果处于空闲状态，则帮其它正在忙的线程分担压力，从全局队列取一个G任务来执行，可以极大提高执行效率。</p>',41);function P(y,G){const a=p("ExternalLinkIcon");return o(),l("div",null,[r,n("ol",null,[n("li",null,[s("内存管理单元："),n("a",u,[d,t(a)]),s("，内存管理单元构成双向链表 "),g,s(" 内存管理单元以 页（8KB，不是操作系统的内存页) 向堆申请内存。")]),n("li",null,[s("线程缓存："),n("a",k,[h,t(a)]),s("，与 P 绑定，用于缓存程序申请的微小对象。")]),n("li",null,[s("中心缓存："),n("a",m,[v,t(a)]),s("，访问中心缓存需要互斥锁")]),n("li",null,[s("页堆："),n("a",b,[f,t(a)]),s("，管理堆内存")])]),_])}const w=i(c,[["render",P],["__file","2.questions-underlying.html.vue"]]);export{w as default};
