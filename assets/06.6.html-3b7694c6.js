const n=JSON.parse('{"key":"v-3de443da","path":"/note/golang/open-source-books/the-way-to-go/06/06.6.html","title":"6.6 递归函数","lang":"zh-CN","frontmatter":{},"headers":[],"readingTime":{"minutes":1.09,"words":327},"filePathRelative":"note/golang/open-source-books/the-way-to-go/06/06.6.md","excerpt":"<h1> 6.6 递归函数</h1>\\n<p>函数在函数体内调用自身称之为递归。</p>\\n<p><a href=\\"https://github.com/dreamjz/golang-notes/tree/main/open-source-books/the-way-to-go/chapter-06/06_6_fibonacci.go\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">06_6_fibonacci.go</a></p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code> <span class=\\"token function\\">printFib</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tres <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span>\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tres <span class=\\"token operator\\">=</span> <span class=\\"token function\\">fibonacci</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d \\"</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">fibonacci</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>res <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> n <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tres <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n\\t<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tres <span class=\\"token operator\\">=</span> <span class=\\"token function\\">fibonacci</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token function\\">fibonacci</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
