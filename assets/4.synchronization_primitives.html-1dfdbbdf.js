import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as i}from"./framework-09afcf0b.js";const l={},u=e(`<h2 id="_1-mutex" tabindex="-1"><a class="header-anchor" href="#_1-mutex" aria-hidden="true">#</a> 1. Mutex</h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	state <span class="token builtin">int32</span>
	sema  <span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>state</code>：互斥锁状态</li><li><code>sema</code>：信号量</li></ul><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态" aria-hidden="true">#</a> 状态</h3><p>互斥锁的状态通过<code>state</code>的二进制位表示，默认状态所有位为0：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010332987.png" alt="golang-mutex-state" tabindex="0" loading="lazy"><figcaption>golang-mutex-state</figcaption></figure><ul><li><code>mutexLocked</code>：<strong>锁定</strong>状态</li><li><code>mutexWoken</code>：从正常模式被<strong>唤醒</strong></li><li><code>mutexStarving</code>：饥饿状态</li><li><code>waitersCount</code>：当前锁上<strong>等待</strong>的 goroutine 的<strong>个数</strong></li></ul><h3 id="模式" tabindex="-1"><a class="header-anchor" href="#模式" aria-hidden="true">#</a> 模式</h3><ul><li>正常模式：goroutine 按照 FIFO 顺序获取锁 刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁；一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换<strong>饥饿模式</strong>，以保证互斥锁的公平性</li><li>饥饿模式： 互斥锁会直接交给等待队列最前面的 Goroutine</li><li>新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，只会在队列的<strong>末尾</strong>等待。若一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会<strong>切换</strong>回正常模式。</li></ul><h3 id="加锁" tabindex="-1"><a class="header-anchor" href="#加锁" aria-hidden="true">#</a> 加锁</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mutexLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span><span class="token function">lockSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),r=n("li",null,[s("当锁的状态是 0 时，将 "),n("code",null,"mutexLocked"),s(" 位置成 1")],-1),d={href:"https://draveness.me/golang/tree/sync.Mutex.lockSlow",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"sync.Mutex.lockSlow",-1),v={href:"https://draveness.me/golang/tree/sync.Mutex.lockSlow",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"sync.Mutex.lockSlow",-1),b=e(`<ol><li>判断当前 Goroutine 能否进入自旋</li><li>通过自旋等待互斥锁的释放</li><li>计算互斥锁的最新状态</li><li>更新互斥锁的状态并获取锁</li></ol><h3 id="解锁" tabindex="-1"><a class="header-anchor" href="#解锁" aria-hidden="true">#</a> 解锁</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token builtin">new</span> <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token operator">-</span>mutexLocked<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token builtin">new</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span><span class="token function">unlockSlow</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h={href:"https://draveness.me/golang/tree/sync/atomic.AddInt32",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"sync/atomic.AddInt32",-1),f={href:"https://draveness.me/golang/tree/sync.Mutex.unlockSlow",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"sync.Mutex.unlockSlow",-1),y=n("p",null,"慢解锁流程：",-1),w=n("li",null,[s("若互斥锁不存在等待者或者互斥锁的 "),n("code",null,"mutexLocked"),s("、"),n("code",null,"mutexStarving"),s("、"),n("code",null,"mutexWoken"),s(" 状态不都为 0，那么当前方法可以直接返回，不需要唤醒其他等待者")],-1),x={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"sync.runtime_Semrelease",-1),L={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"sync.runtime_Semrelease",-1),C=n("h3",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),s(" 小结")],-1),M=n("p",null,[n("strong",null,"加锁"),s("过程：")],-1),G=n("li",null,[s("若互斥锁处于初始化状态，会通过置位 "),n("code",null,"mutexLocked"),s(" 加锁")],-1),A=n("li",null,[s("若互斥锁处于 "),n("code",null,"mutexLocked"),s(" 状态并且在普通模式下工作，会进入自旋，执行 30 次 "),n("code",null,"PAUSE"),s(" 指令消耗 CPU 时间等待锁的释放")],-1),U=n("li",null,"若当前 Goroutine 等待锁的时间超过了 1ms，互斥锁就会切换到饥饿模式",-1),R={href:"https://draveness.me/golang/tree/runtime.sync_runtime_SemacquireMutex",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.sync_runtime_SemacquireMutex",-1),I=n("li",null,"若当前 Goroutine 是互斥锁上的最后一个等待的协程或者等待的时间小于 1ms，那么它会将互斥锁切换回正常模式",-1),B=n("p",null,[n("strong",null,"解锁"),s("过程：")],-1),z=n("strong",null,"已经被解锁",-1),N={href:"https://draveness.me/golang/tree/sync.Mutex.Unlock",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"sync.Mutex.Unlock",-1),E=n("li",null,[s("当互斥锁处于"),n("strong",null,"饥饿模式"),s("时，将锁的所有权交给队列中的下一个等待者，等待者会负责设置 "),n("code",null,"mutexLocked"),s(" 标志位")],-1),P=n("li",null,"若没有 Goroutine 等待锁的释放或者已经有被唤醒的 Goroutine 获得了锁，会直接返回",-1),V={href:"https://draveness.me/golang/tree/sync.runtime_Semrelease",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"sync.runtime_Semrelease",-1),j=e(`<h2 id="_2-rwmutex" tabindex="-1"><a class="header-anchor" href="#_2-rwmutex" aria-hidden="true">#</a> 2. RWMutex</h2><h3 id="数据结构-1" tabindex="-1"><a class="header-anchor" href="#数据结构-1" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	w           Mutex
	writerSem   <span class="token builtin">uint32</span>
	readerSem   <span class="token builtin">uint32</span>
	readerCount <span class="token builtin">int32</span>
	readerWait  <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>w</code>：复用<strong>互斥锁</strong></li><li><code>writerSem</code>：写等待读信号</li><li><code>readerSem</code>：读等待写信号</li><li><code>readerWait</code>：当前操作被阻塞时，等待的读操作的个数</li><li><code>readerCount</code> 存储了当前正在执行的读操作数量</li></ul><h3 id="写锁" tabindex="-1"><a class="header-anchor" href="#写锁" aria-hidden="true">#</a> 写锁</h3><h4 id="获取" tabindex="-1"><a class="header-anchor" href="#获取" aria-hidden="true">#</a> 获取</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span>rwmutexMaxReaders<span class="token punctuation">)</span> <span class="token operator">+</span> rwmutexMaxReaders
	<span class="token keyword">if</span> r <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>获取写锁，若已被获取则等待</li><li>阻塞后续读操作</li><li>等待所有的读操作结束后，唤醒当前 goroutine</li></ol><p>获取写锁时会<strong>先阻塞写锁</strong>的获取，<strong>后阻塞读锁</strong>的获取，这种策略能够保证读操作不会被连续的写操作『饿死』。</p><h4 id="释放" tabindex="-1"><a class="header-anchor" href="#释放" aria-hidden="true">#</a> 释放</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> rwmutexMaxReaders<span class="token punctuation">)</span>
	<span class="token keyword">if</span> r <span class="token operator">&gt;=</span> rwmutexMaxReaders <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;sync: Unlock of unlocked RWMutex&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>将 <code>reaerCount</code> 变为正数释放读锁</li><li>释放陷入因读锁陷入等待的 Gorotuine</li><li>释放写锁</li></ol><h3 id="读锁" tabindex="-1"><a class="header-anchor" href="#读锁" aria-hidden="true">#</a> 读锁</h3><h4 id="获取-1" tabindex="-1"><a class="header-anchor" href="#获取-1" aria-hidden="true">#</a> 获取</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>readerCount</code> 若为负数，表示存在写锁，等待写锁释放</li></ol><h4 id="释放-1" tabindex="-1"><a class="header-anchor" href="#释放-1" aria-hidden="true">#</a> 释放</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rw<span class="token punctuation">.</span><span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>readerCount</code> 减一</li><li>获取 <code>readCount</code>结果 <ul><li>小于零，存在写锁，进入慢解锁</li><li>大于等于零，直接解锁</li></ul></li></ol><p>慢解锁：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span>rwmutexMaxReaders <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;sync: RUnlock of unlocked RWMutex&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>减少获取锁的写操作等待的读操作数 <code>readerWait</code></li><li>在所有读操作都被释放之后触发写操作的信号量 <code>writerSem</code>，唤醒尝试获取写锁的 Goroutine</li></ul><h2 id="_3-waitgroup" tabindex="-1"><a class="header-anchor" href="#_3-waitgroup" aria-hidden="true">#</a> 3. WaitGroup</h2><h3 id="数据结构-2" tabindex="-1"><a class="header-anchor" href="#数据结构-2" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> WaitGroup <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	noCopy noCopy
	state1 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>noCopy</code>：保证变量不会被拷贝</li><li><code>state1</code>：存储状态和信号量</li></ul><h3 id="防止拷贝" tabindex="-1"><a class="header-anchor" href="#防止拷贝" aria-hidden="true">#</a> 防止拷贝</h3>`,27),F={href:"https://draveness.me/golang/tree/sync.noCopy",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"sync.noCopy",-1),H={href:"https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/copylock",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"tools/go/analysis/passes/copylock",-1),X={href:"https://draveness.me/golang/tree/sync.noCopy",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"sync.noCopy",-1),J=n("code",null,"Lock",-1),K=n("code",null,"Unlock",-1),Q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
	yawg <span class="token operator">:=</span> wg
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>wg<span class="token punctuation">,</span> yawg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> vet proc<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> assignment copies lock value to yawg<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> call of fmt<span class="token punctuation">.</span>Println copies lock value<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">.</span><span class="token operator">/</span>prog<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">:</span> call of fmt<span class="token punctuation">.</span>Println copies lock value<span class="token punctuation">:</span> sync<span class="token punctuation">.</span>WaitGroup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态-1" tabindex="-1"><a class="header-anchor" href="#状态-1" aria-hidden="true">#</a> 状态</h3><p><code>state1</code>是总共占用 12 字节的数组，存储当前结构体的状态，在64位和32位机上表现不同：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310010457639.png" alt="golang-waitgroup-state" tabindex="0" loading="lazy"><figcaption>golang-waitgroup-state</figcaption></figure><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> Add</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statep<span class="token punctuation">,</span> semap <span class="token operator">:=</span> wg<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	state <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>
	v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
	w <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
	<span class="token keyword">if</span> v <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;sync: negative WaitGroup counter&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> w <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span>statep <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> w <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span>semap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计数器只能为非负数</li><li>负数会引起 panic</li><li>计数器归零，唤醒等待中的 Goroutine</li></ul><h3 id="done" tabindex="-1"><a class="header-anchor" href="#done" aria-hidden="true">#</a> Done</h3><p>实际复用<code>Add(-1)</code></p><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> Wait</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statep<span class="token punctuation">,</span> semap <span class="token operator">:=</span> wg<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		state <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">)</span>
		v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapUint64</span><span class="token punctuation">(</span>statep<span class="token punctuation">,</span> state<span class="token punctuation">,</span> state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">runtime_Semacquire</span><span class="token punctuation">(</span>semap<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">+</span>statep <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;sync: WaitGroup is reused before previous Wait has returned&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计数器大于 0 ，则进入阻塞</li><li>计数器归零，则被唤醒</li></ul><h2 id="_4-once" tabindex="-1"><a class="header-anchor" href="#_4-once" aria-hidden="true">#</a> 4. Once</h2><h3 id="数据结构-3" tabindex="-1"><a class="header-anchor" href="#数据结构-3" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	done <span class="token builtin">uint32</span>
	m    Mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>done</code>：表示代码是否被执行过</li><li><code>m</code>：互斥锁</li></ul><h3 id="do" tabindex="-1"><a class="header-anchor" href="#do" aria-hidden="true">#</a> Do</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		o<span class="token punctuation">.</span><span class="token function">doSlow</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">doSlow</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若已经执行过则直接返回</li><li>获取互斥锁</li><li>执行函数</li><li><code>done</code>加一，表示已执行</li></ul><h2 id="_5-cond" tabindex="-1"><a class="header-anchor" href="#_5-cond" aria-hidden="true">#</a> 5. Cond</h2><h3 id="数据结构-4" tabindex="-1"><a class="header-anchor" href="#数据结构-4" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Cond <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	noCopy  noCopy
	L       Locker
	notify  notifyList
	checker copyChecker
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>noCopy</code>：保证编译期不会被拷贝</li><li><code>copyChecker</code>：禁止运行时拷贝</li><li><code>L</code>：保护后续字段</li><li><code>notify</code>： Goroutine 链表</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> notifyList <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	wait <span class="token builtin">uint32</span>
	notify <span class="token builtin">uint32</span>

	lock mutex
	head <span class="token operator">*</span>sudog
	tail <span class="token operator">*</span>sudog
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>wait</code>：当前等待的 goroutine 索引</li><li><code>notify</code>：已经通知到的 goroutine 索引</li></ul><h3 id="wait-1" tabindex="-1"><a class="header-anchor" href="#wait-1" aria-hidden="true">#</a> Wait</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t <span class="token operator">:=</span> <span class="token function">runtime_notifyListAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span> <span class="token comment">// runtime.notifyListAdd 的链接名</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListWait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// runtime.notifyListWait 的链接名</span>
	c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">notifyListAdd</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">Xadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使当前 goroutine 陷入休眠：</p><ol><li>等待计数器加一</li><li>解锁</li><li>等待唤醒</li><li>加锁</li></ol><h4 id="runtime-notifylistwait" tabindex="-1"><a class="header-anchor" href="#runtime-notifylistwait" aria-hidden="true">#</a> runtime_notifyListWait</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">notifyListWait</span><span class="token punctuation">(</span>l <span class="token operator">*</span>notifyList<span class="token punctuation">,</span> t <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>ticket <span class="token operator">=</span> t
	<span class="token keyword">if</span> l<span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		l<span class="token punctuation">.</span>head <span class="token operator">=</span> s
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		l<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> s
	<span class="token punctuation">}</span>
	l<span class="token punctuation">.</span>tail <span class="token operator">=</span> s
	<span class="token function">goparkunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> waitReasonSyncCondWait<span class="token punctuation">,</span> traceEvGoBlockCond<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token function">releaseSudog</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取当前 goroutine 并将其追加至通知链表的尾部</p><h3 id="singal" tabindex="-1"><a class="header-anchor" href="#singal" aria-hidden="true">#</a> Singal</h3><p>唤醒等待队列的最前面的 goroutine</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListNotifyOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="broadcase" tabindex="-1"><a class="header-anchor" href="#broadcase" aria-hidden="true">#</a> Broadcase</h3><p>唤醒队列中全部的 goroutine</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">runtime_notifyListNotifyAll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ul><li><code>Wait</code>：调用前需要加锁，否则会触发 panic</li><li><code>Signal</code>：唤醒等待队列最前面的（链表首部）的goroutine</li><li><code>Broadcase</code>：唤醒全部的 goroutine</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,41),Y={href:"https://github.com/golang/go/tree/release-branch.go1.18/src",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://draveness.me/golang/",target:"_blank",rel:"noopener noreferrer"};function sn(an,tn){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[r,n("li",null,[s("状态不是 0 时，"),n("a",d,[k,t(a)]),s("通过自旋（Spinnig）等方式等待锁的释放")])]),n("p",null,[n("a",v,[m,t(a)]),s("流程如下：")]),b,n("ul",null,[n("li",null,[s("若该"),n("a",h,[g,t(a)]),s("返回的新状态等于 0，当前 Goroutine 就成功解锁")]),n("li",null,[s("若该函数返回的新状态不等于 0，则调用"),n("a",f,[_,t(a)]),s("开始慢解锁")])]),y,n("ul",null,[n("li",null,[s("正常模式下： "),n("ul",null,[w,n("li",null,[s("若互斥锁存在等待者，会通过 "),n("a",x,[S,t(a)]),s(" 唤醒等待者并移交锁的所有权")])])]),n("li",null,[s("饥饿模式下： 直接调用 "),n("a",L,[W,t(a)]),s(" 将当前锁交给下一个正在尝试获取锁的等待者，等待者被唤醒后会得到锁，在这时互斥锁还不会退出饥饿状态")])]),C,M,n("ul",null,[G,A,U,n("li",null,[s("互斥锁在正常情况下会通过 "),n("a",R,[q,t(a)]),s(" 将尝试获取锁的 Goroutine 切换至休眠状态，等待锁的持有者唤醒")]),I]),B,n("ul",null,[n("li",null,[s("当互斥锁"),z,s("时，调用 "),n("a",N,[O,t(a)]),s(" 会直接抛出异常")]),E,n("li",null,[s("当互斥锁处于普通模式时： "),n("ul",null,[P,n("li",null,[s("其他情况下会通过 "),n("a",V,[D,t(a)]),s(" 唤醒对应的 Goroutine")])])])]),j,n("p",null,[n("a",F,[$,t(a)]),s(" 是一个特殊的私有结构体，"),n("a",H,[T,t(a)]),s(" 包中的分析器会在编译期间检查被拷贝的变量中是否包含 "),n("a",X,[Z,t(a)]),s(" 或者实现了 "),J,s(" 和 "),K,s(" 方法，若包含该结构体或者实现了对应的方法就会报出以下错误：")]),Q,n("ol",null,[n("li",null,[n("a",Y,[s("https://github.com/golang/go/tree/release-branch.go1.18/src"),t(a)])]),n("li",null,[n("a",nn,[s("https://draveness.me/golang/"),t(a)])])])])}const on=o(l,[["render",sn],["__file","4.synchronization_primitives.html.vue"]]);export{on as default};
