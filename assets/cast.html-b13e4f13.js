import{_ as p,Y as o,Z as e,$ as n,a0 as s,a1 as t,a2 as c,F as i}from"./framework-d955655f.js";const u={},l=n("h2",{id:"introduction-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction-简介","aria-hidden":"true"},"#"),s(" Introduction 简介")],-1),k={href:"https://github.com/spf13/cast",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/gohugoio/hugo",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="quick-start-快速开始" tabindex="-1"><a class="header-anchor" href="#quick-start-快速开始" aria-hidden="true">#</a> Quick start 快速开始</h2><p>在go module中导入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u github.com/spf13/cast v1.4.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/spf13/cast&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ToString</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;dreamjz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// dreamjz</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">// 8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token number">8.31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">// 8.31</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;one time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// one time</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// &quot;&quot;</span>

	<span class="token keyword">var</span> foo <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;one more time&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// one more time</span>

	<span class="token comment">// To int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token number">8.31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 8.31</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>

	<span class="token keyword">var</span> eight <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span>eight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 0</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cast</code>实现了多种常见类型之间的相互转换，返回最符合直觉的结果。例如：</p><ul><li><code>nil</code>转<code>string</code>的结果为<code>&quot;&quot;</code>,而不是<code>&quot;nil&quot;</code></li><li><code>true</code>转为<code>string</code>的结果为<code>true</code>,<code>true</code>转<code>int</code>的结果为<code>1</code></li><li><code>interface{}</code>转为其他类型，要看其存储的具体值</li></ul><p>这些类型包括所有的基本类型(整形、浮点型、布尔值和字符串)、空接口、<code>nil</code>,时间（<code>time.Time</code>）、时间间隔(<code>time.Duration</code>)以及它们的切片类型，还有<code>map[string]Type</code>（Type为前面提到的类型）:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>byte     bool      float32    float64    string  
int8     int16     int32      int64      int
uint8    uint16    uint32     uint64     uint
interface{}   time.Time  time.Duration   nil
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级转换" tabindex="-1"><a class="header-anchor" href="#高级转换" aria-hidden="true">#</a> 高级转换</h2><p><code>cast</code>提供了两组函数：</p><ul><li><code>ToType</code>（Type为任何支持的类型），将参数转换为<code>Type</code>类型。如果无法转换，返回<code>Type</code>类型的零值或<code>nil</code></li><li><code>ToTypeE</code>以E结尾,返回转换后的值和一个<code>error</code>。这组函数可以区分参数中实际存储了零值还是转换失败</li></ul><p>实现的代码大部分类似，<code>ToType</code>在内部调用<code>ToTypeE</code>函数，返回结果并忽略错误。<code>ToType</code>函数的实现在文件<code>cast.go</code>中，而<code>ToTpyeE</code>在文件<code>caste.go</code>中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cast/cast.go</span>
<span class="token keyword">func</span> <span class="token function">ToBool</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  v<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">ToBoolE</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">return</span> v
<span class="token punctuation">}</span>

<span class="token comment">// ToDuration casts an interface to a time.Duration type.</span>
<span class="token keyword">func</span> <span class="token function">ToDuration</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">{</span>
  v<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">ToDurationE</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">return</span> v
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ToTypeE</code>函数接收任意类型参数(<code>interface{}</code>),之后使用类型断言根据具体类型来执行不同的转换，若无法转换则返回错误</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cast/caste.go</span>
<span class="token keyword">func</span> <span class="token function">ToBoolE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> <span class="token function">indirect</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

  <span class="token keyword">switch</span> b <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to bool&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用<code>indirect</code>函数将参数中可能的指针去除。若类型本身不是指针，那么直接返回，否则返回指针指向的值。循环直到返回一个非指针的值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cast/caste.go</span>
<span class="token keyword">func</span> <span class="token function">indirect</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
    <span class="token comment">// Avoid creating a reflect.Value if it&#39;s not a pointer.</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token keyword">for</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以下面的输出均为 8 ：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// pointer</span>
	p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>

	pp <span class="token operator">:=</span> <span class="token operator">&amp;</span>p
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间类型转换" tabindex="-1"><a class="header-anchor" href="#时间类型转换" aria-hidden="true">#</a> 时间类型转换</h2><p>时间类型转换的代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ToTimeE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tim time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> <span class="token function">indirect</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

  <span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">:</span>
    <span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">StringToDate</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">int64</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">int32</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">uint</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">uint64</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">uint32</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to Time&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据传入的类型执行不同的处理：</p><ul><li>若为<code>time.Time</code>直接返回</li><li>若为整型，将参数作为时间戳(自UTC时间<code>1970.01.01 00:00:00</code>到现在的秒数)调用<code>time.Unix</code>生成时间。<code>Unix</code>接收两个参数，第一个参数指定为秒，第二个参数指定纳秒</li><li>如果是字符串，调用<code>StringToDate</code>函数依次尝试以下时间格式调用<code>time.Parse</code>解析该字符串。如果某个格式解析成功，则返回获得的<code>time.Time</code>。否则解析失败返回错误</li><li>任何其他类型均无法转换成<code>time.Time</code></li></ul><p>字符串转换为时间：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cast/caste.go</span>
<span class="token keyword">func</span> <span class="token function">StringToDate</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">parseDateWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    time<span class="token punctuation">.</span>RFC3339<span class="token punctuation">,</span>
    <span class="token string">&quot;2006-01-02T15:04:05&quot;</span><span class="token punctuation">,</span> <span class="token comment">// iso8601 without timezone</span>
    time<span class="token punctuation">.</span>RFC1123Z<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>RFC1123<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>RFC822Z<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>RFC822<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>RFC850<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>ANSIC<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>UnixDate<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>RubyDate<span class="token punctuation">,</span>
    <span class="token string">&quot;2006-01-02 15:04:05.999999999 -0700 MST&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Time.String()</span>
    <span class="token string">&quot;2006-01-02&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;02 Jan 2006&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;2006-01-02T15:04:05-0700&quot;</span><span class="token punctuation">,</span> <span class="token comment">// RFC3339 without timezone hh:mm colon</span>
    <span class="token string">&quot;2006-01-02 15:04:05 -07:00&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;2006-01-02 15:04:05 -0700&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;2006-01-02 15:04:05Z07:00&quot;</span><span class="token punctuation">,</span> <span class="token comment">// RFC3339 without T</span>
    <span class="token string">&quot;2006-01-02 15:04:05Z0700&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// RFC3339 without T or timezone hh:mm colon</span>
    <span class="token string">&quot;2006-01-02 15:04:05&quot;</span><span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>Kitchen<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>Stamp<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>StampMilli<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>StampMicro<span class="token punctuation">,</span>
    time<span class="token punctuation">.</span>StampNano<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parseDateWith</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> dates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> e <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> dateType <span class="token operator">:=</span> <span class="token keyword">range</span> dates <span class="token punctuation">{</span>
    <span class="token keyword">if</span> d<span class="token punctuation">,</span> e <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>dateType<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> d<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to parse date: %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>time.Duration</code>类型转换如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cast/caste.go</span>
<span class="token keyword">func</span> <span class="token function">ToDurationE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> <span class="token function">indirect</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

  <span class="token keyword">switch</span> s <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> time<span class="token punctuation">.</span>Duration<span class="token punctuation">:</span>
    <span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> <span class="token builtin">int16</span><span class="token punctuation">,</span> <span class="token builtin">int8</span><span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">,</span> <span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">uint32</span><span class="token punctuation">,</span> <span class="token builtin">uint16</span><span class="token punctuation">,</span> <span class="token builtin">uint8</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token function">ToFloat64</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">ContainsAny</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;nsuµmh&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      d<span class="token punctuation">,</span> err <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      d<span class="token punctuation">,</span> err <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">&quot;ns&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to Duration&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据传入的类型进行不同的处理：</p><ul><li>若为<code>time.Duration</code>类型，直接返回</li><li>若为整型或浮点型，将其数值强制转换为<code>time.Duration</code>类型，单位默认为<code>ns</code></li><li>若为字符串，分为两种情况： <ol><li>字符串中有时间单位：<code>nsuµmh</code>,直接调用<code>time.ParseDuration</code></li><li>否则拼接<code>ns</code>后调用<code>time.ParseDuration</code></li></ol></li><li>其他类型解析失败</li></ul><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/spf13/cast&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	timestamp <span class="token operator">:=</span> <span class="token number">1579615973</span>
	timeStr <span class="token operator">:=</span> <span class="token string">&quot;2021-10-26 17:29:00&quot;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 2021-10-26 17:35:55.35905014 +0800 CST m=+0.000115363</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToTime</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2020-01-21 22:12:53 +0800 CST</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToTime</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 2021-10-26 17:29:00 +0000 UTC</span>

	d<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">&quot;1m30s&quot;</span><span class="token punctuation">)</span>
	ns <span class="token operator">:=</span> <span class="token number">30000</span>
	strWithUnit <span class="token operator">:=</span> <span class="token string">&quot;130s&quot;</span>
	strWithoutUnit <span class="token operator">:=</span> <span class="token string">&quot;130&quot;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToDuration</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">// 1m30s</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToDuration</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">// 30µs</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToDuration</span><span class="token punctuation">(</span>strWithUnit<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 2m10s</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToDuration</span><span class="token punctuation">(</span>strWithoutUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 130ns</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片类型转换" tabindex="-1"><a class="header-anchor" href="#切片类型转换" aria-hidden="true">#</a> 切片类型转换</h2><p>实际上，这些函数的实现逻辑基本类似。使用类型断言判断类型。若为目标类型直接返回。否则进行响应的转换</p><p>我们主要分析两个实现：<code>ToIntSliceE</code>和<code>ToStringSliceE</code>。<code>ToBoolSliceE/ToDurationSliceE</code>与<code>ToIntSlice</code>基本相同</p><p>首先是<code>ToIntSliceE</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ToIntSliceE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to []int&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>

  kind <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">switch</span> kind <span class="token punctuation">{</span>
  <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">:</span>
    s <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
      val<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ToIntE</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to []int&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to []int&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据传入参数的类型：</p><ul><li>若为<code>nil</code>,直接返回错误</li><li>若为<code>[]int</code>,不用转换，直接返回</li><li>若为<strong>切片</strong>或<strong>数组</strong>，新建[]int,将每个元素转换为<code>int</code>类型后放入切片并返回</li><li>其他类型不可转换</li></ul><p><code>ToStringSliceE</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ToStringSliceE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

  <span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> u <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
      a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">ToString</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
    str<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ToStringE</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to []string&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>str<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to []string&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据传入的参数类型：</p><ul><li>若为<code>[]interface{}</code>，将每个元素转为<code>string</code>并返回结果切片</li><li>若为<code>[]string</code>,无需转换，直接返回</li><li>若为<code>interface{}</code>，将参数转为<code>string</code>,返回只包含这个值的切片</li><li>若为<code>string</code>,调用<code>strings.Fields</code>函数按空白符将参数拆分，返回拆分的字符串切片</li><li>其他情况，不能转换</li></ul><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sliceOfInt <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
	arrayOfInt <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span>

	<span class="token comment">// ToIntSlice</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToIntSlice</span><span class="token punctuation">(</span>sliceOfInt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,3,7]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToIntSlice</span><span class="token punctuation">(</span>arrayOfInt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [8,12,0]</span>

	sliceOfInterface <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token string">&quot;kesa&quot;</span><span class="token punctuation">}</span>
	sliceOfString <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cd&quot;</span><span class="token punctuation">}</span>
	stringFields <span class="token operator">:=</span> <span class="token string">&quot; abc def hij&quot;</span>
	any <span class="token operator">:=</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span>
	<span class="token comment">// ToStringSlice</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringSlice</span><span class="token punctuation">(</span>sliceOfInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1 2 kesa]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringSlice</span><span class="token punctuation">(</span>sliceOfString<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// [a b cd]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringSlice</span><span class="token punctuation">(</span>stringFields<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// [abc def hij]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringSlice</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">// 37</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-string-type-类型转换" tabindex="-1"><a class="header-anchor" href="#map-string-type-类型转换" aria-hidden="true">#</a> map[string]Type 类型转换</h2><p><code>cast</code>能将传入的参数转换为<code>map[stirng]Type</code>类型，<code>Type</code>其支持的所有类型</p><p>实现基本相同，下面分析下<code>ToStringMapString</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ToStringMapStringE</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
      m<span class="token punctuation">[</span><span class="token function">ToString</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ToString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
      m<span class="token punctuation">[</span><span class="token function">ToString</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ToString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
      m<span class="token punctuation">[</span><span class="token function">ToString</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ToString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    err <span class="token operator">:=</span> <span class="token function">jsonStringToObject</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> err
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to cast %#v of type %T to map[string]string&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据传入的类型：</p><ul><li>若为<code>map[string]string</code>则直接返回</li><li>若为<code>map[string]interface{}</code>，将每个value转换为<code>string</code>存入新的map并返回</li><li>若为<code>map[interface{}]string</code>，将每个key转换为<code>string</code>存入新的map并返回</li><li>若为<code>map[interface{}]interface{}</code>,将key，value均转换为<code>string</code>存入新的map并返回</li><li>若为<code>string</code>，将其视作JSON解析到<code>map[string]string</code>并返回</li><li>其他情况则返回错误</li></ul><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;kesa&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;gender&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;kesa&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;gender&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	m3 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;miao&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	m4 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;miao&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>  <span class="token number">25</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	jsonStr <span class="token operator">:=</span> <span class="token string">\`{&quot;name&quot;:&quot;pp&quot;,&quot;age&quot;: 222}\`</span>

	<span class="token comment">// ToStringMapString</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// map[gender:male name:kesa]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// map[gender:male name:kesa]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// map[age:10 name:miao]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// map[age:25 name:miao]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// map[age: name:pp]</span>

	m5 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m5<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m5<span class="token punctuation">)</span> <span class="token comment">// map[age:222 name:pp]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上述的<code>jsonStr</code>中含有<code>Number</code>类型，是不能被转换成golang的<code>string</code>,所以<code>ToStringMapString</code>转换的结果中<code>age</code>为空字符串(其解析调用了<code>json.Unmarshal</code>)</p><h2 id="conclusion-总结" tabindex="-1"><a class="header-anchor" href="#conclusion-总结" aria-hidden="true">#</a> Conclusion 总结</h2><p><code>cast</code>库能在几乎所有常见类型之间转换，使用非常方便。代码量也很小，建议阅读源码</p><h2 id="reference-参考" tabindex="-1"><a class="header-anchor" href="#reference-参考" aria-hidden="true">#</a> Reference 参考</h2>`,57),v={href:"https://github.com/spf13/cast",target:"_blank",rel:"noopener noreferrer"},m={href:"https://darjun.github.io/2020/01/20/godailylib/cast/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://igorsobreira.com/2015/04/11/decoding-json-numbers-into-strings-in-go.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://stackoverflow.com/questions/24480835/decoding-json-int-into-string",target:"_blank",rel:"noopener noreferrer"};function g(y,w){const a=i("ExternalLinkIcon");return o(),e("div",null,[l,n("p",null,[n("a",k,[s("cast"),t(a)]),s("是一个小巧使用的类型转换库，用于将一个类型转换成另一个类型，最初是用在"),n("a",r,[s("hugo"),t(a)]),s("中的")]),d,n("ol",null,[n("li",null,[n("p",null,[n("a",v,[s("cast"),t(a)]),s(" GitHub-repo")])]),n("li",null,[n("p",null,[n("a",m,[s("cast"),t(a)]),s(" darjun/blog")])]),n("li",null,[n("p",null,[n("a",b,[s("decoding-json-numbers-into-strings-in-go"),t(a)]),s(" igorsobreira")])]),n("li",null,[n("p",null,[n("a",f,[s("Decoding JSON int into string"),t(a)]),s(" stackoverflow")])])])])}const h=p(u,[["render",g],["__file","cast.html.vue"]]);export{h as default};
