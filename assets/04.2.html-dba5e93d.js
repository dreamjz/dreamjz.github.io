import{_ as a,Z as n,$ as e,a3 as s}from"./framework-dee406ed.js";const i={},d=s(`<h1 id="_4-2-go-程序的基本结构和要素" tabindex="-1"><a class="header-anchor" href="#_4-2-go-程序的基本结构和要素" aria-hidden="true">#</a> 4.2 Go 程序的基本结构和要素</h1><h2 id="_4-2-1-包的概念、导入与可见性" tabindex="-1"><a class="header-anchor" href="#_4-2-1-包的概念、导入与可见性" aria-hidden="true">#</a> 4.2.1 包的概念、导入与可见性</h2><h3 id="包-package" tabindex="-1"><a class="header-anchor" href="#包-package" aria-hidden="true">#</a> 包 Package</h3><p>包是结构化代码的一种方式： 每个程序由包(package)组成，可使用自身的包或者导入其他包的内容。</p><p>必须在源文件的非注释第一行指明文件属于哪个包，如：<code>package main </code>。</p><h3 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库" aria-hidden="true">#</a> 标准库</h3><p>Golang 中可直接使用的包。</p><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h3><p>若对一个包进行修改或重新编译，所有引用了的此包的程序必须重新编译。</p><p>Golang 中的包采用显示依赖达到快速编译的目的，编译器从后缀名为<code>.o</code>的对象文件中提取传递依赖类型的信息。</p><p>例： <code>a.go</code> 依赖 <code>b.go</code>, <code>b.go</code> 依赖 <code>c.go</code></p><ul><li>编译顺序为: c, b, a</li></ul><h3 id="导入-import" tabindex="-1"><a class="header-anchor" href="#导入-import" aria-hidden="true">#</a> 导入 Import</h3><p>使用 <code>import</code> 导入包：</p><ul><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;os&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 使用别名(alias)</span>
<span class="token keyword">import</span> format <span class="token string">&quot;fmt&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>导入的包若没有使用将会出现错误: <code>imported and not used: xxx</code></p><h3 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h3><p>标识符的可见性：</p><ul><li>导出（可见的）：<strong>大写字母开头</strong>，可被外部包调用</li><li>不可见的：<strong>小写字母开头</strong>，不可被外部包调用</li></ul><h2 id="_4-2-2-注释" tabindex="-1"><a class="header-anchor" href="#_4-2-2-注释" aria-hidden="true">#</a> 4.2.2 注释</h2><p>注释不会被编译，种类有：</p><ul><li><p>单行注释：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// comment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>多行注释:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">/*
* comment 1
* comment 2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="包注释" tabindex="-1"><a class="header-anchor" href="#包注释" aria-hidden="true">#</a> 包注释</h3><p>包的文档说明，用于 <code>package</code> 之前</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Package superman implements methods for saving the world.</span>
<span class="token comment">//</span>
<span class="token comment">// Experience has shown that a small number of procedures can prove</span>
<span class="token comment">// helpful when attempting to save the world.</span>
<span class="token keyword">package</span> superman
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释" aria-hidden="true">#</a> 文档注释</h3><p>几乎所有全局作用域的类型、常量、函数和导出的对象的注释，以名称开头。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// EnterOrbit causes Superman to fly into low Earth orbit, a position</span>
<span class="token comment">// that presents several possibilities for planet salvation.</span>
<span class="token keyword">func</span> <span class="token function">EnterOrbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-3-类型转换" tabindex="-1"><a class="header-anchor" href="#_4-2-3-类型转换" aria-hidden="true">#</a> 4.2.3 类型转换</h2><p>所有类型转换必须是显式的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>valueOfTypeB <span class="token operator">=</span> <span class="token function">typeB</span><span class="token punctuation">(</span>valueOfTypeA<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">5.0</span>
b <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义类型" tabindex="-1"><a class="header-anchor" href="#自定义类型" aria-hidden="true">#</a> 自定义类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> your_type <span class="token keyword">type</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Integer <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相同底层类型的变量可以相互转换：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">3</span>
c <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
d <span class="token operator">:=</span> <span class="token function">Integer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[d];function l(t,c){return n(),e("div",null,o)}const p=a(i,[["render",l],["__file","04.2.html.vue"]]);export{p as default};
