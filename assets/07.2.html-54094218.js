import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as l}from"./framework-09afcf0b.js";const i={},u=n("p",null,[s("滑动窗口: 对于数组"),n("code",null,"[1 2 3 4 5 6]"),s(", 长度为3的窗口"),n("code",null,"[1 2 3]"),s(", 窗口向右移动一个数字, 最右添加一个元素, 最左边删除一个元素, 变成"),n("code",null,"[2 3 4]"),s(", 符合先入先出的规则, 可以用队列来表示.")],-1),r=n("h2",{id:"_7-2-1-问题41-滑动窗口平均值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-2-1-问题41-滑动窗口平均值","aria-hidden":"true"},"#"),s(" 7.2.1 问题41: 滑动窗口平均值")],-1),d={href:"https://leetcode.cn/problems/qIsx9U/",target:"_blank",rel:"noopener noreferrer"},k=t(`<blockquote><p>给定一个窗口大小和一个整数数据流，根据该滑动窗口的大小，计算滑动窗口里所有数字的平均值。</p><p>实现 <code>MovingAverage</code> 类：</p><ul><li><code>MovingAverage(int size)</code> 用窗口大小 <code>size</code> 初始化对象。</li><li><code>double next(int val)</code> 成员函数 <code>next</code> 每次调用的时候都会往滑动窗口增加一个整数，请计算并返回数据流中最后 <code>size</code> 个值的移动平均值，即滑动窗口里所有数字的平均值。</li></ul><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
inputs = [&quot;MovingAverage&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]
inputs = [[3], [1], [10], [3], [5]]
输出：
[null, 1.0, 5.5, 4.66667, 6.0]

解释：
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // 返回 1.0 = 1 / 1
movingAverage.next(10); // 返回 5.5 = (1 + 10) / 2
movingAverage.next(3); // 返回 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // 返回 6.0 = (10 + 3 + 5) / 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= size &lt;= 1000</code></li><li><code>-105 &lt;= val &lt;= 105</code></li><li>最多调用 <code>next</code> 方法 <code>104</code> 次</li></ul></blockquote><h3 id="_7-2-1-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_7-2-1-1-分析-题解" aria-hidden="true">#</a> 7.2.1.1 分析&amp;题解</h3><p>滑动窗口满足先进先出的规则, 可以使用队列解决.</p><p><code>Golang</code> 中没有队列实现, 可以是使用切片来进行模拟.</p>`,4),m=n("p",null,[s("窗口中元素的和, 若每次重新计算, 则时间为O(n); 可以利用变量"),n("code",null,"sum"),s("缓存上一次的和, 这样每次只需计算一次 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"u"),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"w"),n("mo",null,"−"),n("mi",null,"o"),n("mi",null,"l"),n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"sum+new-old")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"d")])])]),s("即可.")],-1),v=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MovingAverage <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	queue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	size  <span class="token builtin">int</span>
	sum   <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> MovingAverage <span class="token punctuation">{</span>
	<span class="token keyword">return</span> MovingAverage<span class="token punctuation">{</span>
		queue<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>
		size<span class="token punctuation">:</span>  size<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ma <span class="token operator">*</span>MovingAverage<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> average <span class="token builtin">float64</span>
	<span class="token comment">// 滑动窗口未满</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ma<span class="token punctuation">.</span>size <span class="token punctuation">{</span>
		ma<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
		ma<span class="token punctuation">.</span>sum <span class="token operator">+=</span> val
		average <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> average
	<span class="token punctuation">}</span>
	<span class="token comment">// 滑动窗口已满</span>
	<span class="token comment">// 队尾出队, 新元素入队</span>
	tail <span class="token operator">:=</span> ma<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	ma<span class="token punctuation">.</span>queue <span class="token operator">=</span> ma<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	ma<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token comment">// 平均值</span>
	ma<span class="token punctuation">.</span>sum <span class="token operator">=</span> ma<span class="token punctuation">.</span>sum <span class="token operator">+</span> val <span class="token operator">-</span> tail
	average <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> average
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-2-2-问题41-最近请求次数" tabindex="-1"><a class="header-anchor" href="#_7-2-2-问题41-最近请求次数" aria-hidden="true">#</a> 7.2.2 问题41: 最近请求次数</h2>`,2),b={href:"https://leetcode.cn/problems/H8086Q/",target:"_blank",rel:"noopener noreferrer"},g=t(`<blockquote><p>写一个 <code>RecentCounter</code> 类来计算特定时间范围内最近的请求。</p><p>请实现 <code>RecentCounter</code> 类：</p><ul><li><code>RecentCounter()</code> 初始化计数器，请求数为 0 。</li><li><code>int ping(int t)</code> 在时间 <code>t</code> 添加一个新请求，其中 <code>t</code> 表示以毫秒为单位的某个时间，并返回过去 <code>3000</code> 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 <code>[t-3000, t]</code> 内发生的请求数。</li></ul><p><strong>保证</strong> 每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
inputs = [&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]
inputs = [[], [1], [100], [3001], [3002]]
输出：
[null, 1, 2, 3, 3]

解释：
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1]，范围是 [-2999,1]，返回 1
recentCounter.ping(100);   // requests = [1, 100]，范围是 [-2900,100]，返回 2
recentCounter.ping(3001);  // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= t &lt;= 109</code></li><li>保证每次对 <code>ping</code> 调用所使用的 <code>t</code> 值都 <strong>严格递增</strong></li><li>至多调用 <code>ping</code> 方法 <code>104</code> 次</li></ul></blockquote><h3 id="_7-2-2-1-分析-题解" tabindex="-1"><a class="header-anchor" href="#_7-2-2-1-分析-题解" aria-hidden="true">#</a> 7.2.2.1 分析&amp;题解</h3><p>过去3000ms内的请求, 可以看作是长度为3000的滑动窗口, 新请求到来时计算和队尾的时间差:</p><ul><li><p>小于3000ms, 直接入队</p></li><li><p>大于3000ms, 队尾出队, 直到小于为止, 然后入队</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RecentCounter <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	queue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	size  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RecentCounter <span class="token punctuation">{</span>
	<span class="token keyword">return</span> RecentCounter<span class="token punctuation">{</span>
		queue<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		size<span class="token punctuation">:</span>  <span class="token number">3000</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rc <span class="token operator">*</span>RecentCounter<span class="token punctuation">)</span> <span class="token function">Ping</span><span class="token punctuation">(</span>t <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// 空窗口</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rc<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 将超过3000毫秒的请求出队</span>
	<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rc<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>rc<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> t <span class="token punctuation">{</span>
		rc<span class="token punctuation">.</span>queue <span class="token operator">=</span> rc<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	rc<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
	<span class="token comment">// 返回个数</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>queue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和栈应用类似, 连续出队时要搞清楚<strong>出队的条件</strong>.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,7),h={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"};function f(q,_){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",d,[s("LCR 041. 数据流中的移动平均值"),e(a)])]),k,m,v,n("p",null,[n("a",b,[s("LCR 042. 最近的请求次数"),e(a)])]),g,n("ol",null,[n("li",null,[n("a",h,[s("剑指Offer（专项突破版）"),e(a)])])])])}const y=p(i,[["render",f],["__file","07.2.html.vue"]]);export{y as default};
