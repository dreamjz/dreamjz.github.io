import{_ as e,X as p,Y as o,Z as n,$ as a,a0 as t,a1 as c,F as i}from"./framework-8cb7ec75.js";const l={},u=c(`<h2 id="_1-题目描述" tabindex="-1"><a class="header-anchor" href="#_1-题目描述" aria-hidden="true">#</a> 1. 题目描述</h2><p>给你一个字符串 s ，逐个翻转字符串中的所有 单词 。</p><p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p><p>请你返回一个翻转 s 中单词顺序并用单个空格相连的字符串。</p><p>说明：</p><ul><li>输入字符串 s 可以在前面、后面或者单词间包含多余的空格。</li><li>翻转后单词间应当仅用一个空格分隔。</li><li>翻转后的字符串中不应包含额外的空格。</li></ul><p>Example：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>示例 1：
输入：s = &quot;the sky is blue&quot;
输出：&quot;blue is sky the&quot;

示例 2：
输入：s = &quot;  hello world  &quot;
输出：&quot;world hello&quot;
解释：输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。

示例 3：
输入：s = &quot;a good   example&quot;
输出：&quot;example good a&quot;
解释：如果两个单词间有多余的空格，将翻转后单词间的空格减少到只含一个。

示例 4：
输入：s = &quot;  Bob    Loves  Alice   &quot;
输出：&quot;Alice Loves Bob&quot;

示例 5：
输入：s = &quot;Alice does not even like bob&quot;
输出：&quot;bob like even not does Alice&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-题解" tabindex="-1"><a class="header-anchor" href="#_2-题解" aria-hidden="true">#</a> 2. 题解</h2><h3 id="_2-1-使用-api" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-api" aria-hidden="true">#</a> 2.1 使用 API</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    strs <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token function">reverseStrSlice</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reverseStrSlice</span><span class="token punctuation">(</span>strs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>strings.Fields(s string) []string</code>: Fields splits the string <code>s</code> around each instance of one or more consecutive white space characters, as defined by <code>unicode.IsSpace</code>, returning a slice of substrings of s or an empty slice if s contains only white space.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Fields are: %q&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token string">&quot;  foo bar  baz   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// output</span>
<span class="token comment">// Fields are: [&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>strings.Join(elems []string, sep string) string</code>: Join concatenates the elements of its first argument to create a single string. The separator string <code>sep</code> is placed between elements in the resulting string.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// foo, bar, baz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-2-自定义函数" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义函数" aria-hidden="true">#</a> 2.2 自定义函数</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token comment">// 去除所有多余的空格</span>
    b <span class="token operator">:=</span> <span class="token function">trim</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token comment">// 反转整个字符串</span>
    <span class="token function">reverseByteSlice</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment">// 反转单词</span>
    <span class="token function">reverseEachWord</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reverseEachWord</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    start<span class="token punctuation">,</span> end <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> start <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
        <span class="token comment">// 寻找单词边界</span>
        <span class="token keyword">for</span> end <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            end <span class="token operator">++</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 翻转单词</span>
        <span class="token function">reverseByteSlice</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment">// 更新索引</span>
        start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span>
        end <span class="token operator">=</span> start
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reverseByteSlice</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> start <span class="token operator">&lt;</span> end <span class="token punctuation">{</span>
        b<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
        start<span class="token operator">++</span>
        end<span class="token operator">--</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">trim</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
    <span class="token comment">// 去除两边的空格</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">for</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
        left<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
        right<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 去除中间的多余空格</span>
    <span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
        c <span class="token operator">:=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> b<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        left<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-deque" tabindex="-1"><a class="header-anchor" href="#_2-3-deque" aria-hidden="true">#</a> 2.3 Deque</h3><p>使用 slice 实现的双端队列，将每个单词插入队首，最后队列中的单词顺序即为反向的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token comment">// trim whitspace</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
        left<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
        right<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 单词入队</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    sdq <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>strDeque<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">{</span>
        c <span class="token operator">:=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token keyword">if</span> c <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            sdq <span class="token operator">=</span> sdq<span class="token punctuation">.</span><span class="token function">AddFront</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
            b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        left<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最后一个单词入队</span>
    sdq <span class="token operator">=</span> sdq<span class="token punctuation">.</span><span class="token function">AddFront</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>sdq<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用双端队列</span>
<span class="token keyword">type</span> strDeque <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sdq strDeque<span class="token punctuation">)</span> <span class="token function">AddFront</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> strDeque <span class="token punctuation">{</span>
    rcv <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>s<span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>rcv<span class="token punctuation">,</span> sdq<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-string-in-golang" tabindex="-1"><a class="header-anchor" href="#_3-string-in-golang" aria-hidden="true">#</a> 3. String In Golang</h2><p>在内存中，<code>string</code> 是一个双字结构，即一个指向实际数据的<strong>指针</strong>和记录字符串<strong>长度</strong>的整数。因为指针对用户来说完全不可见，因此将 <code>string</code> 视为<strong>值类型</strong>（字符数组）。</p><p>字符串 <code>var s string = &quot;hello&quot;</code> 及其子串 <code>s[2:3]</code>， 内存结构如图所示</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/7.6_fig7.4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Golang 中字符串是<strong>不可变的</strong>，尝试对 <code>str[i]</code> 进行赋值会得到错误 <code>cannot assign to str[i]</code></p><p>因此需要现将字符串转化成字节数组，然后修改数组中的元素再将其转换回字符串格式以大到修改字符串的目的。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,24),r={href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/unknwon/the-way-to-go_ZH_CN",target:"_blank",rel:"noopener noreferrer"};function k(v,b){const s=i("ExternalLinkIcon");return p(),o("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[a("LeetCode 官方题解"),t(s)])]),n("li",null,[n("a",d,[a("The_way_to_go"),t(s)])])])])}const g=e(l,[["render",k],["__file","151_reverse_words_in_string.html.vue"]]);export{g as default};
