import{_ as p,Z as o,$ as e,a0 as n,a1 as a,a2 as t,a3 as c,H as u}from"./framework-09afcf0b.js";const l={},i={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeORM/day3-insert-query",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="_1-clause-构造-sql" tabindex="-1"><a class="header-anchor" href="#_1-clause-构造-sql" aria-hidden="true">#</a> 1. Clause 构造 SQL</h2><p>查询语句一般由多个子句(clause)组成，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> clo2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">FROM</span> table_name
	<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span>
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> col1
	<span class="token keyword">HAVING</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一次性构造出完整的SQL语句较为复杂，可以将构造SQL的部分独立出来放在<code>clause</code>包中。</p><p><code>clause/genreator.go</code>定义SQL子句的生成规则。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> clause

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> generator <span class="token keyword">func</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>

<span class="token keyword">var</span> generators <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	generators <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator<span class="token punctuation">)</span>
	generators<span class="token punctuation">[</span>INSERT<span class="token punctuation">]</span> <span class="token operator">=</span> _insert
	generators<span class="token punctuation">[</span>VALUES<span class="token punctuation">]</span> <span class="token operator">=</span> _values
	generators<span class="token punctuation">[</span>SELECT<span class="token punctuation">]</span> <span class="token operator">=</span> _select
	generators<span class="token punctuation">[</span>LIMIT<span class="token punctuation">]</span> <span class="token operator">=</span> _limit
	generators<span class="token punctuation">[</span>WHERE<span class="token punctuation">]</span> <span class="token operator">=</span> _where
	generators<span class="token punctuation">[</span>ORDERBY<span class="token punctuation">]</span> <span class="token operator">=</span> _orderBy
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genBindVars</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_insert</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// INSERT INTO $tableName ($fields)</span>
	tableName <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO %s (%v)&quot;</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_values</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// VALUES ($1), ($2) ...</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		bindStr <span class="token builtin">string</span>
		sql     strings<span class="token punctuation">.</span>Builder
		vars    <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	<span class="token punctuation">)</span>

	sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;VALUES &quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> vals <span class="token punctuation">{</span>
		v <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
		<span class="token keyword">if</span> bindStr <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			bindStr <span class="token operator">=</span> <span class="token function">genBindVars</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;(%v)&quot;</span><span class="token punctuation">,</span> bindStr<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_select</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// SELECT $fields FROM $tableName</span>
	tableName <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT %v FROM %s&quot;</span><span class="token punctuation">,</span> fields<span class="token punctuation">,</span> tableName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_limit</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// LIMIT $num</span>
	<span class="token keyword">return</span> <span class="token string">&quot;LIMIT ?&quot;</span><span class="token punctuation">,</span> vals
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_where</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// WHERE $desc</span>
	desc<span class="token punctuation">,</span> vars <span class="token operator">:=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;WHERE %s&quot;</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">,</span> vars
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">_orderBy</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ORDER BY %s&quot;</span><span class="token punctuation">,</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clause/clause.go</code>中拼接各子句。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> clause

<span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span>

<span class="token keyword">type</span> Clause <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	sql     <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span>
	sqlVars <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Type <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	INSERT Type <span class="token operator">=</span> <span class="token boolean">iota</span>
	VALUES
	SELECT
	LIMIT
	WHERE
	ORDERBY
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Clause<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>name Type<span class="token punctuation">,</span> vars <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>sql <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 延迟加载</span>
		c<span class="token punctuation">.</span>sql <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>sqlVars <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> generators<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span>vars<span class="token operator">...</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>sql<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> sql
	c<span class="token punctuation">.</span>sqlVars<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> vars
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Clause<span class="token punctuation">)</span> <span class="token function">Build</span><span class="token punctuation">(</span>orders <span class="token operator">...</span>Type<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		sqls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
		vars <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> order <span class="token operator">:=</span> <span class="token keyword">range</span> orders <span class="token punctuation">{</span>
		<span class="token keyword">if</span> sql<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>sql<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			sqls <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sqls<span class="token punctuation">,</span> sql<span class="token punctuation">)</span>
			vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sqlVars<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>sqls<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Set</code>：根据类型生成子句</li><li><code>Build</code>：根据子句的顺序，构造出完整的 SQL 语句</li></ul><h3 id="_1-1-单元测试" tabindex="-1"><a class="header-anchor" href="#_1-1-单元测试" aria-hidden="true">#</a> 1.1 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">testSelect</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> clause Clause
	clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>LIMIT<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>SELECT<span class="token punctuation">,</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>WHERE<span class="token punctuation">,</span> <span class="token string">&quot;Name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span>
	clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ORDERBY<span class="token punctuation">,</span> <span class="token string">&quot;Age ASC&quot;</span><span class="token punctuation">)</span>

	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>SELECT<span class="token punctuation">,</span> WHERE<span class="token punctuation">,</span> ORDERBY<span class="token punctuation">,</span> LIMIT<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token punctuation">)</span>
	<span class="token keyword">if</span> sql <span class="token operator">!=</span> <span class="token string">&quot;SELECT * FROM User WHERE Name = ? ORDER BY Age ASC LIMIT ?&quot;</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to build SQL&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to build SQLVars&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestClause_Build</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">testSelect</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-insert-实现" tabindex="-1"><a class="header-anchor" href="#_2-insert-实现" aria-hidden="true">#</a> 2. Insert 实现</h2><p>Insert 可以将对象的字段值插入到对应的数据表中。</p><h3 id="_2-1-schema" tabindex="-1"><a class="header-anchor" href="#_2-1-schema" aria-hidden="true">#</a> 2.1 schema</h3><p><code>schema.Schema</code>负责对象和数据表的映射，新增方法用于将对象转换成<code>INSERT</code>操作的<code>VALUE</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Schema<span class="token punctuation">)</span> <span class="token function">RecordValue</span><span class="token punctuation">(</span>dst any<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any <span class="token punctuation">{</span>
	dstVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> fieldVals <span class="token punctuation">[</span><span class="token punctuation">]</span>any
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>Fields <span class="token punctuation">{</span>
		fieldVals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fieldVals<span class="token punctuation">,</span> dstVal<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> fieldVals
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-session" tabindex="-1"><a class="header-anchor" href="#_2-2-session" aria-hidden="true">#</a> 2.2 session</h3><p>修改<code>session.Session</code>数据结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
	dialect  dialect<span class="token punctuation">.</span>Dialect
	refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema
	clause   clause<span class="token punctuation">.</span>Clause
	sql      strings<span class="token punctuation">.</span>Builder
	sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span>any
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>sqlVars <span class="token operator">=</span> <span class="token boolean">nil</span>
	s<span class="token punctuation">.</span>clause <span class="token operator">=</span> clause<span class="token punctuation">.</span>Clause<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建<code>session/record.go</code>用于实现记录的增删改查</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Insert</span><span class="token punctuation">(</span>vals <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	recordVals <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> vals <span class="token punctuation">{</span>
		table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>INSERT<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span>
		recordVals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>recordVals<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">RecordValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>VALUES<span class="token punctuation">,</span> recordVals<span class="token operator">...</span><span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>INSERT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>VALUES<span class="token punctuation">)</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-find-实现" tabindex="-1"><a class="header-anchor" href="#_3-find-实现" aria-hidden="true">#</a> 3. Find 实现</h2><p>Find 会将查询结果放入对象切片中，传入的是切片的指针，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gee.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-session" tabindex="-1"><a class="header-anchor" href="#_3-1-session" aria-hidden="true">#</a> 3.1 session</h3><p><code>session/record.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>vals any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	dstSlice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token punctuation">)</span>
	dstType <span class="token operator">:=</span> dstSlice<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dstType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span>
	sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>ORDERBY<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>LIMIT<span class="token punctuation">)</span>
	rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dst <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dstType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> fieldVals <span class="token punctuation">[</span><span class="token punctuation">]</span>any
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> table<span class="token punctuation">.</span>FieldNames <span class="token punctuation">{</span>
			fieldVals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fieldVals<span class="token punctuation">,</span> dst<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>fieldVals<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		dstSlice<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>dstSlice<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过反射获取切片指针指向的切片</li><li>获取切片元素的类型</li><li>构建切片元素类型的实例，获取表结构</li><li>构造查询语句并查询</li><li>遍历查询结果，构建切片元素实例，存储查询结果并追加至切片中</li></ol><h3 id="_3-2-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-2-单元测试" aria-hidden="true">#</a> 3.2 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	user1 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>
	user2 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
	user3 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>
	t<span class="token punctuation">.</span><span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s <span class="token operator">:=</span> <span class="token function">newSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	err1 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	err2 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err3 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to init test records&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestSession_Insert</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	affected<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to create record&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestSession_Find</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">testInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;failed to query records&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,31),r={href:"https://geektutu.com/post/geeorm-day3.html",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=u("ExternalLinkIcon");return o(),e("div",null,[n("p",null,[n("a",i,[a("day3-insert-query"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",r,[a("https://geektutu.com/post/geeorm-day3.html"),t(s)])])])])}const f=p(l,[["render",d],["__file","03.3.insert-query.html.vue"]]);export{f as default};
