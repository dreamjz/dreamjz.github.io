import{_ as e,Z as o,$ as c,a0 as n,a1 as a,a2 as t,a3 as p,H as i}from"./framework-09afcf0b.js";const l={},u=p('<h2 id="_1-前缀树-trie" tabindex="-1"><a class="header-anchor" href="#_1-前缀树-trie" aria-hidden="true">#</a> 1. 前缀树 Trie</h2><p>使用哈希表的路由表，只能处理<strong>静态路由</strong>。</p><p>对于<strong>动态路由</strong>，例如：<code>/hello/:name</code>，可以使用前缀树的数据结构实现。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310100617550.jpeg" alt="trie tree" tabindex="0" loading="lazy"><figcaption>trie tree</figcaption></figure><p>HTTP的请求路径是以<code>/</code>进行分隔的，因此每段可以作为 Trie 的节点。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310100619616.jpeg" alt="trie tree" tabindex="0" loading="lazy"><figcaption>trie tree</figcaption></figure><h2 id="_2-实现动态路由" tabindex="-1"><a class="header-anchor" href="#_2-实现动态路由" aria-hidden="true">#</a> 2. 实现动态路由</h2><p>使用前缀树实现动态路由的以下功能：</p><ul><li>参数匹配<code>:</code>，例如：<code>/:lang/doc</code>，可以匹配<code>/clang/doc</code>,<code>/go/doc</code></li><li>通配符<code>*</code>，例如：<code>/static/*filepath</code>，可以匹配<code>static/fav.ico</code>，<code>static/js/jQuery.js</code></li></ul>',9),r={href:"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/Gee/day3-tire-router",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>当前项目结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DAY3-TIRE-ROUTER
│  go.mod
│  go.work
│  main.go
│
└─gee
        context.go
        gee.go
        go.mod
        router.go
        router_test.go
        trie.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-trie" tabindex="-1"><a class="header-anchor" href="#_2-1-trie" aria-hidden="true">#</a> 2.1 Trie</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> gee

<span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span>

<span class="token keyword">type</span> trieNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pattern  <span class="token builtin">string</span>      <span class="token comment">// 待匹配的路由</span>
	part     <span class="token builtin">string</span>      <span class="token comment">// 当前节点的内容</span>
	children <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode <span class="token comment">// 子节点</span>
	isWild   <span class="token builtin">bool</span>        <span class="token comment">// 是否进行精准匹配，默认 false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寻找第一个匹配成功的节点，用于插入</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>trieNode<span class="token punctuation">)</span> <span class="token function">matchChild</span><span class="token punctuation">(</span>part <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>trieNode <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>children <span class="token punctuation">{</span>
		<span class="token keyword">if</span> child<span class="token punctuation">.</span>part <span class="token operator">==</span> part <span class="token operator">||</span> child<span class="token punctuation">.</span>isWild <span class="token punctuation">{</span>
			<span class="token keyword">return</span> child
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寻找所有匹配成功的节点，用于查找</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>trieNode<span class="token punctuation">)</span> <span class="token function">matchChildren</span><span class="token punctuation">(</span>part <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode <span class="token punctuation">{</span>
	nodes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>children <span class="token punctuation">{</span>
		<span class="token keyword">if</span> child<span class="token punctuation">.</span>part <span class="token operator">==</span> part <span class="token operator">||</span> child<span class="token punctuation">.</span>isWild <span class="token punctuation">{</span>
			nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> child<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> nodes
<span class="token punctuation">}</span>

<span class="token comment">// 向前缀树中插入新节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>trieNode<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> parts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> depth <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">==</span> depth <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span>pattern <span class="token operator">=</span> pattern
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	part <span class="token operator">:=</span> parts<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>
	child <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">matchChild</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>
	<span class="token keyword">if</span> child <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		child <span class="token operator">=</span> <span class="token operator">&amp;</span>trieNode<span class="token punctuation">{</span>part<span class="token punctuation">:</span> part<span class="token punctuation">,</span> isWild<span class="token punctuation">:</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;:&#39;</span> <span class="token operator">||</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span>
		n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	child<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查找指定路由对应的节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>trieNode<span class="token punctuation">)</span> <span class="token function">search</span><span class="token punctuation">(</span>parts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> depth <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>trieNode <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">==</span> depth <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>part<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>pattern <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>

	part <span class="token operator">:=</span> parts<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>
	children <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">matchChildren</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> children <span class="token punctuation">{</span>
		res <span class="token operator">:=</span> child<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> res
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>trieNode</code>：前缀树的节点 <ul><li><code>pattern</code>：已注册的路由，空字符串表示根节点到此节点的路径不是注册的路由</li><li><code>isWild</code>：是否使用精准匹配，默认 false <ul><li>当出现<code>:</code>和<code>*</code>表示此路由为动态路由，为 true</li></ul></li></ul></li></ul><h3 id="_2-2-router" tabindex="-1"><a class="header-anchor" href="#_2-2-router" aria-hidden="true">#</a> 2.2 Router</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> gee

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> router <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	trieRoots <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode
	handlers  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>router <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>router<span class="token punctuation">{</span>
		trieRoots<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>trieNode<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		handlers<span class="token punctuation">:</span>  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	strs <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>

	parts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> str <span class="token operator">:=</span> <span class="token keyword">range</span> strs <span class="token punctuation">{</span>
		<span class="token keyword">if</span> str <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			parts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> str<span class="token punctuation">)</span>
			<span class="token keyword">if</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token punctuation">{</span> <span class="token comment">// Only one &#39;*&#39; allowed</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> parts
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	parts <span class="token operator">:=</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>

	<span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> r<span class="token punctuation">.</span>trieRoots<span class="token punctuation">[</span>method<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		r<span class="token punctuation">.</span>trieRoots<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>trieNode<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	r<span class="token punctuation">.</span>trieRoots<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	key <span class="token operator">:=</span> method <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> pattern
	r<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> handler
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n<span class="token punctuation">,</span> params <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>Params <span class="token operator">=</span> params
		key <span class="token operator">:=</span> c<span class="token punctuation">.</span>Method <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>pattern
		r<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">&quot;404 NOT FOUND: %s\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">getRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>trieNode<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	root<span class="token punctuation">,</span> ok <span class="token operator">:=</span> r<span class="token punctuation">.</span>trieRoots<span class="token punctuation">[</span>method<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	searchParts <span class="token operator">:=</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	n <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchParts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		parts <span class="token operator">:=</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span>
		params <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>

		<span class="token keyword">for</span> i<span class="token punctuation">,</span> part <span class="token operator">:=</span> <span class="token keyword">range</span> parts <span class="token punctuation">{</span>
			<span class="token keyword">if</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;:&#39;</span> <span class="token punctuation">{</span>
				params<span class="token punctuation">[</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> searchParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
				params<span class="token punctuation">[</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>searchParts<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> n<span class="token punctuation">,</span> params
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>router</code><ul><li><code>trieRoots</code>：路由前缀树根节点，不同的方法类型对应不同的路由</li><li><code>hadnlers</code>：路由处理函数，方法类型+请求路径映射到唯一的处理函数</li></ul></li><li><code>parsePattern</code>：将注册的路由按照<code>/</code>分割为多个部分，不会添加空字符串并且只允许一个通配符<code>*</code></li><li><code>addRoute</code>：向路由表中添加路由 <ol><li>将路由插入到前缀树中</li><li>添加处理函数到哈希表中</li></ol></li><li><code>getRoute</code>：根据请求路径，获取对应的路由及其路由参数</li><li><code>handle</code>：处理请求，根据请求路径获取绑定的处理函数并调用</li></ul><h3 id="_2-3-context" tabindex="-1"><a class="header-anchor" href="#_2-3-context" aria-hidden="true">#</a> 2.3 Context</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Writer http<span class="token punctuation">.</span>ResponseWriter
	Req    <span class="token operator">*</span>http<span class="token punctuation">.</span>Request
	<span class="token comment">// Request info</span>
	Path   <span class="token builtin">string</span>
	Method <span class="token builtin">string</span>
	Params <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// Dynamic route parameters</span>
	<span class="token comment">// Response info</span>
	StatusCode <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Params</code>：当前请求的路由参数哈希表</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Param return dynamic route parameter by key</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	val<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取当前请求的路由参数</p><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><h3 id="_3-1-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-1-单元测试" aria-hidden="true">#</a> 3.1 单元测试</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> gee

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
	<span class="token string">&quot;testing&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestParsePattern</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		pattern <span class="token builtin">string</span>
	<span class="token punctuation">}</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		args args
		want <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Empty String&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Empty Pattern&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Empty Pattern&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;//&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Dynamic route parameter&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;p/:name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Wildcard &quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;p/*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;Multiple wildcards&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>pattern<span class="token punctuation">:</span> <span class="token string">&quot;p/*name/*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> got <span class="token operator">:=</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>got<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>want<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parsePattern(%q) = %v, want: %v&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>pattern<span class="token punctuation">,</span> got<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>want<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newTestRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>router <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> <span class="token function">newRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello/:name&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello/:name/getAge&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello/b/c&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hi/:name&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/assets/*filepath&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestGetRoute</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> <span class="token function">newTestRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	n<span class="token punctuation">,</span> params <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello/alice&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;TrieNode cannot be nil&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> n<span class="token punctuation">.</span>pattern <span class="token operator">!=</span> <span class="token string">&quot;/hello/:name&quot;</span><span class="token punctuation">:</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Route should match /hello/:name&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> params<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">:</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Route parameter name should be alice&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;mathched path: %q, params[&#39;name&#39;]: %q\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>pattern<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-启动demo" tabindex="-1"><a class="header-anchor" href="#_3-2-启动demo" aria-hidden="true">#</a> 3.2 启动Demo</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;&lt;h1&gt;Welcome&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;Hello %s, you&#39;re at %s\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/:name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;Hello %s, you&#39;re at %s\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;assets/*filepath&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;filepath&quot;</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;filepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> http://localhost:8000
<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Welcome<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
$ <span class="token function">curl</span> http://localhost:8000/hello?name<span class="token operator">=</span>alice
Hello alice, you<span class="token string">&#39;re at /hello

$ curl http://localhost:8000/hello/alice
Hello alice, you&#39;</span>re at /hello/alice

$ <span class="token function">curl</span> http://localhost:8000/assets/css/layout.css
<span class="token punctuation">{</span><span class="token string">&quot;filepath&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;css/layout.css&quot;</span><span class="token punctuation">}</span>

$ <span class="token function">curl</span> http://localhost:8000/AA
<span class="token number">404</span> NOT FOUND: /AA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h2><p>通过前缀树实现了动态路由</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,22),d={href:"https://geektutu.com/post/gee-day3.html",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[a("https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/Gee/day3-tire-router"),t(s)])]),k,n("ol",null,[n("li",null,[n("a",d,[a("https://geektutu.com/post/gee-day3.html"),t(s)])])])])}const h=e(l,[["render",v],["__file","01.3.trie_router.html.vue"]]);export{h as default};
