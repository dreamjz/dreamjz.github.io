import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as p,a3 as t,H as l}from"./framework-dee406ed.js";const i={},u=n("p",null,"使用动态规划解决问题时, 若使用从下至上的迭代法, 可能需要使用二维数组来缓存计算结果.",-1),r=n("p",null,[s("二维数组的空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s(", 那么需要优化缓存的大小以提高效率.")],-1),k=n("ul",null,[n("li",null,[s("若使用"),n("strong",null,"两行"),s("的"),n("strong",null,"二维数组"),s(": 空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("若使用"),n("strong",null,"一维数组"),s(", 空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(", 且只有两行二维数组的"),n("strong",null,"一半"),s(". 根据使用数据的不同, 需要适当的改变计算方向或引入变量: "),n("ul",null,[n("li",null,[s("计算时需要"),n("strong",null,"左侧"),s("和"),n("strong",null,"正上方"),s("的数据: "),n("strong",null,"从左至右")]),n("li",null,[s("计算时需要"),n("strong",null,"左上方"),s("和正上方的数据: "),n("strong",null,"从右至左")]),n("li",null,[s("计算时需要"),n("strong",null,"左侧, 上方, 左上方"),s("三个数据: "),n("strong",null,"从左至右"),s(", 引入变量"),n("strong",null,"缓存原始数据")])])])],-1),d=n("h2",{id:"_1-通用方式-行数为2的二维数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-通用方式-行数为2的二维数组","aria-hidden":"true"},"#"),s(" 1. 通用方式: 行数为2的二维数组")],-1),m=n("p",null,"由于计算时通常只用上当前行和上一行的数据, 那么只需要两行数组即可.",-1),v=n("p",null,[s("此时空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),b={href:"https://leetcode.cn/problems/qJnOS7/",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dp <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> text1 <span class="token punctuation">{</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> text2 <span class="token punctuation">{</span>
        <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以看出, 计算时只用到了两行的数据, 将其优化成两行的二维数组:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dp <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> text1 <span class="token punctuation">{</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> text2 <span class="token punctuation">{</span>
        <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-一维数组" tabindex="-1"><a class="header-anchor" href="#_2-一维数组" aria-hidden="true">#</a> 2. 一维数组</h2>`,4),h=n("p",null,[s("此方式空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(", 但是只有两行的二维数组的"),n("strong",null,"一半"),s(".")],-1),j=t('<p><strong>核心</strong>思想是使用<strong>一个位置</strong>存储原来二维数组的<strong>同一列</strong>的上下<strong>两行数据</strong>, 例如: <code>dp[j]</code> 存储 <code>dp[i][j]</code>和<code>dp[i-1][j]</code>的数据.</p><p>优化成一维数组的根据使用数据的相对位置不同, 方式可能会不一样.</p><h3 id="_2-1-计算时需要左侧和正上方的数据" tabindex="-1"><a class="header-anchor" href="#_2-1-计算时需要左侧和正上方的数据" aria-hidden="true">#</a> 2.1 计算时需要左侧和正上方的数据</h3><p>若计算<code>dp[i][j]</code>时, 需要<code>dp[i][j-1]</code> 和 <code>dp[i-1][j]</code> 的数据, 此时无需改动计算方向, <strong>从左至右</strong>即可.</p>',4),_={href:"https://leetcode.cn/problems/2AoeFn/",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// 计算</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算公式为<code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code>, 若使用<strong>一维数组</strong>存储:</p><ul><li>原始数据: <code>dp[j]</code> 为 <code>dp[i-1][j]</code>, <code>dp[j-1]</code>为<code>dp[i-1,j-1]</code></li><li>计算新数据: <code>dp[j] = dp[j] + dp[j-1]</code></li><li>覆盖原始数据: <code>dp[j]</code>为 <code>dp[i][j]</code></li><li>计算下一个数据: <code>dp[j+1] = dp[j+1] + dp[j] </code> 即<code>dp[i][j+1] = dp[i-1][j+1] + dp[i][j]</code></li></ul><p>可以看出覆盖原始数据不会对后续的计算造成影响, 那么从左到右的计算方向是合理的, 代码如下:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dp <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-计算时需要左上方和正上方的数据" tabindex="-1"><a class="header-anchor" href="#_2-2-计算时需要左上方和正上方的数据" aria-hidden="true">#</a> 2.2 计算时需要左上方和正上方的数据</h3><p>由于不需要左侧数据, 那么可以翻转计算顺序, <strong>从右至左</strong>计算.</p><p>此处有两种情况, 当计算<code>dp[i][j]</code> 时:</p><ul><li>左上方数据是<strong>相邻</strong>(或者说是<strong>已知</strong>)的, <code>dp[i-1][j-1]</code>和<code>dp[i-1][j]</code> 是相邻的, 可以右两种计算方式 <ul><li>从右至左(推荐)</li><li>从左至右, 需要变量来缓存原始数据</li></ul></li><li>左上方数据位置是<strong>未知</strong>的, 例如0-1背包问题, 计算<code>dp[i][j]</code>需要<code>dp[i-1][j]</code>和<code>dp[i-1][j-nums[i-1]]</code>, <code>dp[i-1][j-nums[i-1]]</code>的位置未知无法进行缓存, 那么只能从右到左计算.</li></ul><h4 id="_2-2-1-左上方数据是相邻-位置已知" tabindex="-1"><a class="header-anchor" href="#_2-2-1-左上方数据是相邻-位置已知" aria-hidden="true">#</a> 2.2.1 左上方数据是<strong>相邻</strong>(位置已知)</h4>`,10),y={href:"https://leetcode.cn/problems/IlPe0q/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"dp[i][j]",-1),x=n("code",null,"dp[i-1][j-1]",-1),O=n("code",null,"dp[i-1][j]",-1),M=t(`<p>若改为一维数组:</p><ul><li>原始数据: <code>dp[j]</code> 为 <code>dp[i-1][j]</code>, <code>dp[j-1]</code>为<code>dp[i-1,j-1]</code></li><li>计算新数据: <code>dp[j] = dp[j] + dp[j-1]</code></li><li>覆盖原始数据: <code>dp[j]</code>为 <code>dp[i][j]</code></li><li>计算下一个数据: <code>dp[j+1] = dp[j+1] + dp[j] </code> 即<code>dp[i][j+1] = dp[i-1][j+1] + dp[i][j]</code>是错误的, 此时原始的<code>dp[j]</code>即 <code>dp[i-1][j]</code>被<strong>新数据覆盖</strong>了, 影响了计算结果</li></ul><p>可以保持计算方向, 并<strong>使用变量缓存</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 缓存</span>
dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

<span class="token comment">// 计算</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存 f(i-1,j-1)</span>
    prev <span class="token operator">:=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        cur <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// 缓存计算结果</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>  i <span class="token operator">==</span> j <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> prev <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>  i <span class="token operator">&gt;</span> j <span class="token punctuation">{</span> 
            cur <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> prev<span class="token punctuation">)</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>

        prev <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment">// 缓存之前的结果 </span>
        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cur  <span class="token comment">// 保存计算结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者改变计算方向为<strong>从右至左</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 缓存</span>
dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

<span class="token comment">// 计算</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>  i <span class="token operator">==</span> j <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>  i <span class="token operator">&gt;</span> j <span class="token punctuation">{</span> 
            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-左上方数据位置是未知的" tabindex="-1"><a class="header-anchor" href="#_2-2-2-左上方数据位置是未知的" aria-hidden="true">#</a> 2.2.2 左上方数据位置是未知的</h4>`,7),L={href:"https://leetcode.cn/problems/YaVDxD/",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>此时左上方的数据<code>dp[i-1][j-nums[i-1]]</code>位置未知, 无法缓存, 只能从右至左进行计算.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 缓存</span>
dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 初始值(最小问题解)</span>
dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 计算</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
	<span class="token comment">// 从右向左计算, 避免覆盖原数据</span>
	<span class="token keyword">for</span> j <span class="token operator">:=</span> t<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">{</span>
		dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-计算时需要左侧-上方-左上方三个数据" tabindex="-1"><a class="header-anchor" href="#_2-3-计算时需要左侧-上方-左上方三个数据" aria-hidden="true">#</a> 2.3 计算时需要左侧, 上方, 左上方三个数据</h3><p>此时只能够<strong>从左至右</strong>进行计算, 并且使用变量<strong>缓存左上方</strong>的数据.</p>`,4),R={href:"https://leetcode.cn/problems/qJnOS7/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>计算<code>dp[i][j]</code>, 需要<code>dp[i-1][j]</code>, <code>dp[i-1][j-1]</code>和 <code>dp[i][j-1]</code></p><p>使用一维数组, 从左至右, <strong>缓存</strong>左上方数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 缓存</span>
dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 计算</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> text1 <span class="token punctuation">{</span>
    prev <span class="token operator">:=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> text2 <span class="token punctuation">{</span>
        cur <span class="token operator">:=</span> <span class="token number">0</span> 
        <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> prev <span class="token operator">+</span> <span class="token number">1</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span>
        
        prev <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
        dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,4),D={href:"https://book.douban.com/subject/35543447/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://en.wikipedia.org/wiki/Dynamic_programming",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.cn/studyplan/dynamic-programming/",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,[n("a",{href:"/reading/algorithm/offer_oriented/AL_DS/14_dynamic_programming"},"读书笔记-剑指-动态规划")],-1);function q(B,E){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,k,d,m,v,n("p",null,[s("以 "),n("a",b,[s("LCR 095. 最长公共子序列"),p(a)]),s(" 为例, 计算部分代码如下:")]),g,h,j,n("p",null,[s("例如: "),n("a",_,[s("LCR 098. 不同路径"),p(a)]),s(", 计算部分代码如下:")]),f,n("p",null,[s("例如: "),n("a",y,[s("LCR 100. 三角形最小路径和"),p(a)]),s(", 计算"),w,s("需要 "),x,s("和"),O]),M,n("p",null,[s("例如: "),n("a",L,[s("LCR 102. 目标和"),p(a)])]),C,n("p",null,[s("例如: "),n("a",R,[s("LCR 095. 最长公共子序列"),p(a)])]),z,n("ol",null,[n("li",null,[n("a",D,[s("剑指Offer（专项突破版）"),p(a)])]),n("li",null,[n("a",V,[s("https://en.wikipedia.org/wiki/Dynamic_programming"),p(a)])]),n("li",null,[n("a",N,[s("https://leetcode.cn/studyplan/dynamic-programming/"),p(a)])]),S])])}const A=e(i,[["render",q],["__file","01.dp_sc_optimization_summary.html.vue"]]);export{A as default};
