import{_ as s,Z as a,$ as t,a0 as e,a1 as i,a2 as o,a4 as c,H as p}from"./framework-d03928c9.js";const l={},d=c(`<h1 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get Started</h1><p>本节代码参见<a href="">compose-test</a></p><h2 id="_1-prerequisites" tabindex="-1"><a class="header-anchor" href="#_1-prerequisites" aria-hidden="true">#</a> 1. Prerequisites</h2><p>首先安装 <code>Docker Compose</code> ,</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pacman <span class="token parameter variable">-S</span> <span class="token function">docker-compose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-setup" tabindex="-1"><a class="header-anchor" href="#_2-setup" aria-hidden="true">#</a> 2. Setup</h2><p>Define the application dependencies</p><ol><li><p>Create a directory for the proejct:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> <span class="token function">time</span>

<span class="token function">import</span> redis
from flask <span class="token function">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
cache <span class="token operator">=</span> redis.Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis&#39;</span>, <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>

def get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    retries <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> True:
        try:
            <span class="token builtin class-name">return</span> cache.incr<span class="token punctuation">(</span><span class="token string">&#39;hits&#39;</span><span class="token punctuation">)</span>
        except redis.exceptions.ConnectionError as exc:
            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span>:
                raise exc
            retries -<span class="token operator">=</span> <span class="token number">1</span>
            time.sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

@app.route<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
def hello<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> <span class="token string">&#39;Hello World! I have been seen {} times.\\n&#39;</span>.format<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Create a file <code>app.py</code> :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">import</span> redis
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
cache <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_hit_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    retries <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">&#39;hits&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> exc
            retries <span class="token operator">-=</span> <span class="token number">1</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World! I have been seen {} times.\\n&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>redis</code> is the hostname of the redis container on the application’s network. We use the default port for Redis, <code>6379</code>.</p><blockquote><h3 id="handling-transient-errors" tabindex="-1"><a class="header-anchor" href="#handling-transient-errors" aria-hidden="true">#</a> Handling transient errors</h3><p>Note the way the <code>get_hit_count</code> function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.</p></blockquote></li><li><p>Create file <code>requirements.txt</code> :</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flask
redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-create-a-dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-create-a-dockerfile" aria-hidden="true">#</a> 3. Create a Dockerfile</h2><p>Write a Dockerfile that builds a Docker image. The imge contains all the dependencies the Python application requires, including Python iteself.</p><p>In project directory, create a file <code>Dockerfile</code>:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> python:3.7-alpine</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /code</span>
<span class="token instruction"><span class="token keyword">ENV</span> FLASK_APP=app.py</span>
<span class="token instruction"><span class="token keyword">ENV</span> FLASK_RUN_HOST=0.0.0.0</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add --no-cache gcc musl-dev linux-headers</span>
<span class="token instruction"><span class="token keyword">COPY</span> requirements.txt requirements.txt</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 5000</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;flask&quot;</span>, <span class="token string">&quot;run&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This tells Docker to:</p><ul><li>Build an image starting with Python 3.7 image</li><li>Set the working directory to <code>/code</code> (会自动创建)</li><li>Set environment variables used by the <code>flask</code> command</li><li>Install gcc and other dependencies</li><li>Copy <code>requirements.txt</code> and install the Python dependencies</li><li>Add metadata to the image to describe that the container is listening on port 5000</li><li>Copy the current directory <code>.</code> in the project to the workdir <code>.</code> in the image</li><li>Set the default command for the container to <code>flask run</code></li></ul><h2 id="_4-define-services-in-a-compose-file" tabindex="-1"><a class="header-anchor" href="#_4-define-services-in-a-compose-file" aria-hidden="true">#</a> 4. Define services in a Compose file</h2><p>Create a file <code>docker-compose.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;redis:alpine&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This Compose file defines two services: <code>web</code> and <code>redis</code></p><h3 id="_4-1-web-service" tabindex="-1"><a class="header-anchor" href="#_4-1-web-service" aria-hidden="true">#</a> 4.1 Web service</h3><p>The <code>web</code> service uses an image that’s build from the <code>Dockerfile</code> in the current directory. It then binds the container and the host machine to the exposed port 5000 (the default port for the flask web server)</p><h3 id="_4-2-redis-service" tabindex="-1"><a class="header-anchor" href="#_4-2-redis-service" aria-hidden="true">#</a> 4.2 Redis service</h3><p>The <code>redis</code> service uses a public Redis imges <code>redis:alpine</code></p><h2 id="_5-build-and-run-your-app-with-compose" tabindex="-1"><a class="header-anchor" href="#_5-build-and-run-your-app-with-compose" aria-hidden="true">#</a> 5. Build and run your app with Compose</h2><ol><li><p>From the project directory, start up app by running <code>docker compose up</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose up 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Compose pull a Redis iamge, builds an image for you code, and starts the services you defined. In this case, the code is statically copied into the image at build time</p></li><li><p>Use curl to test</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> http://localhost:5000/
Hello World<span class="token operator">!</span> I have been seen <span class="token number">3</span> times.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Switch to another terminal window, and type <code>docker image ls </code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                       TAG          IMAGE ID       CREATED             SIZE
docker-compose-get-started_web   latest       da30493291c0   About an hour ago   183MB
python                           <span class="token number">3.7</span>-alpine   a1034fd13493   <span class="token number">2</span> weeks ago         <span class="token number">41</span>.8MB
redis                            alpine       3900abf41552   <span class="token number">2</span> weeks ago         <span class="token number">32</span>.4MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Stop the application, either by running <code>docker-compose down</code> from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose down
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Running <span class="token number">3</span>/3
 ⠿ Container docker-compose-get-started-web-1    Removed                     <span class="token number">10</span>.3s
 ⠿ Container docker-compose-get-started-redis-1  Removed                      <span class="token number">0</span>.2s
 ⠿ Network docker-compose-get-started_default    Removed                      <span class="token number">0</span>.1s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>可以看到使用 <code>docker compose down</code> 之后会将 <code>container</code> 和 <code>network</code> 删除，若使用 CTRL+C 只会删除容器而网络将不会被删除</p><h2 id="_6-edit-the-compose-file-to-add-a-bind-mount" tabindex="-1"><a class="header-anchor" href="#_6-edit-the-compose-file-to-add-a-bind-mount" aria-hidden="true">#</a> 6. Edit the Compose file to add a bind mount</h2><p>Edit <code>docker-compose.yml</code> ito add a bind mount for the <code>web</code> service:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">FLASK_ENV</span><span class="token punctuation">:</span> development
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;redis:alpine&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>volumes</code> key mounts the project directory on the host to <code>/code</code> inside the container, allowing you to modify the code on the fly, without having to rebuild the image. The <code>environment</code> key sets the <code>FLASK_NEW</code> environment variable, which tells <code>flask run</code> to run in development mode and reload the code on change. This mode should only be used in development</p><h2 id="_7-re-build-and-run-the-app-with-compose" tabindex="-1"><a class="header-anchor" href="#_7-re-build-and-run-the-app-with-compose" aria-hidden="true">#</a> 7. Re-build and run the app with Compose</h2><p>From project directory, run <code>docker compose up</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-update-the-application" tabindex="-1"><a class="header-anchor" href="#_8-update-the-application" aria-hidden="true">#</a> 8. Update the application</h2><p>Because the application code is now mounted into the container using a volume, you can make changes to its code and see the changes instantly, without having to rebuild the image.</p><p>Change the greeting in <code>app.py</code> and save it. For example, change the <code>Hello World!</code> message to <code>Hello from Docker!</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">return</span> <span class="token string">&#39;Hello from Docker! I have been seen {} times.\\n&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;http://localhost:5000&#39;</span>
Hello from Docker<span class="token operator">!</span> I have been seen <span class="token number">1</span> times.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-experiment-with-some-other-commands" tabindex="-1"><a class="header-anchor" href="#_9-experiment-with-some-other-commands" aria-hidden="true">#</a> 9. Experiment with some other commands</h2><p>You can pass the <code>-d</code> flag (<code>detached</code> mode ) to <code>docker compose up</code> and use <code>docker compose ps</code> to see what is currently running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> 
<span class="token comment"># ...</span>
$ <span class="token function">docker</span> compose <span class="token function">ps</span>
NAME                                 COMMAND                  SERVICE             STATUS              PORTS
docker-compose-get-started-redis-1   <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   redis               running             <span class="token number">6379</span>/tcp
docker-compose-get-started-web-1     <span class="token string">&quot;flask run&quot;</span>              web                 running             <span class="token number">0.0</span>.0.0:5000-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp, :::5000-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>docker compose run </code> command allows you to run one-off commands for your services. For example, to see what environment variables are available to the <code>web</code> service</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose run web <span class="token function">env</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you started Compose with <code>docker compose up -d</code>, stop your services once you’ve finished with them</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can bring everything down, removing the containers entirely, with the <code>down</code> command. Pass <code>--volumes</code> to also remove the data volume used by the Redis container</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose down <span class="token parameter variable">--volumes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,47),r={href:"https://docs.docker.com/compose/gettingstarted/",target:"_blank",rel:"noopener noreferrer"};function u(m,v){const n=p("ExternalLinkIcon");return a(),t("div",null,[d,e("ol",null,[e("li",null,[e("a",r,[i("Get started with Docker Compose"),o(n)])])])])}const h=s(l,[["render",u],["__file","01.2.html.vue"]]);export{h as default};
