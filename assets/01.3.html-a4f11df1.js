import{_ as s,Z as i,$ as t,a0 as n,a1 as e,a2 as d,a4 as a,H as r}from"./framework-d03928c9.js";const l={},c=a(`<h1 id="environment-variables-in-compose" tabindex="-1"><a class="header-anchor" href="#environment-variables-in-compose" aria-hidden="true">#</a> Environment variables in Compose</h1><p>本节代码参见<a href="">compose-test</a></p><h2 id="_1-substitute-environment-variables-in-compose-files" tabindex="-1"><a class="header-anchor" href="#_1-substitute-environment-variables-in-compose-files" aria-hidden="true">#</a> 1. Substitute environment variables in Compose files</h2><p>It’s possible to use environment varibles in your shell to populate values inside a Compose file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span> 
  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;webapp:\${TAG}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have multiple environment variables, you can substitute them by adding them to a default environment variable file named <code>.env</code> or by providing a path to your enviroment variables file using the <code>--env-file</code> command line option</p><p>If an environment variable is not set, Compose substitutues with an empty string. In the example above, if <code>TAG</code> is not set, the value for the <code>image</code> option is <code>webapp:</code></p><p>You can set default values for environment variables using a <code>.env</code> file, which Compose automatically looks for in project directory (parent folder of your Compose file). Values set in the shell enviroment override those set in the <code>.env</code> file</p><blockquote><h4 id="note-when-using-docker-stack-deploy" tabindex="-1"><a class="header-anchor" href="#note-when-using-docker-stack-deploy" aria-hidden="true">#</a> Note when using docker stack deploy</h4><p>The <code>.env file</code> feature only works when you use the <code>docker-compose up</code> command and does not work with <code>docker stack deploy</code>.</p></blockquote>`,9),u=n("code",null,"$VARIABLE",-1),p=n("code",null,"${VARIABLE}",-1),v={href:"https://docs.docker.com/compose/compose-file/compose-versioning/#version-21",target:"_blank",rel:"noopener noreferrer"},h=a(`<ul><li><code>\${VARIBALE:-default}</code>: evaluates to <code>default</code> if <code>VARIABLE</code> is <strong>uset or empty</strong> in the environment</li><li><code>\${VARIABLE-default}</code>: evaluates to <code>default</code> only if <code>VARIABLE</code> is <strong>unset</strong> in the environment</li></ul><p>Other extended shell-syntax features, such as <code>\${VARIABLE/foo/bar}</code>, are not supported</p><p>You can use a <code>$$</code> (double-dollar sign) when your configuration needs a literal dollar sign. This also prevents Compose from interpolating a value, so a <code>$$</code> allows you to refer to enviroment variables that you don’t want processed by Compose</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span> .
  <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;$$VAR_NOT_INTERPOLATED_BY_COMPOSE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you foget and use a single dollar sign, Compose interprets the value as an environment variable and warns you:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The VAR_NOT_INTERPOLATED_BY_COMPOSE is not set. Substituting an empty string.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-env-file" tabindex="-1"><a class="header-anchor" href="#_2-env-file" aria-hidden="true">#</a> 2. <code>.env</code> file</h2><p>You can set default values for any environment variables referenced in the Compose file, or used to configure Compose, in an environment file named <code>.env</code>. The path is as follows:</p><ul><li>Starting with <code>+v1.28</code>, <code>.env</code> file is placed at the base of the project directory</li><li>Project directory can be explicitly defined with the <code>--file</code> option or <code>COMPOSE_FILE</code> environment variable. Otherwise, it is the current working directory where the <code>docker compose</code> command is executed (<code>+1.28</code>).</li><li>For previous versions, it might have trouble resolving <code>.env</code> file with <code>--file</code> or <code>COMPOSE_FILE</code>. To work around it, it is recommended to use <code>--project-directory</code>, which overrides the path for the <code>.env</code> file. This inconsistency is addressed in <code>+v1.28</code> by limiting the filepath to the project directory</li></ul><p>You can verify this with the config command, which prints your resolved application config to the terminal</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Values in the shell take precedence over those specified in the <code>.env</code> file</p><p>If you set <code>TAG</code> to a different value in your shell, the substitution uses that instead</p><h3 id="_2-1-using-the-env-file-option" tabindex="-1"><a class="header-anchor" href="#_2-1-using-the-env-file-option" aria-hidden="true">#</a> 2.1 Using the <code>--env-file</code> option</h3><p>You can override the environment file path using a command line argument <code>--env-file</code></p><p>By passing the file as an argument, you can store it anywhere and name it appropriately, for example <code>.env.ci</code>, <code>.env.dev</code>, <code>.env.prod</code>. Passing the file path is done using the <code>--env-file</code> option:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> compose --env-file ./.env.prod config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>When an invalid file path is being passed as <code>--env-file</code> argument, Compose returns an error:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> --env-file ./doesnotexist/.env.dev  config
ERROR: Couldn&#39;t <span class="token function">find</span> <span class="token function">env</span> file: /home/user/./doesnotexist/.env.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-set-environment-variables-in-containers" tabindex="-1"><a class="header-anchor" href="#_3-set-environment-variables-in-containers" aria-hidden="true">#</a> 3. Set environment variables in containers</h2><p>You can set environment variables in a service’s containers with the <code>environment</code> key</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-pass-environment-variables-to-containers" tabindex="-1"><a class="header-anchor" href="#_3-1-pass-environment-variables-to-containers" aria-hidden="true">#</a> 3.1 Pass environment variables to containers</h3><p>ou can pass environment variables from your shell straight through to a service’s containers with the <code>environment</code> by not giving them a value, just like with <code>docker run -e VARIABLE ...</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The value of the <code>DEBUG</code> variable in the container is taken from the value for the same variable in the shell in which Compose is run.</p><p>// TODO: complete it later ,2021-12-18</p>`,27);function m(f,b){const o=r("ExternalLinkIcon");return i(),t("div",null,[c,n("p",null,[e("Both "),u,e(" and "),p,e(" syntax are supported. Additionally when using the "),n("a",v,[e("2.1 file format"),d(o)]),e(", it is possible to provide inline default values using typical shell syntax:")]),h])}const y=s(l,[["render",m],["__file","01.3.html.vue"]]);export{y as default};
