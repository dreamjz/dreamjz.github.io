import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,H as l}from"./framework-09afcf0b.js";const i={},u=t(`<h2 id="_5-3-1-现象" tabindex="-1"><a class="header-anchor" href="#_5-3-1-现象" aria-hidden="true">#</a> 5.3.1 现象</h2><p>使用<code>defer</code>时会出现两个常见的问题：</p><ol><li><code>defer</code>的调用时机和调用顺序</li><li><code>defer</code>会使用值传递的方式传参时进行预计算，导致预期结果不符</li></ol><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p><code>defer</code>语句会<strong>在函数返回之前执行</strong>，并按照<strong>后进先出</strong>的顺序执行。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">4</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码可以看出，<code>defer</code>的执行顺序是按照<strong>后进先出</strong>的顺序的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defer runs&quot;</span><span class="token punctuation">)</span>
		<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;block ends&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;func ends&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
block ends
main ends
<span class="token keyword">defer</span> runs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，<code>defer</code>是在<strong>函数返回之前</strong>被调用。</p><h3 id="预计算参数" tabindex="-1"><a class="header-anchor" href="#预计算参数" aria-hidden="true">#</a> 预计算参数</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	startedAt <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startedAt<span class="token punctuation">)</span><span class="token punctuation">)</span>
	
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
0s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>defer</code> 关键字会<strong>立刻拷贝</strong>函数中引用的<strong>外部参数</strong>， <code>time.Since(startedAt)</code> 的结果不是在 <code>main</code> 函数退出之前计算的，而是在 <code>defer</code> 关键字调用时计算的，最终导致上述代码输出 0s。</p><p>若使用<code>defer</code>调用匿名函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	startedAt <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startedAt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
1s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时调用<code>defer</code>时，拷贝的是函数的指针，对函数内部的参数没有影响，可得到预期的结果。</p><h2 id="_5-3-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_5-3-2-数据结构" aria-hidden="true">#</a> 5.3.2 数据结构</h2>`,16),r=n("code",null,"defer",-1),d={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"runtime._defer",-1),v=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	siz       <span class="token builtin">int32</span>
	started   <span class="token builtin">bool</span>
	openDefer <span class="token builtin">bool</span>
	sp        <span class="token builtin">uintptr</span>
	pc        <span class="token builtin">uintptr</span>
	fn        <span class="token operator">*</span>funcval
	_panic    <span class="token operator">*</span>_panic
	link      <span class="token operator">*</span>_defer
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>siz</code>：参数和结果的内存大小</li><li><code>sp</code>：栈指针</li><li><code>pc</code>：程序计数器</li><li><code>fn</code>：<code>defer</code>关键字中传入的函数</li><li><code>_panic</code>：触发延迟调用的结构体</li><li><code>openDefer</code>：当前<code>defer</code>是否经过开放编码优化</li><li><code>link</code>：下一个<code>_defer</code>节点</li></ul>`,2),m={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"runtime._defer",-1),_=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281816189.png",alt:"golang-defer-link",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-defer-link")],-1),b=n("h2",{id:"_5-3-3-执行机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-3-3-执行机制","aria-hidden":"true"},"#"),s(" 5.3.3 执行机制")],-1),g={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.stmt",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cmd/compile/internal/gc.state.stmt",-1),w=t(`<ol><li>堆分配</li><li>栈分配</li><li>开放编码</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">stmt</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ODEFER<span class="token punctuation">:</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span>hasOpenDefers <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">openDeferRecord</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token comment">// 开放编码</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			d <span class="token operator">:=</span> callDefer <span class="token comment">// 堆分配</span>
			<span class="token keyword">if</span> n<span class="token punctuation">.</span>Esc <span class="token operator">==</span> EscNever <span class="token punctuation">{</span>
				d <span class="token operator">=</span> callDeferStack <span class="token comment">// 栈分配</span>
			<span class="token punctuation">}</span>
			s<span class="token punctuation">.</span><span class="token function">callResult</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-4-堆上分配" tabindex="-1"><a class="header-anchor" href="#_5-3-4-堆上分配" aria-hidden="true">#</a> 5.3.4 堆上分配</h2>`,3),y={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.callResult",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"cmd/compile/internal/gc.state.callResult",-1),D={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.call",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"cmd/compile/internal/gc.state.call",-1),S=n("code",null,"defer",-1),A={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.call",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"cmd/compile/internal/gc.state.call",-1),P=n("li",null,"获取需要执行的函数名、闭包指针、代码指针和函数调用的接收方",-1),T=n("li",null,"获取栈地址并将函数或者方法的参数写入栈中",-1),N={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.newValue1A",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"cmd/compile/internal/gc.state.newValue1A",-1),C=n("li",null,[s("若当前调用的函数是 "),n("code",null,"defer"),s("，那么会"),n("strong",null,"单独生成"),s("相关的结束代码块")],-1),V=n("li",null,"获取函数的返回值地址并结束当前调用",-1),F=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> k callKind<span class="token punctuation">,</span> returnResultAddr <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> call <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
	<span class="token keyword">if</span> k <span class="token operator">==</span> callDeferStack <span class="token punctuation">{</span>
		<span class="token comment">// 在栈上初始化 defer 结构体</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> k <span class="token operator">==</span> callDefer<span class="token punctuation">:</span>
			aux <span class="token operator">:=</span> ssa<span class="token punctuation">.</span><span class="token function">StaticAuxCall</span><span class="token punctuation">(</span>deferproc<span class="token punctuation">,</span> ACArgs<span class="token punctuation">,</span> ACResults<span class="token punctuation">)</span>
			call <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1A</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpStaticCall<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TypeMem<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
		<span class="token punctuation">}</span>
		call<span class="token punctuation">.</span>AuxInt <span class="token operator">=</span> stksize
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>vars<span class="token punctuation">[</span><span class="token operator">&amp;</span>memVar<span class="token punctuation">]</span> <span class="token operator">=</span> call
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L=n("code",null,"defer",-1),E={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"runtime.deferproc",-1),R=n("code",null,"defer",-1),U={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.deferreturn",-1),G={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkstmt",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"cmd/compile/internal/gc.walkstmt",-1),M=n("code",null,"ODEFER",-1),X=n("code",null,"Curfn.Func.SetHasDefer(true)",-1),$=n("code",null,"hasdefer",-1),W={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.buildssa",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"cmd/compile/internal/gc.buildssa",-1),K=n("code",null,"s.hasdefer = fn.Func.HasDefer()",-1),J=n("code",null,"state",-1),Z=n("code",null,"hasdefer",-1),Q={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.exit",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"cmd/compile/internal/gc.state.exit",-1),nn=n("code",null,"state",-1),sn=n("code",null,"hasdefer",-1),an={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"runtime.deferreturn",-1),tn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Block <span class="token punctuation">{</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>hasdefer <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		s<span class="token punctuation">.</span><span class="token function">rtcall</span><span class="token punctuation">(</span>Deferreturn<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两个运行时函数是 <code>defer</code> 关键字运行时机制的入口，分别承担了不同的工作：</p>`,2),on={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.deferproc",-1),cn=n("strong",null,"创建新的延迟调用",-1),ln={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.deferreturn",-1),rn=n("strong",null,"结束",-1),dn=n("strong",null,"执行",-1),kn=n("strong",null,"延迟调用",-1),vn=n("h3",{id:"创建延迟调用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建延迟调用","aria-hidden":"true"},"#"),s(" 创建延迟调用")],-1),mn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"runtime.deferproc",-1),_n=n("code",null,"defer",-1),bn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"runtime._defer",-1),hn=n("code",null,"fn",-1),wn=n("code",null,"pc",-1),yn=n("code",null,"sp",-1),xn=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferproc</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">,</span> fn <span class="token operator">*</span>funcval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	argp <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
	callerpc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	d <span class="token operator">:=</span> <span class="token function">newdefer</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span>
	<span class="token keyword">if</span> d<span class="token punctuation">.</span>_panic <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;deferproc: d.panic != nil after newdefer&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	d<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
	d<span class="token punctuation">.</span>pc <span class="token operator">=</span> callerpc
	d<span class="token punctuation">.</span>sp <span class="token operator">=</span> sp
	<span class="token keyword">switch</span> siz <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
	<span class="token keyword">case</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>argp<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span><span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>argp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">return0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Dn={href:"https://draveness.me/golang/tree/runtime.return0",target:"_blank",rel:"noopener noreferrer"},Bn=n("code",null,"runtime.return0",-1),Sn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"runtime.deferreturn",-1),On={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime.deferproc",-1),Tn={href:"https://draveness.me/golang/tree/runtime.newdefer",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.newdefer",-1),zn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime._defer",-1),Vn=n("li",null,[s("从调度器的延迟调用缓存池 "),n("code",null,"sched.deferpool"),s(" 中取出结构体并将该结构体追加到当前 Goroutine 的缓存池中")],-1),Fn=n("li",null,[s("从 Goroutine 的延迟调用缓存池 "),n("code",null,"pp.deferpool"),s(" 中取出结构体")],-1),Ln={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.mallocgc",-1),In=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newdefer</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token operator">*</span>_defer <span class="token punctuation">{</span>
	<span class="token keyword">var</span> d <span class="token operator">*</span>_defer
	sc <span class="token operator">:=</span> <span class="token function">deferclass</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> sc <span class="token operator">&lt;</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>deferpool<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pp <span class="token operator">:=</span> gp<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sched<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">cap</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> sched<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				d <span class="token operator">:=</span> sched<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span>
				sched<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>link
				pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			d <span class="token operator">=</span> pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
			pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
			pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> pp<span class="token punctuation">.</span>deferpool<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		total <span class="token operator">:=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">totaldefersize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_defer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> deferType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	d<span class="token punctuation">.</span>siz <span class="token operator">=</span> siz
	d<span class="token punctuation">.</span>link <span class="token operator">=</span> gp<span class="token punctuation">.</span>_defer
	gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d
	<span class="token keyword">return</span> d
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Rn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime._defer",-1),jn=n("strong",null,"Goroutine",-1),Gn=n("code",null,"_defer",-1),qn=n("strong",null,"链表",-1),Mn=n("strong",null,"前面",-1),Xn=t('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281831545.png" alt="golang-new-defer" tabindex="0" loading="lazy"><figcaption>golang-new-defer</figcaption></figure><p>可以看出<code>defer</code> 关键字的<strong>插入顺序</strong>是<strong>从后向前</strong>的，而 <code>defer</code> 关键字<strong>执行</strong>是<strong>从前向后</strong>的。</p><h3 id="执行延迟调用" tabindex="-1"><a class="header-anchor" href="#执行延迟调用" aria-hidden="true">#</a> 执行延迟调用</h3>',3),$n={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"runtime.deferreturn",-1),Hn=n("code",null,"_defer",-1),Kn=n("strong",null,"链表",-1),Jn=n("strong",null,"取出最前面",-1),Zn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"runtime._defer",-1),Yn={href:"https://draveness.me/golang/tree/runtime.jmpdefer",target:"_blank",rel:"noopener noreferrer"},ns=n("code",null,"runtime.jmpdefer",-1),ss=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferreturn</span><span class="token punctuation">(</span>arg0 <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_defer
	<span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>

	<span class="token keyword">switch</span> d<span class="token punctuation">.</span>siz <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
	<span class="token keyword">case</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arg0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arg0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deferArgs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fn <span class="token operator">:=</span> d<span class="token punctuation">.</span>fn
	gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d<span class="token punctuation">.</span>link
	<span class="token function">freedefer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
	<span class="token function">jmpdefer</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arg0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),as={href:"https://draveness.me/golang/tree/runtime.jmpdefer",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.jmpdefer",-1),ts=n("code",null,"defer",-1),os={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},ps=n("code",null,"runtime.deferreturn",-1),cs=t(`<div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>TEXT runtime·jmpdefer(SB), NOSPLIT, $0-8
	MOVL	fv+0(FP), DX	// fn
	MOVL	argp+4(FP), BX	// caller sp
	LEAL	-4(BX), SP	// caller sp after CALL
#ifdef GOBUILDMODE_shared
	SUBL	$16, (SP)	// return to CALL again
#else
	SUBL	$5, (SP)	// return to CALL again
#endif
	MOVL	0(DX), BX
	JMP	BX	// but first run the deferred function
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ls={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"runtime.deferreturn",-1),us=n("code",null,"_defer",-1),rs=n("h2",{id:"_5-3-5-栈上分配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-3-5-栈上分配","aria-hidden":"true"},"#"),s(" 5.3.5 栈上分配")],-1),ds=n("strong",null,"栈",-1),ks={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},vs=n("code",null,"runtime._defer",-1),ms=n("code",null,"defer",-1),fs=n("code",null,"go v1.13",-1),_s=n("code",null,"defer",-1),bs={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.call",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"cmd/compile/internal/gc.state.call",-1),hs={href:"https://draveness.me/golang/tree/runtime.deferprocStack",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"runtime.deferprocStack",-1),ys=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> k callKind<span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> call <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
	<span class="token keyword">if</span> k <span class="token operator">==</span> callDeferStack <span class="token punctuation">{</span>
		<span class="token comment">// 在栈上创建 _defer 结构体</span>
		t <span class="token operator">:=</span> <span class="token function">deferstruct</span><span class="token punctuation">(</span>stksize<span class="token punctuation">)</span>
		<span class="token operator">...</span>

		ACArgs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ACArgs<span class="token punctuation">,</span> ssa<span class="token punctuation">.</span>Param<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINTPTR<span class="token punctuation">]</span><span class="token punctuation">,</span> Offset<span class="token punctuation">:</span> <span class="token function">int32</span><span class="token punctuation">(</span>Ctxt<span class="token punctuation">.</span><span class="token function">FixedFrameSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		aux <span class="token operator">:=</span> ssa<span class="token punctuation">.</span><span class="token function">StaticAuxCall</span><span class="token punctuation">(</span>deferprocStack<span class="token punctuation">,</span> ACArgs<span class="token punctuation">,</span> ACResults<span class="token punctuation">)</span> <span class="token comment">// 调用 deferprocStack</span>
		arg0 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">constOffPtrSP</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINTPTR<span class="token punctuation">]</span><span class="token punctuation">,</span> Ctxt<span class="token punctuation">.</span><span class="token function">FixedFrameSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINTPTR<span class="token punctuation">]</span><span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
		call <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1A</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpStaticCall<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TypeMem<span class="token punctuation">,</span> aux<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		call<span class="token punctuation">.</span>AuxInt <span class="token operator">=</span> stksize
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>vars<span class="token punctuation">[</span><span class="token operator">&amp;</span>memVar<span class="token punctuation">]</span> <span class="token operator">=</span> call
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xs={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Ds=n("code",null,"runtime._defer",-1),Bs={href:"https://draveness.me/golang/tree/runtime.deferprocStack",target:"_blank",rel:"noopener noreferrer"},Ss=n("code",null,"runtime.deferprocStack",-1),As={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Os=n("code",null,"runtime._defer",-1),Ps=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferprocStack</span><span class="token punctuation">(</span>d <span class="token operator">*</span>_defer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d<span class="token punctuation">.</span>started <span class="token operator">=</span> <span class="token boolean">false</span>
	d<span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 栈上分配的 _defer</span>
	d<span class="token punctuation">.</span>openDefer <span class="token operator">=</span> <span class="token boolean">false</span>
	d<span class="token punctuation">.</span>sp <span class="token operator">=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d<span class="token punctuation">.</span>pc <span class="token operator">=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d<span class="token punctuation">.</span>framepc <span class="token operator">=</span> <span class="token number">0</span>
	d<span class="token punctuation">.</span>varp <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">.</span>_panic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">.</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>_defer<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>_defer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token function">return0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-5-开放编码" tabindex="-1"><a class="header-anchor" href="#_5-3-5-开放编码" aria-hidden="true">#</a> 5.3.5 开放编码</h2><p>在<code>go v1.14</code>之后，通过开放编码（Open Coded）实现<code>defer</code>关键字，该设计使用代码内联优化 <code>defer</code> 关键的额外开销并引入函数数据 <code>funcdata</code> 管理 <code>panic</code> 的调用，该优化可以将 <code>defer</code> 的调用开销从 1.13 版本的 ~35ns 降低至 ~6ns 左右：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>With normal <span class="token punctuation">(</span>stack<span class="token operator">-</span>allocated<span class="token punctuation">)</span> defers only<span class="token punctuation">:</span>         <span class="token number">35.4</span>  ns<span class="token operator">/</span>op
With open<span class="token operator">-</span>coded defers<span class="token punctuation">:</span>                             <span class="token number">5.6</span>  ns<span class="token operator">/</span>op
Cost of function call alone <span class="token punctuation">(</span>remove <span class="token keyword">defer</span> keyword<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">4.4</span>  ns<span class="token operator">/</span>op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开放编码只会在满足以下的条件时启用：</p><ol><li>函数的 <code>defer</code> 数量少于或者等于 8 个</li><li>函数的 <code>defer</code> 关键字不能在循环中执行</li><li>函数的 <code>return</code> 语句与 <code>defer</code> 语句的乘积小于或者等于 15 个</li></ol><h3 id="启用优化" tabindex="-1"><a class="header-anchor" href="#启用优化" aria-hidden="true">#</a> 启用优化</h3>`,7),Ts={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkstmt",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"cmd/compile/internal/gc.walkstmt",-1),zs=n("code",null,"OpenCodedDeferDisallowed",-1),Cs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> maxOpenDefers <span class="token operator">=</span> <span class="token number">8</span>

<span class="token keyword">func</span> <span class="token function">walkstmt</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ODEFER<span class="token punctuation">:</span>
		Curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span><span class="token function">SetHasDefer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		Curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span>numDefers<span class="token operator">++</span>
		<span class="token keyword">if</span> Curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span>numDefers <span class="token operator">&gt;</span> maxOpenDefers <span class="token punctuation">{</span>
			Curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span><span class="token function">SetOpenCodedDeferDisallowed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Esc <span class="token operator">!=</span> EscNever <span class="token punctuation">{</span>
			Curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span><span class="token function">SetOpenCodedDeferDisallowed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">fallthrough</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vs={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.buildssa",target:"_blank",rel:"noopener noreferrer"},Fs=n("code",null,"cmd/compile/internal/gc.buildssa",-1),Ls=n("code",null,"defer",-1),Es=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">buildssa</span><span class="token punctuation">(</span>fn <span class="token operator">*</span>Node<span class="token punctuation">,</span> worker <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	s<span class="token punctuation">.</span>hasOpenDefers <span class="token operator">=</span> s<span class="token punctuation">.</span>hasdefer <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span><span class="token function">OpenCodedDeferDisallowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>hasOpenDefers <span class="token operator">&amp;&amp;</span>
		s<span class="token punctuation">.</span>curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span>numReturns<span class="token operator">*</span>s<span class="token punctuation">.</span>curfn<span class="token punctuation">.</span>Func<span class="token punctuation">.</span>numDefers <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>hasOpenDefers <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中间代码生成的这两个步骤会决定当前函数是否应该使用开放编码优化 <code>defer</code> 关键字，一旦确定使用开放编码，就会在编译期间初始化延迟比特和延迟记录。</p><h3 id="延迟记录" tabindex="-1"><a class="header-anchor" href="#延迟记录" aria-hidden="true">#</a> 延迟记录</h3>`,3),Is=n("code",null,"defer",-1),Rs={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.buildssa",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"cmd/compile/internal/gc.buildssa",-1),js=n("code",null,"deferBits",-1),Gs=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">buildssa</span><span class="token punctuation">(</span>fn <span class="token operator">*</span>Node<span class="token punctuation">,</span> worker <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>hasOpenDefers <span class="token punctuation">{</span>
		deferBitsTemp <span class="token operator">:=</span> <span class="token function">tempAt</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>NoXPos<span class="token punctuation">,</span> s<span class="token punctuation">.</span>curfn<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINT8<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 初始化延迟比特</span>
		s<span class="token punctuation">.</span>deferBitsTemp <span class="token operator">=</span> deferBitsTemp
		startDeferBits <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">entryNewValue0</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpConst8<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINT8<span class="token punctuation">]</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span>vars<span class="token punctuation">[</span><span class="token operator">&amp;</span>deferBitsVar<span class="token punctuation">]</span> <span class="token operator">=</span> startDeferBits
		s<span class="token punctuation">.</span>deferBitsAddr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span>deferBitsTemp<span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TUINT8<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>deferBitsAddr<span class="token punctuation">,</span> startDeferBits<span class="token punctuation">)</span>
		s<span class="token punctuation">.</span>vars<span class="token punctuation">[</span><span class="token operator">&amp;</span>memVar<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1Apos</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpVarLive<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TypeMem<span class="token punctuation">,</span> deferBitsTemp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>延迟比特中的每一个比特位都表示该位对应的 <code>defer</code> 关键字是否需要被执行，如下图所示，其中 8 个比特的倒数第二个比特在函数返回前被设置成了 1，那么该比特位对应的函数会在函数返回前执行：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281853758.png" alt="golang-defer-bits" tabindex="0" loading="lazy"><figcaption>golang-defer-bits</figcaption></figure><p>因为不是函数中所有的 <code>defer</code> 语句都会在函数返回前执行，如下所示的代码只会在 <code>if</code> 语句的条件为真时，其中的 <code>defer</code> 语句才会在结尾被执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>deferBits <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// 初始化 deferBits</span>

_f1<span class="token punctuation">,</span> _a1 <span class="token operator">:=</span> f1<span class="token punctuation">,</span> a1  <span class="token comment">// 保存函数以及参数</span>
deferBits <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token comment">// 将 deferBits 最后一位置位 1</span>

<span class="token keyword">if</span> condition <span class="token punctuation">{</span>
    _f2<span class="token punctuation">,</span> _a2 <span class="token operator">:=</span> f2<span class="token punctuation">,</span> a2  <span class="token comment">// 保存函数以及参数</span>
    deferBits <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token comment">// 将 deferBits 倒数第二位置位 1</span>
<span class="token punctuation">}</span>
exit<span class="token punctuation">:</span>

<span class="token keyword">if</span> deferBits <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    deferBits <span class="token operator">&amp;^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
    <span class="token function">_f2</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> deferBits <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    deferBits <span class="token operator">&amp;^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span>
    <span class="token function">_f1</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>延迟比特的作用就是标记哪些 <code>defer</code> 关键字在函数中被执行，这样在函数返回时可以根据对应 <code>deferBits</code> 的内容确定执行的函数，而正是因为 <code>deferBits</code> 的大小仅为 8 比特，所以该优化的启用条件为函数中的 <code>defer</code> 关键字少于 8 个。</p>`,6),qs=n("code",null,"defer",-1),Ms={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.openDeferInfo",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"cmd/compile/internal/gc.openDeferInfo",-1),$s=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> openDeferInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	n           <span class="token operator">*</span>Node
	closure     <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
	closureNode <span class="token operator">*</span>Node
	rcvr        <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
	rcvrNode    <span class="token operator">*</span>Node
	argVals     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
	argNodes    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ws={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.buildssa",target:"_blank",rel:"noopener noreferrer"},Hs=n("code",null,"cmd/compile/internal/gc.buildssa",-1),Ks={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.openDeferRecord",target:"_blank",rel:"noopener noreferrer"},Js=n("code",null,"cmd/compile/internal/gc.state.openDeferRecord",-1),Zs=n("code",null,"closure",-1),Qs=n("code",null,"rcvr",-1),Ys=n("code",null,"argVals",-1),na=n("code",null,"defer",-1),sa=n("code",null,"defer",-1),aa={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.openDeferExit",target:"_blank",rel:"noopener noreferrer"},ea=n("code",null,"cmd/compile/internal/gc.state.openDeferExit",-1),ta=n("code",null,"deferBits",-1),oa={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},pa=n("code",null,"runtime.deferreturn",-1),ca=n("code",null,"defer",-1),la=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferreturn</span><span class="token punctuation">(</span>arg0 <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	d <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_defer
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> d<span class="token punctuation">.</span>openDefer <span class="token punctuation">{</span>
		<span class="token function">runOpenDeferFrame</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
		gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d<span class="token punctuation">.</span>link
		<span class="token function">freedefer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ia={href:"https://draveness.me/golang/tree/runtime.runOpenDeferFrame",target:"_blank",rel:"noopener noreferrer"},ua=n("code",null,"runtime.runOpenDeferFrame",-1),ra={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},da=n("code",null,"runtime._defer",-1),ka=n("code",null,"deferBits",-1),va=n("code",null,"defer",-1),ma=n("li",null,[s("在循环中依次读取函数的地址和参数信息并通过 "),n("code",null,"deferBits"),s(" 判断该函数是否需要被执行；")],-1),fa={href:"https://draveness.me/golang/tree/runtime.reflectcallSave",target:"_blank",rel:"noopener noreferrer"},_a=n("code",null,"runtime.reflectcallSave",-1),ba=n("code",null,"defer",-1),ga=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">runOpenDeferFrame</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> d <span class="token operator">*</span>_defer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	fd <span class="token operator">:=</span> d<span class="token punctuation">.</span>fd

	<span class="token operator">...</span>
	deferBitsOffset<span class="token punctuation">,</span> fd <span class="token operator">:=</span> <span class="token function">readvarintUnsafe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
	nDefers<span class="token punctuation">,</span> fd <span class="token operator">:=</span> <span class="token function">readvarintUnsafe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
	deferBits <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uint8</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>varp <span class="token operator">-</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>deferBitsOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>nDefers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> argWidth<span class="token punctuation">,</span> closureOffset<span class="token punctuation">,</span> nArgs <span class="token builtin">uint32</span> <span class="token comment">// 读取函数的地址和参数信息</span>
		argWidth<span class="token punctuation">,</span> fd <span class="token operator">=</span> <span class="token function">readvarintUnsafe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
		closureOffset<span class="token punctuation">,</span> fd <span class="token operator">=</span> <span class="token function">readvarintUnsafe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
		nArgs<span class="token punctuation">,</span> fd <span class="token operator">=</span> <span class="token function">readvarintUnsafe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
		<span class="token keyword">if</span> deferBits<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		closure <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>funcval<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>varp <span class="token operator">-</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>closureOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		d<span class="token punctuation">.</span>fn <span class="token operator">=</span> closure

		<span class="token operator">...</span>

		deferBits <span class="token operator">=</span> deferBits <span class="token operator">&amp;^</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uint8</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>varp <span class="token operator">-</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>deferBitsOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> deferBits
		p <span class="token operator">:=</span> d<span class="token punctuation">.</span>_panic
		<span class="token function">reflectcallSave</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span><span class="token punctuation">,</span> deferArgs<span class="token punctuation">,</span> argWidth<span class="token punctuation">)</span>
		<span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>aborted <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		d<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>deferArgs<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>argWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> done
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-7-小结" tabindex="-1"><a class="header-anchor" href="#_5-3-7-小结" aria-hidden="true">#</a> 5.3.7 小结</h2><p><code>defer</code> 关键字的实现有三种机制：</p>`,3),ha=n("code",null,"defer",-1),wa={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},ya=n("code",null,"runtime.deferproc",-1),xa=n("code",null,"defer",-1),Da={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Ba=n("code",null,"runtime.deferreturn",-1),Sa={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Aa=n("code",null,"runtime.deferproc",-1),Oa={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"runtime._defer",-1),Ta={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Na=n("code",null,"runtime.deferreturn",-1),za={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Ca=n("code",null,"runtime._defer",-1),Va={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.call",target:"_blank",rel:"noopener noreferrer"},Fa=n("code",null,"cmd/compile/internal/gc.state.call",-1),La={href:"https://draveness.me/golang/tree/runtime.deferprocStack",target:"_blank",rel:"noopener noreferrer"},Ea=n("code",null,"runtime.deferprocStack",-1),Ia=n("li",null,[s("编译期间判断 "),n("code",null,"defer"),s(" 关键字、"),n("code",null,"return"),s(" 语句的个数确定是否开启开放编码优化")],-1),Ra=n("code",null,"deferBits",-1),Ua={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.openDeferInfo",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"cmd/compile/internal/gc.openDeferInfo",-1),Ga=n("code",null,"defer",-1),qa=n("code",null,"defer",-1),Ma={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Xa=n("code",null,"runtime.deferreturn",-1),$a=n("p",null,[n("strong",null,[n("code",null,"defer"),s("执行顺序和预先计算的原理：")])],-1),Wa=n("code",null,"defer",-1),Ha=n("li",null,[s("后调用的 "),n("code",null,"defer"),s(" 函数会被追加到 Goroutine "),n("code",null,"_defer"),s(),n("strong",null,"链表"),s("的最前面")],-1),Ka={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Ja=n("code",null,"runtime._defer",-1),Za={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Qa=n("code",null,"runtime.deferproc",-1),Ya=n("strong",null,"创建",-1),ne=n("strong",null,"延迟调用",-1),se=n("strong",null,"立刻拷贝",-1),ae=n("strong",null,"参数",-1),ee=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),te={href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/",target:"_blank",rel:"noopener noreferrer"};function oe(pe,ce){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[r,s("的数据结构用"),n("a",d,[k,e(a)]),s("表示，主要字段如下：")]),v,n("p",null,[n("a",m,[f,e(a)]),s("之间使用链表的形式串联起来：")]),_,b,n("p",null,[s("中间代码生成阶段会使用"),n("a",g,[h,e(a)]),s("根据三种不同的情况进行处理：")]),w,n("p",null,[s("当使用堆分配时，编译器会调用 "),n("a",y,[x,e(a)]),s(" 和 "),n("a",D,[B,e(a)]),s("进行处理（实际上"),S,s("是被按照函数调用进行处理的）。")]),n("p",null,[n("a",A,[O,e(a)]),s("负责为所有函数和方法调用生成中间代码，流程如下：")]),n("ol",null,[P,T,n("li",null,[s("使用 "),n("a",N,[z,e(a)]),s(" 以及相关函数生成函数调用的中间代码")]),C,V]),F,n("p",null,[s("编译器将 "),L,s(" 关键字都转换成 "),n("a",E,[I,e(a)]),s(" 函数，并通过以下三个步骤为所有调用 "),R,s(" 的函数末尾插入 "),n("a",U,[j,e(a)]),s(" 的函数调用：")]),n("ol",null,[n("li",null,[n("a",G,[q,e(a)]),s(" 在遇到 "),M,s(" 节点时会执行 "),X,s(" 设置当前函数的 "),$,s(" 属性")]),n("li",null,[n("a",W,[H,e(a)]),s(" 会执行 "),K,s(" 更新 "),J,s(" 的 "),Z]),n("li",null,[n("a",Q,[Y,e(a)]),s(" 会根据 "),nn,s(" 的 "),sn,s(" 在函数返回之前插入 "),n("a",an,[en,e(a)]),s(" 的函数调用")])]),tn,n("ul",null,[n("li",null,[n("a",on,[pn,e(a)]),s(" 负责"),cn,s("；")]),n("li",null,[n("a",ln,[un,e(a)]),s(" 负责在函数调用"),rn,s("时"),dn,s("所有的"),kn,s("；")])]),vn,n("p",null,[n("a",mn,[fn,e(a)]),s(" 为 "),_n,s(" 创建新的 "),n("a",bn,[gn,e(a)]),s(" 结构体、设置函数指针 "),hn,s("、程序计数器 "),wn,s(" 和栈指针 "),yn,s(" 并将相关的参数拷贝到相邻的内存空间中：")]),xn,n("p",null,[s("最后调用的 "),n("a",Dn,[Bn,e(a)]),s(" 是唯一一个不会触发延迟调用的函数，可以避免递归 "),n("a",Sn,[An,e(a)]),s(" 的递归调用。")]),n("p",null,[n("a",On,[Pn,e(a)]),s(" 中 "),n("a",Tn,[Nn,e(a)]),s(" 的作用是获得 "),n("a",zn,[Cn,e(a)]),s(" 结构体，包含三种路径：")]),n("ol",null,[Vn,Fn,n("li",null,[s("通过 "),n("a",Ln,[En,e(a)]),s(" 在堆上创建一个新的结构体")])]),In,n("p",null,[s("三种方式最终都会将获取到 "),n("a",Rn,[Un,e(a)]),s(" 结构体追加到所在 "),jn,s(),Gn,s(),qn,s("的最"),Mn,s("。")]),Xn,n("p",null,[n("a",$n,[Wn,e(a)]),s(" 会从 Goroutine 的 "),Hn,s(),Kn,s("中"),Jn,s("的 "),n("a",Zn,[Qn,e(a)]),s(" 并调用 "),n("a",Yn,[ns,e(a)]),s(" 传入需要执行的函数和参数：")]),ss,n("p",null,[n("a",as,[es,e(a)]),s("主要工作是跳转到 "),ts,s(" 所在的代码段并在执行结束之后跳转回 "),n("a",os,[ps,e(a)]),s("：")]),cs,n("p",null,[n("a",ls,[is,e(a)]),s(" 会多次判断当前 Goroutine 的 "),us,s(" 链表中是否有未执行的结构体，该函数只有在所有延迟函数都执行后才会返回。")]),rs,n("p",null,[s("当使用"),ds,s("上分配时，可以节约内存分配带来的额外开销，与堆上分配的 "),n("a",ks,[vs,e(a)]),s(" 相比，该方法可以将 "),ms,s(" 关键字的额外开销降低 ~30%。。")]),n("p",null,[s("在"),fs,s(" 中，对 "),_s,s(" 关键字进行了优化，当该关键字在函数体中最多执行一次时，编译期间的 "),n("a",bs,[gs,e(a)]),s(" 会将结构体分配到栈上并调用 "),n("a",hs,[ws,e(a)]),s("：")]),ys,n("p",null,[s("在编译期间已经创建了 "),n("a",xs,[Ds,e(a)]),s(" 结构体，所以在运行期间 "),n("a",Bs,[Ss,e(a)]),s(" 只需要设置一些未在编译期间初始化的字段，就可以将栈上的 "),n("a",As,[Os,e(a)]),s(" 追加到函数的链表上：")]),Ps,n("p",null,[s("程序在编译期间会确定是否启用开放编码，编译器生成中间代码之前，会使用 "),n("a",Ts,[Ns,e(a)]),s(" 修改已经生成的抽象语法树，设置函数体上的 "),zs,s(" 属性：")]),Cs,n("p",null,[s("在 SSA 中间代码生成阶段的 "),n("a",Vs,[Fs,e(a)]),s(" 中，能够看到启用开放编码优化的其他条件，也就是返回语句的数量与 "),Ls,s(" 数量的乘积需要小于 15：")]),Es,n("p",null,[s("延迟比特和延迟记录是使用开放编码实现 "),Is,s(" 的两个最重要结构，一旦决定使用开放编码，"),n("a",Rs,[Us,e(a)]),s(" 会在编译期间在栈上初始化大小为 8 个比特的 "),js,s(" 变量：")]),Gs,n("p",null,[s("上述伪代码展示了开放编码的实现原理，但是仍然缺少了一些细节，例如：传入 "),qs,s(" 关键字的函数和参数都会存储在如下所示的 "),n("a",Ms,[Xs,e(a)]),s(" 结构体中：")]),$s,n("p",null,[s("当编译器在调用 "),n("a",Ws,[Hs,e(a)]),s(" 构建中间代码时会通过 "),n("a",Ks,[Js,e(a)]),s(" 方法在栈上构建结构体，该结构体的 "),Zs,s(" 中存储着调用的函数，"),Qs,s(" 中存储着方法的接收者，而最后的 "),Ys,s(" 中存储了函数的参数。")]),n("p",null,[s("很多 "),na,s(" 语句都可以在编译期间判断是否被执行，若函数中的 "),sa,s(" 语句都会在编译期间确定，中间代码生成阶段就会直接调用 "),n("a",aa,[ea,e(a)]),s(" 在函数返回前生成判断 "),ta,s(" 的代码，也就是上述伪代码中的后半部分。")]),n("p",null,[s("不过当程序遇到运行时才能判断的条件语句时，我们仍然需要由运行时的 "),n("a",oa,[pa,e(a)]),s(" 决定是否执行 "),ca,s(" 关键字：")]),la,n("p",null,[s("该函数为开放编码做了特殊的优化，运行时会调用 "),n("a",ia,[ua,e(a)]),s(" 执行活跃的开放编码延迟函数，该函数会执行以下的工作：")]),n("ol",null,[n("li",null,[s("从 "),n("a",ra,[da,e(a)]),s(" 结构体中读取 "),ka,s("、函数 "),va,s(" 数量等信息；")]),ma,n("li",null,[s("调用 "),n("a",fa,[_a,e(a)]),s(" 调用需要执行的 "),ba,s(" 函数；")])]),ga,n("ol",null,[n("li",null,[s("堆上分配 · 1.1 ~ 1.12 "),n("ul",null,[n("li",null,[s("编译期将 "),ha,s(" 关键字转换成 "),n("a",wa,[ya,e(a)]),s(" 并在调用 "),xa,s(" 关键字的函数返回之前插入 "),n("a",Da,[Ba,e(a)])]),n("li",null,[s("运行时调用 "),n("a",Sa,[Aa,e(a)]),s(" 会将一个新的 "),n("a",Oa,[Pa,e(a)]),s(" 结构体追加到当前 Goroutine 的链表头")]),n("li",null,[s("运行时调用 "),n("a",Ta,[Na,e(a)]),s(" 会从 Goroutine 的链表中取出 "),n("a",za,[Ca,e(a)]),s(" 结构并依次执行")])])]),n("li",null,[s("栈上分配 · 1.13 "),n("ul",null,[n("li",null,[s("当该关键字在函数体中最多执行一次时，编译期间的 "),n("a",Va,[Fa,e(a)]),s(" 会将结构体分配到栈上并调用 "),n("a",La,[Ea,e(a)])])])]),n("li",null,[s("开放编码 · 1.14 "),n("ul",null,[Ia,n("li",null,[s("通过 "),Ra,s(" 和 "),n("a",Ua,[ja,e(a)]),s(" 存储 "),Ga,s(" 关键字的相关信息")]),n("li",null,[s("若 "),qa,s(" 关键字的执行可以在编译期间确定，会在函数返回前直接插入相应的代码，否则会由运行时的 "),n("a",Ma,[Xa,e(a)]),s(" 处理")])])])]),$a,n("ol",null,[n("li",null,[s("后调用的 "),Wa,s(" 函数会先执行： "),n("ul",null,[Ha,n("li",null,[s("运行 "),n("a",Ka,[Ja,e(a)]),s(" 时是从前到后依次执行")])])]),n("li",null,[s("函数的参数会被预先计算； "),n("ul",null,[n("li",null,[s("调用 "),n("a",Za,[Qa,e(a)]),s(" 函数"),Ya,s("新的"),ne,s("时就会"),se,s("函数的"),ae,s("，函数的参数不会等到真正执行时计算")])])])]),ee,n("ol",null,[n("li",null,[n("a",te,[s("https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/"),e(a)])])])])}const ie=o(i,[["render",oe],["__file","05.3.defer.html.vue"]]);export{ie as default};
