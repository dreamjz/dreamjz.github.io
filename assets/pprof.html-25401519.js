import{_ as e,X as o,Y as c,Z as n,$ as s,a0 as t,a1 as p,F as l}from"./framework-8cb7ec75.js";const i={},u=n("code",null,"pprof",-1),r={href:"https://github.com/google/pprof",target:"_blank",rel:"noopener noreferrer"},k=p('<ul><li><code>runtime/pprof</code> 包；</li><li><code>pprof</code> 性能分析工具；</li></ul><h2 id="_1-性能分析类型" tabindex="-1"><a class="header-anchor" href="#_1-性能分析类型" aria-hidden="true">#</a> 1. 性能分析类型</h2><p>记录性能数据会对程序的性能产生影响，建议一次只记录一类数据。</p><h3 id="_1-1-cpu" tabindex="-1"><a class="header-anchor" href="#_1-1-cpu" aria-hidden="true">#</a> 1.1 CPU</h3><p>CPU 性能分析 (CPU Profiling) ，启动分析时，运行时 (runtime) 将每隔 10ms 中断一次，记录此时正在运行的协程 (goroutines) 的堆栈信息。</p><p>程序运行结束后，可以分析记录的数据找到 Hottest Code Paths。</p>',6),d={href:"https://english.stackexchange.com/questions/402436/whats-the-meaning-of-hot-codepath-or-hot-code-path",target:"_blank",rel:"noopener noreferrer"},m=p(`<h3 id="_1-2-内存" tabindex="-1"><a class="header-anchor" href="#_1-2-内存" aria-hidden="true">#</a> 1.2 内存</h3><p>内存性能分析 (Memory Profiling) 记录堆内存分配时的堆栈信息，忽略栈内存分配信息。</p><p>启用内存分析时，默认每 1000 次采样 1 次，频率可以进行调整。</p><h3 id="_1-3-阻塞" tabindex="-1"><a class="header-anchor" href="#_1-3-阻塞" aria-hidden="true">#</a> 1.3 阻塞</h3><p>阻塞性能分析 (Block Profiling) 为 Golang 特有，用于记录一个协程等待一个共享资源花费的时间，在判断程序的并发瓶颈很有用。</p><p>阻塞场景包括：</p><ul><li>在没有缓冲区的信道上发送和接收数据；</li><li>从空的信道上接收数据，或发送数据到满的信道上；</li><li>尝试获取一个已经被其他协程锁住的排他锁；</li></ul><p>一般当 CPU 和 内存瓶颈解决之后，才会考虑这一类的分析。</p><h3 id="_1-4-锁" tabindex="-1"><a class="header-anchor" href="#_1-4-锁" aria-hidden="true">#</a> 1.4 锁</h3><p>锁性能分析 (mutex profiling) 和阻塞分析类似，但更专注于因为锁竞争导致的等待或延时。</p><h2 id="_2-cpu-性能分析" tabindex="-1"><a class="header-anchor" href="#_2-cpu-性能分析" aria-hidden="true">#</a> 2. CPU 性能分析</h2><h3 id="_2-1-生成-profile" tabindex="-1"><a class="header-anchor" href="#_2-1-生成-profile" aria-hidden="true">#</a> 2.1 生成 profile</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math/rand&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;runtime/pprof&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">generateRandIntSlice</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	nums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nums
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
				nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;./cpu.pprof&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;Create profile error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;Close file error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">=</span> pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;Start cpu profile error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	n <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">:=</span> <span class="token function">generateRandIntSlice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		<span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
		n <span class="token operator">*=</span> <span class="token number">10</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>pprof.StartCPUProfile(w io.Writer) error</code> ：开始 CPU 性能分析并将结果写入 <code>Writer</code> 中。可以写到标准输出 <code>os.Stdout</code>，然后重定向文件 <code>go run ./bubble_sort.go &gt; cpu.pprof</code>，但是会将程序和分析结果糅杂在一起，建议直接写入到文件中。</li></ul><h3 id="_2-2-分析-profile" tabindex="-1"><a class="header-anchor" href="#_2-2-分析-profile" aria-hidden="true">#</a> 2.2 分析 profile</h3><p>使用 <code>go tool pprof</code> 分析数据，在浏览器查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool pprof <span class="token parameter variable">-hhtp</span><span class="token operator">=</span>:9999 cpu.pprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20220413103807168.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用命令行模式查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool pprof cpu.pprof
File: bubble_sort
Type: cpu
Time: Apr <span class="token number">13</span>, <span class="token number">2022</span> at <span class="token number">10</span>:31am <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Duration: <span class="token number">15</span>.13s, Total samples <span class="token operator">=</span> <span class="token number">15</span>.01s <span class="token punctuation">(</span><span class="token number">99.18</span>%<span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> commands, <span class="token string">&quot;o&quot;</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> 15s, <span class="token number">99.93</span>% of <span class="token number">15</span>.01s total
Dropped <span class="token number">1</span> <span class="token function">node</span> <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">0</span>.08s<span class="token punctuation">)</span>
      flat  flat%   sum%        cum   cum%
       15s <span class="token number">99.93</span>% <span class="token number">99.93</span>%     <span class="token number">15</span>.01s   <span class="token number">100</span>%  main.bubbleSort <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.93</span>%     <span class="token number">15</span>.01s   <span class="token number">100</span>%  main.main
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.93</span>%     <span class="token number">15</span>.01s   <span class="token number">100</span>%  runtime.main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-内存性能分析" tabindex="-1"><a class="header-anchor" href="#_3-内存性能分析" aria-hidden="true">#</a> 3. 内存性能分析</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;flag&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/pkg/profile&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math/rand&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token boolean">_</span> <span class="token string">&quot;net/http/pprof&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;runtime/pprof&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
	<span class="token string">&quot;unsafe&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	letters <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>
	N       <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	profileType <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;prfType&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;profile type: 0 - runtime/pprof, 1 - net/http/pprof, 2 - github.com/pkg/profile&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">randomString</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> letters<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">concatString</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;&quot;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		s <span class="token operator">+=</span> <span class="token function">randomString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> <span class="token operator">*</span>profileType <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token number">0</span> <span class="token punctuation">:</span>
		<span class="token function">profileWithRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
		<span class="token function">profileWithHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
		<span class="token function">profileWithPkgProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">profileWithRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">concatString</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span>

	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;./mem.pprof&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;create profile error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;close file error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">WriteHeapProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;write profile error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">profileWithHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">concatString</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Listening :6060&quot;</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:6060&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token comment">// Block main goroutine</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">profileWithPkgProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> profile<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>MemProfile<span class="token punctuation">,</span> profile<span class="token punctuation">.</span><span class="token function">MemProfileRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">concatString</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述程序生成长度为 N 的随机字符串并拼接，使用 <code>runtime/pprof.WriteHeapProfile</code> 记录内存信息。</p><h3 id="_3-1-runtime-pprof" tabindex="-1"><a class="header-anchor" href="#_3-1-runtime-pprof" aria-hidden="true">#</a> 3.1 runtime/pprof</h3><p><code>profileWithRuntime</code> 使用 <code>runtime/pprof.WriteHeapProfile</code> 写入内存分析信息。</p><p>进行分析：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run ./randstr.go <span class="token parameter variable">-prfType</span> <span class="token number">0</span>
$ go tool pprof ./mem.pprof
File: randstr
Type: inuse_space
Time: Apr <span class="token number">13</span>, <span class="token number">2022</span> at <span class="token number">3</span>:16pm <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> commands, <span class="token string">&quot;o&quot;</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">1</span>.12MB, <span class="token number">100</span>% of <span class="token number">1</span>.12MB total
      flat  flat%   sum%        cum   cum%
    <span class="token number">1</span>.12MB   <span class="token number">100</span>%   <span class="token number">100</span>%     <span class="token number">1</span>.12MB   <span class="token number">100</span>%  main.concatString
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%     <span class="token number">1</span>.12MB   <span class="token number">100</span>%  main.main
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%     <span class="token number">1</span>.12MB   <span class="token number">100</span>%  main.profileWithRuntime
         <span class="token number">0</span>     <span class="token number">0</span>%   <span class="token number">100</span>%     <span class="token number">1</span>.12MB   <span class="token number">100</span>%  runtime.main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-net-http-pprof" tabindex="-1"><a class="header-anchor" href="#_3-2-net-http-pprof" aria-hidden="true">#</a> 3.2 net/http/pprof</h3><p><code>profileWithHttp</code> 使用 <code>net/http/pprof</code> 进行分析，使用时需要引入 <code>_ &quot;net/http/pprof&quot;</code> 以执行其 <code>init()</code> 函数。若程序中没有启动 HTTP 服务，则需要启动一个服务来访问分析数据。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run ./randstr.go <span class="token parameter variable">-prfType</span> <span class="token number">1</span>
$ go tool pprof http://localhost:6060/debug/pprof/allocs
File: randstr
Type: alloc_space
Time: Apr <span class="token number">13</span>, <span class="token number">2022</span> at <span class="token number">3</span>:23pm <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> commands, <span class="token string">&quot;o&quot;</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">463</span>.39MB, <span class="token number">99.57</span>% of <span class="token number">465</span>.39MB total
Dropped <span class="token number">1</span> <span class="token function">node</span> <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">2</span>.33MB<span class="token punctuation">)</span>
      flat  flat%   sum%        cum   cum%
  <span class="token number">463</span>.39MB <span class="token number">99.57</span>% <span class="token number">99.57</span>%   <span class="token number">465</span>.39MB   <span class="token number">100</span>%  main.concatString
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.57</span>%   <span class="token number">465</span>.39MB   <span class="token number">100</span>%  main.main
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.57</span>%   <span class="token number">465</span>.39MB   <span class="token number">100</span>%  main.profileWithHttp
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.57</span>%   <span class="token number">465</span>.39MB   <span class="token number">100</span>%  runtime.main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 <code>/debug/pprof</code> 可查看所有类型性能分析的结果。</p>`,31),b={id:"_3-3-github-com-pkg-profile",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_3-3-github-com-pkg-profile","aria-hidden":"true"},"#",-1),f={href:"http://github.com/pkg/profile",target:"_blank",rel:"noopener noreferrer"},h=p(`<p><code>profileWithPkgProfile</code> 引入三方库进行分析，只需一行代码即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go get <span class="token parameter variable">-u</span> github.com/pkg/profile@v1.6.0
$ go run ./randstr.go <span class="token parameter variable">-prfType</span> <span class="token number">2</span>
<span class="token number">2022</span>/04/13 <span class="token number">15</span>:27:12 profile: memory profiling enabled <span class="token punctuation">(</span>rate <span class="token number">1</span><span class="token punctuation">)</span>, /tmp/profile907236960/mem.pprof
<span class="token number">2022</span>/04/13 <span class="token number">15</span>:27:12 profile: memory profiling disabled, /tmp/profile907236960/mem.pprof
$ go tool pprof /tmp/profile907236960/mem.pprof
File: randstr
Type: inuse_space
Time: Apr <span class="token number">13</span>, <span class="token number">2022</span> at <span class="token number">3</span>:27pm <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> commands, <span class="token string">&quot;o&quot;</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">994</span>.12kB, <span class="token number">99.37</span>% of <span class="token number">1000</span>.39kB total
Dropped <span class="token number">43</span> nodes <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> 5kB<span class="token punctuation">)</span>
Showing <span class="token function">top</span> <span class="token number">10</span> nodes out of <span class="token number">14</span>
      flat  flat%   sum%        cum   cum%
     976kB <span class="token number">97.56</span>% <span class="token number">97.56</span>%      977kB <span class="token number">97.66</span>%  main.concatString
   <span class="token number">10</span>.12kB  <span class="token number">1.01</span>% <span class="token number">98.57</span>%    <span class="token number">10</span>.12kB  <span class="token number">1.01</span>%  runtime.malg
       8kB   <span class="token number">0.8</span>% <span class="token number">99.37</span>%       16kB  <span class="token number">1.60</span>%  runtime.allocm
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%   <span class="token number">977</span>.73kB <span class="token number">97.74</span>%  main.main
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%   <span class="token number">977</span>.73kB <span class="token number">97.74</span>%  main.profileWithPkgProfile
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%   <span class="token number">977</span>.73kB <span class="token number">97.74</span>%  runtime.main
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%       14kB  <span class="token number">1.40</span>%  runtime.mcall
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%     <span class="token number">6</span>.38kB  <span class="token number">0.64</span>%  runtime.mstart
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%       16kB  <span class="token number">1.60</span>%  runtime.newm
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.37</span>%       14kB  <span class="token number">1.40</span>%  runtime.park_m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-benchmark-生成-profile" tabindex="-1"><a class="header-anchor" href="#_4-benchmark-生成-profile" aria-hidden="true">#</a> 4. Benchmark 生成 profile</h3><p>进行 benchmark 测试时可以生成 profile 文件：</p>`,4),g=n("ul",null,[n("li",null,[n("code",null,"-cpuprofile FILE"),s(" ；")]),n("li",null,[n("code",null,"-memprofile FILE"),s(" ；")]),n("li",null,[n("code",null,"-memprofilerate N"),s(" ，将记录速率改为原来的 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mn",null,"1"),n("mi",null,"N")])]),n("annotation",{encoding:"application/x-tex"},"\\frac {1} {N}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8451em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),s("；")]),n("li",null,[n("code",null,"-blockprofile FILE"),s(" ；")])],-1),y=p(`<p>新增测试用例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkConcatString</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">concatString</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行测试并生成内存分析：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;.&#39;</span> <span class="token parameter variable">-memprofile</span> <span class="token string">&#39;mem.pprof&#39;</span> <span class="token builtin class-name">.</span> 
<span class="token string">&quot;ZEkckWKbjR&quot;</span>
goos: linux
goarch: amd64
pkg: pprof-example/randstr
cpu: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i7-4710HQ CPU @ <span class="token number">2</span>.50GHz
BenchmarkConcatString-8                <span class="token number">4</span>         <span class="token number">320310131</span> ns/op
PASS
ok      pprof-example/randstr   <span class="token number">2</span>.355s
$ go tool pprof ./mem.pprof 
File: randstr.test
Type: alloc_space
Time: Apr <span class="token number">13</span>, <span class="token number">2022</span> at <span class="token number">3</span>:37pm <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> commands, <span class="token string">&quot;o&quot;</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">3824</span>.67MB, <span class="token number">99.77</span>% of <span class="token number">3833</span>.68MB total
Dropped <span class="token number">1</span> <span class="token function">node</span> <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">19</span>.17MB<span class="token punctuation">)</span>
      flat  flat%   sum%        cum   cum%
 <span class="token number">3824</span>.67MB <span class="token number">99.77</span>% <span class="token number">99.77</span>%  <span class="token number">3833</span>.68MB   <span class="token number">100</span>%  pprof-example/randstr.concatString
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.77</span>%  <span class="token number">3833</span>.68MB   <span class="token number">100</span>%  pprof-example/randstr.BenchmarkConcatString
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.77</span>%  <span class="token number">3351</span>.76MB <span class="token number">87.43</span>%  testing.<span class="token punctuation">(</span>*B<span class="token punctuation">)</span>.launch
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.77</span>%   <span class="token number">481</span>.92MB <span class="token number">12.57</span>%  testing.<span class="token punctuation">(</span>*B<span class="token punctuation">)</span>.run1.func1
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">99.77</span>%  <span class="token number">3833</span>.68MB   <span class="token number">100</span>%  testing.<span class="token punctuation">(</span>*B<span class="token punctuation">)</span>.runN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,5),q={href:"https://geektutu.com/post/high-performance-go.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://stackoverflow.com/questions/66198742/defer-file-close-on-overridden-variable",target:"_blank",rel:"noopener noreferrer"},_={href:"https://pkg.go.dev/runtime/pprof",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[n("a",{href:""},"net/http/pprof doc")],-1);function x(S,P){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("Benchmark 可以度量某个函数的性能，前提是知道性能的瓶颈。对于未知程序，则需要 "),u,s(" 工具来进行分析，"),n("a",r,[s("pprof"),t(a)]),s(" 分为两个部分：")]),k,n("blockquote",null,[n("p",null,[s("Compiler hot paths are code execution paths in the compiler in which most of the execution time is spent, and which are potentially executed very often. – "),n("a",d,[s("What’s the meaning of “hot codepath”"),t(a)])])]),m,n("h3",b,[v,s(" 3.3 "),n("a",f,[s("github.com/pkg/profile"),t(a)])]),h,g,y,n("ol",null,[n("li",null,[n("a",q,[s("Go 语言高性能编程"),t(a)])]),n("li",null,[n("a",w,[s("defer file close on overridden variable"),t(a)])]),n("li",null,[n("a",_,[s("runtime/pprof doc"),t(a)])]),B])])}const C=e(i,[["render",x],["__file","pprof.html.vue"]]);export{C as default};
