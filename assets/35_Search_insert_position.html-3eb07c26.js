const e=JSON.parse('{"key":"v-5501cf2c","path":"/leetcode/category/array/35_Search_insert_position.html","title":"35 Search insert position","lang":"zh-CN","frontmatter":{"title":"35 Search insert position","date":"2022-02-22T00:00:00.000Z","category":["leetcode"],"tag":["array"],"timeline":true},"headers":[{"level":2,"title":"1. 题目描述","slug":"_1-题目描述","link":"#_1-题目描述","children":[]},{"level":2,"title":"2. 二分查找","slug":"_2-二分查找","link":"#_2-二分查找","children":[]},{"level":2,"title":"3. 题解","slug":"_3-题解","link":"#_3-题解","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":1.59,"words":478},"filePathRelative":"leetcode/category/array/35_Search_insert_position.md","localizedDate":"2022年2月22日","excerpt":"<h2> 1. 题目描述</h2>\\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\\n<h2> 2. 二分查找</h2>\\n<p>题中要求使用时间复杂度为 O(log n) 的算法，这里自然想到了二分查找。</p>\\n<p>在一组有序数组中，将数组一分为二，将要查询的元素和分割点进行比较，分为三种情况：</p>\\n<ul>\\n<li>相等直接返回</li>\\n<li>元素大于分割点，在分割点右侧继续查找</li>\\n<li>元素小于分割点，在分割点左侧继续查找</li>\\n</ul>"}');export{e as data};
