import{_ as o,Z as p,$ as i,a0 as s,a1 as n,a2 as e,a4 as t,H as c}from"./framework-d03928c9.js";const l={},u=t(`<h2 id="_7-associations" tabindex="-1"><a class="header-anchor" href="#_7-associations" aria-hidden="true">#</a> 7. Associations</h2><h3 id="_7-1-belongs-to" tabindex="-1"><a class="header-anchor" href="#_7-1-belongs-to" aria-hidden="true">#</a> 7.1 Belongs To</h3><p>A <code>Belongs To</code> association sets up a one-to-one connection with another model, such that each instance of the declaring model &quot;belongs to&quot; one instance of the other model</p><p>For example, if your application includes users and companies, and each user can be assigned to exactly one company, the following types represent that relationship. Notice here that, on the <code>User</code> object, there is both a <code>CompanyID</code> as well as a <code>Company</code>. By default, the <code>CompanyID</code> is implicity usesd to create a foreign key relationship between the <code>User</code> and <code>Company</code> tables, and thus must be included in the <code>User</code> struct in order to fill the <code>Company</code> inner strcut</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID        <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name      <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
	CompanyID <span class="token builtin">uint</span>
	Company   Company
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-1-1-override-foreign-key" tabindex="-1"><a class="header-anchor" href="#_7-1-1-override-foreign-key" aria-hidden="true">#</a> 7.1.1 Override Foreign Key</h4><p>To define a belongs to relationship, the foreign key must exist, the default foreing key uses the owner&#39;s type name plus its primary field name.</p><p>For the above example, to define the <code>User</code> model that belongs to <code>Company</code>, the foreign key should be <code>CompanyID</code> by convention</p><p>GORM provides a way to customize the foreign key</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name         <span class="token builtin">string</span>
  CompanyRefer <span class="token builtin">int</span>
  Company      Company <span class="token string">\`gorm:&quot;foreignKey:CompanyRefer&quot;\`</span>
  <span class="token comment">// use CompanyRefer as foreign key</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-1-2-override-references" tabindex="-1"><a class="header-anchor" href="#_7-1-2-override-references" aria-hidden="true">#</a> 7.1.2 Override References</h4><p>For a belongs to relationship, GORM usually uses the owner&#39;s primary field as the foreign key&#39;s value, for the above example, it is <code>Company</code>&#39;s field <code>ID</code></p><p>When you assign a user to a company, GORM will save the company&#39;s <code>ID</code> into the user&#39;s <code>CompanyID</code> field</p><p>You are able to change it with tag <code>references</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name      <span class="token builtin">string</span>
  CompanyID <span class="token builtin">string</span>
  Company   Company <span class="token string">\`gorm:&quot;references:Code&quot;\`</span> <span class="token comment">// use Code as references</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Code <span class="token builtin">string</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-1-3-foreign-key-constraints" tabindex="-1"><a class="header-anchor" href="#_7-1-3-foreign-key-constraints" aria-hidden="true">#</a> 7.1.3 FOREIGN KEY Constraints</h4><p>You can setup <code>OnUpdate</code>,<code>OnDelete</code> constraints with tag <code>constraint</code>, it will created when migrating with GORM,</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name      <span class="token builtin">string</span>
  CompanyID <span class="token builtin">int</span>
  Company   Company <span class="token string">\`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-has-one" tabindex="-1"><a class="header-anchor" href="#_7-2-has-one" aria-hidden="true">#</a> 7.2 Has One</h3><p>A <code>has one</code> association sets up a one-to-one connection with another model, but with somewhat different semantics (and consequences). This association indicates that each instance of a model contains or prossesses one instance of another model</p><p>For example, if your application includes users and credit cards, and each user can only have one credit card</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID         <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name       <span class="token builtin">string</span>
	Age        <span class="token builtin">int</span>
	CreditCard CreditCard
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID     <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Number <span class="token builtin">string</span>
	UserID <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-1-override-foreign-key" tabindex="-1"><a class="header-anchor" href="#_7-2-1-override-foreign-key" aria-hidden="true">#</a> 7.2.1 Override Foreign Key</h4><p>For a <code>has one</code> relationship, a foreign key field must also exist, the owner will save the primary key of the model belongs to it into this field</p><p>The field&#39;s name is usually generated with <code>has one</code> model&#39;s type plus its <code>primary key</code>, for the above example it is <code>UserID</code></p><p>When you give a credit card to the user, it will save the User&#39;s <code>ID</code> into its <code>UserID</code> field</p><p>If you want to use another field to save the relationship, you can change it with tag <code>foreignKey</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  CreditCard CreditCard <span class="token string">\`gorm:&quot;foreignKey:UserName&quot;\`</span>
  <span class="token comment">// use UserName as foreign key</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number   <span class="token builtin">string</span>
  UserName <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-2-override-reference" tabindex="-1"><a class="header-anchor" href="#_7-2-2-override-reference" aria-hidden="true">#</a> 7.2.2 Override Reference</h4><p>By default, the owned entity will save the <code>has one</code> model’s primary key into a foreign key, you could change to save another field’s value, like using <code>Name</code> for the below example.</p><p>You are able to change it with tag <code>references</code>, e.g:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name       <span class="token builtin">string</span>     <span class="token string">\`gorm:&quot;index&quot;\`</span>
  CreditCard CreditCard <span class="token string">\`gorm:&quot;foreignkey:UserName;references:name&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number   <span class="token builtin">string</span>
  UserName <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-3-polymorphism-association" tabindex="-1"><a class="header-anchor" href="#_7-2-3-polymorphism-association" aria-hidden="true">#</a> 7.2.3 Polymorphism Association</h4><p>GORM supports polymorphism association for <code>has one</code> and <code>has many</code>, it will save owned entity&#39;s table name into polymorphic type&#39;s field, primary key into poltmorphic field</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>

	<span class="token string">&quot;gorm.io/driver/sqlite&quot;</span>
	<span class="token string">&quot;gorm.io/gorm&quot;</span>
	<span class="token string">&quot;gorm.io/gorm/logger&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	DBName <span class="token operator">=</span> <span class="token string">&quot;polymorphism-association.db&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name <span class="token builtin">string</span>
	Toy  Toy <span class="token string">\`gorm:&quot;polymorphic:Owner;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name <span class="token builtin">string</span>
	Toy  Toy <span class="token string">\`gorm:&quot;polymorphic:Owner;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Toy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID        <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name      <span class="token builtin">string</span>
	OwnerID   <span class="token builtin">uint</span>
	OwnerType <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db <span class="token operator">:=</span> <span class="token function">initializeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sqlDB<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> sqlDB<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">createTables</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>

	<span class="token comment">// INSERT INTO cats (name) VALUES (&#39;cat_1&#39;);</span>
	<span class="token comment">// INSERT INTO toys (name,owner_id,owner_type) VALUES (&#39;toy_1&#39;,&#39;1&#39;,&#39;cats&#39;);</span>
	db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;cat_1&quot;</span><span class="token punctuation">,</span> Toy<span class="token punctuation">:</span> Toy<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy_1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">initializeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>DBName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Logger<span class="token punctuation">:</span> logger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;connect db failed: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> db
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">createTables</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Toy<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can change the polymorphic type value with tag <code>polymorphicValue</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
  Toy  Toy <span class="token string">\`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Toy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">int</span>
  Name      <span class="token builtin">string</span>
  OwnerID   <span class="token builtin">int</span>
  OwnerType <span class="token builtin">string</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;dog1&quot;</span><span class="token punctuation">,</span> Toy<span class="token punctuation">:</span> Toy<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// INSERT INTO \`dogs\` (\`name\`) VALUES (&quot;dog1&quot;)</span>
<span class="token comment">// INSERT INTO \`toys\` (\`name\`,\`owner_id\`,\`owner_type\`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-4-self-referential-has-one" tabindex="-1"><a class="header-anchor" href="#_7-2-4-self-referential-has-one" aria-hidden="true">#</a> 7.2.4 Self-Referential Has One</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name      <span class="token builtin">string</span>
  ManagerID <span class="token operator">*</span><span class="token builtin">uint</span>
  Manager   <span class="token operator">*</span>User
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-5-foreign-key-constraints" tabindex="-1"><a class="header-anchor" href="#_7-2-5-foreign-key-constraints" aria-hidden="true">#</a> 7.2.5 FOREIGN KEY Constraints</h4><p>You can setup <code>OnUpdate</code>, <code>OnDelete</code> constraints with tag <code>constraint</code>, it will be created when migrating with GORM, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  CreditCard CreditCard <span class="token string">\`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number <span class="token builtin">string</span>
  UserID <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),r=s("code",null,"Select",-1),d={href:"https://gorm.io/docs/associations.html#delete_with_select",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="_7-3-has-many" tabindex="-1"><a class="header-anchor" href="#_7-3-has-many" aria-hidden="true">#</a> 7.3 Has Many</h3><p>A <code>has many</code> association sets up a one-to-many connection with another model, unlike <code>has one</code>, the owner could have zero or many instances of models</p><p>For example, if your application includes users and credit card, and each user can have many credit cards</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID         <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Name       <span class="token builtin">string</span>
	Age        <span class="token builtin">int</span>
	CreditCard <span class="token punctuation">[</span><span class="token punctuation">]</span>CreditCard
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ID     <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
	Number <span class="token builtin">string</span>
	UserID <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-1-override-foreign-key" tabindex="-1"><a class="header-anchor" href="#_7-3-1-override-foreign-key" aria-hidden="true">#</a> 7.3.1 Override Foreign Key</h4><p>To define a <code>has many</code> relationship, a foreign key must exist. The default foreign key’s name is the owner’s type name plus the name of its primary key field</p><p>For example, to define a model that belongs to <code>User</code>, the foreign key should be <code>UserID</code>.</p><p>To use another field as foreign key, you can customize it with a <code>foreignKey</code> tag, e.g:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  CreditCards <span class="token punctuation">[</span><span class="token punctuation">]</span>CreditCard <span class="token string">\`gorm:&quot;foreignKey:UserRefer&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number    <span class="token builtin">string</span>
  UserRefer <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-override-references" tabindex="-1"><a class="header-anchor" href="#_7-3-2-override-references" aria-hidden="true">#</a> 7.3.2 Override References</h4><p>GORM usually uses the owner’s primary key as the foreign key’s value, for the above example, it is the <code>User</code>‘s <code>ID</code>,</p><p>When you assign credit cards to a user, GORM will save the user’s <code>ID</code> into credit cards’ <code>UserID</code> field.</p><p>You are able to change it with tag <code>references</code>, e.g:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  MemberNumber <span class="token builtin">string</span>
  CreditCards  <span class="token punctuation">[</span><span class="token punctuation">]</span>CreditCard <span class="token string">\`gorm:&quot;foreignKey:UserNumber;references:MemberNumber&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number     <span class="token builtin">string</span>
  UserNumber <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-polymorphism-association" tabindex="-1"><a class="header-anchor" href="#_7-3-3-polymorphism-association" aria-hidden="true">#</a> 7.3.3 Polymorphism Association</h4><p>GORM supports polymorphism association for <code>has one</code> and <code>has many</code>, it will save owned entity’s table name into polymorphic type’s field, primary key value into the polymorphic field</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
  Toys <span class="token punctuation">[</span><span class="token punctuation">]</span>Toy <span class="token string">\`gorm:&quot;polymorphic:Owner;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Toy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">int</span>
  Name      <span class="token builtin">string</span>
  OwnerID   <span class="token builtin">int</span>
  OwnerType <span class="token builtin">string</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;dog1&quot;</span><span class="token punctuation">,</span> Toys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Toy<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// INSERT INTO \`dogs\` (\`name\`) VALUES (&quot;dog1&quot;)</span>
<span class="token comment">// INSERT INTO \`toys\` (\`name\`,\`owner_id\`,\`owner_type\`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;dogs&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;dogs&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can change the polymorphic type value with tag <code>polymorphicValue</code>, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
  Toys <span class="token punctuation">[</span><span class="token punctuation">]</span>Toy <span class="token string">\`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Toy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">int</span>
  Name      <span class="token builtin">string</span>
  OwnerID   <span class="token builtin">int</span>
  OwnerType <span class="token builtin">string</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;dog1&quot;</span><span class="token punctuation">,</span> Toy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Toy<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;toy2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// INSERT INTO \`dogs\` (\`name\`) VALUES (&quot;dog1&quot;)</span>
<span class="token comment">// INSERT INTO \`toys\` (\`name\`,\`owner_id\`,\`owner_type\`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;master&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-4-self-referential-has-many" tabindex="-1"><a class="header-anchor" href="#_7-3-4-self-referential-has-many" aria-hidden="true">#</a> 7.3.4 Self-Referential Has Many</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name      <span class="token builtin">string</span>
  ManagerID <span class="token operator">*</span><span class="token builtin">uint</span>
  Team      <span class="token punctuation">[</span><span class="token punctuation">]</span>User <span class="token string">\`gorm:&quot;foreignkey:ManagerID&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-5-foreign-key-constraints" tabindex="-1"><a class="header-anchor" href="#_7-3-5-foreign-key-constraints" aria-hidden="true">#</a> 7.3.5 FOREIGN KEY Constraints</h4><p>You can setup <code>OnUpdate</code>, <code>OnDelete</code> constraints with tag <code>constraint</code>, it will be created when migrating with GORM, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  CreditCards <span class="token punctuation">[</span><span class="token punctuation">]</span>CreditCard <span class="token string">\`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CreditCard <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Number <span class="token builtin">string</span>
  UserID <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),m=s("code",null,"Select",-1),v={href:"https://gorm.io/docs/associations.html#delete_with_select",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_7-4-many-to-many" tabindex="-1"><a class="header-anchor" href="#_7-4-many-to-many" aria-hidden="true">#</a> 7.4 Many To Many</h3><p>Many to many add a join table between two models</p><p>For example, if your application includes users and languages, and a user can speak many languages, and many users can speak a specified language</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Languages <span class="token punctuation">[</span><span class="token punctuation">]</span>Language <span class="token string">\`gorm:&quot;many2many:user_languages;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Language <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using GORM <code>AutoMigrate</code> to create a table for <code>User</code>, GORM will create the join table automatically</p><h4 id="_7-4-1-back-reference" tabindex="-1"><a class="header-anchor" href="#_7-4-1-back-reference" aria-hidden="true">#</a> 7.4.1 Back-Reference</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Languages <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Language <span class="token string">\`gorm:&quot;many2many:user_languages;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Language <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name <span class="token builtin">string</span>
  Users <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User <span class="token string">\`gorm:&quot;many2many:user_languages;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-2-override-foreign-key" tabindex="-1"><a class="header-anchor" href="#_7-4-2-override-foreign-key" aria-hidden="true">#</a> 7.4.2 Override Foreign Key</h4><p>To override them, you can use tag <code>foreignKey</code>, <code>references</code>, <code>joinForeignKey</code>, <code>joinReferences</code>, not necessary to use them together, you can just use one of them to override some foreign keys/references</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Profiles <span class="token punctuation">[</span><span class="token punctuation">]</span>Profile <span class="token string">\`gorm:&quot;many2many:user_profiles;foreignKey:Refer;joinForeignKey:UserReferID;References:UserRefer;joinReferences:ProfileRefer&quot;\`</span>
  Refer    <span class="token builtin">uint</span>      <span class="token string">\`gorm:&quot;index:,unique&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Profile <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Name      <span class="token builtin">string</span>
  UserRefer <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;index:,unique&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// Which creates join table: user_profiles</span>
<span class="token comment">//   foreign key: user_refer_id, reference: users.refer</span>
<span class="token comment">//   foreign key: profile_refer, reference: profiles.user_refer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NOTE:</strong> Some databases only allow create database foreign keys that reference on a field having unique index, so you need to specify the <code>unique index</code> tag if you are creating database foreign keys when migrating</p><h4 id="_7-4-3-self-referential-many2many" tabindex="-1"><a class="header-anchor" href="#_7-4-3-self-referential-many2many" aria-hidden="true">#</a> 7.4.3 Self-Referential Many2Many</h4><p>Self-referencing many2many relationship</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type User struct {
  gorm.Model
  Friends []*User \`gorm:&quot;many2many:user_friends&quot;\`
}

// Which creates join table: user_friends
//   foreign key: user_id, reference: users.id
//   foreign key: friend_id, reference: users.id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-4-customize-jointable" tabindex="-1"><a class="header-anchor" href="#_7-4-4-customize-jointable" aria-hidden="true">#</a> 7.4.4 Customize JoinTable</h4><p><code>JoinTable</code> can be a full-featured model, like having <code>Soft Delete</code>，<code>Hooks</code> supports and more fields, you can setup it with <code>SetupJoinTable</code>, for example:</p><p><strong>NOTE:</strong> Customized join table’s foreign keys required to be composited primary keys or composited unique index</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID        <span class="token builtin">int</span>
  Name      <span class="token builtin">string</span>
  Addresses <span class="token punctuation">[</span><span class="token punctuation">]</span>Address <span class="token string">\`gorm:&quot;many2many:person_addresses;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">uint</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> PersonAddress <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  PersonID  <span class="token builtin">int</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  AddressID <span class="token builtin">int</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>PersonAddress<span class="token punctuation">)</span> <span class="token function">BeforeCreate</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Change model Person&#39;s field Addresses&#39; join table to PersonAddress</span>
<span class="token comment">// PersonAddress must defined all required foreign keys or it will raise error</span>
err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">SetupJoinTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Addresses&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>PersonAddress<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-5-foreign-key-constraints" tabindex="-1"><a class="header-anchor" href="#_7-4-5-foreign-key-constraints" aria-hidden="true">#</a> 7.4.5 FOREIGN KEY Constraints</h4><p>You can setup <code>OnUpdate</code>, <code>OnDelete</code> constraints with tag <code>constraint</code>, it will be created when migrating with GORM, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  gorm<span class="token punctuation">.</span>Model
  Languages <span class="token punctuation">[</span><span class="token punctuation">]</span>Language <span class="token string">\`gorm:&quot;many2many:user_speaks;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Language <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Code <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primarykey&quot;\`</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// CREATE TABLE \`user_speaks\` (\`user_id\` integer,\`language_code\` text,PRIMARY KEY (\`user_id\`,\`language_code\`),CONSTRAINT \`fk_user_speaks_user\` FOREIGN KEY (\`user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT \`fk_user_speaks_language\` FOREIGN KEY (\`language_code\`) REFERENCES \`languages\`(\`code\`) ON DELETE SET NULL ON UPDATE CASCADE);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),b=s("code",null,"Select",-1),h={href:"https://gorm.io/docs/associations.html#delete_with_select",target:"_blank",rel:"noopener noreferrer"},y=s("h4",{id:"_7-4-6-composite-foreign-keys",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-4-6-composite-foreign-keys","aria-hidden":"true"},"#"),n(" 7.4.6 Composite Foreign Keys")],-1),f={href:"https://gorm.io/docs/composite_primary_key.html",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>You are allowed to override the default foreign keys, to specify multiple foreign keys, just separate those keys’ name by commas, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID     <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Locale <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Value  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Blog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID         <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Locale     <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey&quot;\`</span>
  Subject    <span class="token builtin">string</span>
  Body       <span class="token builtin">string</span>
  Tags       <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag <span class="token string">\`gorm:&quot;many2many:blog_tags;&quot;\`</span>
  LocaleTags <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag <span class="token string">\`gorm:&quot;many2many:locale_blog_tags;ForeignKey:id,locale;References:id&quot;\`</span>
  SharedTags <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag <span class="token string">\`gorm:&quot;many2many:shared_blog_tags;ForeignKey:id;References:id&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// Join Table: blog_tags</span>
<span class="token comment">//   foreign key: blog_id, reference: blogs.id</span>
<span class="token comment">//   foreign key: blog_locale, reference: blogs.locale</span>
<span class="token comment">//   foreign key: tag_id, reference: tags.id</span>
<span class="token comment">//   foreign key: tag_locale, reference: tags.locale</span>

<span class="token comment">// Join Table: locale_blog_tags</span>
<span class="token comment">//   foreign key: blog_id, reference: blogs.id</span>
<span class="token comment">//   foreign key: blog_locale, reference: blogs.locale</span>
<span class="token comment">//   foreign key: tag_id, reference: tags.id</span>

<span class="token comment">// Join Table: shared_blog_tags</span>
<span class="token comment">//   foreign key: blog_id, reference: blogs.id</span>
<span class="token comment">//   foreign key: tag_id, reference: tags.id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5-association-mode" tabindex="-1"><a class="header-anchor" href="#_7-5-association-mode" aria-hidden="true">#</a> 7.5 Association Mode</h3><h4 id="_7-5-1-auto-create-update" tabindex="-1"><a class="header-anchor" href="#_7-5-1-auto-create-update" aria-hidden="true">#</a> 7.5.1 Auto Create/Update</h4>`,4),w={href:"https://gorm.io/docs/create.html#upsert",target:"_blank",rel:"noopener noreferrer"},_=t('<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>\n  Name<span class="token punctuation">:</span>            <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span>\n  BillingAddress<span class="token punctuation">:</span>  Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Billing Address - Address 1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ShippingAddress<span class="token punctuation">:</span> Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Shipping Address - Address 1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Emails<span class="token punctuation">:</span>          <span class="token punctuation">[</span><span class="token punctuation">]</span>Email<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>Email<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu@example.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>Email<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu-2@example.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Languages<span class="token punctuation">:</span>       <span class="token punctuation">[</span><span class="token punctuation">]</span>Language<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;ZH&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;EN&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n<span class="token comment">// BEGIN TRANSACTION;</span>\n<span class="token comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY DO NOTHING;</span>\n<span class="token comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span>\n<span class="token comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY DO NOTHING;</span>\n<span class="token comment">// INSERT INTO &quot;languages&quot; (&quot;name&quot;) VALUES (&#39;ZH&#39;), (&#39;EN&#39;) ON DUPLICATE KEY DO NOTHING;</span>\n<span class="token comment">// INSERT INTO &quot;user_languages&quot; (&quot;user_id&quot;,&quot;language_id&quot;) VALUES (111, 1), (111, 2) ON DUPLICATE KEY DO NOTHING;</span>\n<span class="token comment">// COMMIT;</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to update associations’s data, you should use the <code>FullSaveAssociations</code> mode:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Session<span class="token punctuation">{</span>FullSaveAssociations<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY SET address1=VALUES(address1);</span>\n<span class="token comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span>\n<span class="token comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY SET email=VALUES(email);</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-2-skip-auto-create-update" tabindex="-1"><a class="header-anchor" href="#_7-5-2-skip-auto-create-update" aria-hidden="true">#</a> 7.5.2 Skip Auto Create/Update</h4><p>To skip the auto save when creating/updating, you can use <code>Select</code> or <code>Omit</code>, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>\n  Name<span class="token punctuation">:</span>            <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span>\n  BillingAddress<span class="token punctuation">:</span>  Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Billing Address - Address 1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ShippingAddress<span class="token punctuation">:</span> Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Shipping Address - Address 1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Emails<span class="token punctuation">:</span>          <span class="token punctuation">[</span><span class="token punctuation">]</span>Email<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>Email<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu@example.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>Email<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu-2@example.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Languages<span class="token punctuation">:</span>       <span class="token punctuation">[</span><span class="token punctuation">]</span>Language<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;ZH&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;EN&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n<span class="token comment">// INSERT INTO &quot;users&quot; (name) VALUES (&quot;jinzhu&quot;, 1, 2);</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;BillingAddress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n<span class="token comment">// Skip create BillingAddress when creating a user</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n<span class="token comment">// Skip all associations when creating a user</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NOTE</strong></p><p>For many2many associations, GORM will upsert the associations before creating the join table references, if you want to skip the upserting of associations, you could skip it like:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;Languages.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The following code will skip the creation of the association and its references</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-5-3-select-omit-association-fields" tabindex="-1"><a class="header-anchor" href="#_7-5-3-select-omit-association-fields" aria-hidden="true">#</a> 7.5.3 Select/Omit Association fields</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>\n  Name<span class="token punctuation">:</span>            <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span>\n  BillingAddress<span class="token punctuation">:</span>  Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Billing Address - Address 1&quot;</span><span class="token punctuation">,</span> Address2<span class="token punctuation">:</span> <span class="token string">&quot;addr2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ShippingAddress<span class="token punctuation">:</span> Address<span class="token punctuation">{</span>Address1<span class="token punctuation">:</span> <span class="token string">&quot;Shipping Address - Address 1&quot;</span><span class="token punctuation">,</span> Address2<span class="token punctuation">:</span> <span class="token string">&quot;addr2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Create user and his BillingAddress, ShippingAddress</span>\n<span class="token comment">// When creating the BillingAddress only use its address1, address2 fields and omit others</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;BillingAddress.Address1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BillingAddress.Address2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;BillingAddress.Address2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BillingAddress.CreatedAt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-4-association-mode" tabindex="-1"><a class="header-anchor" href="#_7-5-4-association-mode" aria-hidden="true">#</a> 7.5.4 Association Mode</h4><p>Assocication Mode contains some commonly used helper methods to handle relationships</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Start Association Mode</span>\n<span class="token keyword">var</span> user User\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">// `user` is the source model, it must contains primary key</span>\n<span class="token comment">// `Languages` is a relationship&#39;s field name</span>\n<span class="token comment">// If the above two requirements matched, the AssociationMode should be started successfully, or it should return error</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Find Associations</strong></p><p>Find matched associations</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// SELECT `languages`.`id`,`languages`.`name` FROM `languages`</span>\n	<span class="token comment">// JOIN `user_languages` ON `user_languages`.`language_id` = `languages`.`id`</span>\n	<span class="token comment">// AND `user_languages`.`user_id` = 1</span>\n	<span class="token comment">// WHERE name IN (&#39;lang_0&#39;)</span>\n	<span class="token keyword">var</span> languages <span class="token punctuation">[</span><span class="token punctuation">]</span>Language\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;lang_0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>languages<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Append Associations</strong></p><p>Append new associations for <code>many to many</code>,<code>has many</code></p><p>replace current association for <code>has one</code>,<code>belongs to</code></p><p><code>many to many</code> <code>has many</code> 新增 association</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// append new associations</span>\n	<span class="token comment">// SELECT `languages`.`id`,`languages`.`name` FROM `languages`</span>\n	<span class="token comment">// JOIN `user_languages` ON `user_languages`.`language_id` = `languages`.`id`</span>\n	<span class="token comment">// AND `user_languages`.`user_id` = 1</span>\n	<span class="token comment">// WHERE name IN (&#39;lang_0&#39;)</span>\n	<span class="token keyword">var</span> languages <span class="token punctuation">[</span><span class="token punctuation">]</span>Language\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;lang_0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>languages<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>has one</code> <code>belongs to </code> 替换 association</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// append association</span>\n	<span class="token comment">// SELECT * FROM `credit_cards` WHERE `credit_cards`.`user_id` = 1</span>\n	<span class="token comment">// INSERT INTO `credit_cards` (`number`,`user_id`) VALUES (&quot;new_xxx&quot;,2) ON CONFLICT (`id`) DO UPDATE SET `user_id`=`excluded`.`user_id` RETURNING `id`</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;CreditCard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CreditCard<span class="token punctuation">{</span>Number<span class="token punctuation">:</span> <span class="token string">&quot;new_xxx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n	<span class="token comment">// INSERT INTO `credit_cards` (`number`,`user_id`) VALUES (&quot;new_2nd_xxx&quot;,2) ON CONFLICT (`id`) DO UPDATE SET 					`user_id`=`excluded`.`user_id` RETURNING `id`</span>\n	<span class="token comment">// UPDATE `credit_cards` SET `user_id`=NULL WHERE `credit_cards`.`id` &lt;&gt; 12 AND `credit_cards`.`user_id` = 2</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;CreditCard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CreditCard<span class="token punctuation">{</span>Number<span class="token punctuation">:</span> <span class="token string">&quot;new_2nd_xxx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在为 ID 为 2 的 user append 新的关联的时候，新增关联然后去除原有的关联，从而实现了替换原关联的作用</p><p>Tips:</p><p>SQLITE3 不支持 RIGHT JOIN 和 FULL JOIN, 但是可以通过 LEFT JOIN 来进行模拟</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id <span class="token keyword">AS</span> userID<span class="token punctuation">,</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>number<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id <span class="token keyword">AS</span> creditCardID <span class="token keyword">FROM</span> users <span class="token keyword">AS</span> u <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> credit_cards <span class="token keyword">AS</span> c <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>user_id \n<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>\n<span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>number<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> credit_cards <span class="token keyword">AS</span> c <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> users <span class="token keyword">AS</span> u <span class="token keyword">ON</span> c<span class="token punctuation">.</span>user_id <span class="token operator">=</span> u<span class="token punctuation">.</span>id <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Replace Associations</strong></p><p>Replace current associations with new ones</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// replace with new association</span>\n	<span class="token comment">// INSERT INTO `languages` (`name`) VALUES (&quot;replaced_lang&quot;) ON CONFLICT DO NOTHING RETURNING `id`</span>\n	<span class="token comment">// INSERT INTO `user_languages` (`user_id`,`language_id`) VALUES (2,24) ON CONFLICT DO NOTHING</span>\n	<span class="token comment">// DELETE FROM `user_languages` WHERE `user_languages`.`user_id` = 2 AND `user_languages`.`language_id` &lt;&gt; 24</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Language<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;replaced_lang&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 FULL JOIN 查看数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id <span class="token keyword">AS</span> userID<span class="token punctuation">,</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>l<span class="token punctuation">.</span>name <span class="token keyword">AS</span> lang<span class="token punctuation">,</span>l<span class="token punctuation">.</span>id <span class="token keyword">AS</span> langID <span class="token keyword">FROM</span> users <span class="token keyword">AS</span> u <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> user_languages <span class="token keyword">AS</span> ul <span class="token keyword">ON</span> ul<span class="token punctuation">.</span>user_id <span class="token operator">=</span> u<span class="token punctuation">.</span>id <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> languages <span class="token keyword">AS</span> l <span class="token keyword">ON</span> l<span class="token punctuation">.</span>id <span class="token operator">=</span> ul<span class="token punctuation">.</span>language_id\n<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>\n<span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id <span class="token keyword">AS</span> userID<span class="token punctuation">,</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>l<span class="token punctuation">.</span>name <span class="token keyword">AS</span> lang<span class="token punctuation">,</span>l<span class="token punctuation">.</span>id <span class="token keyword">AS</span> langID <span class="token keyword">FROM</span> languages <span class="token keyword">AS</span> l <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> user_languages <span class="token keyword">AS</span> ul <span class="token keyword">ON</span> ul<span class="token punctuation">.</span>language_id <span class="token operator">=</span> l<span class="token punctuation">.</span>id <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> users <span class="token keyword">AS</span> u <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> ul<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Delete Associations</strong></p><p>Remove the relationship between source &amp; arguments if exists, only delete the reference, won’t delete those objects from DB</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// delete association</span>\n	<span class="token comment">// DELETE FROM `user_languages` WHERE `user_languages`.`user_id` = 2 AND `user_languages`.`language_id` = 26</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Language<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Clear Associations</strong></p><p>Remove all reference between soruce &amp; association, won’t delete those associations</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// clear associations</span>\n	<span class="token comment">// DELETE FROM `user_languages` WHERE `user_languages`.`user_id` = 2</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Count Associations</strong></p><p>Return the count of current associations</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT count(*) FROM `languages` JOIN `user_languages` ON `user_languages`.`language_id` = `languages`.`id` AND `user_languages`.`user_id` = 1</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Languages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Batch Data</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Find all roles for all users</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Role&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>roles<span class="token punctuation">)</span>\n\n<span class="token comment">// Delete User A from all user&#39;s team</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">)</span>\n\n<span class="token comment">// Get distinct count of all users&#39; teams</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// For `Append`, `Replace` with batch data, the length of the arguments needs to be equal to the data&#39;s length or else it will return an error</span>\n<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">}</span>\n<span class="token comment">// e.g: we have 3 users, Append userA to user1&#39;s team, append userB to user2&#39;s team, append userA, userB and userC to user3&#39;s team</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>userB<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span>userA<span class="token punctuation">,</span> userB<span class="token punctuation">,</span> userC<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// Reset user1&#39;s team to userA，reset user2&#39;s team to userB, reset user3&#39;s team to userA, userB and userC</span>\ndb<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>userB<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span>userA<span class="token punctuation">,</span> userB<span class="token punctuation">,</span> userC<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-5-delete-with-select" tabindex="-1"><a class="header-anchor" href="#_7-5-5-delete-with-select" aria-hidden="true">#</a> 7.5.5 Delete with Select</h4><p>Delete with Select</p><p>You are allowed to delete selected has one/has many/many2many relations with <code>Select</code> when deleting records, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// delete user&#39;s account when deleting user</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n\n<span class="token comment">// delete user&#39;s Orders, CreditCards relations when deleting user</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CreditCards&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n\n<span class="token comment">// delete user&#39;s has one/many/many2many relations when deleting user</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n\n<span class="token comment">// delete each user&#39;s account when deleting users</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NOTE:</strong> Associations will only be deleted if the deleting records’s primary key is not zero, GORM will use those priamry keys as conditions to delete selected associations</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// DOESN&#39;T WORK</span>\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// will delete all user with name `jinzhu`, but those user&#39;s account won&#39;t be deleted</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// will delete the user with name = `jinzhu` and id = `1`, and user `1`&#39;s account will be deleted</span>\n\ndb<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// will delete the user with id = `1`, and user `1`&#39;s account will be deleted</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-6-association-tags" tabindex="-1"><a class="header-anchor" href="#_7-5-6-association-tags" aria-hidden="true">#</a> 7.5.6 Association Tags</h4><table><thead><tr><th style="text-align:left;">Tag</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">foreignKey</td><td style="text-align:left;">Specifies column name of the current model that is used as a foreign key to the join table</td></tr><tr><td style="text-align:left;">references</td><td style="text-align:left;">Specifies column name of the reference’s table that is mapped to the foreign key of the join table</td></tr><tr><td style="text-align:left;">polymorphic</td><td style="text-align:left;">Specifies polymorphic type such as model name</td></tr><tr><td style="text-align:left;">polymorphicValue</td><td style="text-align:left;">Specifies polymorphic value, default table name</td></tr><tr><td style="text-align:left;">many2many</td><td style="text-align:left;">Specifies join table name</td></tr><tr><td style="text-align:left;">joinForeignKey</td><td style="text-align:left;">Specifies foreign key column name of join table that maps to the current table</td></tr><tr><td style="text-align:left;">joinReferences</td><td style="text-align:left;">Specifies foreign key column name of join table that maps to the reference’s table</td></tr><tr><td style="text-align:left;">constraint</td><td style="text-align:left;">Relations constraint, e.g: <code>OnUpdate</code>,<code>OnDelete</code></td></tr></tbody></table><h3 id="_7-6-preloading-eager-loading" tabindex="-1"><a class="header-anchor" href="#_7-6-preloading-eager-loading" aria-hidden="true">#</a> 7.6 Preloading(Eager Loading)</h3><h4 id="_7-6-1-preload" tabindex="-1"><a class="header-anchor" href="#_7-6-1-preload" aria-hidden="true">#</a> 7.6.1 Preload</h4><p>GORM allows eager loading relations in other SQL with <code>Preload</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n	<span class="token string">&quot;gorm-note/utils&quot;</span>\n	<span class="token string">&quot;log&quot;</span>\n	<span class="token string">&quot;math/rand&quot;</span>\n	<span class="token string">&quot;strconv&quot;</span>\n\n	<span class="token string">&quot;gorm.io/driver/sqlite&quot;</span>\n	<span class="token string">&quot;gorm.io/gorm&quot;</span>\n	<span class="token string">&quot;gorm.io/gorm/logger&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">(</span>\n	DBName    <span class="token operator">=</span> <span class="token string">&quot;preloading.db&quot;</span>\n	UserCount <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	ID     <span class="token builtin">uint</span> <span class="token string">`gorm:&quot;primaryKey&quot;`</span>\n	Name   <span class="token builtin">string</span>\n	Orders <span class="token punctuation">[</span><span class="token punctuation">]</span>Order\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	ID     <span class="token builtin">uint</span> <span class="token string">`gorm:&quot;primaryKey&quot;`</span>\n	UserID <span class="token builtin">uint</span>\n	Price  <span class="token builtin">float64</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	db <span class="token operator">:=</span> <span class="token function">initializeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	sqlDB<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">defer</span> sqlDB<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n	<span class="token function">createTables</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>\n	<span class="token function">createUsers</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> UserCount<span class="token punctuation">)</span>\n\n	<span class="token comment">// Preloading</span>\n	<span class="token comment">// SELECT * FROM `orders` WHERE `orders`.`user_id` = 1</span>\n	<span class="token comment">// SELECT * FROM `users` WHERE id = 1</span>\n	<span class="token keyword">var</span> user User\n	db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">initializeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>\n	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>DBName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>\n		Logger<span class="token punctuation">:</span> logger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span><span class="token punctuation">)</span>\n	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;connect db failed: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n	<span class="token punctuation">}</span>\n	<span class="token keyword">return</span> db\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">createTables</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n	db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Order<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">createUsers</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	<span class="token keyword">var</span> count <span class="token builtin">int64</span>\n	db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>\n	<span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n		<span class="token keyword">return</span>\n	<span class="token punctuation">}</span>\n	users <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n		name <span class="token operator">:=</span> <span class="token string">&quot;user_&quot;</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n		price <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n		price2 <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n		users<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> Orders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Order<span class="token punctuation">{</span><span class="token punctuation">{</span>Price<span class="token punctuation">:</span> price<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Price<span class="token punctuation">:</span> price2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n	<span class="token punctuation">}</span>\n	db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-6-2-joins-preloading" tabindex="-1"><a class="header-anchor" href="#_7-6-2-joins-preloading" aria-hidden="true">#</a> 7.6.2 Joins Preloading</h4><p><code>Preload</code> loads the association data in a separate query, <code>Join Prelod</code> will loads association data using inner join</p><p><strong>NOTE</strong></p><p><code>Join Preload</code> works with one-to-one relation, e.g: <code>has one</code>, <code>belongs to</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Joins preload work with has-one or belongs-to</span>\n	<span class="token comment">// SELECT `users`.`id`,`users`.`name`,`CreditCard`.`id` AS `CreditCard__id`,`CreditCard`.`user_id` AS `CreditCard__user_id`,`CreditCard`.`number` AS `CreditCard__number` FROM `users`</span>\n	<span class="token comment">// LEFT JOIN `credit_cards` `CreditCard` ON `users`.`id` = `CreditCard`.`user_id` WHERE `users`.`id` = 2 LIMIT 1</span>\n	<span class="token keyword">var</span> user3 User\n	db<span class="token punctuation">.</span><span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">&quot;CreditCard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user3<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span>\n	<span class="token comment">// not working, will cause panic</span>\n	<span class="token keyword">var</span> user2 User\n	db<span class="token punctuation">.</span><span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 joins preloading 应用在 has-many, many-to-many 的情形下时将会触发 panic</p><h4 id="_7-6-3-preload-all" tabindex="-1"><a class="header-anchor" href="#_7-6-3-preload-all" aria-hidden="true">#</a> 7.6.3 Preload All</h4><p><code>clause.Association</code> can work with <code>Preload</code> similar like <code>Select</code> when creating/updating, you can use it to <code>Preload</code> all associations</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM `credit_cards` WHERE `credit_cards`.`user_id` IN (1,2,3,4,5,6,7,8,9,10)</span>\n	<span class="token comment">// SELECT * FROM `orders` WHERE `orders`.`user_id` IN (1,2,3,4,5,6,7,8,9,10)</span>\n	<span class="token comment">// SELECT * FROM `users`</span>\n	<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User\n	db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cluase.Association</code> won’t preload nested associations, but you can use it with <code>Nested Preloading</code> together</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders.OrderItems.Product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-6-4-preload-with-conditions" tabindex="-1"><a class="header-anchor" href="#_7-6-4-preload-with-conditions" aria-hidden="true">#</a> 7.6.4 Preload with conditions</h4><p>GORM allows Preload associations with conditions, it works similar to <code>inline condition</code></p><p><code>Preload</code> 的内联条件是针对关联表的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// preload with conditions</span>\n	<span class="token comment">// SELECT * FROM `orders` WHERE `orders`.`user_id` = 2 AND price &gt; 0.500000</span>\n	<span class="token comment">// SELECT * FROM `users` WHERE id = 2</span>\n	<span class="token keyword">var</span> user4 User\n	db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;price &gt; ?&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user4<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-6-5-custom-preloading-sql" tabindex="-1"><a class="header-anchor" href="#_7-6-5-custom-preloading-sql" aria-hidden="true">#</a> 7.6.5 Custom Preloading SQL</h4><p>You are able to custom preloading SQL by passing in <code>func(db *gorm.DB) *gorm.DB</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// custom preloading SQL</span>\n	<span class="token comment">// SELECT * FROM `orders` WHERE `orders`.`user_id` = 2 ORDER BY price</span>\n	<span class="token comment">// SELECT * FROM `users` WHERE id = 2</span>\n	<span class="token keyword">var</span> user5 User\n	db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>\n		<span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span>\n	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user5<span class="token punctuation">)</span>\n	utils<span class="token punctuation">.</span><span class="token function">PrintRecord</span><span class="token punctuation">(</span>user5<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-6-6-nested-preloading" tabindex="-1"><a class="header-anchor" href="#_7-6-6-nested-preloading" aria-hidden="true">#</a> 7.6.6 Nested Preloading</h4><p>GORM supports nested preloading, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders.OrderItems.Product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;CreditCard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n\n<span class="token comment">// Customize Preload conditions for `Orders`</span>\n<span class="token comment">// And GORM won&#39;t preload unmatched order&#39;s OrderItems then</span>\ndb<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;state = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;paid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Orders.OrderItems&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',80),N=s("li",null,[s("a",{href:"%5Bhttps://gorm.io%5D(https://gorm.io/)"},"gorm")],-1),A={href:"https://github.com/go-gorm/gorm/issues/4218",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"Find",-1),C=s("code",null,"Scan",-1),O=s("code",null,"Scan",-1),T=s("code",null,"Find",-1),I={href:"https://stackoverflow.com/questions/45953553/what-is-the-syntax-for-select-in-statement-for-sqlite",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.sqlitetutorial.net/sqlite-full-outer-join/",target:"_blank",rel:"noopener noreferrer"};function x(S,R){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,s("p",null,[n("You are also allowed to delete selected has one associations with "),r,n(" when deleting, checkout "),s("a",d,[n("Delete with Select"),e(a)]),n(" for details")]),k,s("p",null,[n("You are also allowed to delete selected has many associations with "),m,n(" when deleting, checkout "),s("a",v,[n("Delete with Select"),e(a)]),n(" for details")]),g,s("p",null,[n("You are also allowed to delete selected many2many relations with "),b,n(" when deleting, checkout "),s("a",h,[n("Delete with Select"),e(a)]),n(" for details")]),y,s("p",null,[n("If you are using "),s("a",f,[n("Composite Primary Keys"),e(a)]),n(" for your models, GORM will enable composite foreign keys by default")]),q,s("p",null,[n("GORM will auto-save associations and its reference using "),s("a",w,[n("Upsert"),e(a)]),n(" when creating/updating a record.")]),_,s("ol",null,[N,s("li",null,[s("a",A,[n("What is the difference between "),E,n(" and "),C,n("， Can I replace "),O,n(" with "),T,n(" ？"),e(a)]),n(" grom issue")]),s("li",null,[s("a",I,[n("What is the syntax for SELECT IN statement for SQLITE?"),e(a)]),n(" stackoverflow")]),s("li",null,[s("a",D,[n("SQLite FULL OUTER JOIN Emulation"),e(a)]),n(" sqlitetutorial")])])])}const L=o(l,[["render",x],["__file","01.3.html.vue"]]);export{L as default};
