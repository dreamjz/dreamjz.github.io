import{_ as e,X as o,Y as c,Z as n,$ as s,a0 as t,a1 as p,F as i}from"./framework-8cb7ec75.js";const u={},l=p(`<h2 id="_1-题目描述" tabindex="-1"><a class="header-anchor" href="#_1-题目描述" aria-hidden="true">#</a> 1. 题目描述</h2><p>不使用内建的哈希表库设计哈希映射 (HashMap)。</p><p>实现 <code>MyHashMap</code> 类：</p><ul><li><code>MyHashMap()</code> ：空映射初始化对象</li><li><code>void put(int key, int value)</code>: 向 HashMap 插入一个键值对 <code>(key, value)</code>。如果 <code>key</code> 已经存在于映射中，更新对应的值 <code>value</code></li><li><code>int get(int key)</code>: 返回特定的 <code>key</code> 所映射的 <code>value</code>; 若映射中不包含 <code>key</code> 的映射则返回 -1</li><li><code>void remove(key)</code> : 如果映射中存在 <code>key</code> 的映射则移除对应的键值对</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
[&quot;MyHashMap&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;remove&quot;, &quot;get&quot;]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
输出：
[null, null, null, 1, -1, null, 1, null, -1]

解释：
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // myHashMap 现在为 [[1,1]]
myHashMap.put(2, 2); // myHashMap 现在为 [[1,1], [2,2]]
myHashMap.get(1);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,2]]
myHashMap.get(3);    // 返回 -1（未找到），myHashMap 现在为 [[1,1], [2,2]]
myHashMap.put(2, 1); // myHashMap 现在为 [[1,1], [2,1]]（更新已有的值）
myHashMap.get(2);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,1]]
myHashMap.remove(2); // 删除键为 2 的数据，myHashMap 现在为 [[1,1]]
myHashMap.get(2);    // 返回 -1（未找到），myHashMap 现在为 [[1,1]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-题解" tabindex="-1"><a class="header-anchor" href="#_2-题解" aria-hidden="true">#</a> 2. 题解</h2>`,6),k={href:"https://leetcode-cn.com/problems/design-hashset/",target:"_blank",rel:"noopener noreferrer"},r=p(`<p><strong>Go</strong>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> hashtable

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;container/list&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token number">769</span>

<span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	key   <span class="token builtin">int</span>
	value <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> MyHashMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	data <span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span>List
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyHashMap<span class="token punctuation">)</span> <span class="token function">hash</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> key <span class="token operator">%</span> base
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Constructor706</span><span class="token punctuation">(</span><span class="token punctuation">)</span> MyHashMap <span class="token punctuation">{</span>
	<span class="token keyword">return</span> MyHashMap<span class="token punctuation">{</span>data<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span>List<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyHashMap<span class="token punctuation">)</span> <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> et <span class="token operator">:=</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> et<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span>Value <span class="token operator">=</span> entry<span class="token punctuation">{</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">:</span> val<span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>entry<span class="token punctuation">{</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">:</span> val<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyHashMap<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	h <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> et <span class="token operator">:=</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> et<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>
			<span class="token keyword">return</span> et<span class="token punctuation">.</span>value
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyHashMap<span class="token punctuation">)</span> <span class="token function">Remove</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> et <span class="token operator">:=</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> et<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>
			m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m MyHashMap<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> sb strings<span class="token punctuation">.</span>Builder
	sb<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token keyword">range</span> m<span class="token punctuation">.</span>data <span class="token punctuation">{</span>
		<span class="token keyword">for</span> e <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sb<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%v, &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	sb<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-复杂度分析" tabindex="-1"><a class="header-anchor" href="#_2-1-复杂度分析" aria-hidden="true">#</a> 2.1 复杂度分析</h3><ul><li><strong>时间复杂度</strong>： <em>O(n / b)</em>, n 为哈希表中元素数量，b 为链表数量。假设哈希值均匀分布，则每个链表大概长度为 n / b</li><li><strong>空间复杂度</strong>： <em>O(n + b)</em></li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,5),d={href:"https://leetcode-cn.com/problems/design-hashmap/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://leetcode-cn.com/problems/design-hashmap/solution/she-ji-ha-xi-ying-she-by-leetcode-soluti-klu9/",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[s("这个和"),n("a",k,[s("705.Design-HashSet"),t(a)]),s(" 类似，区别是不存储 key 本身，而是 (key, value) 对。")]),r,n("ol",null,[n("li",null,[n("a",d,[s("706.Design HashMap"),t(a)])]),n("li",null,[n("a",v,[s("LeetCode Solution"),t(a)])])])])}const f=e(u,[["render",m],["__file","706.Design-HashMap.html.vue"]]);export{f as default};
