import{_ as i,X as l,Y as u,a0 as a,a3 as o,Z as n,$ as s,a1 as e,F as c}from"./framework-8cb7ec75.js";const r={},d=n("h2",{id:"_3-1-1-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1-1-概述","aria-hidden":"true"},"#"),s(" 3.1.1 概述")],-1),k=n("p",null,"数组是由相同类型元素的集合组成的数据结构，计算机会为数组分配一块连续的内存来保存其中的元素，我们可以利用数组中的元素的索引快速访问特定元素，常见的数组多为一维线性数组，而多维数组在数值和图形计算领域有比较常见的应用。",-1),v=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-02-20-3D-array.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),m=n("b",null,"图 3 - 1 多维数组",-1),b=e(`<p>数组作为一种基本数据类型，通常会从两个维度描述数组，也就是数组中存储的<strong>元素类型</strong>和数组<strong>最大能存储的元素个数</strong>，在 Golang 中使用如下方式表示数组类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言数组在初始化之后大小无法改变，存储元素类型相同、但是大小不同的数组类型在 Go 语言中是完全不同的，只有满足两个条件相同时才为同一类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewArray</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">,</span> bound <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> bound <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;NewArray: invalid bound %v&quot;</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TARRAY<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> <span class="token operator">&amp;</span>Array<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">,</span> Bound<span class="token punctuation">:</span> bound<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span><span class="token function">SetNotInHeap</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span><span class="token function">NotInHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.NewArray",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cmd/compile/internal/types.NewArray",-1),_=n("code",null,"Elem",-1),f=n("code",null,"Bound",-1),y=e(`<h2 id="_3-1-2-初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-2-初始化" aria-hidden="true">#</a> 3.1.2 初始化</h2><p>Go 语言的数组由两种不同的创建方式，一种是<strong>显式的指定数组大小</strong>，另一种是使用 <code>[...]T</code> 声明数组，Go 语言会在编译期间通过源代码推导数组的大小：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
arr2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种声明方式在运行期间得到的结果是完全相同的，后一种方式在编译期间会被转换成前一种，这也就是编译器对数组大小的推导，下面看下编译器的推导过程。</p><h3 id="上限推导" tabindex="-1"><a class="header-anchor" href="#上限推导" aria-hidden="true">#</a> 上限推导</h3>`,5),x=n("strong",null,[n("code",null,"[10]T")],-1),w={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.NewArray",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"cmd/compile/internal/types.NewArray",-1),I={href:"https://draveness.me/golang/tree/cmd/compile/internal/types.Array",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"cmd/compile/internal/types.Array",-1),R=n("strong",null,[n("code",null,"[...]T")],-1),N={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckcomplit",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"cmd/compile/internal/gc.typecheckcomplit",-1),L=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheckcomplit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Op <span class="token operator">==</span> OTARRAY <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Op <span class="token operator">==</span> ODDD <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> ctxType<span class="token punctuation">)</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token boolean">nil</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
		elemType <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type

		length <span class="token operator">:=</span> <span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>elemType<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;array literal&quot;</span><span class="token punctuation">)</span>

		n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OARRAYLIT
		n<span class="token punctuation">.</span>Type <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span>elemType<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>

	<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
	<span class="token keyword">case</span> TARRAY<span class="token punctuation">:</span>
		<span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;array literal&quot;</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OARRAYLIT
		n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckcomplit",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"cmd/compile/internal/gc.typecheckcomplit",-1),P={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckarraylit",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"cmd/compile/internal/gc.typecheckarraylit",-1),C=n("p",null,[s("所以可以看出 "),n("code",null,"[...]T{1, 2, 3}"),s(" 和 "),n("code",null,"[3]T{1, 2, 3}"),s(" 在运行时是完全等价的，"),n("code",null,"[...]T"),s(" 这种初始化方式为 Go 语言的语法糖，当我们不想计算数组中的元素时可以通过这种方式减少工作量。")],-1),G=n("h3",{id:"语句转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#语句转换","aria-hidden":"true"},"#"),s(" 语句转换")],-1),B={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.anylit",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"cmd/compile/internal/gc.anylit",-1),Y=e(`<ol><li>当元素数量小于或等于 4 个时，会直接将数组中的元素放置在栈上；</li><li>当元素数量大于 4 个时，会将数组中的元素放置到静态区并在运行时取出；</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">anylit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> var_ <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> n<span class="token punctuation">.</span>Type
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OSTRUCTLIT<span class="token punctuation">,</span> OARRAYLIT<span class="token punctuation">:</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>

		<span class="token function">fixedlit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> initKindLocalCode<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F=n("strong",null,"小于或等于 4 个",-1),K={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.fixedlit",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"cmd/compile/internal/gc.fixedlit",-1),X=n("code",null,"[3]{1, 2, 3}",-1),z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fixedlit</span><span class="token punctuation">(</span>ctxt initContext<span class="token punctuation">,</span> kind initKind<span class="token punctuation">,</span> n <span class="token operator">*</span>Node<span class="token punctuation">,</span> var_ <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> splitnode <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Node<span class="token punctuation">,</span> value <span class="token operator">*</span>Node<span class="token punctuation">)</span>
	<span class="token operator">...</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		a<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token function">splitnode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
		a <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> a<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
		<span class="token keyword">switch</span> kind <span class="token punctuation">{</span>
		<span class="token keyword">case</span> initKindStatic<span class="token punctuation">:</span>
			<span class="token function">genAsStatic</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
		<span class="token keyword">case</span> initKindLocalCode<span class="token punctuation">:</span>
			a <span class="token operator">=</span> <span class="token function">orderStmtInPlace</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			a <span class="token operator">=</span> <span class="token function">walkstmt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
			init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.fixedlit",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"cmd/compile/internal/gc.fixedlit",-1),U=n("code",null,"kind",-1),$=n("code",null,"initKindLocalCode",-1),H=n("code",null,"[3]int{1, 2, 3}",-1),J=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 伪代码如下</span>
<span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Z={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.anylit",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"cmd/compile/internal/gc.anylit",-1),W=n("code",null,"staticname",-1),nn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.fixedlit",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"cmd/compile/internal/gc.fixedlit",-1),an=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">anylit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> var_ <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> n<span class="token punctuation">.</span>Type
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OSTRUCTLIT<span class="token punctuation">,</span> OARRAYLIT<span class="token punctuation">:</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
			vstat <span class="token operator">:=</span> <span class="token function">staticname</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			vstat<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">SetReadonly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

			<span class="token function">fixedlit</span><span class="token punctuation">(</span>inNonInitFunction<span class="token punctuation">,</span> initKindStatic<span class="token punctuation">,</span> n<span class="token punctuation">,</span> vstat<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

			a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> vstat<span class="token punctuation">)</span>
			a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
			a <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
			init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设代码需要初始化 <code>[5]int{1, 2, 3, 4, 5}</code>，那么我们可以将上述过程理解成以下伪代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
statictmp_0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
arr <span class="token operator">=</span> statictmp_0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结来说，在不考虑逃逸分析的情况下，若数组中元素的个数小于或等于 4 个，那么所有的变量会直接在<strong>栈</strong>上初始化；若数组元素大于 4 个，变量会在<strong>静态存储区</strong>初始化然后<strong>拷贝</strong>到<strong>栈</strong>上，这些转换之后的代码才会继续进入 [中间代码生成](// TODO:) 和 [机器码生成](// TODO:) 两个阶段，最后生成可以执行的二进制文件。</p><h2 id="_3-1-3-访问和赋值" tabindex="-1"><a class="header-anchor" href="#_3-1-3-访问和赋值" aria-hidden="true">#</a> 3.1.3 访问和赋值</h2><p>无论是在<strong>栈</strong>还是<strong>静态存储区</strong>，数组在内存中都是一连串的内存空间，我们通过<strong>指向数组开头的指针</strong>、<strong>元素的数量</strong>以及<strong>元素类型占用的空间大小</strong>表示数组。如果我们不知道数组中的元素数量，访问时可能发生越界；而如果不知道数组中元素类型的大小，就没有办法直到应该一次取出多少字节的数据，无论丢失了哪个信息，我们都无法知道这片连续的内存空间到底存储了什么数据：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/2019-12-27-15773821941323-golang-array-memory.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,7),tn=n("b",null,"图 3-2 数组的内存空间",-1),en=n("strong",null,"非常严重",-1),pn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheck1",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"cmd/compile/internal/gc.typecheck1",-1),cn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> OINDEX<span class="token punctuation">:</span>
		ok <span class="token operator">|=</span> ctxExpr
		l <span class="token operator">:=</span> n<span class="token punctuation">.</span>Left  <span class="token comment">// array</span>
		r <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right <span class="token comment">// index</span>
		<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
		<span class="token keyword">case</span> TSTRING<span class="token punctuation">,</span> TARRAY<span class="token punctuation">,</span> TSLICE<span class="token punctuation">:</span>
			<span class="token operator">...</span>
			<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">IsInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;non-integer array index %v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">Bounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Isconst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> CTINT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				x <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;invalid array index %v (index must be non-negative)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&gt;=</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;invalid array index %v (out of bounds for %d-element array)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>访问数组的索引是<strong>非整数</strong>时，报错 “non-integer array index %v”；</li><li>访问数组的索引是<strong>负数</strong>时，报错 “invalid array index %v (index must be non-negative)” ；</li><li>访问数组的索引<strong>越界</strong>时，报错 “invalid array index %v (out of bounds for %d-element array)”；</li></ol><p>数组和字符串的一些简单越界错误都会在编译期间发现，例如：直接使用整数或常量访问数组。但是如果使用变量去访问数组或字符串时，编译器无法提前发现错误，我们需要 Go 语言运行时阻止不合法的访问：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> invalid array index <span class="token number">4</span> <span class="token punctuation">(</span>out of bounds <span class="token keyword">for</span> <span class="token number">3</span><span class="token operator">-</span>element array<span class="token punctuation">)</span>
arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">panic</span><span class="token punctuation">:</span> runtime <span class="token builtin">error</span><span class="token punctuation">:</span> index out of <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> with length <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ln={href:"https://draveness.me/golang/tree/runtime.panicIndex",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.panicIndex",-1),rn={href:"https://draveness.me/golang/tree/runtime.goPanicIndex",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"runtime.goPanicIndex",-1),kn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>TEXT runtime·<span class="token function">panicIndex</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span>NOSPLIT<span class="token punctuation">,</span>$<span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span>
	MOVL	AX<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token function">0</span><span class="token punctuation">(</span>FP<span class="token punctuation">)</span>
	MOVL	CX<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token function">4</span><span class="token punctuation">(</span>FP<span class="token punctuation">)</span>
	JMP	runtime·<span class="token function">goPanicIndex</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">goPanicIndex</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">panicCheck1</span><span class="token punctuation">(</span><span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;index out of range&quot;</span><span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>boundsError<span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token function">int64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">,</span> code<span class="token punctuation">:</span> boundsIndex<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当数组访问操作 <code>OINDEX</code> 成功通过编译器的检查后，会被转换成几个 SSA 指令，假设我们由如下代码，通过下面的方式编译可以得到 <code>ssa.html</code> 文件:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> check 

<span class="token keyword">func</span> <span class="token function">outOfRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
    i <span class="token operator">:=</span> <span class="token number">4</span>
    elem <span class="token operator">:=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> elem
<span class="token punctuation">}</span>

$ GOSSAFUNC<span class="token operator">=</span>outOfRange <span class="token keyword">go</span> build array<span class="token punctuation">.</span><span class="token keyword">go</span>
dumped SSA to <span class="token punctuation">.</span><span class="token operator">/</span>ssa<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>start</em> 阶段生成的 SSA 代码就是优化之前的第一版本中间代码，下面展示的是 <code>elem := arr[i]</code> 对应的中间代码，在这段中间代码中我们发现 Go 语言为数组的访问操作生成了判断数组上限的指令 <code>IsInBounds</code> 以及当条件不满足时触发程序崩溃的 <code>PanicBounds</code> 指令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b1:
    ...
    v22 (6) = LocalAddr &lt;*[3]int&gt; {arr} v2 v20
    v23 (6) = IsInBounds &lt;bool&gt; v21 v11
If v23 → b2 b3 (likely) (6)

b2: ← b1-
    v26 (6) = PtrIndex &lt;*int&gt; v22 v21
    v27 (6) = Copy &lt;mem&gt; v20
    v28 (6) = Load &lt;int&gt; v26 v27 (elem[int])
    ...
Ret v30 (+7)

b3: ← b1-
    v24 (6) = Copy &lt;mem&gt; v20
    v25 (6) = PanicBounds &lt;mem&gt; [0] v21 v11 v24
Exit v25 (6)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),vn=n("code",null,"PanicBounds",-1),mn={href:"https://draveness.me/golang/tree/runtime.panicIndex",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.panicIndex",-1),gn=n("code",null,"PtrIndex",-1),hn=n("code",null,"Load",-1),_n=e(`<p>只有当编译器无法对数组下标是否越界无法做出判断时才会加入 <code>PanicBounds</code> 指令交给运行时进行判断，在使用字面量整数访问数组下标时会生成非常简单的中间代码，将上述代码中的 <code>arr[i]</code> 改成 <code>arr[2]</code> 时，会得到如下代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b1:
    ...
    v21 (5) = LocalAddr &lt;*[3]int&gt; {arr} v2 v20
    v22 (5) = PtrIndex &lt;*int&gt; v21 v14
    v23 (5) = Load &lt;int&gt; v22 v20 (elem[int])
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言对于数组的访问有着较多的检查，不仅会在<strong>编译期间</strong>提前发现一些简单的越界错误并插入用于检测数组上限的函数调用，还会在<strong>运行期间</strong>通过插入的函数保证不会发生越界。</p><p>数组的赋值和更新操作 <code>a[i] = 2</code> 也会生成 SSA 生成期间计算出数组当前元素的内存地址，然后修改当前内存地址的内容，这些赋值语句会被转换成如下 SSA 代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b1:
    ...
    v21 (5) = LocalAddr &lt;*[3]int&gt; {arr} v2 v19
    v22 (5) = PtrIndex &lt;*int&gt; v21 v13
    v23 (5) = Store &lt;mem&gt; {int} v22 v20 v19
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值的过程中会先确定目标数组的地址，再通过 <code>PtrIndex</code> 获取目标元素的地址，最后使用 <code>Store</code> 指令将数据存入地址中，从上述 SSA 代码中可以看到数组的<strong>寻址</strong>和赋值都是在<strong>编译阶段</strong>完成的，没有运行时的参与。</p><h2 id="_3-1-4-小结" tabindex="-1"><a class="header-anchor" href="#_3-1-4-小结" aria-hidden="true">#</a> 3.1.4 小结</h2>`,7),fn=n("strong",null,"编译器",-1),yn=n("strong",null,"运行时",-1),xn={href:"https://draveness.me/golang/tree/runtime.panicIndex",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"runtime.panicIndex",-1),Tn=n("h2",{id:"_3-1-5-延伸阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1-5-延伸阅读","aria-hidden":"true"},"#"),s(" 3.1.5 延伸阅读")],-1),In={href:"https://blog.golang.org/slices",target:"_blank",rel:"noopener noreferrer"},An={href:"https://stackoverflow.com/questions/30525184/array-vs-slice-accessing-speed",target:"_blank",rel:"noopener noreferrer"},Rn=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),Nn={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"};function Sn(Ln,On){const p=c("center"),t=c("ExternalLinkIcon");return l(),u("div",null,[d,k,v,a(p,null,{default:o(()=>[m]),_:1}),b,n("p",null,[s("编译期间数组类型由上述的 "),n("a",g,[h,a(t)]),s(" 函数生成，该类型包含两个字段，分别是元素类型 "),_,s(" 和 数组大小 "),f,s("，这两个字段共同构成了数组类型，而当前数组是否应该在堆栈中初始化也在编译期就确定了。")]),y,n("p",null,[s("两种不同的声明方式会导致编译器做出完全不同的处理，若使用第一种方式 "),x,s(" ，那么变量的类型在编译进行到 [类型检查](// TODO:) 阶段就会被提取出来，随后使用 "),n("a",w,[T,a(t)]),s(" 创建包含数组大小的 "),n("a",I,[A,a(t)]),s(" 结构体。")]),n("p",null,[s("当我们使用 "),R,s(" 的方式声明数组时，编译器会在 "),n("a",N,[S,a(t)]),s(" 函数中对该数组的大小进行推导：")]),L,n("p",null,[s("这个删减后的 "),n("a",O,[E,a(t)]),s(" 会调用 "),n("a",P,[q,a(t)]),s(" 通过遍历元素的方式来计算数组中元素的数量。")]),C,G,n("p",null,[s("对于一个由字面量组成的数组，根据数组元素数量的不同，编译器会在负责初始化字面量的 "),n("a",B,[D,a(t)]),s(" 函数中做两种不同的优化：")]),Y,n("p",null,[s("当数组的元素数量"),F,s("时，"),n("a",K,[V,a(t)]),s(" 会负责在函数编译之前将 "),X,s(" 转换成更加原始的语句：")]),z,n("p",null,[s("当数组中元素的个数小于或等于 4 个并且 "),n("a",j,[M,a(t)]),s(" 函数接收的 "),U,s(" 是 "),$,s(" 时，上述代码会将原有的初始化语句 "),H,s(" 拆分成一个声明变量的表达式和几个赋值表达式，这些表达式会完成对数组的初始化：")]),J,n("p",null,[s("但是如果当前数组的元素大于 4 个，"),n("a",Z,[Q,a(t)]),s(" 会先获取一个唯一的 "),W,s("，然后调用 "),n("a",nn,[sn,a(t)]),s(" 函数在静态存储区初始化数组中的元素并将临时变量赋值给数组：")]),an,a(p,null,{default:o(()=>[tn]),_:1}),n("p",null,[s("数组访问越界是"),en,s("的错误，Go 语言可以在编译期间的静态类型检查判断数组越界，"),n("a",pn,[on,a(t)]),s(" 会验证访问数组的索引：")]),cn,n("p",null,[s("Go 语言运行时在发现数组、切片和字符串的越界操作会由运行时的 "),n("a",ln,[un,a(t)]),s(" 和 "),n("a",rn,[dn,a(t)]),s(" 触发程序的运行时错误并导致崩溃退出：")]),kn,n("p",null,[s("编译器会将 "),vn,s(" 指令转换成上面提到的 "),n("a",mn,[bn,a(t)]),s(" 函数，当数组下标没有越界时，编译器会先获取数组的内存地址和访问的下标，利用 "),gn,s(" 计算出目标元素地址，最后用 "),hn,s(" 操作将指针中的元素加载到内存中。")]),_n,n("p",null,[s("数组是 Go 语言中重要的数据结构，对数组的访问和赋值需要同时依赖"),fn,s("和"),yn,s("，大多数操作会在[编译期间](// TODO:)转换成直接读写内存，在中间代码生成期间，编译器还会插入运行时方法 "),n("a",xn,[wn,a(t)]),s(" 调用防止发生越界错误。")]),Tn,n("ul",null,[n("li",null,[n("a",In,[s("Arrays, slices (and strings): The mechanics of ‘append’"),a(t)])]),n("li",null,[n("a",An,[s("Array vs Slice: accessing speed"),a(t)])])]),Rn,n("ol",null,[n("li",null,[n("a",Nn,[s("Go 语言设计与实现"),a(t)])])])])}const Pn=i(r,[["render",Sn],["__file","03.1.html.vue"]]);export{Pn as default};
