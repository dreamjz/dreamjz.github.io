import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as e,H as l}from"./framework-d03928c9.js";const i={},u=e('<p>系统监控是 Go 语言运行时的重要组成部分，它会每隔一段时间检查 Go 语言运行时，确保程序没有进入异常状态。</p><h2 id="_6-7-1-设计原理" tabindex="-1"><a class="header-anchor" href="#_6-7-1-设计原理" aria-hidden="true">#</a> 6.7.1 设计原理</h2><p>在支持多任务的操作系统中，守护进程是在后台运行的计算机程序，不会由用户直接操作，一般会在操作系统启动时自动运行。</p><p>Go 语言的系统监控在内部启动了一个不会中止的循环，在循环的内部会轮询网络、抢占长期运行或者处于系统调用的 Goroutine 以及触发垃圾回收，通过这些行为，能够让系统的运行状态变得更健康。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310030209450.png" alt="golang-system-monitor" tabindex="0" loading="lazy"><figcaption>golang-system-monitor</figcaption></figure><h2 id="_6-7-2-监控循环" tabindex="-1"><a class="header-anchor" href="#_6-7-2-监控循环" aria-hidden="true">#</a> 6.7.2 监控循环</h2>',6),r={href:"https://draveness.me/golang/tree/runtime.main",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"runtime.main",-1),d=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> GOARCH <span class="token operator">!=</span> <span class="token string">&quot;wasm&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">newm</span><span class="token punctuation">(</span>sysmon<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m={href:"https://draveness.me/golang/tree/runtime.newm",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.newm",-1),b={href:"https://draveness.me/golang/tree/runtime.m",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"runtime.m",-1),_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newm</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _p_ <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mp <span class="token operator">:=</span> <span class="token function">allocm</span><span class="token punctuation">(</span>_p_<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>nextp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>
	mp<span class="token punctuation">.</span>sigmask <span class="token operator">=</span> initSigmask
	<span class="token operator">...</span>
	<span class="token function">newm1</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h={href:"https://draveness.me/golang/tree/runtime.newm1",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"runtime.newm1",-1),y={href:"https://draveness.me/golang/tree/runtime.newosproc",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.newosproc",-1),x=n("code",null,"clone",-1),G={href:"https://draveness.me/golang/tree/runtime.mstart",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"runtime.mstart",-1),S=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newosproc</span><span class="token punctuation">(</span>mp <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stk <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi<span class="token punctuation">)</span>
	<span class="token keyword">var</span> oset sigset
	<span class="token function">sigprocmask</span><span class="token punctuation">(</span>_SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sigset_all<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oset<span class="token punctuation">)</span>
	ret <span class="token operator">:=</span> <span class="token function">clone</span><span class="token punctuation">(</span>cloneFlags<span class="token punctuation">,</span> stk<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">funcPC</span><span class="token punctuation">(</span>mstart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">sigprocmask</span><span class="token punctuation">(</span>_SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oset<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={href:"https://draveness.me/golang/tree/runtime.m",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.m",-1),T={href:"https://draveness.me/golang/tree/runtime.sysmon",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"runtime.sysmon",-1),C=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sched<span class="token punctuation">.</span>nmsys<span class="token operator">++</span>
	<span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	lasttrace <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	idle <span class="token operator">:=</span> <span class="token number">0</span>
	delay <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> idle <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			delay <span class="token operator">=</span> <span class="token number">20</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> idle <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token punctuation">{</span>
			delay <span class="token operator">*=</span> <span class="token number">2</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> delay <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">{</span>
			delay <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span>
		<span class="token punctuation">}</span>
		<span class="token function">usleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E={href:"https://draveness.me/golang/tree/runtime.checkdead",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"runtime.checkdead",-1),I=n("code",null,"usleep",-1),U=e('<ul><li>初始的休眠时间是 20μs；</li><li>最长的休眠时间是 10ms；</li><li>当系统监控在 50 个循环中都没有唤醒 Goroutine 时，休眠时间在每个循环都会倍增；</li></ul><p>当程序趋于稳定之后，系统监控的触发时间就会稳定在 10ms。它除了会检查死锁之外，还会在循环中完成以下的工作：</p><ul><li>运行计时器 — 获取下一个需要被触发的计时器；</li><li>轮询网络 — 获取需要处理的到期文件描述符；</li><li>抢占处理器 — 抢占运行时间较长的或者处于系统调用的 Goroutine；</li><li>垃圾回收 — 在满足条件时触发垃圾收集回收内存；</li></ul><h3 id="检查死锁" tabindex="-1"><a class="header-anchor" href="#检查死锁" aria-hidden="true">#</a> 检查死锁</h3>',4),V={href:"https://draveness.me/golang/tree/runtime.checkdead",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.checkdead",-1),B=e(`<ol><li>检查是否存在正在运行的线程；</li><li>检查是否存在正在运行的 Goroutine；</li><li>检查处理器上是否存在计时器；</li></ol><p>函数首先会检查 Go 语言运行时中正在运行的线程数量，通过调度器中的多个字段计算该值的结果：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> run0 <span class="token builtin">int32</span>
	run <span class="token operator">:=</span> <span class="token function">mcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmidle <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmidlelocked <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmsys
	<span class="token keyword">if</span> run <span class="token operator">&gt;</span> run0 <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> run <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: checkdead: nmidle=&quot;</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmidle<span class="token punctuation">,</span> <span class="token string">&quot; nmidlelocked=&quot;</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmidlelocked<span class="token punctuation">,</span> <span class="token string">&quot; mcount=&quot;</span><span class="token punctuation">,</span> <span class="token function">mcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot; nmsys=&quot;</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmsys<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;checkdead: inconsistent counts&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z={href:"https://draveness.me/golang/tree/runtime.mcount",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"runtime.mcount",-1),K=n("li",null,[n("code",null,"nmidle"),s(" 是处于空闲状态的线程数量；")],-1),M=n("li",null,[n("code",null,"nmidlelocked"),s(" 是处于锁定状态的线程数量；")],-1),R=n("li",null,[n("code",null,"nmsys"),s(" 是处于系统调用的线程数量；")],-1),F=e(`<p>对于正在运行的线程数：</p><ol><li>如果线程数量大于 0，说明当前程序不存在死锁</li><li>如果线程数小于 0，说明当前程序的状态不一致</li><li>如果线程数等于 0，需要进一步检查程序的运行状态</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	grunning <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>allgs<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		gp <span class="token operator">:=</span> allgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token function">isSystemGoroutine</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		s <span class="token operator">:=</span> <span class="token function">readgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
		<span class="token keyword">switch</span> s <span class="token operator">&amp;^</span> _Gscan <span class="token punctuation">{</span>
		<span class="token keyword">case</span> _Gwaiting<span class="token punctuation">,</span> _Gpreempted<span class="token punctuation">:</span>
			grunning<span class="token operator">++</span>
		<span class="token keyword">case</span> _Grunnable<span class="token punctuation">,</span> _Grunning<span class="token punctuation">,</span> _Gsyscall<span class="token punctuation">:</span>
			<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: checkdead: find g &quot;</span><span class="token punctuation">,</span> gp<span class="token punctuation">.</span>goid<span class="token punctuation">,</span> <span class="token string">&quot; in status &quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
			<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;checkdead: runnable g&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>allglock<span class="token punctuation">)</span>
	<span class="token keyword">if</span> grunning <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;no goroutines (main called runtime.Goexit) - deadlock!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当运行时存在等待的 Goroutine 并且不存在正在运行的 Goroutine 时，检查处理器中存在的计时器：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> _p_ <span class="token operator">:=</span> <span class="token keyword">range</span> allp <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>timers<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;all goroutines are asleep - deadlock!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果处理器中存在等待的计时器，那么所有的 Goroutine 陷入休眠状态是合理的，不过如果不存在等待的计时器，运行时会直接报错并退出程序。</p><h3 id="运行计时器" tabindex="-1"><a class="header-anchor" href="#运行计时器" aria-hidden="true">#</a> 运行计时器</h3>`,7),O={href:"https://draveness.me/golang/tree/runtime.nanotime",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime.nanotime",-1),$={href:"https://draveness.me/golang/tree/runtime.timeSleepUntil",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"runtime.timeSleepUntil",-1),J=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		now <span class="token operator">:=</span> <span class="token function">nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		next<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">timeSleepUntil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> debug<span class="token punctuation">.</span>schedtrace <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sched<span class="token punctuation">.</span>gcwaiting <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>npidle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">uint32</span><span class="token punctuation">(</span>gomaxprocs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
			<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>gcwaiting<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>npidle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">uint32</span><span class="token punctuation">(</span>gomaxprocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> next <span class="token operator">&gt;</span> now <span class="token punctuation">{</span>
					atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>sysmonwait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
					<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
					sleep <span class="token operator">:=</span> forcegcperiod <span class="token operator">/</span> <span class="token number">2</span>
					<span class="token keyword">if</span> next<span class="token operator">-</span>now <span class="token operator">&lt;</span> sleep <span class="token punctuation">{</span>
						sleep <span class="token operator">=</span> next <span class="token operator">-</span> now
					<span class="token punctuation">}</span>
					<span class="token operator">...</span>
					<span class="token function">notetsleep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>sysmonnote<span class="token punctuation">,</span> sleep<span class="token punctuation">)</span>
					<span class="token operator">...</span>
					now <span class="token operator">=</span> <span class="token function">nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					next<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">timeSleepUntil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
					atomic<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>sysmonwait<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
					<span class="token function">noteclear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>sysmonnote<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				idle <span class="token operator">=</span> <span class="token number">0</span>
				delay <span class="token operator">=</span> <span class="token number">20</span>
			<span class="token punctuation">}</span>
			<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> next <span class="token operator">&lt;</span> now <span class="token punctuation">{</span>
			<span class="token function">startm</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q=n("code",null,"forcegcperiod",-1),W={href:"https://draveness.me/golang/tree/runtime.notesleep",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"runtime.notesleep",-1),Y={href:"https://draveness.me/golang/tree/runtime.noteclear",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.noteclear",-1),sn=e(`<p>如果在这之后发现下一个计时器需要触发的时间小于当前时间，说明所有的线程可能正在忙于运行 Goroutine，系统监控会启动新的线程来触发计时器，避免计时器的到期时间有较大的偏差。</p><h3 id="轮询网络" tabindex="-1"><a class="header-anchor" href="#轮询网络" aria-hidden="true">#</a> 轮询网络</h3><p>如果上一次轮询网络已经过去了 10ms，那么系统监控还会在循环中轮询网络，检查是否有待执行的文件描述符：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		lastpoll <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">Load64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">netpollinited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastpoll <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lastpoll<span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">&lt;</span> now <span class="token punctuation">{</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>
			list <span class="token operator">:=</span> <span class="token function">netpoll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
				<span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),an={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"runtime.netpoll",-1),en={href:"https://draveness.me/golang/tree/runtime.injectglist",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.injectglist",-1),on=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">injectglist</span><span class="token punctuation">(</span>glist <span class="token operator">*</span>gList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> glist<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">var</span> n <span class="token builtin">int</span>
	<span class="token keyword">for</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">!</span>glist<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		gp <span class="token operator">:=</span> glist<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Gwaiting<span class="token punctuation">,</span> _Grunnable<span class="token punctuation">)</span>
		<span class="token function">globrunqput</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sched<span class="token punctuation">.</span>npidle <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token function">startm</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span>glist <span class="token operator">=</span> gList<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),cn=n("code",null,"_Gwaiting",-1),ln=n("code",null,"_Grunnable",-1),un={href:"https://draveness.me/golang/tree/runtime.startm",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"runtime.startm",-1),kn=n("h3",{id:"抢占处理器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#抢占处理器","aria-hidden":"true"},"#"),s(" 抢占处理器")],-1),dn={href:"https://draveness.me/golang/tree/runtime.retake",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"runtime.retake",-1),vn={href:"https://draveness.me/golang/tree/runtime.sysmontick",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.sysmontick",-1),gn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> sysmontick <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	schedtick   <span class="token builtin">uint32</span>
	schedwhen   <span class="token builtin">int64</span>
	syscalltick <span class="token builtin">uint32</span>
	syscallwhen <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_n={href:"https://draveness.me/golang/tree/runtime.retake",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"runtime.retake",-1),fn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">retake</span><span class="token punctuation">(</span>now <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>allp<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		_p_ <span class="token operator">:=</span> allp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		pd <span class="token operator">:=</span> <span class="token operator">&amp;</span>_p_<span class="token punctuation">.</span>sysmontick
		s <span class="token operator">:=</span> _p_<span class="token punctuation">.</span>status
		<span class="token keyword">if</span> s <span class="token operator">==</span> _Prunning <span class="token operator">||</span> s <span class="token operator">==</span> _Psyscall <span class="token punctuation">{</span>
			t <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>schedtick<span class="token punctuation">)</span>
			<span class="token keyword">if</span> pd<span class="token punctuation">.</span>schedwhen<span class="token operator">+</span>forcePreemptNS <span class="token operator">&lt;=</span> now <span class="token punctuation">{</span>
				<span class="token function">preemptone</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> s <span class="token operator">==</span> _Psyscall <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token function">runqempty</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>nmspinning<span class="token punctuation">)</span><span class="token operator">+</span>atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>npidle<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>syscallwhen<span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">&gt;</span> now <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_p_<span class="token punctuation">.</span>status<span class="token punctuation">,</span> s<span class="token punctuation">,</span> _Pidle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				n<span class="token operator">++</span>
				_p_<span class="token punctuation">.</span>syscalltick<span class="token operator">++</span>
				<span class="token function">handoffp</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">uint32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yn=n("code",null,"_Prunning",-1),wn=n("code",null,"_Psyscall",-1),xn={href:"https://draveness.me/golang/tree/runtime.preemptone",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"runtime.preemptone",-1),qn=n("code",null,"_Psyscall",-1),Sn={href:"https://draveness.me/golang/tree/runtime.handoffp",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime.handoffp",-1),Ln=n("ol",null,[n("li",null,"当处理器的运行队列不为空或者不存在空闲处理器时"),n("li",null,"当系统调用时间超过了 10ms 时")],-1),Tn=n("p",null,"系统监控通过在循环中抢占处理器来避免同一个 Goroutine 占用线程太长时间造成饥饿问题。",-1),jn=n("h3",{id:"垃圾回收",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#垃圾回收","aria-hidden":"true"},"#"),s(" 垃圾回收")],-1),Cn={href:"https://draveness.me/golang/tree/runtime.sysmon",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"runtime.sysmon",-1),Nn={href:"https://draveness.me/golang/tree/runtime.gcTrigger",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.gcTrigger",-1),Un={href:"https://draveness.me/golang/tree/runtime.gcTrigger.test",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"runtime.gcTrigger.test",-1),An=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> t <span class="token operator">:=</span> <span class="token punctuation">(</span>gcTrigger<span class="token punctuation">{</span>kind<span class="token punctuation">:</span> gcTriggerTime<span class="token punctuation">,</span> now<span class="token punctuation">:</span> now<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>idle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
			forcegc<span class="token punctuation">.</span>idle <span class="token operator">=</span> <span class="token number">0</span>
			<span class="token keyword">var</span> list gList
			list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>forcegc<span class="token punctuation">.</span>g<span class="token punctuation">)</span>
			<span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
			<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要触发垃圾回收，会将用于垃圾回收的 Goroutine 加入全局队列，让调度器选择合适的处理器去执行。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,3),Bn={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sysmon/",target:"_blank",rel:"noopener noreferrer"};function zn(Hn,Kn){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("当 Go 语言程序启动时，运行时会在第一个 Goroutine 中调用 "),n("a",r,[k,t(a)]),s(" 启动主程序，该函数会在系统栈中创建新的线程：")]),d,n("p",null,[n("a",m,[v,t(a)]),s(" 会创建一个存储待执行函数和处理器的新结构体 "),n("a",b,[g,t(a)]),s("。运行时执行系统监控不需要处理器，系统监控的 Goroutine 会直接在创建的线程上运行：")]),_,n("p",null,[n("a",h,[f,t(a)]),s(" 会调用特定平台的 "),n("a",y,[w,t(a)]),s(" 通过系统调用 "),x,s(" 创建一个新的线程并在新的线程中执行 "),n("a",G,[q,t(a)]),s("：")]),S,n("p",null,[s("在新创建的线程中，会执行存储在 "),n("a",P,[L,t(a)]),s(" 中的 "),n("a",T,[j,t(a)]),s(" 启动系统监控：")]),C,n("p",null,[s("当调用上述函数时，会先通过 "),n("a",E,[N,t(a)]),s(" 检查是否存在死锁，然后进入核心的监控循环；系统监控在每次循环开始时都会通过 "),I,s(" 挂起当前线程，该函数的参数是微秒，运行时会遵循以下的规则决定休眠时间：")]),U,n("p",null,[s("系统监控通过 "),n("a",V,[A,t(a)]),s(" 检查运行时是否发生了死锁，可以将检查死锁的过程分成以下三个步骤：")]),B,n("ol",null,[n("li",null,[n("a",z,[H,t(a)]),s(" 根据下一个待创建的线程 id 和释放的线程数得到系统中存在的线程数；")]),K,M,R]),F,n("p",null,[s("在系统监控的循环中，通过 "),n("a",O,[Z,t(a)]),s(" 和 "),n("a",$,[D,t(a)]),s(" 获取当前时间和计时器下一次需要唤醒的时间；当前调度器需要执行垃圾回收或者所有处理器都处于闲置状态时，如果没有需要触发的计时器，那么系统监控可以暂时陷入休眠：")]),J,n("p",null,[s("休眠的时间会依据强制 GC 的周期 "),Q,s(" 和计时器下次触发的时间确定，"),n("a",W,[X,t(a)]),s(" 会使用信号量同步系统监控即将进入休眠的状态。")]),n("p",null,[s("当系统监控被唤醒之后，会重新计算当前时间和下一个计时器需要触发的时间、调用 "),n("a",Y,[nn,t(a)]),s(" 通知系统监控被唤醒并重置休眠的间隔。")]),sn,n("p",null,[s("函数会非阻塞地调用 "),n("a",an,[tn,t(a)]),s(" 检查待执行的文件描述符并通过 "),n("a",en,[pn,t(a)]),s(" 将所有处于就绪状态的 Goroutine 加入全局运行队列中：")]),on,n("p",null,[s("该函数会将所有 Goroutine 的状态从 "),cn,s(" 切换至 "),ln,s(" 并加入全局运行队列等待运行，如果当前程序中存在空闲的处理器，会通过 "),n("a",un,[rn,t(a)]),s(" 启动线程来执行这些任务。")]),kn,n("p",null,[s("系统监控会在循环中调用 "),n("a",dn,[mn,t(a)]),s(" 抢占处于运行或者系统调用中的处理器，该函数会遍历运行时的全局处理器，每个处理器都存储了一个 "),n("a",vn,[bn,t(a)]),s("：")]),gn,n("p",null,[s("该结构体中的四个字段分别存储了处理器的调度次数、处理器上次调度时间、系统调用的次数以及系统调用的时间。"),n("a",_n,[hn,t(a)]),s(" 的循环包含了两种不同的抢占逻辑：")]),fn,n("ol",null,[n("li",null,[s("当处理器处于 "),yn,s(" 或者 "),wn,s(" 状态时，如果上一次触发调度的时间已经过去了 10ms，会通过 "),n("a",xn,[Gn,t(a)]),s(" 抢占当前处理器；")]),n("li",null,[s("当处理器处于 "),qn,s(" 状态时，在满足以下两种情况下会调用 "),n("a",Sn,[Pn,t(a)]),s(" 让出处理器的使用权： "),Ln])]),Tn,jn,n("p",null,[s("系统监控还会决定是否需要触发强制垃圾回收，"),n("a",Cn,[En,t(a)]),s(" 会构建 "),n("a",Nn,[In,t(a)]),s(" 并调用 "),n("a",Un,[Vn,t(a)]),s(" 方法判断是否需要触发垃圾回收：")]),An,n("ol",null,[n("li",null,[n("a",Bn,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sysmon/"),t(a)])])])])}const Rn=p(i,[["render",zn],["__file","06.7.sysmon.html.vue"]]);export{Rn as default};
