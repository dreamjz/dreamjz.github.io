import{_ as p,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as i}from"./framework-09afcf0b.js";const l={},u=e(`<p>Golang 的字符串是一个只读的字节数组.</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309241111311.png" alt="in-memory-string" tabindex="0" loading="lazy"><figcaption>in-memory-string</figcaption></figure><p>若代码中存在字符串，编译器会将其标记成<strong>只读数据</strong><code>SRODATA</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s :<span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
	println<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token builtin class-name">set</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows<span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64<span class="token operator">&amp;&amp;</span> go tool compile <span class="token parameter variable">-S</span> main.go
<span class="token punctuation">..</span>.
gclocals·g2BeySu+wFnoycgXfElmcg<span class="token operator">==</span> SRODATA dupok <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">8</span>
        0x0000 01 00 00 00 00 00 00 00                          <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-4-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_3-4-1-数据结构" aria-hidden="true">#</a> 3.4.1 数据结构</h2>`,5),r={href:"https://draveness.me/golang/tree/reflect.StringHeader",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"reflect.StringHeader",-1),k=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-4-2-解析过程" tabindex="-1"><a class="header-anchor" href="#_3-4-2-解析过程" aria-hidden="true">#</a> 3.4.2 解析过程</h2>`,2),v={href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-lexer-and-parser/",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>Golang 可以使用两种方式声明字符串：</p><ul><li>标准字符串，使用双引号，只能用于<strong>单行</strong>初始化</li><li>原始字符串，使用反引号，可用于<strong>多行</strong></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s1 <span class="token operator">:=</span> <span class="token string">&quot;abcd&quot;</span>
s2 <span class="token operator">:=</span> <span class="token string">\`abcd
efg\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准字符串解析" tabindex="-1"><a class="header-anchor" href="#标准字符串解析" aria-hidden="true">#</a> 标准字符串解析</h3>`,4),b={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"cmd/compile/internal/syntax.scanner",-1),f={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner.stdString",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cmd/compile/internal/syntax.scanner.stdString",-1),_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>scanner<span class="token punctuation">)</span> <span class="token function">stdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">startLit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		r <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">getr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">&#39;&quot;&#39;</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">&#39;\\\\&#39;</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token char">&#39;&quot;&#39;</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">ungetr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			s<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;newline in string&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">errh</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>line<span class="token punctuation">,</span> s<span class="token punctuation">.</span>col<span class="token punctuation">,</span> <span class="token string">&quot;string not terminated&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>nlsemi <span class="token operator">=</span> <span class="token boolean">true</span>
	s<span class="token punctuation">.</span>lit <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">stopLit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>kind <span class="token operator">=</span> StringLit
	s<span class="token punctuation">.</span>tok <span class="token operator">=</span> _Literal
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要逻辑：</p><ul><li>标准字串使用<strong>双引号</strong>表示开头与结尾</li><li>标准字符串使用<code>\\</code>来转义双引号</li><li>标准字符串不能出现隐式换行<code>\\n</code>(备注：隐式换行的是出现了换行符，而不是显式的使用<code>\\n</code>)</li></ul><h3 id="原始字符串解析" tabindex="-1"><a class="header-anchor" href="#原始字符串解析" aria-hidden="true">#</a> 原始字符串解析</h3>`,4),y={href:"https://draveness.me/golang/tree/cmd/compile/internal/syntax.scanner.rawString",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"cmd/compile/internal/syntax.scanner.rawString",-1),x=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>scanner<span class="token punctuation">)</span> <span class="token function">rawString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">startLit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		r <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">getr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">&#39;\`&#39;</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">errh</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>line<span class="token punctuation">,</span> s<span class="token punctuation">.</span>col<span class="token punctuation">,</span> <span class="token string">&quot;string not terminated&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>nlsemi <span class="token operator">=</span> <span class="token boolean">true</span>
	s<span class="token punctuation">.</span>lit <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">stopLit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>kind <span class="token operator">=</span> StringLit
	s<span class="token punctuation">.</span>tok <span class="token operator">=</span> _Literal
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=n("code",null,"StringLit",-1),q={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.noder.basicLit",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"cmd/compile/internal/gc.noder.basicLit",-1),O=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>noder<span class="token punctuation">)</span> <span class="token function">basicLit</span><span class="token punctuation">(</span>lit <span class="token operator">*</span>syntax<span class="token punctuation">.</span>BasicLit<span class="token punctuation">)</span> Val <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> s <span class="token operator">:=</span> lit<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> lit<span class="token punctuation">.</span>Kind <span class="token punctuation">{</span>
	<span class="token keyword">case</span> syntax<span class="token punctuation">.</span>StringLit<span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\`&#39;</span> <span class="token punctuation">{</span>
			s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		u<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Unquote</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
		<span class="token keyword">return</span> Val<span class="token punctuation">{</span>U<span class="token punctuation">:</span> u<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={href:"https://draveness.me/golang/tree/strconv.Unquote",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"strconv.Unquote",-1),D=n("h2",{id:"_3-4-3-拼接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-3-拼接","aria-hidden":"true"},"#"),s(" 3.4.3 拼接")],-1),A=n("code",null,"+",-1),B=n("code",null,"OADD",-1),R=n("code",null,"OADDSTR",-1),G={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"cmd/compile/internal/gc.walkexpr",-1),V={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.addstr",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"cmd/compile/internal/gc.addstr",-1),I=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">case</span> OADDSTR<span class="token punctuation">:</span>
		n <span class="token operator">=</span> <span class="token function">addstr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.addstr",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"cmd/compile/internal/gc.addstr",-1),E=n("li",null,[s("字符串数量"),n("strong",null,"小于等于 5 个"),s("，使用"),n("code",null,"concatstring2/3/4/5"),s("等系列函数")],-1),U=n("strong",null,"大于 5",-1),j={href:"https://draveness.me/golang/tree/runtime.concatstrings",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"runtime.concatstrings",-1),F=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">addstr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	buf <span class="token operator">:=</span> <span class="token function">nodnil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	args <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span>buf<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n2 <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		args <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token function">conv</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TSTRING<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> fn <span class="token builtin">string</span>
	<span class="token keyword">if</span> c <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">{</span>
		fn <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;concatstring%d&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fn <span class="token operator">=</span> <span class="token string">&quot;concatstrings&quot;</span>

		t <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewSlice</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>TSTRING<span class="token punctuation">]</span><span class="token punctuation">)</span>
		slice <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OCOMPLIT<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">typenod</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
		slice<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">{</span>buf<span class="token punctuation">,</span> slice<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	cat <span class="token operator">:=</span> <span class="token function">syslook</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
	r <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OCALL<span class="token punctuation">,</span> cat<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
	<span class="token operator">...</span>

	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K=n("code",null,"concatstring{2,3,4,5}",-1),M={href:"https://draveness.me/golang/tree/runtime.concatstrings",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"runtime.concatstrings",-1),Z=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	idx <span class="token operator">:=</span> <span class="token number">0</span>
	l <span class="token operator">:=</span> <span class="token number">0</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		l <span class="token operator">+=</span> n
		count<span class="token operator">++</span>
		idx <span class="token operator">=</span> i
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">stringDataOnStack</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">rawstringtmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> l<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
		b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若<strong>非空字符串</strong>数量<strong>为 1</strong>并且字符串<strong>不在栈</strong>上，则<strong>直接返回</strong>该字符串，不做任何操作。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250106198.png" alt="string-concat-and-copy" tabindex="0" loading="lazy"><figcaption>string-concat-and-copy</figcaption></figure><p><strong>正常情况</strong>下将会使用<code>copy</code>将多个字符串<strong>拷贝</strong>到目标字符串所在的内存空间，新字符串是一段<strong>新内存空间</strong>，若需要拼接的字符串非常大，会造成大量的性能损耗。</p><h2 id="_3-4-4-类型转换" tabindex="-1"><a class="header-anchor" href="#_3-4-4-类型转换" aria-hidden="true">#</a> 3.4.4 类型转换</h2><h3 id="字节数组-字符串" tabindex="-1"><a class="header-anchor" href="#字节数组-字符串" aria-hidden="true">#</a> 字节数组 -&gt; 字符串</h3>`,6),J={href:"https://draveness.me/golang/tree/runtime.slicebytetostring",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"runtime.slicebytetostring",-1),W=e(`<p>对于<code>string(bytes)</code>，该函数在函数体中会先处理两种比较常见的情况，长度为 0 或者 1 的字节数组。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicebytetostring</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token function">stringStructOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>str <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>staticbytes<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">stringStructOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> p unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">if</span> buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">stringStructOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>str <span class="token operator">=</span> p
	<span class="token function">stringStructOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>slice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>array<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Y={href:"https://draveness.me/golang/tree/runtime.stringStructOf",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"runtime.stringStructOf",-1),sn={href:"https://draveness.me/golang/tree/runtime.stringStruct",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"runtime.stringStruct",-1),tn=n("code",null,"str",-1),en=n("code",null,"len",-1),pn={href:"https://draveness.me/golang/tree/runtime.memmove",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.memmove",-1),cn=n("code",null,"[]byte",-1),ln=n("h3",{id:"字符串-字节数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字符串-字节数组","aria-hidden":"true"},"#"),s(" 字符串 -> 字节数组")],-1),un=n("code",null,"[]byte",-1),rn={href:"https://draveness.me/golang/tree/runtime.stringtoslicebyte",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"runtime.stringtoslicebyte",-1),kn=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">stringtoslicebyte</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	<span class="token keyword">if</span> buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span>buf <span class="token operator">=</span> tmpBuf<span class="token punctuation">{</span><span class="token punctuation">}</span>
		b <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		b <span class="token operator">=</span> <span class="token function">rawbyteslice</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会根据是否传入缓冲区做出不同的处理：</p>`,2),vn=n("li",null,[s("当传入缓冲区时，它会使用传入的缓冲区存储 "),n("code",null,"[]byte"),s("；")],-1),mn={href:"https://draveness.me/golang/tree/runtime.rawbyteslice",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.rawbyteslice",-1),gn=e('<figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309250113603.png" alt="string-bytes-conversion" tabindex="0" loading="lazy"><figcaption>string-bytes-conversion</figcaption></figure><h2 id="_3-4-5-小结" tabindex="-1"><a class="header-anchor" href="#_3-4-5-小结" aria-hidden="true">#</a> 3.4.5 小结</h2><p>Golang 的字符串是<strong>只读</strong>的。</p><p>字符串<strong>拼接</strong>和<strong>类型转换</strong>要注意<strong>性能损耗</strong>，在需要极致性能的场景要尽量减少类型转换的次数。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',5),fn={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-string/",target:"_blank",rel:"noopener noreferrer"};function hn(_n,yn){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("字符串在运行时，使用 "),n("a",r,[d,t(a)]),s(" 结构表示：")]),k,n("p",null,[s("解析器会在"),n("a",v,[s("词法分析"),t(a)]),s("阶段解析字符串，词法分析阶段会对源文件中的字符串进行切片和分组，将原有无意义的字符流转换成 Token 序列。")]),m,n("p",null,[n("a",b,[g,t(a)]),s(" 会将输入的字符串转换成 Token 流，"),n("a",f,[h,t(a)]),s(" 方法用来解析使用双引号的标准字符串：")]),_,n("p",null,[n("a",y,[w,t(a)]),s(" 会将非反引号的所有字符都划分到当前字符串的范围中，所以我们可以使用它支持复杂的多行字符串：")]),x,n("p",null,[s("字符串解析后被标记成"),S,s("并传递到语法分析阶段，字符串相关的表达式都会由 "),n("a",q,[L,t(a)]),s(" 方法处理：")]),O,n("p",null,[n("a",N,[T,t(a)]),s("会将字符串进行还原，去除引号。")]),D,n("p",null,[s("Golang 字符串拼接使用 "),A,s("运算符，编译器会将"),B,s("转换成"),R,s("类型的节点，然后在"),n("a",G,[z,t(a)]),s(" 中调用 "),n("a",V,[H,t(a)]),s(" 函数生成用于拼接字符串的代码：")]),I,n("p",null,[s("其中"),n("a",P,[C,t(a)]),s("会选择适合的函数进行拼接：")]),n("ul",null,[E,n("li",null,[s("字符串数量"),U,s(" 个，使用"),n("a",j,[$,t(a)]),s(" 传入一个数组切片")])]),F,n("p",null,[s("无论使用 "),K,s(" 中的哪一个，最终都会调用 "),n("a",M,[X,t(a)]),s("，它会先对遍历传入的切片参数，再过滤空字符串并计算拼接后字符串的长度。")]),Z,n("p",null,[s("从字节数组到字符串的转换需要使用 "),n("a",J,[Q,t(a)]),s(" 函数。")]),W,n("p",null,[s("处理完之后会根据传入的缓冲区大小决定是否需要为新字符串分配一片内存空间，"),n("a",Y,[nn,t(a)]),s(" 会将传入的字符串指针转换成 "),n("a",sn,[an,t(a)]),s(" 结构体指针，然后设置结构体持有的字符串指针 "),tn,s(" 和长度 "),en,s("，最后通过 "),n("a",pn,[on,t(a)]),s(" 将原 "),cn,s(" 中的字节全部复制到新的内存空间中。")]),ln,n("p",null,[s("将字符串转换成 "),un,s(" 类型时，需要使用 "),n("a",rn,[dn,t(a)]),s(" 函数：")]),kn,n("ul",null,[vn,n("li",null,[s("当没有传入缓冲区时，运行时会调用 "),n("a",mn,[bn,t(a)]),s(" 创建新的字节切片并将字符串中的内容拷贝过去")])]),gn,n("ol",null,[n("li",null,[n("a",fn,[s("https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-string/"),t(a)])])])])}const xn=p(l,[["render",hn],["__file","03.4.string.html.vue"]]);export{xn as default};
