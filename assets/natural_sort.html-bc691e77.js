import{_ as e,Z as o,$ as c,a0 as n,a1 as s,a2 as t,a4 as p,H as i}from"./framework-d03928c9.js";const l={},u=n("h2",{id:"_1-problem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-problem","aria-hidden":"true"},"#"),s(" 1. Problem")],-1),r={href:"https://github.com/dreamjz/gomdtoc",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"sort.Strings()",-1),d=p(`<p>But it not working as I expected, the problem is: it sorts the names <strong>alphabetically</strong>.</p><p>Suppose we have a list like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ab abc1 abc01 abc2 abc5 abc10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After sorting by <code>sort.Strings()</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ab abc01 abc1 abc10 abc2 abc5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>abc2</code> should be placed before <code>abc10</code>, this is not expected, I want it sorted naturally.</p><h2 id="_2-natual-sort-order" tabindex="-1"><a class="header-anchor" href="#_2-natual-sort-order" aria-hidden="true">#</a> 2. Natual Sort Order</h2>`,7),v={href:"https://en.wikipedia.org/wiki/Natural_sort_order",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"natural sort order",-1),m=n("strong",null,"natural sorting",-1),g={href:"https://en.wikipedia.org/wiki/Collation",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.wikipedia.org/wiki/Alphabetical_order",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"_3-implementations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-implementations","aria-hidden":"true"},"#"),s(" 3. Implementations")],-1),y={href:"https://github.com/dreamjz/golang-notes/blob/main/blog/natural-sort/natural_sort.go",target:"_blank",rel:"noopener noreferrer"},w=p(`<h3 id="_3-1-using-regular-expression-to-separate-number-string" tabindex="-1"><a class="header-anchor" href="#_3-1-using-regular-expression-to-separate-number-string" aria-hidden="true">#</a> 3.1 Using regular expression to separate number/string</h3><p>The first thing that comes to my mind is using <code>regexp</code> to separate number and string.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NaturalLess03</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	pStr1 <span class="token operator">:=</span> <span class="token function">processWithRegexp</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
	pStr2 <span class="token operator">:=</span> <span class="token function">processWithRegexp</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
	minLen <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pStr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pStr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minLen<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		e1 <span class="token operator">:=</span> pStr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		e2 <span class="token operator">:=</span> pStr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">if</span> e1 <span class="token operator">==</span> e2 <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		ei1<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>
		ei2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span>

		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> err1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> ei1 <span class="token operator">!=</span> ei2<span class="token punctuation">:</span>
			<span class="token keyword">return</span> ei1 <span class="token operator">&lt;</span> ei2
		<span class="token keyword">case</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> e1 <span class="token operator">&lt;</span> e2
		<span class="token keyword">case</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token keyword">case</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">processWithRegexp</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	reg <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">\`\\d+|\\D+\`</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">FindAllString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-using-pointer-index-to-separate-number-string" tabindex="-1"><a class="header-anchor" href="#_3-2-using-pointer-index-to-separate-number-string" aria-hidden="true">#</a> 3.2 Using pointer/index to separate number/string</h3><p>The approach is the same as above, but we use the index to separate number and string.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NaturalLess02</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	pStr1 <span class="token operator">:=</span> <span class="token function">processStr</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
	pStr2 <span class="token operator">:=</span> <span class="token function">processStr</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
	minLen <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pStr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pStr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minLen<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		e1 <span class="token operator">:=</span> pStr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		e2 <span class="token operator">:=</span> pStr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">if</span> e1 <span class="token operator">==</span> e2 <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		ei1<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>
		ei2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span>

		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> err1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> ei1 <span class="token operator">!=</span> ei2<span class="token punctuation">:</span>
			<span class="token keyword">return</span> ei1 <span class="token operator">&lt;</span> ei2
		<span class="token keyword">case</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> e1 <span class="token operator">&lt;</span> e2
		<span class="token keyword">case</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token keyword">case</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">processStr</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> processedStr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
		j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span>

		<span class="token keyword">for</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		processedStr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>processedStr<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>

		i <span class="token operator">=</span> j
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> processedStr
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>b <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-using-pointer-index-without-separating-number-string-recommended" tabindex="-1"><a class="header-anchor" href="#_3-3-using-pointer-index-without-separating-number-string-recommended" aria-hidden="true">#</a> 3.3 Using pointer/index without separating number/string (Recommended)</h3><p>This approach compares rune-by-rune, without separating numbers or strings.</p>`,8),_={href:"https://github.com/fvbommel/sortorder/blob/main/natsort.go",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NaturalLess01</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	idx1<span class="token punctuation">,</span> idx2 <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
	<span class="token keyword">for</span> idx1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> idx2 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c1<span class="token punctuation">,</span> c2 <span class="token operator">:=</span> str1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span>
		dig1<span class="token punctuation">,</span> dig2 <span class="token operator">:=</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>

		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> dig1 <span class="token operator">!=</span> dig2<span class="token punctuation">:</span> <span class="token comment">// Digits before other characters</span>
			<span class="token keyword">return</span> dig1
		<span class="token keyword">case</span> <span class="token operator">!</span>dig1<span class="token punctuation">:</span> <span class="token comment">// &amp;&amp; !dig2</span>
			<span class="token keyword">if</span> c1 <span class="token operator">!=</span> c2 <span class="token punctuation">{</span>
				<span class="token keyword">return</span> c1 <span class="token operator">&lt;</span> c2
			<span class="token punctuation">}</span>
			idx1<span class="token operator">++</span>
			idx2<span class="token operator">++</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// Digits</span>
            <span class="token comment">// Eat zeros</span>
			<span class="token keyword">for</span> <span class="token punctuation">;</span> idx1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span> idx1<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">for</span> <span class="token punctuation">;</span> idx2 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span> idx2<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
            <span class="token comment">// Eat all digits</span>
			nonZero1<span class="token punctuation">,</span> nonZero2 <span class="token operator">:=</span> idx1<span class="token punctuation">,</span> idx2
			<span class="token keyword">for</span> <span class="token punctuation">;</span> idx1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx1<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">for</span> <span class="token punctuation">;</span> idx2 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx2<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
            <span class="token comment">// If lengths of numbers with non-zero prefix differ, the shorter</span>
			<span class="token comment">// one is less.</span>
			<span class="token keyword">if</span> len1<span class="token punctuation">,</span> len2 <span class="token operator">:=</span> idx1<span class="token operator">-</span>nonZero1<span class="token punctuation">,</span> idx2<span class="token operator">-</span>nonZero2<span class="token punctuation">;</span> len1 <span class="token operator">!=</span> len2 <span class="token punctuation">{</span>
				<span class="token keyword">return</span> len1 <span class="token operator">&lt;</span> len2
			<span class="token punctuation">}</span>
            <span class="token comment">// If they&#39;re equally long, string comparison is correct.</span>
			<span class="token keyword">if</span> nr1<span class="token punctuation">,</span> nr2 <span class="token operator">:=</span> str1<span class="token punctuation">[</span>nonZero1<span class="token punctuation">:</span>idx1<span class="token punctuation">]</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span>nonZero2<span class="token punctuation">:</span>idx2<span class="token punctuation">]</span><span class="token punctuation">;</span> nr1 <span class="token operator">!=</span> nr2 <span class="token punctuation">{</span>
				<span class="token keyword">return</span> nr1 <span class="token operator">&lt;</span> nr2
			<span class="token punctuation">}</span>
            <span class="token comment">// Otherwise, the one with less zeros is less.</span>
			<span class="token comment">// Because everything up to the number is equal, comparing the index</span>
			<span class="token comment">// after the zeros is sufficient.</span>
			<span class="token keyword">if</span> nonZero1 <span class="token operator">!=</span> nonZero2 <span class="token punctuation">{</span>
				<span class="token keyword">return</span> nonZero1 <span class="token operator">&lt;</span> nonZero2
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    	<span class="token comment">// So far they are identical. At least one is ended. If the other continues,</span>
	<span class="token comment">// it sorts last.</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-simple-test" tabindex="-1"><a class="header-anchor" href="#_3-4-simple-test" aria-hidden="true">#</a> 3.4 Simple test</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> PrintFormat <span class="token operator">=</span> <span class="token string">&quot;%-25s: %v\\n&quot;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	strs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc1&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;abc01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc2&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;abc5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc10&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>PrintFormat<span class="token punctuation">,</span> <span class="token string">&quot;Origin&quot;</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
	<span class="token keyword">var</span> strs00<span class="token punctuation">,</span> strs01<span class="token punctuation">,</span> strs02<span class="token punctuation">,</span> strs03 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	strs00 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	strs01 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	strs02 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	strs03 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token function">copy</span><span class="token punctuation">(</span>strs00<span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
	sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>strs00<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>PrintFormat<span class="token punctuation">,</span> <span class="token string">&quot;Sort by stdsorter&quot;</span><span class="token punctuation">,</span> strs00<span class="token punctuation">)</span>

	<span class="token function">copy</span><span class="token punctuation">(</span>strs01<span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>strs01<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NaturalLess01</span><span class="token punctuation">(</span>strs01<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs01<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>PrintFormat<span class="token punctuation">,</span> <span class="token string">&quot;Sort by NaturalLess01&quot;</span><span class="token punctuation">,</span> strs01<span class="token punctuation">)</span>

	<span class="token function">copy</span><span class="token punctuation">(</span>strs02<span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>strs02<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NaturalLess02</span><span class="token punctuation">(</span>strs02<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs02<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>PrintFormat<span class="token punctuation">,</span> <span class="token string">&quot;Sort by NaturalLess02&quot;</span><span class="token punctuation">,</span> strs02<span class="token punctuation">)</span>

	<span class="token function">copy</span><span class="token punctuation">(</span>strs03<span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>strs03<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NaturalLess03</span><span class="token punctuation">(</span>strs03<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs03<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>PrintFormat<span class="token punctuation">,</span> <span class="token string">&quot;Sort by NaturalLess03&quot;</span><span class="token punctuation">,</span> strs03<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Origin                   : [ab abc1 abc01 abc2 abc5 abc10]
Sort by stdsorter        : [ab abc01 abc1 abc10 abc2 abc5]
Sort by NaturalLess01    : [ab abc1 abc01 abc2 abc5 abc10]
Sort by NaturalLess02    : [ab abc1 abc01 abc2 abc5 abc10]
Sort by NaturalLess03    : [ab abc1 abc01 abc2 abc5 abc10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-benchmark" tabindex="-1"><a class="header-anchor" href="#_4-benchmark" aria-hidden="true">#</a> 4. Benchmark</h2><h3 id="_4-1-generate-test-set" tabindex="-1"><a class="header-anchor" href="#_4-1-generate-test-set" aria-hidden="true">#</a> 4.1 Generate test set</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> generator <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	src <span class="token operator">*</span>rand<span class="token punctuation">.</span>Rand
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>generator<span class="token punctuation">)</span> <span class="token function">NexInt</span><span class="token punctuation">(</span>max <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>generator<span class="token punctuation">)</span> <span class="token function">NextString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	strlen <span class="token operator">:=</span> g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>
	numlen <span class="token operator">:=</span> g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
	numpos <span class="token operator">:=</span> g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>strlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> num <span class="token builtin">string</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numlen<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		num <span class="token operator">+=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">==</span> numpos <span class="token punctuation">{</span>
			str <span class="token operator">+=</span> num
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			str <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token function">rune</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> str
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testSet</span><span class="token punctuation">(</span>seed <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	gen <span class="token operator">:=</span> <span class="token operator">&amp;</span>generator<span class="token punctuation">{</span>
		src<span class="token punctuation">:</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	n <span class="token operator">:=</span> <span class="token number">1000</span>
	<span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		n <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>
	set <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>
		strings <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> strings <span class="token punctuation">{</span>
			strings<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">NextString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		set<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> set
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-benchmark" tabindex="-1"><a class="header-anchor" href="#_4-2-benchmark" aria-hidden="true">#</a> 4.2 Benchmark</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkStdStringSort00</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	set <span class="token operator">:=</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
	arr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>
			b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
			b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkNaturalStringSort01</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	set <span class="token operator">:=</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
	arr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>
			<span class="token comment">// Resetting the test set to be unsorted does not count.</span>
			b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
			b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token function">NaturalLess01</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkNaturalStringSort02</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	set <span class="token operator">:=</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
	arr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>
			<span class="token comment">// Resetting the test set to be unsorted does not count.</span>
			b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
			b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token function">NaturalLess02</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkNaturalStringSort03</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	set <span class="token operator">:=</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
	arr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>
			<span class="token comment">// Resetting the test set to be unsorted does not count.</span>
			b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
			b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token function">NaturalLess03</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Start test:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;.&#39;</span> <span class="token parameter variable">-benchmem</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/image-20230514102501124.png" alt="image-20230514102501124" tabindex="0" loading="lazy"><figcaption>image-20230514102501124</figcaption></figure><p>As above, the <code>NaturalLess01</code> is the most efficient approach.</p><p>However, the approach that uses <code>regexp</code> even timed out 😂.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,15),S={href:"https://github.com/fvbommel/sortorder/blob/main/natsort.go",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/facette/natsort/blob/master/natsort.go",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.miigon.net/posts/how-to-sort-file-names-naturally/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://en.wikipedia.org/wiki/Natural_sort_order",target:"_blank",rel:"noopener noreferrer"},L={href:"https://groups.google.com/g/golang-nuts/c/Puy4TQ20G2w",target:"_blank",rel:"noopener noreferrer"};function I(T,B){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("I recently wrote a tool "),n("a",r,[s("gomdtoc"),t(a)]),s(" to generate a Table of Contents for my notes directory. In order to sort the file names, I used the "),k,s(".")]),d,n("p",null,[n("a",v,[s("Natual Sort Order"),t(a)])]),n("blockquote",null,[n("p",null,[s("In computing, "),b,s(" (or "),m,s(") is the "),n("a",g,[s("ordering of strings"),t(a)]),s(" in "),n("a",f,[s("alphabetical order"),t(a)]),s(', except that multi-digit numbers are treated atomically, i.e., as if they were a single character. Natural sort order has been promoted as being more human-friendly ("natural") than machine-oriented, pure alphabetical sort order.')])]),h,n("p",null,[s("For the full code see "),n("a",y,[s("https://github.com/dreamjz/golang-notes/blob/main/blog/natural-sort/natural_sort.go"),t(a)])]),w,n("p",null,[s("Code from "),n("a",_,[s("https://github.com/fvbommel/sortorder/blob/main/natsort.go"),t(a)])]),x,n("ol",null,[n("li",null,[n("a",S,[s("https://github.com/fvbommel/sortorder/blob/main/natsort.go"),t(a)])]),n("li",null,[n("a",N,[s("https://github.com/facette/natsort/blob/master/natsort.go"),t(a)])]),n("li",null,[n("a",q,[s("https://blog.miigon.net/posts/how-to-sort-file-names-naturally/"),t(a)])]),n("li",null,[n("a",j,[s("https://en.wikipedia.org/wiki/Natural_sort_order"),t(a)])]),n("li",null,[n("a",L,[s("https://groups.google.com/g/golang-nuts/c/Puy4TQ20G2w"),t(a)])])])])}const R=e(l,[["render",I],["__file","natural_sort.html.vue"]]);export{R as default};
