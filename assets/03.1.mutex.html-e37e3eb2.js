import{_ as a,Z as t,$ as p,a0 as n,a1 as o,a2 as e,a4 as c,H as l}from"./framework-d03928c9.js";const i={},u=c(`<h2 id="_1-互斥锁和读写锁" tabindex="-1"><a class="header-anchor" href="#_1-互斥锁和读写锁" aria-hidden="true">#</a> 1. 互斥锁和读写锁</h2><h3 id="_1-1-互斥锁-sync-mutex" tabindex="-1"><a class="header-anchor" href="#_1-1-互斥锁-sync-mutex" aria-hidden="true">#</a> 1.1 互斥锁(sync.Mutex)</h3><p>互斥即不可同时运行。即使用了互斥锁的两个代码片段互相排斥，只有其中一个代码片段执行完成后，另一个才能执行。</p><p>Go 标准库中提供了 sync.Mutex 互斥锁类型及其两个方法：</p><ol><li>Lock 加锁</li><li>Unlock 释放锁</li></ol><p>通过在临界区前调用 Lock 方法，在代码后调用 Unlock 方法来保证一段代码的互斥执行，也可以用 defer 语句来保证互斥锁一定会被解锁。</p><p>在一个 Go 协程调用 Lock 方法获得锁后，其他请求锁的协程都会阻塞在 Lock 方法，直到锁被释放。</p><h3 id="_1-2-读写锁-sync-rwmutex" tabindex="-1"><a class="header-anchor" href="#_1-2-读写锁-sync-rwmutex" aria-hidden="true">#</a> 1.2 读写锁(sync.RWMutex)</h3><p>多读单写锁 (multiple readers, single writer lock)，简称读写锁，读写锁分为读锁和写锁，<strong>读锁</strong>是<strong>允许同时</strong>执行的，但<strong>写锁</strong>是<strong>互斥</strong>的。一般来说，有如下几种情况：</p><ol><li>读锁之间不互斥，没有写锁的情况下，读锁是无阻塞的，多个协程可以同时获得读锁</li><li>写锁之间是互斥的，存在写锁，其他写锁阻塞</li><li>写锁与读锁是互斥的，如果存在读锁，写锁阻塞，如果存在写锁，读锁阻塞</li></ol><p>Go 标准库中提供了 sync.RWMutex 互斥锁类型及其四个方法：</p><ol><li>Lock 加写锁</li><li>Unlock 释放写锁</li><li>RLock 加读锁</li><li>RUnlock 释放读锁</li></ol><p>读写锁的存在是为了解决<strong>读多写少</strong>时的性能问题，读场景较多时，读写锁可有效地减少锁阻塞的时间。</p><h2 id="_2-性能比较" tabindex="-1"><a class="header-anchor" href="#_2-性能比较" aria-hidden="true">#</a> 2. 性能比较</h2><p>接下来，测试三种情景下，互斥锁和读写锁的性能差异。</p><ul><li>读多写少(读占 90%)</li><li>读少写多(读占 10%)</li><li>读写一致(各占 50%)</li></ul><h3 id="_2-1-测试用例" tabindex="-1"><a class="header-anchor" href="#_2-1-测试用例" aria-hidden="true">#</a> 2.1 测试用例</h3><p>实现 2 个结构体 <code>Lock</code> 和 <code>RWLock</code>，并且都继承 <code>RW</code> 接口。</p><p><code>RW</code> 接口中定义了 2 个操作，读(Read)和写(Write)，为了降低其他指令对测试的影响，假定每个读写操作耗时 1 微秒。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> RW <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> cost <span class="token operator">=</span> time<span class="token punctuation">.</span>Nanosecond

<span class="token keyword">type</span> Lock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count <span class="token builtin">int</span>
	mu    sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Lock<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	l<span class="token punctuation">.</span>count<span class="token operator">++</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>
	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Lock<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>count
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>
	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> RWLock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count <span class="token builtin">int</span>
	mu    sync<span class="token punctuation">.</span>RWMutex
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWLock<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rw<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	rw<span class="token punctuation">.</span>count<span class="token operator">++</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>
	rw<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWLock<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rw<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>count
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>
	rw<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-benchmark" tabindex="-1"><a class="header-anchor" href="#_2-2-benchmark" aria-hidden="true">#</a> 2.2 Benchmark</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">,</span> rw RW<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
		<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> read<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>
			wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				rw<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> write<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>
			wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				rw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkLockReadMore</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Lock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkLockReadMoreRW</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RWLock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkLockWriteMore</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Lock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkLockWriteMoreRW</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RWLock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkLockEqual</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Lock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkLockEqualRW</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchLock</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RWLock<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkLockReadMore-8               28          50612442 ns/op          115039 B/op       2026 allocs/op
BenchmarkLockReadMoreRW-8            188           7211384 ns/op          112240 B/op       2003 allocs/op
BenchmarkLockWriteMore-8              22          46486533 ns/op          115538 B/op       2037 allocs/op
BenchmarkLockWriteMoreRW-8            24          45870117 ns/op          115189 B/op       2034 allocs/op
BenchmarkLockEqual-8                  26          55572988 ns/op          115529 B/op       2037 allocs/op
BenchmarkLockEqualRW-8                68          24956568 ns/op          112778 B/op       2008 allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>RW 9 : 1 时，读写锁是互斥锁约 8 倍</li><li>RW 1 : 9 时，两个差不多</li><li>RW 5 : 5 时，读写锁约为互斥锁 3 倍</li></ul><h3 id="_2-3-改变操作时间" tabindex="-1"><a class="header-anchor" href="#_2-3-改变操作时间" aria-hidden="true">#</a> 2.3 改变操作时间</h3><p>若将 <code>cost</code> 改为 0.1 微秒：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkLockReadMore-8              846           1260106 ns/op          113234 B/op       2013 allocs/op
BenchmarkLockReadMoreRW-8           1988            602413 ns/op          112259 B/op       2003 allocs/op
BenchmarkLockWriteMore-8             810           1278744 ns/op          112762 B/op       2008 allocs/op
BenchmarkLockWriteMoreRW-8           784           1290452 ns/op          113024 B/op       2011 allocs/op
BenchmarkLockEqual-8                1092           1250835 ns/op          113073 B/op       2012 allocs/op
BenchmarkLockEqualRW-8              1179            962714 ns/op          112864 B/op       2009 allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>RW 9 : 1 时，读写锁是互斥锁约 2 倍</li><li>RW 1 : 9 时，两个差不多</li><li>RW 5 : 5 时，读写锁约为互斥锁差不多</li></ul><p>因为操作时间降低了，互斥锁和读写锁的差距变小。</p><p>若将时间改为 10 微秒：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkLockReadMore-8                5         294074710 ns/op          132860 B/op       2175 allocs/op
BenchmarkLockReadMoreRW-8             50          29552382 ns/op          112582 B/op       2006 allocs/op
BenchmarkLockWriteMore-8               5         257616520 ns/op          128147 B/op       2169 allocs/op
BenchmarkLockWriteMoreRW-8             5         308358619 ns/op          123408 B/op       2119 allocs/op
BenchmarkLockEqual-8                   5         256004831 ns/op          132006 B/op       2175 allocs/op
BenchmarkLockEqualRW-8                10         135650405 ns/op          116502 B/op       2047 allocs/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时差距将会变大。</p><h2 id="_3-互斥锁如何实现公平" tabindex="-1"><a class="header-anchor" href="#_3-互斥锁如何实现公平" aria-hidden="true">#</a> 3. 互斥锁如何实现公平</h2><p>互斥锁有两种状态：<strong>正常状态</strong>和<strong>饥饿状态</strong>。</p><p>在正常状态下，所有等待锁的 goroutine 按照FIFO顺序等待。唤醒的 goroutine 不会直接拥有锁，而是会和新请求锁的 goroutine 竞争锁的拥有。新请求锁的 goroutine 具有优势：它正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 goroutine 会加入到等待队列的前面。 如果一个等待的 goroutine 超过 1ms 没有获取锁，那么它将会把锁转变为饥饿模式。</p><p>在饥饿模式下，锁的所有权将从 unlock 的 goroutine 直接交给交给等待队列中的第一个。新来的 goroutine 将不会尝试去获得锁，即使锁看起来是 unlock 状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。</p><p>如果一个等待的 goroutine 获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。</p><p>正常状态有很好的性能表现，饥饿模式也是非常重要的，因为它能阻止尾部延迟的现象。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,39),k={href:"https://geektutu.com/post/hpg-mutex.html",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",k,[o("https://geektutu.com/post/hpg-mutex.html"),e(s)])])])])}const b=a(i,[["render",r],["__file","03.1.mutex.html.vue"]]);export{b as default};
