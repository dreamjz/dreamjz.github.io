const e=JSON.parse('{"key":"v-54d5c69c","path":"/reading/golang/7-days-golang/04-GeeRPC/04.6.load_balance.html","title":"6. 负载均衡","lang":"zh-CN","frontmatter":{"title":"6. 负载均衡","date":"2023-10-12T00:00:00.000Z","category":["golang"],"article":false},"headers":[{"level":2,"title":"1. 负载均衡策略","slug":"_1-负载均衡策略","link":"#_1-负载均衡策略","children":[]},{"level":2,"title":"2. 服务发现","slug":"_2-服务发现","link":"#_2-服务发现","children":[]},{"level":2,"title":"3. 支持负载均衡的客户端","slug":"_3-支持负载均衡的客户端","link":"#_3-支持负载均衡的客户端","children":[]},{"level":2,"title":"4. Demo","slug":"_4-demo","link":"#_4-demo","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1699943615000},"readingTime":{"minutes":5.13,"words":1540},"filePathRelative":"reading/golang/7-days-golang/04-GeeRPC/04.6.load_balance.md","localizedDate":"2023年10月12日","excerpt":"<p><a href=\\"https://github.com/dreamjz/golang-notes/tree/main/books/7-days-golang/GeeRPC/day6-load-balance\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">day6-load-balance</a></p>\\n<h2> 1. 负载均衡策略</h2>\\n<p>假设有多个服务实例，每个实例提供相同的功能，为了提高整个系统的吞吐量，每个实例部署在不同的机器上。客户端需要使用负载均衡策略来选择目标服务器，常见的策略：</p>\\n<ul>\\n<li>随机选择策略 - 从服务列表中随机选择一个。</li>\\n<li>轮询算法(Round Robin) - 依次调度不同的服务器，每次调度执行 i = (i + 1) mode n。</li>\\n<li>加权轮询(Weight Round Robin) - 在轮询算法的基础上，为每个服务实例设置一个权重，高性能的机器赋予更高的权重，也可以根据服务实例的当前的负载情况做动态的调整，例如考虑最近5分钟部署服务器的 CPU、内存消耗情况。</li>\\n<li>哈希/一致性哈希策略 - 依据请求的某些特征，计算一个 hash 值，根据 hash 值将请求发送到对应的机器。一致性 hash 还可以解决服务实例动态添加情况下，调度抖动的问题。一致性哈希的一个典型应用场景是分布式缓存服务。</li>\\n<li>...</li>\\n</ul>"}');export{e as data};
