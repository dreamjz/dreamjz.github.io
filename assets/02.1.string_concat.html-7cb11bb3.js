import{_ as a,Z as p,$ as t,a0 as n,a1 as e,a2 as o,a4 as c,H as l}from"./framework-d03928c9.js";const r={},i=c(`<h2 id="_1-string" tabindex="-1"><a class="header-anchor" href="#_1-string" aria-hidden="true">#</a> 1. String</h2><p>Goalang 中的 string 是只读类型，字符串的拼接实际上会创建新字符串再将内容进行拷贝，若存在大量的拼接操作，会对性能产生严重影响。</p><h3 id="_1-1-拼接方式" tabindex="-1"><a class="header-anchor" href="#_1-1-拼接方式" aria-hidden="true">#</a> 1.1 拼接方式</h3><p>首先定义一个随机生成字符串的函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> letterBytes <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>

<span class="token keyword">func</span> <span class="token function">randomString</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> letterBytes<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>letterBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 备注：原书使用固定的 byte 数组</span>
<span class="token comment">// 我偏向于使用动态计算</span>

<span class="token keyword">func</span> <span class="token function">getLetter</span><span class="token punctuation">(</span>seed <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genStr</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> seed <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		buf <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token function">getLetter</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用 <code>+</code></h4><p>将传入的字符串拼接 <code>n</code>次</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatStrUsingAdd</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		str <span class="token operator">+=</span> str
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> str
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-fmt-sprintf" tabindex="-1"><a class="header-anchor" href="#使用-fmt-sprintf" aria-hidden="true">#</a> 使用 <code>fmt.Sprintf</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatStrUsingSprintf</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> res <span class="token builtin">string</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		res <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> str<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-strings-builder" tabindex="-1"><a class="header-anchor" href="#使用-strings-builder" aria-hidden="true">#</a> 使用 <code>strings.Builder</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatStrUsingStringsBuilder</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> sb strings<span class="token punctuation">.</span>Builder
	sb<span class="token punctuation">.</span><span class="token function">Grow</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 预设置 cap，减少内存分配次数</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		sb<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-bytes-buffer" tabindex="-1"><a class="header-anchor" href="#使用-bytes-buffer" aria-hidden="true">#</a> 使用 <code>bytes.Buffer</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatStrUsingBuffer</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer
	buf<span class="token punctuation">.</span><span class="token function">Grow</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 预设 cap，减少内存分配次数</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-byte" tabindex="-1"><a class="header-anchor" href="#使用-byte" aria-hidden="true">#</a> 使用 <code>[]byte</code></h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatStrUsingByteSlice</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">*</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 预设 cap，减少内存分配次数</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		buf <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> str<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-benchmark" tabindex="-1"><a class="header-anchor" href="#_1-2-benchmark" aria-hidden="true">#</a> 1.2. Benchmark</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkPlusConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> plusConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkSprintfConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> sprintfConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkBuilderConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> builderConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkBufferConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> bufferConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkByteConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> byteConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">BenchmarkPreByteConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmark</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> preByteConcat<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// 备注：原书使用多个函数单独测试</span>
<span class="token comment">// 我偏向于使用单个函数测试不同形式</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkStrConcat</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		f    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingAddOperator&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> concatStrUsingAdd<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingSprintf&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> concatStrUsingSprintf<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingStringsBuilder&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> concatStrUsingStringsBuilder<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingBuffer&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> concatStrUsingBuffer<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;UsingByteSlice&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> concatStrUsingByteSlice<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> <span class="token punctuation">(</span>
		StrLen <span class="token builtin">int</span>   <span class="token operator">=</span> <span class="token number">10</span>
		Seed   <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">47</span>
	<span class="token punctuation">)</span>

	<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> k <span class="token operator">*=</span> <span class="token number">10</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
			b<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%-20s_%.0e&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				str <span class="token operator">:=</span> <span class="token function">genStr</span><span class="token punctuation">(</span>StrLen<span class="token punctuation">,</span> Seed<span class="token punctuation">)</span>
				b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
					tt<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> str<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			k <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____0e<span class="token operator">+</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">494569014</span>                <span class="token number">2.250</span> ns<span class="token operator">/</span>op           <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________0e<span class="token operator">+</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">486077326</span>                <span class="token number">2.260</span> ns<span class="token operator">/</span>op           <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__0e<span class="token operator">+</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">326929956</span>                <span class="token number">3.748</span> ns<span class="token operator">/</span>op           <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________0e<span class="token operator">+</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">185873576</span>                <span class="token number">6.491</span> ns<span class="token operator">/</span>op           <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______0e<span class="token operator">+</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">195677515</span>                <span class="token number">6.060</span> ns<span class="token operator">/</span>op           <span class="token number">0</span> B<span class="token operator">/</span>op          <span class="token number">0</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____1e<span class="token operator">+</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>                 <span class="token number">2450439</span>               <span class="token number">519.6</span> ns<span class="token operator">/</span>op           <span class="token number">600</span> B<span class="token operator">/</span>op          <span class="token number">9</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________1e<span class="token operator">+</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>                  <span class="token number">686652</span>              <span class="token number">1883</span> ns<span class="token operator">/</span>op             <span class="token number">920</span> B<span class="token operator">/</span>op         <span class="token number">29</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__1e<span class="token operator">+</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">11477025</span>                <span class="token number">90.15</span> ns<span class="token operator">/</span>op          <span class="token number">112</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________1e<span class="token operator">+</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>                 <span class="token number">7096644</span>               <span class="token number">168.8</span> ns<span class="token operator">/</span>op           <span class="token number">224</span> B<span class="token operator">/</span>op          <span class="token number">2</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______1e<span class="token operator">+</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>                <span class="token number">14244270</span>                <span class="token number">84.42</span> ns<span class="token operator">/</span>op          <span class="token number">112</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____1e<span class="token operator">+</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span>                   <span class="token number">51835</span>             <span class="token number">20830</span> ns<span class="token operator">/</span>op           <span class="token number">53480</span> B<span class="token operator">/</span>op         <span class="token number">99</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________1e<span class="token operator">+</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span>                   <span class="token number">32902</span>             <span class="token number">33453</span> ns<span class="token operator">/</span>op           <span class="token number">56723</span> B<span class="token operator">/</span>op        <span class="token number">299</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__1e<span class="token operator">+</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span>                 <span class="token number">1580265</span>               <span class="token number">686.8</span> ns<span class="token operator">/</span>op          <span class="token number">1024</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________1e<span class="token operator">+</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span>                  <span class="token number">959354</span>              <span class="token number">1191</span> ns<span class="token operator">/</span>op            <span class="token number">2048</span> B<span class="token operator">/</span>op          <span class="token number">2</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______1e<span class="token operator">+</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span>                 <span class="token number">1882011</span>               <span class="token number">648.2</span> ns<span class="token operator">/</span>op          <span class="token number">1024</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____1e<span class="token operator">+</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span>                     <span class="token number">864</span>           <span class="token number">1603599</span> ns<span class="token operator">/</span>op         <span class="token number">5320833</span> B<span class="token operator">/</span>op        <span class="token number">999</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________1e<span class="token operator">+</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span>                     <span class="token number">784</span>           <span class="token number">1734681</span> ns<span class="token operator">/</span>op         <span class="token number">5366883</span> B<span class="token operator">/</span>op       <span class="token number">3004</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__1e<span class="token operator">+</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span>                  <span class="token number">201326</span>              <span class="token number">6323</span> ns<span class="token operator">/</span>op           <span class="token number">10240</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________1e<span class="token operator">+</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span>                  <span class="token number">122440</span>              <span class="token number">9516</span> ns<span class="token operator">/</span>op           <span class="token number">20480</span> B<span class="token operator">/</span>op          <span class="token number">2</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______1e<span class="token operator">+</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span>                  <span class="token number">199574</span>              <span class="token number">6268</span> ns<span class="token operator">/</span>op           <span class="token number">10240</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____1e<span class="token operator">+</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">12</span>                       <span class="token number">8</span>         <span class="token number">152216050</span> ns<span class="token operator">/</span>op        <span class="token number">530997617</span> B<span class="token operator">/</span>op     <span class="token number">10021</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________1e<span class="token operator">+</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">12</span>                       <span class="token number">6</span>         <span class="token number">216692783</span> ns<span class="token operator">/</span>op        <span class="token number">832781652</span> B<span class="token operator">/</span>op     <span class="token number">33934</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__1e<span class="token operator">+</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">12</span>                   <span class="token number">21248</span>             <span class="token number">69425</span> ns<span class="token operator">/</span>op          <span class="token number">106496</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________1e<span class="token operator">+</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">12</span>                   <span class="token number">10000</span>            <span class="token number">114727</span> ns<span class="token operator">/</span>op          <span class="token number">212993</span> B<span class="token operator">/</span>op          <span class="token number">2</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______1e<span class="token operator">+</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">12</span>                   <span class="token number">20474</span>             <span class="token number">62842</span> ns<span class="token operator">/</span>op          <span class="token number">106496</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingAddOperator_____1e<span class="token operator">+</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span>                       <span class="token number">1</span>        <span class="token number">13100535200</span> ns<span class="token operator">/</span>op       <span class="token number">50399804616</span> B<span class="token operator">/</span>op          <span class="token number">101460</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingSprintf_________1e<span class="token operator">+</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span>                       <span class="token number">1</span>        <span class="token number">28859776900</span> ns<span class="token operator">/</span>op       <span class="token number">100690781320</span> B<span class="token operator">/</span>op         <span class="token number">452724</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingStringsBuilder__1e<span class="token operator">+</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span>                    <span class="token number">1777</span>            <span class="token number">639024</span> ns<span class="token operator">/</span>op         <span class="token number">1007621</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingBuffer__________1e<span class="token operator">+</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span>                    <span class="token number">1435</span>            <span class="token number">862125</span> ns<span class="token operator">/</span>op         <span class="token number">2015235</span> B<span class="token operator">/</span>op          <span class="token number">2</span> allocs<span class="token operator">/</span>op
BenchmarkStrConcat<span class="token operator">/</span>UsingByteSlice_______1e<span class="token operator">+</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span>                    <span class="token number">2058</span>            <span class="token number">585812</span> ns<span class="token operator">/</span>op         <span class="token number">1007622</span> B<span class="token operator">/</span>op          <span class="token number">1</span> allocs<span class="token operator">/</span>op

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出性能最好的是使用 <code>[]byte</code>和 <code>strings.Builder</code>。</p><h3 id="_1-3-推荐使用-strings-builder" tabindex="-1"><a class="header-anchor" href="#_1-3-推荐使用-strings-builder" aria-hidden="true">#</a> 1.3 推荐使用 <code>strings.Builder</code></h3><p>综合<strong>易用性</strong>和<strong>性能</strong>，使用<code>strings.Builder</code>拼接字符串是最好的选择。</p><blockquote><p>A Builder is used to efficiently build a string using Write methods. It minimizes memory copying.</p></blockquote><p>使用时若预先知道结果的长度，使用 <code>Grow</code> 预先分配内存，可以进一步提高性能，减少内存分配次数。</p><h2 id="_2-原理" tabindex="-1"><a class="header-anchor" href="#_2-原理" aria-hidden="true">#</a> 2. 原理</h2><h3 id="_2-1" tabindex="-1"><a class="header-anchor" href="#_2-1" aria-hidden="true">#</a> 2.1 <code>+</code></h3><p>因 Golang 中的 string 是不变的，使用<code>+</code>拼接时会重新申请新的内存空间，然后将拼接后的内容拷贝过去。</p><p>拼接的过程中会所需的内存空间会不断增加和累积，大量的拼接操作将导致性能急剧下降。</p><h3 id="_2-2-strings-builder-和-bytes-buffer" tabindex="-1"><a class="header-anchor" href="#_2-2-strings-builder-和-bytes-buffer" aria-hidden="true">#</a> 2.2 <code>strings.Builder</code> 和 <code>bytes.Buffer</code></h3><p>两者的底层都使用 <code>[]byte</code> 存储，但是最后转换成 string 时方式不同：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// strings.Builder</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// bytes.Buffer</span>
<span class="token keyword">func</span> <span class="token function">concatStrUsingBuffer</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer
	buf<span class="token punctuation">.</span><span class="token function">Grow</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 预设 cap，减少内存分配次数</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>strings.Builder</code>：将字节数组指针直接转换成字符串指针</li><li><code>bytes.Buffer</code>：则是使用显式的类型转换，会重新申请内存将字节数组内容拷贝过去</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,33),u={href:"https://geektutu.com/post/hpg-string-concat.html",target:"_blank",rel:"noopener noreferrer"};function k(d,b){const s=l("ExternalLinkIcon");return p(),t("div",null,[i,n("ol",null,[n("li",null,[n("a",u,[e("https://geektutu.com/post/hpg-string-concat.html"),o(s)])])])])}const v=a(r,[["render",k],["__file","02.1.string_concat.html.vue"]]);export{v as default};
