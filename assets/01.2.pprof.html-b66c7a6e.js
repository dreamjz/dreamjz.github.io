import{_ as t,Z as o,$ as c,a0 as n,a1 as s,a2 as p,a3 as e,H as l}from"./framework-09afcf0b.js";const i={},u=n("p",null,"Benchmark 可以用于测试某个函数的性能，若直到性能的瓶颈的位置，可以使用 benchmark 进行测试。",-1),r={href:"https://github.com/google/pprof",target:"_blank",rel:"noopener noreferrer"},k=e('<ol><li><code>runtime/pprof</code>包</li><li><code>go tool pprof</code> 工具</li></ol><h2 id="_1-性能分析类型" tabindex="-1"><a class="header-anchor" href="#_1-性能分析类型" aria-hidden="true">#</a> 1. 性能分析类型</h2><h3 id="_1-1-cpu-性能分析" tabindex="-1"><a class="header-anchor" href="#_1-1-cpu-性能分析" aria-hidden="true">#</a> 1.1 CPU 性能分析</h3><p>CPU 性能分析(CPU profiling) 是最常见的性能分析类型。</p><p>启动 CPU 分析时，运行时(runtime) 将每隔 10ms 中断一次，记录此时正在运行的协程(goroutines) 的堆栈信息。</p><p>程序运行结束后，可以分析记录的数据找到最热代码路径(hottest code paths)。</p>',6),d=n("p",null,"Compiler hot paths are code execution paths in the compiler in which most of the execution time is spent, and which are potentially executed very often.",-1),m={href:"https://english.stackexchange.com/questions/402436/whats-the-meaning-of-hot-codepath-or-hot-code-path",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>一个函数在性能分析数据中出现的次数越多，说明执行该函数的代码路径(code path)花费的时间占总运行时间的比重越大。</p><h3 id="_1-2-内存性能分析" tabindex="-1"><a class="header-anchor" href="#_1-2-内存性能分析" aria-hidden="true">#</a> 1.2 内存性能分析</h3><p>内存性能分析(Memory profiling) 记录堆内存分配时的堆栈信息，忽略栈内存分配信息。</p><p>内存性能分析启用时，默认每1000次采样1次，这个比例是可以调整的。因为内存性能分析是基于采样的，因此基于内存分析数据来判断程序所有的内存使用情况是很困难的。</p><h3 id="_1-3-阻塞性能分析" tabindex="-1"><a class="header-anchor" href="#_1-3-阻塞性能分析" aria-hidden="true">#</a> 1.3 阻塞性能分析</h3><p>阻塞性能分析(block profiling) 是 Go 特有的。</p><p>阻塞性能分析用来记录一个协程等待一个共享资源花费的时间。在判断程序的并发瓶颈时会很有用。阻塞的场景包括：</p><ul><li>在没有缓冲区的信道上发送或接收数据。</li><li>从空的信道上接收数据，或发送数据到满的信道上。</li><li>尝试获得一个已经被其他协程锁住的排它锁。</li></ul><p>一般情况下，当所有的 CPU 和内存瓶颈解决后，才会考虑这一类分析。</p><h3 id="_1-4-锁性能分析" tabindex="-1"><a class="header-anchor" href="#_1-4-锁性能分析" aria-hidden="true">#</a> 1.4 锁性能分析</h3><p>锁性能分析(mutex profiling) 与阻塞分析类似，但专注于因为锁竞争导致的等待或延时。</p><h2 id="_2-cpu-性能分析" tabindex="-1"><a class="header-anchor" href="#_2-cpu-性能分析" aria-hidden="true">#</a> 2. CPU 性能分析</h2><p>记录性能数据会对程序的性能产生影响，建议一次只记录一类数据。</p><h3 id="_2-1-生成-profile" tabindex="-1"><a class="header-anchor" href="#_2-1-生成-profile" aria-hidden="true">#</a> 2.1 生成 profile</h3><p>下例中，生成了5组数据并时使用冒泡排序：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">generate</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	nums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nums
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
				nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;cpu.pprof&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> 
	<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
	n <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		nums <span class="token operator">:=</span> <span class="token function">generate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		<span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
		n <span class="token operator">*=</span> <span class="token number">10</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>pprof.StartCPUProfile(f)</code>：开始CPU性能分析，并输出到文件中</li><li><code>defer pprof.StopCPUProfile()</code>：停止CPU性能分析</li></ul><h3 id="_2-2-分析数据" tabindex="-1"><a class="header-anchor" href="#_2-2-分析数据" aria-hidden="true">#</a> 2.2 分析数据</h3><p>使用 <code>go tool pprof </code>进行分析：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool pprof <span class="token parameter variable">-http</span><span class="token operator">=</span>:9999 cpu.pprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-http</code>：启动 web 服务查看</li></ul><p>也可以使用 CLI 查看:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool pprof cpu.pprof
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">7</span>.96s, <span class="token number">98.39</span>% of <span class="token number">8</span>.09s total
Dropped <span class="token number">31</span> nodes <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">0</span>.04s<span class="token punctuation">)</span>
      flat  flat%   sum%        cum   cum%
     <span class="token number">7</span>.94s <span class="token number">98.15</span>% <span class="token number">98.15</span>%      <span class="token number">7</span>.95s <span class="token number">98.27</span>%  high-performance-go/01-performance-analysis.bubbleSort <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>
     <span class="token number">0</span>.01s  <span class="token number">0.12</span>% <span class="token number">98.27</span>%      <span class="token number">0</span>.10s  <span class="token number">1.24</span>%  runtime.schedule
     <span class="token number">0</span>.01s  <span class="token number">0.12</span>% <span class="token number">98.39</span>%      <span class="token number">0</span>.05s  <span class="token number">0.62</span>%  runtime.startm
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">98.39</span>%      <span class="token number">7</span>.95s <span class="token number">98.27</span>%  high-performance-go/01-performance-analysis.Test_mainFunc
         <span class="token number">0</span>     <span class="token number">0</span>% <span class="token number">98.39</span>%      <span class="token number">7</span>.95s <span class="token number">98.27</span>%  high-performance-go/01-performance-analysis.mainFunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-内存性能分析" tabindex="-1"><a class="header-anchor" href="#_3-内存性能分析" aria-hidden="true">#</a> 3. 内存性能分析</h2><h3 id="_3-1-生成-profile" tabindex="-1"><a class="header-anchor" href="#_3-1-生成-profile" aria-hidden="true">#</a> 3.1 生成 profile</h3><p>下例中，生成长度为 N 的随机字符串，拼接在一起。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> letterBytes <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>

<span class="token keyword">func</span> <span class="token function">randomString</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> letterBytes<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>letterBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">concat</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;&quot;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		s <span class="token operator">+=</span> <span class="token function">randomString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> profile<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>MemProfile<span class="token punctuation">,</span> profile<span class="token punctuation">.</span><span class="token function">MemProfileRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用三方库来分析 <code>&quot;github.com/pkg/profile&quot;</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/pkg/profile&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> profile<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>MemProfile<span class="token punctuation">,</span> profile<span class="token punctuation">.</span><span class="token function">ProfilePath</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profile<span class="token punctuation">.</span><span class="token function">MemProfileRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-分析数据" tabindex="-1"><a class="header-anchor" href="#_3-2-分析数据" aria-hidden="true">#</a> 3.2 分析数据</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool pprof .<span class="token punctuation">\\</span>mem.pprof
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">608</span>.52kB, <span class="token number">99.60</span>% of <span class="token number">610</span>.98kB total
Dropped <span class="token number">45</span> nodes <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">3</span>.05kB<span class="token punctuation">)</span>
Showing <span class="token function">top</span> <span class="token number">10</span> nodes out of <span class="token number">37</span>
      flat  flat%   sum%        cum   cum%
  <span class="token number">524</span>.61kB <span class="token number">85.86</span>% <span class="token number">85.86</span>%   <span class="token number">551</span>.78kB <span class="token number">90.31</span>%  high-performance-go/01-performance-analysis.concat
   <span class="token number">21</span>.88kB  <span class="token number">3.58</span>% <span class="token number">89.44</span>%    <span class="token number">27</span>.17kB  <span class="token number">4.45</span>%  high-performance-go/01-performance-analysis.randomString
   <span class="token number">20</span>.65kB  <span class="token number">3.38</span>% <span class="token number">92.82</span>%    <span class="token number">20</span>.65kB  <span class="token number">3.38</span>%  unicode/utf16.Decode
   <span class="token number">18</span>.73kB  <span class="token number">3.07</span>% <span class="token number">95.89</span>%    <span class="token number">18</span>.73kB  <span class="token number">3.07</span>%  syscall.UTF16FromString
    <span class="token number">9</span>.64kB  <span class="token number">1.58</span>% <span class="token number">97.47</span>%    <span class="token number">26</span>.84kB  <span class="token number">4.39</span>%  internal/syscall/windows/registry.Key.ReadSubKeyNames
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 <code>concat</code> 消耗了 524k 内存，Go 语言字符串是不可变的，因为将两个字符串拼接时，相当于是产生新的字符串，如果当前的空间不足以容纳新的字符串，则会申请更大的空间，将新字符串完全拷贝过去，这消耗了 2 倍的内存空间。在这 100 次拼接的过程中，会产生多次字符串拷贝，从而消耗大量的内存。</p><h2 id="_4-benchmark-生成-profile" tabindex="-1"><a class="header-anchor" href="#_4-benchmark-生成-profile" aria-hidden="true">#</a> 4. benchmark 生成 profile</h2><p><code>testing</code> 支持生成 CPU、memory 和 block 的 profile 文件。</p><ul><li>-cpuprofile=$FILE</li><li>-memprofile=$FILE, -memprofilerate=N 调整记录速率为原来的 1/N。</li><li>-blockprofile=$FILE</li></ul><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// run fib(30) b.N times</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>go test</code> 添加 <code>-cpuprofile</code> 参数即可生成 <code>BenchmarkFib</code> 对应的 CPU profile 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span> <span class="token string">&#39;Fib&#39;</span> <span class="token parameter variable">-cpuprofile</span> <span class="token string">&#39;./cpu.pprof&#39;</span>
<span class="token punctuation">..</span>.
$ go tool pprof <span class="token parameter variable">-text</span> .<span class="token punctuation">\\</span>cpu.pprof
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">1</span>.03s, <span class="token number">100</span>% of <span class="token number">1</span>.03s total
      flat  flat%   sum%        cum   cum%
     <span class="token number">1</span>.01s <span class="token number">98.06</span>% <span class="token number">98.06</span>%      <span class="token number">1</span>.01s <span class="token number">98.06</span>%  high-performance-go/01-performance-analysis.fib
     <span class="token number">0</span>.01s  <span class="token number">0.97</span>% <span class="token number">99.03</span>%      <span class="token number">0</span>.01s  <span class="token number">0.97</span>%  runtime.pMask.read <span class="token punctuation">(</span>inline<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,40),v={href:"https://geektutu.com/post/hpg-pprof.html",target:"_blank",rel:"noopener noreferrer"};function f(h,g){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("若面对未知的程序则需要使用 pprof 来分析性能的瓶颈，"),n("a",r,[s("pprof"),p(a)]),s("包含两个部分：")]),k,n("blockquote",null,[d,n("p",null,[s("– "),n("a",m,[s("What’s the meaning of “hot codepath”"),p(a)])])]),b,n("ol",null,[n("li",null,[n("a",v,[s("https://geektutu.com/post/hpg-pprof.html"),p(a)])])])])}const y=t(i,[["render",f],["__file","01.2.pprof.html.vue"]]);export{y as default};
