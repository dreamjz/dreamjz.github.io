import{_ as o,Z as l,$ as p,a0 as n,a1 as e,a2 as s,a4 as t,H as i}from"./framework-d03928c9.js";const c={},r=t(`<p>This guide gets you started with gRPC in Go with a simple working example.</p><h2 id="_1-prerequisites" tabindex="-1"><a class="header-anchor" href="#_1-prerequisites" aria-hidden="true">#</a> 1. Prerequisites</h2><ul><li><p>Go</p></li><li><p>Protocol buffer compiler</p></li><li><p>Go plugins for the protocol compiler:</p><ol><li><p>Install the protocol compiler plugins for Go using the following commands:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token function">install</span> google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
$ go <span class="token function">install</span> google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Update your <code>PATH</code> so that the <code>protoc</code> compiler can find the plugins:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;PATH:<span class="token variable"><span class="token variable">$(</span>go <span class="token function">env</span> GOPATH<span class="token variable">)</span></span>/bin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li></ul><h2 id="_2-get-the-example-code" tabindex="-1"><a class="header-anchor" href="#_2-get-the-example-code" aria-hidden="true">#</a> 2. Get the example code</h2>`,4),d={href:"https://github.com/grpc/grpc-go",target:"_blank",rel:"noopener noreferrer"},u=t(`<ol><li><p>Download the repo as zip file and unzip it, or clone the repo:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> v1.41.0 https://github.com/grpc/grpc-go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Change to the quick start example directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> grpc-go/examples/helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_3-run-the-example" tabindex="-1"><a class="header-anchor" href="#_3-run-the-example" aria-hidden="true">#</a> 3. Run the example</h2><p>From the <code>examples/hellowrold</code> directory:</p><ol><li><p>Compile and execute the server code:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run greeter_server/main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>From the different terminal, compile and execute the client code to see the client output:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run greeter_client/main.go
Greeting: Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_4-update-the-grpc-service" tabindex="-1"><a class="header-anchor" href="#_4-update-the-grpc-service" aria-hidden="true">#</a> 4. Update the gRPC service</h2><p>In this section youâ€™ll update the application with an extra server method. The gRPC service is defined using protocol buffers. The server and client stub have a <code>SayHello()</code> RPC method that takes a <code>HelloRequest</code> parameter from the client and returns a <code>HelloReply</code> from the server, and that the method is defined like this:</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token comment">// The greeting service definition</span>
<span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
	<span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// The request message containing the user&#39;s name</span>
<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>
	<span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// The response message containing the greetings</span>
<span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>
	<span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Open <code>hellowordl/helloword.proto</code> and add a new <code>SayHelloAgain</code> method, with the same request and response types:</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token comment">// The greeting service definition</span>
<span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
	<span class="token comment">// Sends a greeting</span>
	<span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// Sends another greeting</span>
	<span class="token keyword">rpc</span> <span class="token function">SayHelloAgain</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-regenerate-grpc-code" tabindex="-1"><a class="header-anchor" href="#_5-regenerate-grpc-code" aria-hidden="true">#</a> 5. Regenerate gRPC code</h2><p>Before you can use the new service method, you need to recompile the updated <code>.proto</code> file.</p><p>While still in the <code>examples/helloworld</code> directory, run the following command :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative <span class="token punctuation">\\</span>
    --go-grpc_out<span class="token operator">=</span>. --go-grpc_opt<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative <span class="token punctuation">\\</span>
    helloworld/helloworld.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>paths=source_relative</code>: the output file is placed in the same relative directory as the input file. For example, an input file <code>protos/buzz.proto</code> results in an output file at <code>protos/buzz.pb.go</code></li></ul><p>This will regenerate the <code>helloworld/helloworld.pb.go</code> and <code>helloworld/helloworld_grpc.pb.go</code> files, which contain:</p><ul><li>Code for populating, serializing, and retrieving <code>HelloRequest</code> and <code>HellReply</code> message types</li><li>Generated client and server code</li></ul><h2 id="_6-update-and-run-the-application" tabindex="-1"><a class="header-anchor" href="#_6-update-and-run-the-application" aria-hidden="true">#</a> 6. Update and run the application</h2><p>You have regenerated server and client code, but you still need to implement and call the new method in the human-written parts of the example application.</p><h3 id="_6-1-update-the-server" tabindex="-1"><a class="header-anchor" href="#_6-1-update-the-server" aria-hidden="true">#</a> 6.1 Update the server</h3><p>Open <code>server/main.go</code> and add the following function to it:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SayHelloAgain implements helloworld.GreeterServer</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">SayHelloAgain</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloReply<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloReply<span class="token punctuation">{</span>Message<span class="token punctuation">:</span> <span class="token string">&quot;Hello again &quot;</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-update-the-client" tabindex="-1"><a class="header-anchor" href="#_6-2-update-the-client" aria-hidden="true">#</a> 6.2 Update the client</h3><p>Open <code>client/main.go</code> to add the following code to the end of the <code>main()</code> function body:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	r<span class="token punctuation">,</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">SayHelloAgain</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token operator">*</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not greet: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Greeting: %s&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run the server:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run server/main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>From another terminal, run the client.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go run clinet/main.go
<span class="token number">2021</span>/12/29 <span class="token number">11</span>:38:25 Greeting: Hello world
<span class="token number">2021</span>/12/29 <span class="token number">11</span>:38:25 Greeting: Hello again world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,29),h={href:"https://grpc.io/docs/languages/go/quickstart/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developers.google.com/protocol-buffers/docs/reference/go-generated",target:"_blank",rel:"noopener noreferrer"};function g(v,k){const a=i("ExternalLinkIcon");return l(),p("div",null,[r,n("p",null,[e("The example code is part of the "),n("a",d,[e("grpc-go"),s(a)]),e(" repo.")]),u,n("ol",null,[n("li",null,[n("a",h,[e("quick_start"),s(a)]),e(" gRPC docs")]),n("li",null,[n("a",m,[e("Go Generated Code"),s(a)]),e(" protobuf docs")])])])}const f=o(c,[["render",g],["__file","quick_start.html.vue"]]);export{f as default};
