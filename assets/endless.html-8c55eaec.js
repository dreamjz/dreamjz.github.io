import{_ as e,X as p,Y as o,Z as n,$ as s,a0 as t,a1 as c,F as i}from"./framework-8cb7ec75.js";const l={},u=n("p",null,"在学习 gin 时，官方文档介绍如何优雅地启动和停止服务",-1),r={href:"https://github.com/fvbock/endless",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="_1-introduction" tabindex="-1"><a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a> 1. Introduction</h2><p>Zero downtime restarts for golang HTTP and HTTPS servers.</p><h3 id="_1-1-features" tabindex="-1"><a class="header-anchor" href="#_1-1-features" aria-hidden="true">#</a> 1.1 Features</h3><ul><li>Drop-in replacement for <code>http.ListenAndServe</code> and <code>http.ListenAndServeTLS</code></li><li>Signal hooks to execute your own code before or after the listened to signal (SIGHUP, SIGUSR1, SIGUER2, SIGINT, SIGTERM, SIGSTP)</li><li>You can start multiple servers from one binary and endless will take care of the different sockets/ports assignments when restarting</li></ul><h2 id="_2-quick-start" tabindex="-1"><a class="header-anchor" href="#_2-quick-start" aria-hidden="true">#</a> 2. Quick Start</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get <span class="token parameter variable">-u</span> github.com/fvbock/endless
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/fvbock/endless&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span><span class="token string">&quot;pong&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:9090&quot;</span><span class="token punctuation">,</span>router<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;listen and serve error:&quot;</span><span class="token punctuation">,</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Server on 9090 stopped&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译并启动程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go build <span class="token parameter variable">-o</span> ./main ./main.go
$ ./main
<span class="token comment"># ... some gin logs</span>
<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> GET    /ping                     --<span class="token operator">&gt;</span> main.main.func1 <span class="token punctuation">(</span><span class="token number">3</span> handlers<span class="token punctuation">)</span>
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:04:53 <span class="token number">31409</span> :9090
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单测试下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&quot;http://localhost:9090/ping&quot;</span>
pong
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发送 <code>SIGHUP</code> 信号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">kill</span> <span class="token parameter variable">-1</span> <span class="token number">31409</span>
---------
<span class="token comment"># ... some logs</span>
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:13:35 <span class="token number">32215</span> :9090
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:13:35 <span class="token number">31409</span> Received SIGTERM.
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:13:35 <span class="token number">31409</span> Waiting <span class="token keyword">for</span> connections to finish<span class="token punctuation">..</span>.
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:13:35 <span class="token number">31409</span> Serve<span class="token punctuation">(</span><span class="token punctuation">)</span> returning<span class="token punctuation">..</span>.
<span class="token number">2021</span>/11/23 <span class="token number">20</span>:13:35 listen and serve error:accept tcp <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:9090: use of closed network connection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 再次发送请求，可以看到程序依然能够接收请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&quot;http://0.0.0.0:9090/ping&quot;</span>
pong
------
<span class="token punctuation">[</span>GIN<span class="token punctuation">]</span> <span class="token number">2021</span>/11/24 - <span class="token number">16</span>:05:39 <span class="token operator">|</span> <span class="token number">200</span> <span class="token operator">|</span>      <span class="token number">12.848</span>µs <span class="token operator">|</span>       <span class="token number">127.0</span>.0.1 <span class="token operator">|</span> GET      <span class="token string">&quot;/ping&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-timeout-and-maxheaderbytes" tabindex="-1"><a class="header-anchor" href="#_3-timeout-and-maxheaderbytes" aria-hidden="true">#</a> 3. Timeout and MaxHeaderBytes</h2><p>There are three variables exported by the package that control the values set for <code>DefaultReadTimeOut</code>,<code>DefaultWriteTimeOut</code>, and <code>MaxHeaderBytes</code> on the innter <code>http.server</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DefaultReadTimeOut time.Duration
DefaultWriteTimeOut time.Duration
DefaultMaxHeaderBytes int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endless default behaviour is to use the same defaults defined in <code>net/http</code></p><p>These hava impact on endless by potentially not letting the parent process die until all connections are handled/finished</p><p>查看 <code>endlessServer</code> 源码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> endlessServer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span>Server
	EndlessListener  net<span class="token punctuation">.</span>Listener
	SignalHooks      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>Signal<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	tlsInnerListener <span class="token operator">*</span>endlessListener
	wg               sync<span class="token punctuation">.</span>WaitGroup
	sigChan          <span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal
	isChild          <span class="token builtin">bool</span>
	state            <span class="token builtin">uint8</span>
	lock             <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex
	BeforeBegin      <span class="token keyword">func</span><span class="token punctuation">(</span>add <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>endless.ListenAndServe</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	server <span class="token operator">:=</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	<span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>endless.NewServer</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>endlessServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
	srv<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Addr <span class="token operator">=</span> addr
	srv<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>ReadTimeout <span class="token operator">=</span> DefaultReadTimeOut
	srv<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>WriteTimeout <span class="token operator">=</span> DefaultWriteTimeOut
	srv<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>MaxHeaderBytes <span class="token operator">=</span> DefaultMaxHeaderBytes
	srv<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Handler <span class="token operator">=</span> handler
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里在创建 <code>endlessServer</code> 时，会使用默认的配置，当然也可以在创建完之后单独设置</p><p>简单示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/fvbock/endless&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		seq<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;seq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;pong-%d&quot;</span><span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	server <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token string">&quot;:9090&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
	server<span class="token punctuation">.</span>ReadTimeout <span class="token operator">=</span> <span class="token number">1</span>
	server<span class="token punctuation">.</span>WriteTimeout <span class="token operator">=</span> <span class="token number">1</span>
	server<span class="token punctuation">.</span>MaxHeaderBytes <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span>
	err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;listen and serve error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-hammer-time" tabindex="-1"><a class="header-anchor" href="#_4-hammer-time" aria-hidden="true">#</a> 4. Hammer Time</h2><p>To deal with hanging request on the parent after restarting endless will hammer the parent 60 seconds after receiving the shutdown signal from the forked child process. When hammered still running requests get terminated. This behaviour can be controlled by another exported variable:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DefaultHammerTime time.Duration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The default is 60 seconds. When set to <code>-1</code> <code>hammerTime()</code> is not invoked automatically. You can then hammer the parent manually by sending <code>SIGUSR2</code>. This will only hammer the parent if it is already in shutdown mode. So unless the process had received a <code>SIGTERM</code>, <code>SIGSTOP</code>, or <code>SIGINT</code>(manually or by forking) brefore <code>SIGUSR2</code> will be ignored</p><p>If you had hanging requests and the server got hammered you will see a log message like this :</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2015/04/04 13:04:10 [STOP - Hammer Time] Forcefully shutting down parent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/fvbock/endless&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		seq<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;seq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;pong-%d&quot;</span><span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	endless<span class="token punctuation">.</span>DefaultHammerTime <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second
	server <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token string">&quot;:9090&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;listen and serve error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中将 hammer time 设置为 1s , 交易处理时间模拟为 3s</p><p>这里使用脚本来模拟多次请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">echo</span> Start sending request
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;http://0.0.0.0:9090/ping?seq=<span class="token variable">\${i}</span>&quot;</span>
        <span class="token builtin class-name">echo</span> GET <span class="token variable">$url</span>
        <span class="token function">curl</span> <span class="token variable">$url</span>
        <span class="token builtin class-name">echo</span> 
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务并执行脚本，在第三次请求时发送挂起信号<code>kill -1 </code></p><p>脚本输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Start sending request
GET http://0.0.0.0:9090/ping?seq=1
pong-1
GET http://0.0.0.0:9090/ping?seq=2
pong-2
GET http://0.0.0.0:9090/ping?seq=3
pong-3
GET http://0.0.0.0:9090/ping?seq=4

GET http://0.0.0.0:9090/ping?seq=5
pong-5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到第四次请求是没有响应的，同时看日志这边</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[GIN] 2021/11/24 - 18:04:09 | 200 |  3.000673064s |       127.0.0.1 | GET      &quot;/ping?seq=1&quot;
[GIN] 2021/11/24 - 18:04:12 | 200 |  3.000330231s |       127.0.0.1 | GET      &quot;/ping?seq=2&quot;
[GIN] 2021/11/24 - 18:04:15 | 200 |  3.001050857s |       127.0.0.1 | GET      &quot;/ping?seq=3&quot;
2021/11/24 18:04:17 14681 Received SIGHUP. forking.
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.
 - using env:   export GIN_MODE=release
 - using code:  gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /ping                     --&gt; main.main.func1 (3 handlers)
2021/11/24 18:04:17 14711 :9090
2021/11/24 18:04:17 14681 Received SIGTERM.
2021/11/24 18:04:17 14681 Waiting for connections to finish...
2021/11/24 18:04:17 14681 [::]:9090 Listener closed.
2021/11/24 18:04:18 [STOP - Hammer Time] Forcefully shutting down parent
2021/11/24 18:04:18 14681 Serve() returning...
2021/11/24 18:04:18 listen and serve error:accept tcp [::]:9090: use of closed network connection
[GIN] 2021/11/24 - 18:04:21 | 200 |   3.00127917s |       127.0.0.1 | GET      &quot;/ping?seq=5&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，第4次请求没有被处理完毕，父进程就已经终止了（hammer time &lt; deal time）</p><h2 id="_5-signals" tabindex="-1"><a class="header-anchor" href="#_5-signals" aria-hidden="true">#</a> 5. Signals</h2><p>The endless server will listen for the following signals:</p><ul><li><code>syscall.SIGHUP</code>: will trigger a fork/restart</li><li><code>syscall.SIGINT</code> and <code>syscall.SIGTERM</code> will trigger a shutdown of the server (it will finish running request)</li><li><code>SIGUSR2</code>: will trigger hammer Time</li><li><code>SIGUSR1</code> and <code>SIGTSTP</code> are listened for but do not trigger anything in the endless server itself.</li></ul><p>You can hook your own functions to be called pre or post signal handling</p><h3 id="_5-1-hook" tabindex="-1"><a class="header-anchor" href="#_5-1-hook" aria-hidden="true">#</a> 5.1 Hook</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;syscall&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/fvbock/endless&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">preSigUsr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;pre SIGUSR1&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">postSigUsr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;pre SIGUSR1&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		seq<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;seq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;pong-%d&quot;</span><span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	server <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token string">&quot;:9090&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
	server<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>endless<span class="token punctuation">.</span>PRE_SIGNAL<span class="token punctuation">]</span><span class="token punctuation">[</span>syscall<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>endless<span class="token punctuation">.</span>PRE_SIGNAL<span class="token punctuation">]</span><span class="token punctuation">[</span>syscall<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">]</span><span class="token punctuation">,</span> preSigUsr1<span class="token punctuation">)</span>
	server<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>endless<span class="token punctuation">.</span>POST_SIGNAL<span class="token punctuation">]</span><span class="token punctuation">[</span>syscall<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>endless<span class="token punctuation">.</span>POST_SIGNAL<span class="token punctuation">]</span><span class="token punctuation">[</span>syscall<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">]</span><span class="token punctuation">,</span> postSigUsr1<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;listen and serve error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run and test:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2021/11/25 09:29:51 18649 :9090
------
kill -s SIGUSR1
------
2021/11/25 09:30:23 pre SIGUSR1
2021/11/25 09:30:23 18649 Received SIGUSR1.
2021/11/25 09:30:23 pre SIGUSR1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中使用了<code>append</code>来注册钩子函数，这里的<code>SignalHooks</code>实际上是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> endlessServer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span>Server
    <span class="token comment">// ...</span>
	SignalHooks      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>Signal<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// ...	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SignalHooks[int]</code>: key 有两种取值，<code>endless.PRE_SIGNAL</code>和<code>endless.POST_SIGNAL</code>分别表示前置钩子和后置钩子</li><li><code>SignalHooks[int][os.Signal][]func()</code>: 可以为某个信号类型 (os.Signal) 注册过个钩子函数</li></ul><p>再回到 <code>server.ListenAndServe</code> 函数，看下钩子函数是如何触发的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>endlessServer<span class="token punctuation">)</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	addr <span class="token operator">:=</span> srv<span class="token punctuation">.</span>Addr
	<span class="token keyword">if</span> addr <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		addr <span class="token operator">=</span> <span class="token string">&quot;:http&quot;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">go</span> srv<span class="token punctuation">.</span><span class="token function">handleSignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	l<span class="token punctuation">,</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">getListener</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	srv<span class="token punctuation">.</span>EndlessListener <span class="token operator">=</span> <span class="token function">newEndlessListener</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> srv<span class="token punctuation">)</span>

	<span class="token keyword">if</span> srv<span class="token punctuation">.</span>isChild <span class="token punctuation">{</span>
		syscall<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span><span class="token function">Getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	srv<span class="token punctuation">.</span><span class="token function">BeforeBegin</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span>

	<span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>endlessServer<span class="token punctuation">)</span> <span class="token function">handleSignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> sig os<span class="token punctuation">.</span>Signal

	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>
		srv<span class="token punctuation">.</span>sigChan<span class="token punctuation">,</span>
		hookableSignals<span class="token operator">...</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>

	pid <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		sig <span class="token operator">=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>sigChan
		srv<span class="token punctuation">.</span><span class="token function">signalHooks</span><span class="token punctuation">(</span>PRE_SIGNAL<span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
		<span class="token keyword">switch</span> sig <span class="token punctuation">{</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGHUP<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGHUP. forking.&quot;</span><span class="token punctuation">)</span>
			err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Fork err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGUSR1.&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGUSR2<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGUSR2.&quot;</span><span class="token punctuation">)</span>
			srv<span class="token punctuation">.</span><span class="token function">hammerTime</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGINT.&quot;</span><span class="token punctuation">)</span>
			srv<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGTERM.&quot;</span><span class="token punctuation">)</span>
			srv<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> syscall<span class="token punctuation">.</span>SIGTSTP<span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;Received SIGTSTP.&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received %v: nothing i care about...\\n&quot;</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		srv<span class="token punctuation">.</span><span class="token function">signalHooks</span><span class="token punctuation">(</span>POST_SIGNAL<span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>endlessServer<span class="token punctuation">)</span> <span class="token function">signalHooks</span><span class="token punctuation">(</span>ppFlag <span class="token builtin">int</span><span class="token punctuation">,</span> sig os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> notSet <span class="token operator">:=</span> srv<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>ppFlag<span class="token punctuation">]</span><span class="token punctuation">[</span>sig<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>notSet <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> srv<span class="token punctuation">.</span>SignalHooks<span class="token punctuation">[</span>ppFlag<span class="token punctuation">]</span><span class="token punctuation">[</span>sig<span class="token punctuation">]</span> <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 endless 使用了一个 goroutine 取处理信号的钩子函数, 并会按顺序执行注册的钩子函数</p><h3 id="_5-2-kill" tabindex="-1"><a class="header-anchor" href="#_5-2-kill" aria-hidden="true">#</a> 5.2 Kill</h3><p>Linux 的 kill 指令用于将信号发给进程，所有的信号可以由<code>kill -l </code> 列出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">kill</span> <span class="token parameter variable">-l</span>
 <span class="token number">1</span><span class="token punctuation">)</span> SIGHUP       <span class="token number">2</span><span class="token punctuation">)</span> SIGINT       <span class="token number">3</span><span class="token punctuation">)</span> SIGQUIT      <span class="token number">4</span><span class="token punctuation">)</span> SIGILL
 <span class="token number">5</span><span class="token punctuation">)</span> SIGTRAP      <span class="token number">6</span><span class="token punctuation">)</span> SIGABRT      <span class="token number">7</span><span class="token punctuation">)</span> SIGBUS       <span class="token number">8</span><span class="token punctuation">)</span> SIGFPE
 <span class="token number">9</span><span class="token punctuation">)</span> SIGKILL     <span class="token number">10</span><span class="token punctuation">)</span> SIGUSR1     <span class="token number">11</span><span class="token punctuation">)</span> SIGSEGV     <span class="token number">12</span><span class="token punctuation">)</span> SIGUSR2
<span class="token number">13</span><span class="token punctuation">)</span> SIGPIPE     <span class="token number">14</span><span class="token punctuation">)</span> SIGALRM     <span class="token number">15</span><span class="token punctuation">)</span> SIGTERM     <span class="token number">16</span><span class="token punctuation">)</span> SIGSTKFLT
<span class="token number">17</span><span class="token punctuation">)</span> SIGCHLD     <span class="token number">18</span><span class="token punctuation">)</span> SIGCONT     <span class="token number">19</span><span class="token punctuation">)</span> SIGSTOP     <span class="token number">20</span><span class="token punctuation">)</span> SIGTSTP
<span class="token number">21</span><span class="token punctuation">)</span> SIGTTIN     <span class="token number">22</span><span class="token punctuation">)</span> SIGTTOU     <span class="token number">23</span><span class="token punctuation">)</span> SIGURG      <span class="token number">24</span><span class="token punctuation">)</span> SIGXCPU
<span class="token number">25</span><span class="token punctuation">)</span> SIGXFSZ     <span class="token number">26</span><span class="token punctuation">)</span> SIGVTALRM   <span class="token number">27</span><span class="token punctuation">)</span> SIGPROF     <span class="token number">28</span><span class="token punctuation">)</span> SIGWINCH
<span class="token number">29</span><span class="token punctuation">)</span> SIGIO       <span class="token number">30</span><span class="token punctuation">)</span> SIGPWR      <span class="token number">31</span><span class="token punctuation">)</span> SIGSYS      <span class="token number">34</span><span class="token punctuation">)</span> SIGRTMIN
<span class="token number">35</span><span class="token punctuation">)</span> SIGRTMIN+1  <span class="token number">36</span><span class="token punctuation">)</span> SIGRTMIN+2  <span class="token number">37</span><span class="token punctuation">)</span> SIGRTMIN+3  <span class="token number">38</span><span class="token punctuation">)</span> SIGRTMIN+4
<span class="token number">39</span><span class="token punctuation">)</span> SIGRTMIN+5  <span class="token number">40</span><span class="token punctuation">)</span> SIGRTMIN+6  <span class="token number">41</span><span class="token punctuation">)</span> SIGRTMIN+7  <span class="token number">42</span><span class="token punctuation">)</span> SIGRTMIN+8
<span class="token number">43</span><span class="token punctuation">)</span> SIGRTMIN+9  <span class="token number">44</span><span class="token punctuation">)</span> SIGRTMIN+10 <span class="token number">45</span><span class="token punctuation">)</span> SIGRTMIN+11 <span class="token number">46</span><span class="token punctuation">)</span> SIGRTMIN+12
<span class="token number">47</span><span class="token punctuation">)</span> SIGRTMIN+13 <span class="token number">48</span><span class="token punctuation">)</span> SIGRTMIN+14 <span class="token number">49</span><span class="token punctuation">)</span> SIGRTMIN+15 <span class="token number">50</span><span class="token punctuation">)</span> SIGRTMAX-14
<span class="token number">51</span><span class="token punctuation">)</span> SIGRTMAX-13 <span class="token number">52</span><span class="token punctuation">)</span> SIGRTMAX-12 <span class="token number">53</span><span class="token punctuation">)</span> SIGRTMAX-11 <span class="token number">54</span><span class="token punctuation">)</span> SIGRTMAX-10
<span class="token number">55</span><span class="token punctuation">)</span> SIGRTMAX-9  <span class="token number">56</span><span class="token punctuation">)</span> SIGRTMAX-8  <span class="token number">57</span><span class="token punctuation">)</span> SIGRTMAX-7  <span class="token number">58</span><span class="token punctuation">)</span> SIGRTMAX-6
<span class="token number">59</span><span class="token punctuation">)</span> SIGRTMAX-5  <span class="token number">60</span><span class="token punctuation">)</span> SIGRTMAX-4  <span class="token number">61</span><span class="token punctuation">)</span> SIGRTMAX-3  <span class="token number">62</span><span class="token punctuation">)</span> SIGRTMAX-2
<span class="token number">63</span><span class="token punctuation">)</span> SIGRTMAX-1  <span class="token number">64</span><span class="token punctuation">)</span> SIGRTMAX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中常用的有:</p><table><thead><tr><th>Signal</th><th>Description</th></tr></thead><tbody><tr><td>HUP</td><td>终端挂断</td></tr><tr><td>INT</td><td>中断（同 Ctrl + C）</td></tr><tr><td>QUIT</td><td>退出（同 Ctrl + \\）</td></tr><tr><td>KILL</td><td>强制终止</td></tr><tr><td>TERM</td><td>终止</td></tr><tr><td>CONT</td><td>继续 (与STOP相反，fg/bg命令)</td></tr><tr><td>STOP</td><td>暂停（同 Ctrl + Z）</td></tr></tbody></table><p>信号是 <code>Unix</code> 、类 <code>Unix</code> 以及其他 <code>POSIX</code> 兼容的操作系统中进程间通讯的一种有限制的方式</p><p>它是一种异步的通知机制，用来提醒进程一个事件（硬件异常、程序执行异常、外部发出信号）已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程。此时，任何非原子操作都将被中断。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数</p><h2 id="_6-pid-file" tabindex="-1"><a class="header-anchor" href="#_6-pid-file" aria-hidden="true">#</a> 6. PID File</h2><p>If you want to save actual pid file, you can change the <code>BeforeBegin</code> hook like this:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>server <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:4242&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
server<span class="token punctuation">.</span>BeforeBegin <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>add <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Actual pid is %d&quot;</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// save it somehow</span>
<span class="token punctuation">}</span>
err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>endlessServer.ListenAndServe</code> 方法中可以看到，在启动服务之前会调用此函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>endlessServer<span class="token punctuation">)</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	srv<span class="token punctuation">.</span><span class="token function">BeforeBegin</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span>

	<span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,74),k={href:"https://pkg.go.dev/github.com/fvbock/endless#section-readme",target:"_blank",rel:"noopener noreferrer"},v={href:"https://bash.cyberciti.biz/guide/Sending_signal_to_Processes",target:"_blank",rel:"noopener noreferrer"},m={href:"https://eddycjy.gitbook.io/golang/di-3-ke-gin/reload-http#ctrl-+-c",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("这里以 "),n("a",r,[s("endless"),t(a)]),s(" 为例，开始学习")]),d,n("ol",null,[n("li",null,[n("a",k,[s("endless"),t(a)]),s(" go doc")]),n("li",null,[n("a",v,[s("kill"),t(a)])]),n("li",null,[n("a",m,[s("优雅重启服务"),t(a)]),s(" 煎鱼")])])])}const f=e(l,[["render",b],["__file","endless.html.vue"]]);export{f as default};
