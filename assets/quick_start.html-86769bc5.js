import{_ as o,Z as p,$ as c,a0 as n,a1 as s,a2 as t,a3 as e,H as l}from"./framework-dee406ed.js";const i={},u=e(`<h2 id="identifiers" tabindex="-1"><a class="header-anchor" href="#identifiers" aria-hidden="true">#</a> Identifiers</h2><p>Must begin with:</p><ul><li>A letter <code>A-Z a-z</code></li><li>A dollar sign <code>$</code></li><li>An underscore <code>_</code></li></ul><p>JavaScript identifiers are <strong>case sensitive</strong>, <code>lastName</code> and <code>lastname</code> are two different variables.</p><p>Usually, variables in JavaScript are named using <strong>Lower Camel Case</strong>:</p><p><code>firstName, lastName, masterCard, interCity</code></p><p>JavaScript uses the <strong>Unicode</strong> character set.</p><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><ul><li><p><strong>Single Line Comments</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// comment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Multi-line Comments</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
comment
comment
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>JavaScript variables can be declared in 4 ways:</p><ul><li>Automatically</li><li>Using <code>var</code></li><li>Using <code>let</code></li><li>Using <code>const</code></li></ul><blockquote><p>The <code>var</code> keyword should only be used in code written for older browsers.</p></blockquote><h3 id="when-to-use-var-let-or-const" tabindex="-1"><a class="header-anchor" href="#when-to-use-var-let-or-const" aria-hidden="true">#</a> When to use <code>var</code>, <code>let</code>, or <code>const</code></h3><ul><li>Use <code>const</code> if : <ul><li>the value should not be changed</li><li>the type should not be changed (Arrays and Objects)</li></ul></li><li>Use <code>let</code> if you canâ€™t use <code>const</code></li><li>Use <code>var</code> if you <strong>must</strong> support old browsers</li></ul><table><thead><tr><th></th><th>Scope</th><th>Redeclare</th><th>Reassign</th><th>Hoisted</th><th>Binds this</th></tr></thead><tbody><tr><td>var</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>let</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>const</td><td>Yes</td><td>No</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><h3 id="let" tabindex="-1"><a class="header-anchor" href="#let" aria-hidden="true">#</a> <code>let</code></h3><p>Variables declared with <code>let</code> :</p><ul><li>have <strong>Block Scope</strong></li><li>must be <strong>Declared</strong> before use</li><li>cannot be <strong>Redeclared</strong> in the same scope</li></ul><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> <code>const</code></h3><p>Variables declared with <code>const</code> :</p><ul><li>cannot be <strong>Redeclared</strong></li><li>cannot be <strong>Reassigned</strong></li><li>have <strong>Block Scope</strong></li></ul><p><code>const</code> does not define a constant value, it defines a constant <strong>reference</strong> to a value.</p><p>You cannot reassign a constant value, but you can change the elements/properties of constant Array/Object.</p><h4 id="when-to-use-const" tabindex="-1"><a class="header-anchor" href="#when-to-use-const" aria-hidden="true">#</a> when to use <code>const</code></h4><p><strong>Always declare a variable with <code>const</code> when you know that the value should not be changed.</strong></p><p>Use <code>const</code> when declaring:</p><ul><li>A new Array</li><li>A new Object</li><li>A new Function</li><li>A new RegExp</li></ul><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h2><h3 id="arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#arithmetic-operators" aria-hidden="true">#</a> Arithmetic Operators</h3>`,30),r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Operator"),n("th",{style:{"text-align":"left"}},"Description")])],-1),d=n("tr",null,[n("td",{style:{"text-align":"left"}},"+"),n("td",{style:{"text-align":"left"}},"Addition")],-1),k=n("tr",null,[n("td",{style:{"text-align":"left"}},"-"),n("td",{style:{"text-align":"left"}},"Subtraction")],-1),v=n("tr",null,[n("td",{style:{"text-align":"left"}},"*"),n("td",{style:{"text-align":"left"}},"Multiplication")],-1),m=n("td",{style:{"text-align":"left"}},"**",-1),b={style:{"text-align":"left"}},g={href:"https://www.w3schools.com/js/js_2016.asp",target:"_blank",rel:"noopener noreferrer"},h=n("tr",null,[n("td",{style:{"text-align":"left"}},"/"),n("td",{style:{"text-align":"left"}},"Division")],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},"%"),n("td",{style:{"text-align":"left"}},"Modulus (Remainder)")],-1),f=n("tr",null,[n("td",{style:{"text-align":"left"}},"++"),n("td",{style:{"text-align":"left"}},"Increment")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},"--"),n("td",{style:{"text-align":"left"}},"Decrement")],-1),w=e(`<h3 id="comparison-operators" tabindex="-1"><a class="header-anchor" href="#comparison-operators" aria-hidden="true">#</a> Comparison Operators</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">equal to</td></tr><tr><td style="text-align:left;">===</td><td style="text-align:left;">equal value and equal type</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">not equal</td></tr><tr><td style="text-align:left;">!==</td><td style="text-align:left;">not equal value or not equal type</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">greater than</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">less than</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">greater than or equal to</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">less than or equal to</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">ternary operator</td></tr></tbody></table><h3 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">logical and</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">logical or</td></tr><tr><td style="text-align:left;">!</td><td style="text-align:left;">logical not</td></tr></tbody></table><h3 id="type-operators" tabindex="-1"><a class="header-anchor" href="#type-operators" aria-hidden="true">#</a> Type Operators</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">typeof</td><td style="text-align:left;">Returns the type of a variable</td></tr><tr><td style="text-align:left;">instanceof</td><td style="text-align:left;">Returns true if an object is an instance of an object type</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token string">&quot;&quot;</span> <span class="token comment">// string</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;Alice&quot;</span> <span class="token comment">// string</span>
<span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token comment">// number</span>
<span class="token keyword">typeof</span> <span class="token number">1.001</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bitwise-operators" tabindex="-1"><a class="header-anchor" href="#bitwise-operators" aria-hidden="true">#</a> Bitwise Operators</h3><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th><th style="text-align:left;">Example</th><th style="text-align:left;">Same as</th><th style="text-align:left;">Result</th><th style="text-align:left;">Decimal</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">AND</td><td style="text-align:left;">5 &amp; 1</td><td style="text-align:left;">0101 &amp; 0001</td><td style="text-align:left;">0001</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">OR</td><td style="text-align:left;">5 | 1</td><td style="text-align:left;">0101 | 0001</td><td style="text-align:left;">0101</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">~</td><td style="text-align:left;">NOT</td><td style="text-align:left;">~ 5</td><td style="text-align:left;">~0101</td><td style="text-align:left;">1010</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">XOR</td><td style="text-align:left;">5 ^ 1</td><td style="text-align:left;">0101 ^ 0001</td><td style="text-align:left;">0100</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">left shift</td><td style="text-align:left;">5 &lt;&lt; 1</td><td style="text-align:left;">0101 &lt;&lt; 1</td><td style="text-align:left;">1010</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">right shift</td><td style="text-align:left;">5 &gt;&gt; 1</td><td style="text-align:left;">0101 &gt;&gt; 1</td><td style="text-align:left;">0010</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">&gt;&gt;&gt;</td><td style="text-align:left;">unsigned right shift</td><td style="text-align:left;">5 &gt;&gt;&gt; 1</td><td style="text-align:left;">0101 &gt;&gt;&gt; 1</td><td style="text-align:left;">0010</td><td style="text-align:left;">2</td></tr></tbody></table><h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data Types</h2><p>JavaScript has 8 Datatypes:</p><ol><li>String</li><li>Number</li><li>Bigint</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Symbol</li><li>Object</li></ol><h3 id="dynamic-types" tabindex="-1"><a class="header-anchor" href="#dynamic-types" aria-hidden="true">#</a> Dynamic Types</h3><p>JavaScript types are dynamic. This means that the same variable can be used to hold different data types:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
x <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>A string is a series of characters. Strings are written with quotes, you can use single or double quotes:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span> <span class="token comment">// double quotes</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> <span class="token string">&#39;Foo&#39;</span> <span class="token comment">// single quotes</span>

<span class="token comment">// Use quotes inside a string</span>
<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;It&#39;s OK&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&quot;She is &#39;Alice&#39;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str3 <span class="token operator">=</span> <span class="token string">&#39;She is &quot;Alice&quot;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-length" tabindex="-1"><a class="header-anchor" href="#string-length" aria-hidden="true">#</a> String length</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="escape-character" tabindex="-1"><a class="header-anchor" href="#escape-character" aria-hidden="true">#</a> Escape character</h4><table><thead><tr><th>Code</th><th>Result</th></tr></thead><tbody><tr><td>\\b</td><td>Backspace</td></tr><tr><td>\\f</td><td>Form Feed</td></tr><tr><td>\\n</td><td>New Line</td></tr><tr><td>\\r</td><td>Carriage Return</td></tr><tr><td>\\t</td><td>Horizontal Tabulator</td></tr><tr><td>\\v</td><td>Vertical Tabulator</td></tr></tbody></table><h4 id="string-object" tabindex="-1"><a class="header-anchor" href="#string-object" aria-hidden="true">#</a> String Object</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Do not create String objects.</p><p>The <code>new</code> keyword complicates the code and slows down execution speed.</p></blockquote><p>String objects can produce unexpected results:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y <span class="token operator">==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y <span class="token operator">===</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Comparing two JavaScript objects <strong>always</strong> returns <strong>false</strong>.</p></blockquote><h4 id="string-methods" tabindex="-1"><a class="header-anchor" href="#string-methods" aria-hidden="true">#</a> String methods</h4><p><strong>Extracting string parts</strong></p><ul><li><code>slice(start, end)</code></li><li><code>substring(start, end)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// slice</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// li</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ice</span>
<span class="token comment">// if the parameter is negative, the position is counted from the end of the string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ic</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ice</span>

<span class="token comment">// substring</span>
<span class="token comment">// if parameter is negative, it will be treated as 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// li</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ali</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Replacing string content</strong></p><ul><li><p><code>replace()</code> The <code>replace()</code> method replaces a specified value with another value in string.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">replace</span><span class="token punctuation">(</span>old_string<span class="token punctuation">,</span> new_string<span class="token punctuation">)</span>
<span class="token comment">// regexp are written without quotes </span>
<span class="token function">replace</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> new_string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>replaceAll()</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;My name is Alice Alice Alice&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// By default, replace() will only replace the first match</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is A Alice Alice</span>
<span class="token comment">// Use regexp</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ALICE</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is A A A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Converting to Upper and Lower Case</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&quot;My name is Alice Alice Alice&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Concatenate</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ABD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Trim</strong></p><ul><li><code>trim()</code></li><li><code>trimStart()</code></li><li><code>trimeEnd()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// trim() removes whitespace from both sides</span>
<span class="token keyword">let</span> text1 <span class="token operator">=</span> <span class="token string">&quot;  A  &quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token operator">+</span>text1<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;A&quot;</span>
<span class="token comment">// trimStart() removes whitespace only from the start of string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token operator">+</span>text1<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;A  &quot;</span>
<span class="token comment">// trimStart() removes whitespace only from the end of string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token operator">+</span>text1<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;  A&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Padding</strong></p><ul><li><code>padStart()</code></li><li><code>padEnd()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 05</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 005</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Extracting string characters</strong></p><ul><li><code>charAt(position)</code></li><li><code>charCodeAt(position)</code>: returns a UTF-16 code</li><li>Property access <code>[]</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 99</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Converting a string to an Array</strong></p><p><code>split()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>JavaScript numbers are always one type: <strong>64-bit floating point</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x1 <span class="token operator">=</span> <span class="token number">2.00</span><span class="token punctuation">;</span> <span class="token comment">// with decimals</span>
<span class="token keyword">let</span> x2 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span> <span class="token comment">// without decimals</span>

<span class="token comment">// exponential notation</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1e3</span><span class="token punctuation">;</span> <span class="token comment">// 1000</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">1e-3</span><span class="token punctuation">;</span> <span class="token comment">// 0.001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nan-not-a-number" tabindex="-1"><a class="header-anchor" href="#nan-not-a-number" aria-hidden="true">#</a> NaN - Not a Number</h4><p><code>NaN</code> is a JavaScript reserved word indicating that a number is not a legal number.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// number </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h3><p><code>BigInt</code> is used to store integer values that are too big to be represented by a normal JavaScript Number.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;123456789012345678901234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>Booleans can only have two values: <code>true</code> or <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">(</span>x <span class="token operator">==</span> z<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><p>JavaScript arrays are written with square brackets.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Syntax</span><span class="token operator">:</span>
<span class="token keyword">const</span> arry_name <span class="token operator">=</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p>A variable without a value, has the value <code>undefined</code>. The type is also <code>undefined</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> car<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">typeof</span> car<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">param_list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="functions-used-as-variable-values" tabindex="-1"><a class="header-anchor" href="#functions-used-as-variable-values" aria-hidden="true">#</a> Functions used as variable values</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> add<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
    
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-1" tabindex="-1"><a class="header-anchor" href="#object-1" aria-hidden="true">#</a> Object</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Access properties</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Alice</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-methods" tabindex="-1"><a class="header-anchor" href="#object-methods" aria-hidden="true">#</a> Object methods</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
    <span class="token function-variable function">info</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice, 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if-else</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>conditin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// code</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">{</span>
	<span class="token comment">// code</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">x</span><span class="token operator">:</span>
        <span class="token comment">// code</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">y</span><span class="token operator">:</span>
        <span class="token comment">// code</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> Loop</h2><p>JavaScript supports different kinds of loops:</p><ul><li><code>for</code> - loops through a block of code a number of times</li><li><code>for/in</code> - loops through the properties of an object</li><li><code>for/of</code> - loops through the values of an iterable object</li><li><code>while</code> - loops through a block of code while a specified condition is true</li><li><code>do/while</code> - also loops through a block of code while a specified condition is true</li></ul><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> exp1<span class="token punctuation">;</span> conditoin<span class="token punctuation">;</span> exp2 <span class="token punctuation">{</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for-in</h3><blockquote><p>Do not use <strong>for in</strong> over an Array if the index <strong>order</strong> is important.</p><p>The index order is implementation-dependent, and array values may not be accessed in the order you expect.</p><p>It is better to use a <strong>for</strong> loop, a <strong>for of</strong> loop, or <strong>Array.forEach()</strong> when the order is important.</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obejet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for-of</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-do-while" tabindex="-1"><a class="header-anchor" href="#while-do-while" aria-hidden="true">#</a> while, do-while</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>

<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><p>A JavaScript Set is a collection of unique values. Each value can only occur once in a Set.</p><table><thead><tr><th style="text-align:left;">Method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">new Set()</td><td style="text-align:left;">Creates a new Set</td></tr><tr><td style="text-align:left;">add()</td><td style="text-align:left;">Adds a new element to the Set</td></tr><tr><td style="text-align:left;">delete()</td><td style="text-align:left;">Removes an element from a Set</td></tr><tr><td style="text-align:left;">has()</td><td style="text-align:left;">Returns true if a value exists in the Set</td></tr><tr><td style="text-align:left;">forEach()</td><td style="text-align:left;">Invokes a callback for each element in the Set</td></tr><tr><td style="text-align:left;">values()</td><td style="text-align:left;">Returns an iterator with all the values in a Set</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">size</td><td style="text-align:left;">Returns the number of elements in a Set</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create set</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// add element</span>
letters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// forEach()</span>
letters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p>A Map holds key-value pairs where the keys can be any datatype.</p><p>A Map remembers the original insertion order of the keys.</p><table><thead><tr><th style="text-align:left;">Method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">new Map()</td><td style="text-align:left;">Creates a new Map</td></tr><tr><td style="text-align:left;">set()</td><td style="text-align:left;">Sets the value for a key in a Map</td></tr><tr><td style="text-align:left;">get()</td><td style="text-align:left;">Gets the value for a key in a Map</td></tr><tr><td style="text-align:left;">delete()</td><td style="text-align:left;">Removes a Map element specified by the key</td></tr><tr><td style="text-align:left;">has()</td><td style="text-align:left;">Returns true if a key exists in a Map</td></tr><tr><td style="text-align:left;">forEach()</td><td style="text-align:left;">Calls a function for each key/value pair in a Map</td></tr><tr><td style="text-align:left;">entries()</td><td style="text-align:left;">Returns an iterator with the [key, value] pairs in a Map</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">size</td><td style="text-align:left;">Returns the number of elements in a Map</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create map</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// get</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-and-object" tabindex="-1"><a class="header-anchor" href="#map-and-object" aria-hidden="true">#</a> Map and Object</h3><table><thead><tr><th style="text-align:left;"></th><th>Object</th><th>Map</th></tr></thead><tbody><tr><td style="text-align:left;">Iterable</td><td>Not directly iterable</td><td>Directly iterable</td></tr><tr><td style="text-align:left;">Size</td><td>Do not have a size property</td><td>Have a size property</td></tr><tr><td style="text-align:left;">Key Types</td><td>Keys must be Strings (or Symbols)</td><td>Keys can be any datatype</td></tr><tr><td style="text-align:left;">Key Order</td><td>Keys are not well ordered</td><td>Keys are ordered by insertion</td></tr><tr><td style="text-align:left;">Defaults</td><td>Have default keys</td><td>Do not have default keys</td></tr></tbody></table><h2 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> Error</h2><p>The <code>try</code> statement defines a code block to run (to try).</p><p>The <code>catch</code> statement defines a code block to handle any error.</p><p>The <code>finally</code> statement defines a code block to run regardless of the result.</p><p>The <code>throw</code> statement defines a custom error.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  Block <span class="token keyword">of</span> code to <span class="token keyword">try</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Block <span class="token keyword">of</span> code to handle errors
<span class="token punctuation">}</span>
<span class="token keyword">finally</span> <span class="token punctuation">{</span>
  Block <span class="token keyword">of</span> code to be executed regardless <span class="token keyword">of</span> the <span class="token keyword">try</span> <span class="token operator">/</span> catch result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strict-mode" tabindex="-1"><a class="header-anchor" href="#strict-mode" aria-hidden="true">#</a> Strict mode</h2><p><code>&quot;use strict&quot;;</code> Defines that JavaScript code should be executed in &quot;strict mode&quot;.</p><h2 id="arrow-function" tabindex="-1"><a class="header-anchor" href="#arrow-function" aria-hidden="true">#</a> Arrow function</h2><p>Arrow functions allow us to write shorter function syntax:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h2><p>Use the keyword <code>class</code> to create a class.</p><p>Always add a method named <code>constructor()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
    <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> car2 <span class="token operator">=</span> nwe <span class="token function">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Audi&quot;</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2><p>JavaScript modules allow you to break up your code into separate files.</p><h3 id="named-exports" tabindex="-1"><a class="header-anchor" href="#named-exports" aria-hidden="true">#</a> Named exports</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-exports" tabindex="-1"><a class="header-anchor" href="#default-exports" aria-hidden="true">#</a> Default exports</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> Import</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import named exports</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;xxx.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// import default exports</span>
<span class="token keyword">import</span> message <span class="token keyword">from</span> <span class="token string">&quot;xxx.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> Async</h2><h3 id="promise-object" tabindex="-1"><a class="header-anchor" href="#promise-object" aria-hidden="true">#</a> Promise object</h3><ul><li><p>&quot;Producing code&quot; is code that can take some time</p></li><li><p>&quot;Consuming code&quot; is code that must wait for the result</p></li><li><p>A Promise is a JavaScript object that links producing code and consuming code</p></li></ul><p>A JavaScript Promise object contains both the producing code and calls to the consuming code:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">myResolve<span class="token punctuation">,</span> myReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// &quot;Producing Code&quot; (May take some time)</span>

  <span class="token function">myResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// when successful</span>
  <span class="token function">myReject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// when error</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;Consuming Code&quot; (Must wait for a fulfilled Promise)</span>
myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* code if successful */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* code if some error */</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the producing code obtains the result, it should call one of the two callbacks:</p><table><thead><tr><th style="text-align:left;">Result</th><th style="text-align:left;">Call</th></tr></thead><tbody><tr><td style="text-align:left;">Success</td><td style="text-align:left;">myResolve(result value)</td></tr><tr><td style="text-align:left;">Error</td><td style="text-align:left;">myReject(error object)</td></tr></tbody></table><h4 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h4><p>A JavaScript Promise object can be:</p><ul><li>Pending</li><li>Fulfilled</li><li>Rejected</li></ul><p>The Promise object supports two properties: <strong>state</strong> and <strong>result</strong>.</p><p>While a Promise object is &quot;pending&quot; (working), the result is undefined.</p><p>When a Promise object is &quot;fulfilled&quot;, the result is a value.</p><p>When a Promise object is &quot;rejected&quot;, the result is an error object.</p><table><thead><tr><th style="text-align:left;">myPromise.state</th><th style="text-align:left;">myPromise.result</th></tr></thead><tbody><tr><td style="text-align:left;">&quot;pending&quot;</td><td style="text-align:left;">undefined</td></tr><tr><td style="text-align:left;">&quot;fulfilled&quot;</td><td style="text-align:left;">a result value</td></tr><tr><td style="text-align:left;">&quot;rejected&quot;</td><td style="text-align:left;">an error object</td></tr></tbody></table><blockquote><p>You cannot access the Promise properties <strong>state</strong> and <strong>result</strong>.</p><p>You must use a Promise method to handle promises.</p></blockquote><h4 id="use-promise" tabindex="-1"><a class="header-anchor" href="#use-promise" aria-hidden="true">#</a> Use promise</h4><p>Promise.then() takes two arguments, a callback for success and another for failure.</p><p>Both are optional, so you can add a callback for success or failure only.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* code if successful */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* code if some error */</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myDisplayer</span><span class="token punctuation">(</span><span class="token parameter">some</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> some<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">myResolve<span class="token punctuation">,</span> myReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// The producing code (this may take some time)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">myResolve</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">myReject</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">myDisplayer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">myDisplayer</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-1" tabindex="-1"><a class="header-anchor" href="#async-1" aria-hidden="true">#</a> async</h3><ul><li><p><strong>async</strong> makes a function return a Promise</p></li><li><p><strong>await</strong> makes a function wait for a Promise</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// same as </span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>await</code> keyword can only be used inside an <code>async</code> function.</p><p>The <code>await</code> keyword makes the function pause the execution and wait for a resolved promise before it continues:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;I love You !!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">await</span> myPromise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">myDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;I love You !!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">await</span> myPromise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">myDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;mycar.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;File not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">await</span> myPromise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,168),j={href:"https://www.w3schools.com/js/",target:"_blank",rel:"noopener noreferrer"};function q(A,S){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("table",null,[r,n("tbody",null,[d,k,v,n("tr",null,[m,n("td",b,[s("Exponentiation ("),n("a",g,[s("ES2016"),t(a)]),s(")")])]),h,y,f,x])]),w,n("ol",null,[n("li",null,[n("a",j,[s("https://www.w3schools.com/js/"),t(a)])])])])}const P=o(i,[["render",q],["__file","quick_start.html.vue"]]);export{P as default};
