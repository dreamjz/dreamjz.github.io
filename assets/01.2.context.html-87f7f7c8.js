const n=JSON.parse('{"key":"v-15d3b17c","path":"/reading/golang/7-days-golang/01-Gee-Web/01.2.context.html","title":"2. Context","lang":"zh-CN","frontmatter":{"title":"2. Context","date":"2023-10-09T00:00:00.000Z","category":["golang"]},"headers":[{"level":2,"title":"1. 为何需要 Context","slug":"_1-为何需要-context","link":"#_1-为何需要-context","children":[{"level":3,"title":"增强系统可扩展性","slug":"增强系统可扩展性","link":"#增强系统可扩展性","children":[]}]},{"level":2,"title":"2. 实现","slug":"_2-实现","link":"#_2-实现","children":[{"level":3,"title":"2.1 Context","slug":"_2-1-context","link":"#_2-1-context","children":[]},{"level":3,"title":"2.2 Router","slug":"_2-2-router","link":"#_2-2-router","children":[]},{"level":3,"title":"2.3 Gee","slug":"_2-3-gee","link":"#_2-3-gee","children":[]}]},{"level":2,"title":"3. Main","slug":"_3-main","link":"#_3-main","children":[]},{"level":2,"title":"4. 小结","slug":"_4-小结","link":"#_4-小结","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":3.18,"words":954},"filePathRelative":"reading/golang/7-days-golang/01-Gee-Web/01.2.context.md","localizedDate":"2023年10月9日","excerpt":"<h2> 1. 为何需要 Context</h2>\\n<h4> 简化代码</h4>\\n<p>Web 服务的基本流程是根据请求(request)构建响应(response)。</p>\\n<p>每次构造 response 时，其 Header 中的状态码(StatusCode)和消息类型(ContentType)均需要手动设置。若不进行封装，每次均需要编写繁杂重复的代码，增加了出错的概率。</p>\\n<p>此时使用 Context 进行封装能够简化代码提升开发效率，以返回 JSON 数据为例：</p>\\n<p>封装之前</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>obj <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token string\\">\\"name\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"geektutu\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"password\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"1234\\"</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\nw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Header</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Content-Type\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"application/json\\"</span><span class=\\"token punctuation\\">)</span>\\nw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteHeader</span><span class=\\"token punctuation\\">(</span>http<span class=\\"token punctuation\\">.</span>StatusOK<span class=\\"token punctuation\\">)</span>\\nencoder <span class=\\"token operator\\">:=</span> json<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewEncoder</span><span class=\\"token punctuation\\">(</span>w<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">:=</span> encoder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Encode</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n    http<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span>w<span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">500</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
