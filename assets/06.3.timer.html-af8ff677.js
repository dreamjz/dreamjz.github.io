import{_ as o,Z as i,$ as l,a0 as n,a1 as s,a2 as t,a3 as a,H as p}from"./framework-dee406ed.js";const c={},r=n("h2",{id:"_6-3-1-设计原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-3-1-设计原理","aria-hidden":"true"},"#"),s(" 6.3.1 设计原理")],-1),u=n("p",null,"Golang 的计时器经历了几次版本迭代：",-1),d=n("ol",null,[n("li",null,"v1.9：所有计时器有全局唯一的四叉堆维护"),n("li",null,"v1.10~v1.13：全局使用64个四叉堆维护全部的计时器，每个处理器（P）创建的计时器会由对应的四叉堆维护"),n("li",null,"v1.14：每个处理器单独管理计时器并通过网络轮询触发")],-1),m=n("h3",{id:"全局四叉堆",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#全局四叉堆","aria-hidden":"true"},"#"),s(" 全局四叉堆")],-1),k={href:"https://draveness.me/golang/tree/runtime.timers:093adee",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"runtime.timers:093adee",-1),h=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> timers <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	lock         mutex
	gp           <span class="token operator">*</span>g
	created      <span class="token builtin">bool</span>
	sleeping     <span class="token builtin">bool</span>
	rescheduling <span class="token builtin">bool</span>
	sleepUntil   <span class="token builtin">int64</span>
	waitnote     note
	t            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>timer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>t</code>就是最小的四叉堆，行时创建的所有计时器都会加入到四叉堆中。</p>`,2),g={href:"https://draveness.me/golang/tree/runtime.timerproc:093adee",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"runtime.timerproc:093adee",-1),b=a(`<ul><li>四叉堆中的计时器到期</li><li>四叉堆中加入了触发时间更早的新计时器</li></ul><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310012209615.png" alt="golang-timer-quadtree" tabindex="0" loading="lazy"><figcaption>golang-timer-quadtree</figcaption></figure><p><strong>缺点</strong>：</p><p>全局四叉堆共用的互斥锁对计时器的影响非常大，计时器的各种操作都需要获取全局唯一的互斥锁，这会严重影响计时器的性能。</p><h3 id="分片四叉堆" tabindex="-1"><a class="header-anchor" href="#分片四叉堆" aria-hidden="true">#</a> 分片四叉堆</h3><p>Go 1.10 将全局的四叉堆分割成了 64 个更小的四叉堆。</p><p>理想情况下，四叉堆的数量应该等于处理器的数量，但是这需要实现动态的分配过程，所以经过权衡最终选择初始化 64 个四叉堆，以牺牲内存占用的代价换取性能的提升。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> timersLen <span class="token operator">=</span> <span class="token number">64</span>

<span class="token keyword">var</span> timers <span class="token punctuation">[</span>timersLen<span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
	timersBucket
<span class="token punctuation">}</span>

<span class="token keyword">type</span> timersBucket <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	lock         mutex
	gp           <span class="token operator">*</span>g
	created      <span class="token builtin">bool</span>
	sleeping     <span class="token builtin">bool</span>
	rescheduling <span class="token builtin">bool</span>
	sleepUntil   <span class="token builtin">int64</span>
	waitnote     note
	t            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>timer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),f={href:"https://draveness.me/golang/tree/runtime.timerproc:76f4fd8",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"runtime.timerproc:76f4fd8",-1),y=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310012211252.png",alt:"golang-timer-bucket",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-timer-bucket")],-1),x=n("p",null,"缺点：",-1),M={href:"https://draveness.me/golang/tree/runtime.timerproc:76f4fd8",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"runtime.timerproc:76f4fd8",-1),R=n("strong",null,"处理器",-1),W=n("strong",null,"线程",-1),L=n("strong",null,"频繁",-1),N=n("strong",null,"上下文切换",-1),D=n("h3",{id:"网络轮询器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络轮询器","aria-hidden":"true"},"#"),s(" 网络轮询器")],-1),S={href:"https://draveness.me/golang/tree/runtime.p",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"runtime.p",-1),j=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202310012212340.png",alt:"golang-p-and-timers",tabindex:"0",loading:"lazy"}),n("figcaption",null,"golang-p-and-timers")],-1),X={href:"https://draveness.me/golang/tree/runtime.p",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.p",-1),C=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> p <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	timersLock mutex
	timers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>timer

	numTimers     <span class="token builtin">uint32</span>
	adjustTimers  <span class="token builtin">uint32</span>
	deletedTimers <span class="token builtin">uint32</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>timersLock</code> — 用于保护计时器的互斥锁</li><li><code>timers</code> — 存储计时器的最小四叉堆</li><li><code>numTimers</code> — 处理器中的计时器数量</li><li><code>adjustTimers</code> — 处理器中处于 <code>timerModifiedEarlier</code> 状态的计时器数量</li><li><code>deletedTimers</code> — 处理器中处于 <code>timerDeleted</code> 状态的计时器数量</li></ul><p>这种方式能够充分利用本地性、减少上下文的切换开销。</p><h2 id="_6-3-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_6-3-2-数据结构" aria-hidden="true">#</a> 6.3.2 数据结构</h2>`,4),q={href:"https://draveness.me/golang/tree/runtime.timer",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"runtime.timer",-1),U=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> timer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pp puintptr

	when     <span class="token builtin">int64</span>
	period   <span class="token builtin">int64</span>
	f        <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span>
	arg      <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	seq      <span class="token builtin">uintptr</span>
	nextwhen <span class="token builtin">int64</span>
	status   <span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>when</code> — 当前计时器被唤醒的时间</li><li><code>period</code> — 两次被唤醒的间隔</li><li><code>f</code> — 每当计时器被唤醒时都会调用的函数</li><li><code>arg</code> — 计时器被唤醒时调用 <code>f</code> 传入的参数</li><li><code>nextWhen</code> — 计时器处于 <code>timerModifiedXX</code> 状态时，用于设置 <code>when</code> 字段</li><li><code>status</code> — 计时器的状态</li></ul>`,2),z={href:"https://draveness.me/golang/tree/time.Timer",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"time.Timer",-1),A=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Timer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	C <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time
	r runtimeTimer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I={href:"https://draveness.me/golang/tree/time.Timer",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"time.Timer",-1),V={href:"https://draveness.me/golang/tree/time.NewTimer",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"time.NewTimer",-1),Y={href:"https://draveness.me/golang/tree/time.AfterFunc",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"time.AfterFunc",-1),Z={href:"https://draveness.me/golang/tree/time.After",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"time.After",-1),J=a('<h2 id="_6-3-3-状态机" tabindex="-1"><a class="header-anchor" href="#_6-3-3-状态机" aria-hidden="true">#</a> 6.3.3 状态机</h2><p>运行时使用状态机的方式处理全部的计时器，其中包括 10 种状态和几种操作。</p><table><thead><tr><th style="text-align:left;">状态</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">timerNoStatus</td><td style="text-align:center;">还没有设置状态</td></tr><tr><td style="text-align:left;">timerWaiting</td><td style="text-align:center;">等待触发</td></tr><tr><td style="text-align:left;">timerRunning</td><td style="text-align:center;">运行计时器函数</td></tr><tr><td style="text-align:left;">timerDeleted</td><td style="text-align:center;">被删除</td></tr><tr><td style="text-align:left;">timerRemoving</td><td style="text-align:center;">正在被删除</td></tr><tr><td style="text-align:left;">timerRemoved</td><td style="text-align:center;">已经被停止并从堆中删除</td></tr><tr><td style="text-align:left;">timerModifying</td><td style="text-align:center;">正在被修改</td></tr><tr><td style="text-align:left;">timerModifiedEarlier</td><td style="text-align:center;">被修改到了更早的时间</td></tr><tr><td style="text-align:left;">timerModifiedLater</td><td style="text-align:center;">被修改到了更晚的时间</td></tr><tr><td style="text-align:left;">timerMoving</td><td style="text-align:center;">已经被修改正在被移动</td></tr></tbody></table><p>操作计时器时，运行时会根据状态的不同而做出反应，所以在分析计时器时会将状态作为切入点分析其实现原理。计时器的状态机中包含如下所示的 7 种不同操作，它们分别承担了不同的职责：</p>',4),K={href:"https://draveness.me/golang/tree/runtime.addtimer",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"runtime.addtimer",-1),nn={href:"https://draveness.me/golang/tree/runtime.deltimer",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"runtime.deltimer",-1),en=n("code",null,"timerDeleted",-1),tn={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:9",target:"_blank",rel:"noopener noreferrer"},an={href:"https://draveness.me/golang/tree/runtime.modtimer",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"runtime.modtimer",-1),ln={href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"runtime.cleantimers",-1),cn={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:11",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://draveness.me/golang/tree/runtime.adjusttimers",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"runtime.adjusttimers",-1),dn=n("code",null,"timerDeleted",-1),mn={href:"https://draveness.me/golang/tree/runtime.runtimer",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"runtime.runtimer",-1),vn=n("h3",{id:"增加计时器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#增加计时器","aria-hidden":"true"},"#"),s(" 增加计时器")],-1),hn={href:"https://draveness.me/golang/tree/time.NewTimer",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"time.NewTimer",-1),_n={href:"https://draveness.me/golang/tree/runtime.addtimer",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"runtime.addtimer",-1),fn=a(`<ul><li><code>timerNoStatus</code> -&gt; <code>timerWaiting</code></li><li>其他状态 -&gt; 崩溃：不合法的状态</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">addtimer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>status <span class="token operator">!=</span> timerNoStatus <span class="token punctuation">{</span>
		<span class="token function">badTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span>status <span class="token operator">=</span> timerWaiting
	<span class="token function">cleantimers</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span>
	<span class="token function">doaddtimer</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
	<span class="token function">wakeNetPoller</span><span class="token punctuation">(</span>when<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),wn={href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"runtime.cleantimers",-1),xn=n("code",null,"runtime.doaddtimer",-1),Mn=n("code",null,"timers",-1),Tn={href:"https://draveness.me/golang/tree/runtime.netpollGenericInit",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.netpollGenericInit",-1),Wn=n("code",null,"runtime.wakeNetPoller",-1),Ln={href:"https://draveness.me/golang/tree/runtime.netpollBreak",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.netpollBreak",-1),Dn=n("p",null,"每次增加新的计时器都会中断正在阻塞的轮询，触发调度器检查是否有计时器到期。",-1),Sn=n("h3",{id:"删除计时器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#删除计时器","aria-hidden":"true"},"#"),s(" 删除计时器")],-1),En={href:"https://draveness.me/golang/tree/runtime.deltimer",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"runtime.deltimer",-1),Xn=a('<ul><li><code>timerWaiting</code> -&gt; <code>timerModifying</code> -&gt; <code>timerDeleted</code></li><li><code>timerModifiedEarlier</code> -&gt; <code>timerModifying</code> -&gt; <code>timerDeleted</code></li><li><code>timerModifiedLater</code> -&gt; <code>timerModifying</code> -&gt; <code>timerDeleted</code></li><li>其他状态 -&gt; 等待状态改变或者直接返回</li></ul><h3 id="修改计时器" tabindex="-1"><a class="header-anchor" href="#修改计时器" aria-hidden="true">#</a> 修改计时器</h3>',2),Gn={href:"https://draveness.me/golang/tree/runtime.modtimer",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime.modtimer",-1),qn=a(`<ul><li><code>timerWaiting</code> -&gt; <code>timerModifying</code> -&gt; <code>timerModifiedXX</code></li><li><code>timerModifiedXX</code> -&gt; <code>timerModifying</code> -&gt; <code>timerModifiedYY</code></li><li><code>timerNoStatus</code> -&gt; <code>timerModifying</code> -&gt; <code>timerWaiting</code></li><li><code>timerRemoved</code> -&gt; <code>timerModifying</code> -&gt; <code>timerWaiting</code></li><li><code>timerDeleted</code> -&gt; <code>timerModifying</code> -&gt; <code>timerWaiting</code></li><li>其他状态 -&gt; 等待状态改变</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">modtimer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>timer<span class="token punctuation">,</span> when<span class="token punctuation">,</span> period <span class="token builtin">int64</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	status <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>timerNoStatus<span class="token punctuation">)</span>
	wasRemoved <span class="token operator">:=</span> <span class="token boolean">false</span>
loop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> status <span class="token operator">=</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> status <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	t<span class="token punctuation">.</span>period <span class="token operator">=</span> period
	t<span class="token punctuation">.</span>f <span class="token operator">=</span> f
	t<span class="token punctuation">.</span>arg <span class="token operator">=</span> arg
	t<span class="token punctuation">.</span>seq <span class="token operator">=</span> seq

	<span class="token keyword">if</span> wasRemoved <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span>when <span class="token operator">=</span> when
		<span class="token function">doaddtimer</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		<span class="token function">wakeNetPoller</span><span class="token punctuation">(</span>when<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span>nextwhen <span class="token operator">=</span> when
		newStatus <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>timerModifiedLater<span class="token punctuation">)</span>
		<span class="token keyword">if</span> when <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>when <span class="token punctuation">{</span>
			newStatus <span class="token operator">=</span> timerModifiedEarlier
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> newStatus <span class="token operator">==</span> timerModifiedEarlier <span class="token punctuation">{</span>
			<span class="token function">wakeNetPoller</span><span class="token punctuation">(</span>when<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Bn={href:"https://draveness.me/golang/tree/runtime.doaddtimer",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime.doaddtimer",-1),zn=n("li",null,[s("若修改后的时间大于或者等于修改前时间，设置计时器的状态为 "),n("code",null,"timerModifiedLater")],-1),Pn=n("code",null,"timerModifiedEarlier",-1),An={href:"https://draveness.me/golang/tree/runtime.netpollBreak",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"runtime.netpollBreak",-1),On=n("h3",{id:"清除计时器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#清除计时器","aria-hidden":"true"},"#"),s(" 清除计时器")],-1),Vn={href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"runtime.cleantimers",-1),Yn=a(`<ul><li><code>timerDeleted</code> -&gt; <code>timerRemoving</code> -&gt; <code>timerRemoved</code></li><li><code>timerModifiedXX</code> -&gt; <code>timerMoving</code> -&gt; <code>timerWaiting</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">cleantimers</span><span class="token punctuation">(</span>pp <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>timers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
		t <span class="token operator">:=</span> pp<span class="token punctuation">.</span>timers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token keyword">switch</span> s <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> s <span class="token punctuation">{</span>
		<span class="token keyword">case</span> timerDeleted<span class="token punctuation">:</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> s<span class="token punctuation">,</span> timerRemoving<span class="token punctuation">)</span>
			<span class="token function">dodeltimer0</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> timerRemoving<span class="token punctuation">,</span> timerRemoved<span class="token punctuation">)</span>
		<span class="token keyword">case</span> timerModifiedEarlier<span class="token punctuation">,</span> timerModifiedLater<span class="token punctuation">:</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> s<span class="token punctuation">,</span> timerMoving<span class="token punctuation">)</span>

			t<span class="token punctuation">.</span>when <span class="token operator">=</span> t<span class="token punctuation">.</span>nextwhen

			<span class="token function">dodeltimer0</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span>
			<span class="token function">doaddtimer</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> timerMoving<span class="token punctuation">,</span> timerWaiting<span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Hn={href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"runtime.cleantimers",-1),$n=n("code",null,"timerDeleted",-1),Jn=n("code",null,"timerModifiedEarlier",-1),Kn=n("code",null,"timerModifiedLater",-1),Qn=n("code",null,"timerDeleted",-1),ns=n("li",null,[s("将计时器的状态修改成 "),n("code",null,"timerRemoving")],-1),ss={href:"https://draveness.me/golang/tree/runtime.dodeltimer0",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.dodeltimer0",-1),ts=n("li",null,[s("将计时器的状态修改成 "),n("code",null,"timerRemoved")],-1),as=n("code",null,"timerModifiedEarlier",-1),os=n("code",null,"timerModifiedLater",-1),is=n("li",null,[s("将计时器的状态修改成 "),n("code",null,"timerMoving"),s("；")],-1),ls=n("li",null,[s("使用计时器下次触发的时间 "),n("code",null,"nextWhen"),s(" 覆盖 "),n("code",null,"when")],-1),ps={href:"https://draveness.me/golang/tree/runtime.dodeltimer0",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"runtime.dodeltimer0",-1),rs={href:"https://draveness.me/golang/tree/runtime.doaddtimer",target:"_blank",rel:"noopener noreferrer"},us=n("code",null,"runtime.doaddtimer",-1),ds=n("li",null,[s("将计时器的状态修改成 "),n("code",null,"timerWaiting")],-1),ms={href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"runtime.cleantimers",-1),vs=n("code",null,"timerModifiedXX",-1),hs=n("h3",{id:"调整计时器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#调整计时器","aria-hidden":"true"},"#"),s(" 调整计时器")],-1),gs={href:"https://draveness.me/golang/tree/runtime.adjusttimers",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"runtime.adjusttimers",-1),bs=n("code",null,"timerModifiedEarlier",-1),fs=n("code",null,"timerModifiedLater",-1),ws=a(`<ul><li><code>timerDeleted</code> -&gt; <code>timerRemoving</code> -&gt; <code>timerRemoved</code></li><li><code>timerModifiedXX</code> -&gt; <code>timerMoving</code> -&gt; <code>timerWaiting</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">adjusttimers</span><span class="token punctuation">(</span>pp <span class="token operator">*</span>p<span class="token punctuation">,</span> now <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> moved <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>timer
loop<span class="token punctuation">:</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>timers<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		t <span class="token operator">:=</span> pp<span class="token punctuation">.</span>timers<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">switch</span> s <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> s <span class="token punctuation">{</span>
		<span class="token keyword">case</span> timerDeleted<span class="token punctuation">:</span>
			<span class="token comment">// 删除堆中的计时器</span>
		<span class="token keyword">case</span> timerModifiedEarlier<span class="token punctuation">,</span> timerModifiedLater<span class="token punctuation">:</span>
			<span class="token comment">// 修改计时器的时间</span>
		<span class="token keyword">case</span> <span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>moved<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">addAdjustedTimers</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> moved<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行计时器" tabindex="-1"><a class="header-anchor" href="#运行计时器" aria-hidden="true">#</a> 运行计时器</h3>`,3),ys={href:"https://draveness.me/golang/tree/runtime.runtimer",target:"_blank",rel:"noopener noreferrer"},xs=n("code",null,"runtime.runtimer",-1),Ms=a(`<ul><li><code>timerNoStatus</code> -&gt; 崩溃：未初始化的计时器</li><li><code>timerWaiting</code>： <ul><li>-&gt; <code>timerWaiting</code></li><li>-&gt; <code>timerRunning</code> -&gt; <code>timerNoStatus</code></li><li>-&gt; <code>timerRunning</code> -&gt; <code>timerWaiting</code></li></ul></li><li><code>timerModifying</code> -&gt; 等待状态改变</li><li><code>timerModifiedXX</code> -&gt; <code>timerMoving</code> -&gt; <code>timerWaiting</code></li><li><code>timerDeleted</code> -&gt; <code>timerRemoving</code> -&gt; <code>timerRemoved</code></li><li><code>timerRunning</code> -&gt; 崩溃：并发调用该函数</li><li><code>timerRemoved</code>、<code>timerRemoving</code>、<code>timerMoving</code> -&gt; 崩溃：计时器堆不一致</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">runtimer</span><span class="token punctuation">(</span>pp <span class="token operator">*</span>p<span class="token punctuation">,</span> now <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		t <span class="token operator">:=</span> pp<span class="token punctuation">.</span>timers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token keyword">switch</span> s <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> s <span class="token punctuation">{</span>
		<span class="token keyword">case</span> timerWaiting<span class="token punctuation">:</span>
			<span class="token keyword">if</span> t<span class="token punctuation">.</span>when <span class="token operator">&gt;</span> now <span class="token punctuation">{</span>
				<span class="token keyword">return</span> t<span class="token punctuation">.</span>when
			<span class="token punctuation">}</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> s<span class="token punctuation">,</span> timerRunning<span class="token punctuation">)</span>
			<span class="token function">runOneTimer</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> t<span class="token punctuation">,</span> now<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token number">0</span>
		<span class="token keyword">case</span> timerDeleted<span class="token punctuation">:</span>
			<span class="token comment">// 删除计时器</span>
		<span class="token keyword">case</span> timerModifiedEarlier<span class="token punctuation">,</span> timerModifiedLater<span class="token punctuation">:</span>
			<span class="token comment">// 修改计时器的时间</span>
		<span class="token keyword">case</span> <span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ts={href:"https://draveness.me/golang/tree/runtime.runOneTimer",target:"_blank",rel:"noopener noreferrer"},Rs=n("code",null,"runtime.runOneTimer",-1),Ws=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">runOneTimer</span><span class="token punctuation">(</span>pp <span class="token operator">*</span>p<span class="token punctuation">,</span> t <span class="token operator">*</span>timer<span class="token punctuation">,</span> now <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f <span class="token operator">:=</span> t<span class="token punctuation">.</span>f
	arg <span class="token operator">:=</span> t<span class="token punctuation">.</span>arg
	seq <span class="token operator">:=</span> t<span class="token punctuation">.</span>seq

	<span class="token keyword">if</span> t<span class="token punctuation">.</span>period <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		delta <span class="token operator">:=</span> t<span class="token punctuation">.</span>when <span class="token operator">-</span> now
		t<span class="token punctuation">.</span>when <span class="token operator">+=</span> t<span class="token punctuation">.</span>period <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token operator">-</span>delta<span class="token operator">/</span>t<span class="token punctuation">.</span>period<span class="token punctuation">)</span>
		<span class="token function">siftdownTimer</span><span class="token punctuation">(</span>pp<span class="token punctuation">.</span>timers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> timerRunning<span class="token punctuation">,</span> timerWaiting<span class="token punctuation">)</span>
		<span class="token function">updateTimer0When</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">dodeltimer0</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">Cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>status<span class="token punctuation">,</span> timerRunning<span class="token punctuation">,</span> timerNoStatus<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pp<span class="token punctuation">.</span>timersLock<span class="token punctuation">)</span>
	<span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
	<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pp<span class="token punctuation">.</span>timersLock<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据计时器的 <code>period</code> 字段，上述函数会做出不同的处理：</p>`,2),Ls=n("code",null,"period",-1),Ns=n("li",null,"修改计时器下一次触发的时间并更新其在堆中的位置",-1),Ds=n("li",null,[s("将计时器的状态更新至 "),n("code",null,"timerWaiting")],-1),Ss={href:"https://draveness.me/golang/tree/runtime.updateTimer0When",target:"_blank",rel:"noopener noreferrer"},Es=n("code",null,"runtime.updateTimer0When",-1),js=n("code",null,"timer0When",-1),Xs=n("code",null,"period",-1),Gs={href:"https://draveness.me/golang/tree/runtime.dodeltimer0",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"runtime.dodeltimer0",-1),qs=n("li",null,[s("将计时器的状态更新至 "),n("code",null,"timerNoStatus")],-1),Bs=a('<p>更新计时器之后，上述函数会运行计时器中存储的函数并传入触发时间等参数。</p><h2 id="_6-3-4-触发计时器" tabindex="-1"><a class="header-anchor" href="#_6-3-4-触发计时器" aria-hidden="true">#</a> 6.3.4 触发计时器</h2><p>Golang 会在两个模块中触发计时器：</p><ol><li><strong>调度器</strong>调度时会检查处理器中的计时器是否准备就绪</li><li><strong>系统监控</strong>会检查是否有未执行的到期计时器</li></ol><h3 id="调度器" tabindex="-1"><a class="header-anchor" href="#调度器" aria-hidden="true">#</a> 调度器</h3>',5),Us={href:"https://draveness.me/golang/tree/runtime.checkTimers",target:"_blank",rel:"noopener noreferrer"},zs=n("code",null,"runtime.checkTimers",-1),Ps={href:"https://draveness.me/golang/tree/runtime.schedule",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"runtime.schedule",-1),Is={href:"https://draveness.me/golang/tree/runtime.findrunnable",target:"_blank",rel:"noopener noreferrer"},Os=n("code",null,"runtime.findrunnable",-1),Vs={href:"https://draveness.me/golang/tree/runtime.findrunnable",target:"_blank",rel:"noopener noreferrer"},Fs=n("code",null,"runtime.findrunnable",-1),Ys={href:"https://draveness.me/golang/tree/runtime.checkTimers",target:"_blank",rel:"noopener noreferrer"},Hs=n("code",null,"runtime.checkTimers",-1),Zs=n("li",null,[s("若处理器中不存在需要调整的计时器 "),n("ul",null,[n("li",null,"当没有需要执行的计时器时，直接返回"),n("li",null,"当下一个计时器没有到期并且需要删除的计时器较少时都会直接返回；")])],-1),$s={href:"https://draveness.me/golang/tree/runtime.adjusttimers",target:"_blank",rel:"noopener noreferrer"},Js=n("code",null,"runtime.adjusttimers",-1),Ks={href:"https://draveness.me/golang/tree/runtime.runtimer",target:"_blank",rel:"noopener noreferrer"},Qs=n("code",null,"runtime.runtimer",-1),ne=n("ul",null,[n("li",null,"若存在，直接运行计时器"),n("li",null,"若不存在，获取最新计时器的触发时间")],-1),se={href:"https://draveness.me/golang/tree/runtime.clearDeletedTimers",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"runtime.clearDeletedTimers",-1),te=n("code",null,"timerDeleted",-1),ae=n("h3",{id:"系统监控",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统监控","aria-hidden":"true"},"#"),s(" 系统监控")],-1),oe={href:"https://draveness.me/golang/tree/runtime.sysmon",target:"_blank",rel:"noopener noreferrer"},ie=n("code",null,"runtime.sysmon",-1),le=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		now <span class="token operator">:=</span> <span class="token function">nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		next<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">timeSleepUntil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
		lastpoll <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">Load64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">netpollinited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastpoll <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lastpoll<span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">&lt;</span> now <span class="token punctuation">{</span>
			atomic<span class="token punctuation">.</span><span class="token function">Cas64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>
			list <span class="token operator">:=</span> <span class="token function">netpoll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
				<span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> next <span class="token operator">&lt;</span> now <span class="token punctuation">{</span>
			<span class="token function">startm</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pe={href:"https://draveness.me/golang/tree/runtime.timeSleepUntil",target:"_blank",rel:"noopener noreferrer"},ce=n("code",null,"runtime.timeSleepUntil",-1),re={href:"https://draveness.me/golang/tree/runtime.netpoll",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"runtime.netpoll",-1),de=n("li",null,"若当前有应该运行的计时器没有执行，可能存在无法被抢占的处理器，这时我们应该启动新的线程处理计时器",-1),me={href:"https://draveness.me/golang/tree/runtime.timeSleepUntil",target:"_blank",rel:"noopener noreferrer"},ke=n("code",null,"runtime.timeSleepUntil",-1),ve=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),he={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/",target:"_blank",rel:"noopener noreferrer"};function ge(_e,be){const e=p("ExternalLinkIcon");return i(),l("div",null,[r,u,d,m,n("p",null,[s("Go 1.10 之前的计时器都使用最小四叉堆实现，所有的计时器都会存储在如下所示的结构体 "),n("a",k,[v,t(e)]),s(" 中：")]),h,n("p",null,[n("a",g,[_,t(e)]),s(" Goroutine 会运行时间驱动的事件，运行时会在发生以下事件时唤醒计时器：")]),b,n("p",null,[s("若当前机器上的处理器 P 的个数超过了 64，多个处理器上的计时器就可能存储在同一个桶中。每一个计时器桶都由一个运行 "),n("a",f,[w,t(e)]),s(" 函数的 Goroutine 处理。")]),y,x,n("p",null,[s("将全局计时器分片的方式，虽然能够降低锁的粒度，提高计时器的性能，但是 "),n("a",M,[T,t(e)]),s(" 造成的"),R,s("和"),W,s("之间"),L,s("的"),N,s("却成为了影响计时器性能的首要因素。")]),D,n("p",null,[s("Go v1.14 所有的计时器都以最小四叉堆的形式存储在处理器 "),n("a",S,[E,t(e)]),s(" 中。")]),j,n("p",null,[s("处理器 "),n("a",X,[G,t(e)]),s(" 中与计时器相关的有以下字段：")]),C,n("p",null,[s("计时器由"),n("a",q,[B,t(e)]),s("表示：")]),U,n("p",null,[s("对外暴露的计时器使用 "),n("a",z,[P,t(e)]),s(" 结体：")]),A,n("p",null,[n("a",I,[O,t(e)]),s(" 计时器必须通过 "),n("a",V,[F,t(e)]),s("、"),n("a",Y,[H,t(e)]),s(" 或者 "),n("a",Z,[$,t(e)]),s(" 函数创建。 当计时器失效时，订阅计时器 Channel 的 Goroutine 会收到计时器失效的时间。")]),J,n("ul",null,[n("li",null,[n("a",K,[Q,t(e)]),s(" — 向当前处理器增加新的计时器")]),n("li",null,[n("a",nn,[sn,t(e)]),s(" — 将计时器标记成 "),en,s(" 删除处理器中的计时器"),n("a",tn,[s("9"),t(e)]),s("；")]),n("li",null,[n("a",an,[on,t(e)]),s(" — 网络轮询器会调用该函数修改计时器")]),n("li",null,[n("a",ln,[pn,t(e)]),s(" — 清除队列头中的计时器，能够提升程序创建和删除计时器的性能"),n("a",cn,[s("11"),t(e)]),s("；")]),n("li",null,[n("a",rn,[un,t(e)]),s(" — 调整处理器持有的计时器堆，包括移动会稍后触发的计时器、删除标记为 "),dn,s(" 的计时器")]),n("li",null,[n("a",mn,[kn,t(e)]),s(" — 检查队列头中的计时器，在其准备就绪时运行该计时器")])]),vn,n("p",null,[s("调用 "),n("a",hn,[gn,t(e)]),s(" 增加新的计时器时，会执行程序中的 "),n("a",_n,[bn,t(e)]),s(" 函数根据以下的规则处理计时器：")]),fn,n("ol",null,[n("li",null,[s("调用 "),n("a",wn,[yn,t(e)]),s(" 清理处理器中的计时器；")]),n("li",null,[s("调用"),xn,s("将当前计时器加入处理器的"),Mn,s("四叉堆中: "),n("ol",null,[n("li",null,[s("调用 "),n("a",Tn,[Rn,t(e)]),s(" 函数惰性初始化网络轮询器；")])])]),n("li",null,[s("调用"),Wn,s(" 唤醒网络轮询器中休眠的线程； "),n("ol",null,[n("li",null,[s("调用 "),n("a",Ln,[Nn,t(e)]),s(" 函数中断正在阻塞的网络轮询")])])])]),Dn,Sn,n("p",null,[n("a",En,[jn,t(e)]),s(" 函数会标记需要删除的计时器，会根据以下的规则处理计时器：")]),Xn,n("p",null,[n("a",Gn,[Cn,t(e)]),s(" 会修改已经存在的计时器，它会根据以下的规则处理计时器：")]),qn,n("p",null,[s("若待修改的计时器已经被删除，那么该函数会调用 "),n("a",Bn,[Un,t(e)]),s(" 创建新的计时器。在正常情况下会根据修改后的时间进行不同的处理：")]),n("ul",null,[zn,n("li",null,[s("若修改后的时间小于修改前时间，设置计时器的状态为 "),Pn,s(" 并调用 "),n("a",An,[In,t(e)]),s(" 触发调度器的重新调度")])]),On,n("p",null,[n("a",Vn,[Fn,t(e)]),s(" 函数会根据状态清理处理器队列头中的计时器，该函数会遵循以下的规则修改计时器的触发时间：")]),Yn,n("p",null,[n("a",Hn,[Zn,t(e)]),s(" 函数只会处理计时器状态为 "),$n,s("、"),Jn,s(" 和 "),Kn,s(" 的情况：")]),n("ul",null,[n("li",null,[s("若计时器的状态为 "),Qn,n("ul",null,[ns,n("li",null,[s("调用 "),n("a",ss,[es,t(e)]),s(" 删除四叉堆顶上的计时器")]),ts])]),n("li",null,[s("若计时器的状态为 "),as,s(" 或者 "),os,s(": "),n("ul",null,[is,ls,n("li",null,[s("调用 "),n("a",ps,[cs,t(e)]),s(" 删除四叉堆顶上的计时器")]),n("li",null,[s("调用 "),n("a",rs,[us,t(e)]),s(" 将计时器加入四叉堆中")]),ds])])]),n("p",null,[n("a",ms,[ks,t(e)]),s(" 会删除已经标记的计时器，修改状态为 "),vs,s(" 的计时器.")]),hs,n("p",null,[n("a",gs,[_s,t(e)]),s("会删除堆中的计时器并修改状态为 "),bs,s(" 和 "),fs,s(" 的计时器的时间，处理计时器状态：")]),ws,n("p",null,[n("a",ys,[xs,t(e)]),s(" 函数会检查处理器四叉堆上最顶上的计时器，该函数也会处理计时器的删除以及计时器时间的更新，它会遵循以下的规则处理计时器：")]),Ms,n("p",null,[s("若处理器四叉堆顶部的计时器没有到触发时间会直接返回，否则调用 "),n("a",Ts,[Rs,t(e)]),s(" 运行堆顶的计时器：")]),Ws,n("ul",null,[n("li",null,[s("若"),Ls,s("字段大于 0: "),n("ul",null,[Ns,Ds,n("li",null,[s("调用 "),n("a",Ss,[Es,t(e)]),s(" 函数设置处理器的 "),js,s(" 字段；")])])]),n("li",null,[s("若"),Xs,s("字段小于或者等于 0； "),n("ul",null,[n("li",null,[s("调用 "),n("a",Gs,[Cs,t(e)]),s(" 函数删除计时器")]),qs])])]),Bs,n("p",null,[s("调度器使用"),n("a",Us,[zs,t(e)]),s("来运行处理器中计时器的函数，它会在发生以下情况时被调用：")]),n("ul",null,[n("li",null,[s("调度器调用 "),n("a",Ps,[As,t(e)]),s(" 执行调度时")]),n("li",null,[s("调度器调用 "),n("a",Is,[Os,t(e)]),s(" 获取可执行的 Goroutine 时")]),n("li",null,[s("调度器调用 "),n("a",Vs,[Fs,t(e)]),s(" 从其他处理器窃取计时器时")])]),n("p",null,[n("a",Ys,[Hs,t(e)]),s("的流程如下：")]),n("ul",null,[n("li",null,[s("调整计时器： "),n("ul",null,[Zs,n("li",null,[s("若处理器中存在需要调整的计时器，会调用 "),n("a",$s,[Js,t(e)])])])]),n("li",null,[s("运行计时器： "),n("ul",null,[n("li",null,[s("调整了堆中的计时器之后，会通过 "),n("a",Ks,[Qs,t(e)]),s(" 依次查找堆中是否存在需要执行的计时器： "),ne])])]),n("li",null,[s("删除计时器： 若当前 Goroutine 的处理器和传入的处理器相同，并且处理器中删除的计时器是堆中计时器的 1/4 以上，就会调用 "),n("a",se,[ee,t(e)]),s(" 删除处理器全部被标记为 "),te,s(" 的计时器，保证堆中靠后的计时器被删除。")])]),ae,n("p",null,[s("系统监控函数 "),n("a",oe,[ie,t(e)]),s(" 也可能会触发函数的计时器：")]),le,n("ol",null,[n("li",null,[s("调用 "),n("a",pe,[ce,t(e)]),s(" 获取计时器的到期时间以及持有该计时器的堆")]),n("li",null,[s("若超过 10ms 的时间没有轮询，调用 "),n("a",re,[ue,t(e)]),s(" 轮询网络")]),de]),n("p",null,[n("a",me,[ke,t(e)]),s(" 会遍历运行时的全部处理器并查找下一个需要执行的计时器。")]),ve,n("ol",null,[n("li",null,[n("a",he,[s("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/"),t(e)])])])])}const we=o(c,[["render",ge],["__file","06.3.timer.html.vue"]]);export{we as default};
