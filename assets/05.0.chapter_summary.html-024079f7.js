import{_ as t,Z as r,$ as l,a0 as n,a1 as e,a2 as a,a4 as o,H as c}from"./framework-d03928c9.js";const i={},p=o(`<h2 id="_1-for-and-range" tabindex="-1"><a class="header-anchor" href="#_1-for-and-range" aria-hidden="true">#</a> 1. for and range</h2><h3 id="_1-1-for" tabindex="-1"><a class="header-anchor" href="#_1-1-for" aria-hidden="true">#</a> 1.1 for</h3><p>for 循环被编译器视作<code>OFOR</code>节点，由四个部分组成：</p><ol><li><code>Ninit</code>：循环<strong>初始化</strong></li><li><code>Left</code>：循环<strong>执行条件</strong></li><li><code>Right</code>：循环体结束执行语句</li><li><code>NBody</code>：循环体</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> Ninit<span class="token punctuation">;</span> Left<span class="token punctuation">;</span> Right <span class="token punctuation">{</span>
    NBody
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281956249.png" alt="golang-for-loop-ssa" tabindex="0" loading="lazy"><figcaption>golang-for-loop-ssa</figcaption></figure><h3 id="_1-2-for-range" tabindex="-1"><a class="header-anchor" href="#_1-2-for-range" aria-hidden="true">#</a> 1.2 for-range</h3><p>编译期会将<code>for-range</code>的<code>ORANGE</code>节点换成<code>OFOR</code>也就是普通<code>for</code>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309281957772.png" alt="Golang-For-Range-Loop" tabindex="0" loading="lazy"><figcaption>Golang-For-Range-Loop</figcaption></figure><h4 id="数组和切片" tabindex="-1"><a class="header-anchor" href="#数组和切片" aria-hidden="true">#</a> 数组和切片</h4><p>使用<code>for-range</code>遍历数组和切片，会<strong>拷贝原始切片</strong>，若在循环中修改切片的长度，不会改变循环次数。</p><p>遍历数组和切片有四种情况：</p><ol><li>遍历数组和切片清空元素</li><li>使用 <code>for range a {}</code> 遍历数组和切片</li><li>使用 <code>for i := range a {}</code> 遍历数组和切片</li><li>使用 <code>for i, elem := range a {}</code> 遍历数组和切片</li></ol><h5 id="遍历并清空数组和切片" tabindex="-1"><a class="header-anchor" href="#遍历并清空数组和切片" aria-hidden="true">#</a> 遍历并清空数组和切片</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 原代码</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
	a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> zero
<span class="token punctuation">}</span>

<span class="token comment">// 优化后</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
	hp <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	hn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
	i <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),d={href:"https://draveness.me/golang/tree/runtime.memclrNoHeapPointers",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"runtime.memclrNoHeapPointers",-1),h={href:"https://draveness.me/golang/tree/runtime.memclrHasPointers",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"runtime.memclrHasPointers",-1),m=n("strong",null,"直接清除内存区域",-1),_=o(`<h5 id="for-range-a" tabindex="-1"><a class="header-anchor" href="#for-range-a" aria-hidden="true">#</a> for range a {}</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 原代码</span>
<span class="token keyword">for</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 优化之后</span>
ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历时，拷贝原始切片的变量，遍历次数是新变量的长度。</p><h5 id="for-i-range-a" tabindex="-1"><a class="header-anchor" href="#for-i-range-a" aria-hidden="true">#</a> for i := range a {}</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 原代码</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 优化之后</span>
ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    v1 <span class="token operator">=</span> hv1
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="for-i-elem-range-a" tabindex="-1"><a class="header-anchor" href="#for-i-elem-range-a" aria-hidden="true">#</a> for i, elem := range a {}</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 原代码</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 优化之后</span>
ha <span class="token operator">:=</span> a
hv1 <span class="token operator">:=</span> <span class="token number">0</span>
hn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> hv1
v2 <span class="token operator">:=</span> <span class="token boolean">nil</span>
<span class="token keyword">for</span> <span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> hn<span class="token punctuation">;</span> hv1<span class="token operator">++</span> <span class="token punctuation">{</span>
    tmp <span class="token operator">:=</span> ha<span class="token punctuation">[</span>hv1<span class="token punctuation">]</span>
    v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> hv1<span class="token punctuation">,</span> tmp
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历时的<code>elem</code>变量的地址不变，每次循环都会重新赋值。</p><h4 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h4><p><code>for-range</code>遍历哈希表有三种不同形式：</p><ol><li><code>for range m {}</code></li><li><code>for k := range m{} </code></li><li><code>for k, v := range m{}</code></li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282008913.png" alt="golang-range-map" tabindex="0" loading="lazy"><figcaption>golang-range-map</figcaption></figure><p>遍历哈希表时，<strong>桶的选择是随机的</strong>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapiterinit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> it <span class="token operator">*</span>hiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	it<span class="token punctuation">.</span>t <span class="token operator">=</span> t
	it<span class="token punctuation">.</span>h <span class="token operator">=</span> h
	it<span class="token punctuation">.</span>B <span class="token operator">=</span> h<span class="token punctuation">.</span>B
	it<span class="token punctuation">.</span>buckets <span class="token operator">=</span> h<span class="token punctuation">.</span>buckets

	r <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>startBucket <span class="token operator">=</span> r <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> h<span class="token punctuation">.</span>B <span class="token operator">&amp;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	it<span class="token punctuation">.</span>bucket <span class="token operator">=</span> it<span class="token punctuation">.</span>startBucket
	<span class="token function">mapiternext</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),v={href:"https://draveness.me/golang/tree/runtime.fastrand",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"runtime.fastrand",-1),f=o(`<p>遍历哈希表的顺序：</p><ol><li>先遍历正常桶及其溢出桶</li><li>然后遍历其他位置的桶</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282011830.png" alt="golang-range-map-and-buckets" tabindex="0" loading="lazy"><figcaption>golang-range-map-and-buckets</figcaption></figure><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><p><code>for-range</code>遍历字符串有三种形式：</p><ol><li><code>for range s{} </code></li><li><code>for i := range s{}</code></li><li><code>for i, c := range s{}</code></li></ol><p>当使用<code>for i, c := range s{}</code>时：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> s
<span class="token keyword">for</span> hv1 <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
    hv1t <span class="token operator">:=</span> hv1
    hv2 <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span>hv1<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> hv2 <span class="token operator">&lt;</span> utf8<span class="token punctuation">.</span>RuneSelf <span class="token punctuation">{</span>
        hv1<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hv2<span class="token punctuation">,</span> hv1 <span class="token operator">=</span> <span class="token function">decoderune</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> hv1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> hv1t<span class="token punctuation">,</span> hv2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>c</code>的是字符串的一个字符，类型为<code>rune</code>：</p>`,9),b=n("li",null,[e("若"),n("code",null,"c"),e("只有一个字节，直接进行类型转换")],-1),x=n("code",null,"c",-1),w={href:"https://draveness.me/golang/tree/runtime.decoderune",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"runtime.decoderune",-1),z=o(`<h4 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h4><p><code>for-range</code>遍历channel有两种形式：</p><ol><li><code>for range ch{}</code></li><li><code>for v := range ch{}</code></li></ol><p>使用<code>for v := range ch{}</code>会转换成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> a
hv1<span class="token punctuation">,</span> hb <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ha
<span class="token keyword">for</span> <span class="token punctuation">;</span> hb <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> hv1<span class="token punctuation">,</span> hb <span class="token operator">=</span> <span class="token operator">&lt;-</span>ha <span class="token punctuation">{</span>
    v1 <span class="token operator">:=</span> hv1
    hv1 <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for-range</code>会循环至通道被关闭。</p><h2 id="_2-select" tabindex="-1"><a class="header-anchor" href="#_2-select" aria-hidden="true">#</a> 2. select</h2><p><code>select</code>用于监听多个channel是否可用：</p><ol><li>若无可用通道，则阻塞当前goroutine</li><li>若有多个，则随机选择一个分支执行</li><li>若存在<code>default</code>分支，则为<strong>非阻塞</strong>结构，无可用通道将直接执行<code>default</code>分支</li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282023435.png" alt="Golang-Select-Channels" tabindex="0" loading="lazy"><figcaption>Golang-Select-Channels</figcaption></figure><h3 id="_2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-数据结构" aria-hidden="true">#</a> 2.1 数据结构</h3>`,11),O=n("code",null,"select",-1),B=n("code",null,"case",-1),C={href:"https://draveness.me/golang/tree/runtime.scase",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"runtime.scase",-1),N=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> scase <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	c    <span class="token operator">*</span>hchan         <span class="token comment">// chan</span>
	elem unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-实现原理" tabindex="-1"><a class="header-anchor" href="#_2-2-实现原理" aria-hidden="true">#</a> 2.2 实现原理</h3><p><code>select</code>语句会在编译期间转换成<code>OSELECT</code>节点，每个<code>OSELECT</code>会持有一组<code>OCASE</code>节点，若<code>OCASE</code>执行条件为空则表示为<code>default</code>。</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282031077.png" alt="golang-oselect-and-ocases" tabindex="0" loading="lazy"><figcaption>golang-oselect-and-ocases</figcaption></figure><h4 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期" aria-hidden="true">#</a> 编译期</h4><p>编译期根据<code>select</code>中的<code>case</code>数目不同，会有四种<strong>优化</strong>情况：</p>`,6),E=o(`<li><p><code>select</code> 不存在任何的 <code>case</code> 此时当前goroutine，将直接阻塞，永久休眠</p></li><li><p><code>select</code> 只存在一个 <code>case</code> 转换成<code>if</code>语句：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 改写前</span>
<span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> v<span class="token punctuation">,</span> ok <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span> <span class="token comment">// case ch &lt;- v</span>
    <span class="token operator">...</span>    
<span class="token punctuation">}</span>

<span class="token comment">// 改写后</span>
<span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch <span class="token comment">// case ch &lt;- v</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先判断操作的 Channel 是不是空的</li><li>然后执行 <code>case</code> 结构中的内容</li></ul></li><li><p><code>select</code> 存在两个 <code>case</code>，其中一个 <code>case</code> 是 <code>default</code> 此时为非阻塞结构，若channel不可用，直接执行default</p></li>`,3),j=n("code",null,"select",-1),S=n("code",null,"case",-1),R={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"runtime.selectgo",-1),P=n("code",null,"case",-1),H=n("code",null,"if",-1),F=n("code",null,"case",-1),I=n("h4",{id:"运行时",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#运行时","aria-hidden":"true"},"#"),e(" 运行时")],-1),V={href:"https://draveness.me/golang/tree/runtime.selectgo",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"runtime.selectgo",-1),D=n("li",null,[e("随机生成一个遍历的轮询顺序 "),n("code",null,"pollOrder"),e(" 并根据 Channel 地址生成锁定顺序 "),n("code",null,"lockOrder")],-1),T=n("code",null,"pollOrder",-1),J=n("code",null,"case",-1),M=n("li",null,[e("如果存在，直接获取 "),n("code",null,"case"),e(" 对应的索引并返回")],-1),W={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"runtime.sudog",-1),$=n("strong",null,"收发队列",-1),q={href:"https://draveness.me/golang/tree/runtime.gopark",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"runtime.gopark",-1),Q=n("code",null,"lockOrder",-1),U=n("code",null,"case",-1),X={href:"https://draveness.me/golang/tree/runtime.sudog",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"runtime.sudog",-1),nn=n("h2",{id:"_3-defer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-defer","aria-hidden":"true"},"#"),e(" 3. defer")],-1),en=n("p",null,[n("code",null,"defer"),e("使用时有三个关键点：")],-1),sn=n("li",null,[n("code",null,"defer"),e("的调用时机：当前"),n("strong",null,"函数返回"),e("时")],-1),an=n("code",null,"defer",-1),on=n("strong",null,"后进先出",-1),tn=n("code",null,"defer",-1),rn=n("li",null,[e("后调用的 "),n("code",null,"defer"),e(" 函数会被追加到 Goroutine "),n("code",null,"_defer"),e(),n("strong",null,"链表"),e("的最前面")],-1),ln={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"runtime._defer",-1),pn=n("code",null,"defer",-1),dn=n("code",null,"defer",-1),un=n("strong",null,"定义",-1),hn=n("strong",null,"预先",-1),gn=n("strong",null,"拷贝",-1),mn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"runtime.deferproc",-1),vn=n("h3",{id:"_3-1-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1-数据结构","aria-hidden":"true"},"#"),e(" 3.1 数据结构")],-1),kn={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"runtime._defer",-1),bn=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	siz       <span class="token builtin">int32</span>
	started   <span class="token builtin">bool</span>
	openDefer <span class="token builtin">bool</span>
	sp        <span class="token builtin">uintptr</span>
	pc        <span class="token builtin">uintptr</span>
	fn        <span class="token operator">*</span>funcval
	_panic    <span class="token operator">*</span>_panic
	link      <span class="token operator">*</span>_defer
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defer函数以链表的形式组织在一起。</p><h3 id="_3-2-执行机制" tabindex="-1"><a class="header-anchor" href="#_3-2-执行机制" aria-hidden="true">#</a> 3.2 执行机制</h3><p><code>defer</code>的执行机制有三种：</p>`,4),xn=n("strong",null,"堆分配",-1),wn=n("code",null,"defer",-1),yn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"runtime.deferproc",-1),On=n("code",null,"defer",-1),Bn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"runtime.deferreturn",-1),Gn={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"runtime.deferproc",-1),En={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"runtime._defer",-1),Sn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"runtime.deferreturn",-1),Ln={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"runtime._defer",-1),Hn=n("strong",null,"栈分配",-1),Fn=n("strong",null,"关键字",-1),In=n("strong",null,"最多执行一次",-1),Vn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.state.call",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"cmd/compile/internal/gc.state.call",-1),Dn={href:"https://draveness.me/golang/tree/runtime.deferprocStack",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"runtime.deferprocStack",-1),Jn=n("strong",null,"开放编码",-1),Mn=n("li",null,[e("编译期间判断 "),n("code",null,"defer"),e(),n("strong",null,"关键字"),e("、"),n("code",null,"return"),e(" 语句的"),n("strong",null,"个数"),e("确定是否开启开放编码优化；")],-1),Wn=n("code",null,"deferBits",-1),Zn={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.openDeferInfo",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"cmd/compile/internal/gc.openDeferInfo",-1),qn=n("code",null,"defer",-1),Kn=n("code",null,"defer",-1),Qn={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"runtime.deferreturn",-1),Xn=o('<h2 id="_4-panic-and-recover" tabindex="-1"><a class="header-anchor" href="#_4-panic-and-recover" aria-hidden="true">#</a> 4. panic and recover</h2><p><code>panic</code>和<code>recover</code>的作用</p><ul><li><code>panic</code>能够改变程序的控制流，调用 <code>panic</code> 后会<strong>立刻停止</strong>执行当前函数的剩余代码，并在当前 Goroutine 中<strong>递归执行</strong>调用方的 <code>defer</code></li><li><code>recover</code> 可以<strong>中止</strong> <code>panic</code> 造成的<strong>程序崩溃</strong>。<strong>只能</strong>在 <code>defer</code> 中发挥作用的函数，在其他作用域中调用不会发挥作用</li></ul><p><code>panic</code> 和 <code>recover</code>的执行有三个要点：</p><ol><li>panic 只会触发<strong>当前 goroutine</strong> 的 defer</li><li>recover 只能在 <strong>defer</strong> 中生效</li><li>panic 可以在 defer 中嵌套</li></ol><h3 id="_4-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_4-1-数据结构" aria-hidden="true">#</a> 4.1 数据结构</h3>',6),Yn={href:"https://draveness.me/golang/tree/runtime._panic",target:"_blank",rel:"noopener noreferrer"},ne=n("code",null,"runtime._panic",-1),ee=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	argp      unsafe<span class="token punctuation">.</span>Pointer
	arg       <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	link      <span class="token operator">*</span>_panic
	recovered <span class="token builtin">bool</span>
	aborted   <span class="token builtin">bool</span>
	pc        <span class="token builtin">uintptr</span>
	sp        unsafe<span class="token punctuation">.</span>Pointer
	goexit    <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>panic</code>可以被连续调用，多个<code>panic</code>之间组成<strong>链表</strong>。</p><h3 id="_4-2-执行流程" tabindex="-1"><a class="header-anchor" href="#_4-2-执行流程" aria-hidden="true">#</a> 4.2 执行流程</h3><p><code>panic</code>和<code>recover</code>的流程如下：</p>`,4),se=n("code",null,"panic",-1),ae=n("code",null,"recover",-1),oe={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},te=n("code",null,"runtime.gopanic",-1),re={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},le=n("code",null,"runtime.gorecover",-1),ce=n("code",null,"defer",-1),ie={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},pe=n("code",null,"runtime.deferproc",-1),de=n("code",null,"defer",-1),ue={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},he=n("code",null,"runtime.deferreturn",-1),ge={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},me=n("code",null,"runtime.gopanic",-1),_e={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},ve=n("code",null,"runtime._defer",-1),ke={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},fe=n("code",null,"runtime.gorecover",-1),be=n("code",null,"_panic.recovered",-1),xe=n("code",null,"panic",-1),we={href:"https://draveness.me/golang/tree/runtime.gopanic",target:"_blank",rel:"noopener noreferrer"},ye=n("code",null,"runtime.gopanic",-1),ze={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Oe=n("code",null,"runtime._defer",-1),Be=n("code",null,"pc",-1),Ce=n("code",null,"sp",-1),Ge={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},Ne=n("code",null,"runtime.recovery",-1),Ee={href:"https://draveness.me/golang/tree/runtime.recovery",target:"_blank",rel:"noopener noreferrer"},je=n("code",null,"runtime.recovery",-1),Se=n("code",null,"pc",-1),Re=n("code",null,"sp",-1),Le={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Pe=n("code",null,"runtime.deferproc",-1),He={href:"https://draveness.me/golang/tree/runtime.deferproc",target:"_blank",rel:"noopener noreferrer"},Fe=n("code",null,"runtime.deferproc",-1),Ie={href:"https://draveness.me/golang/tree/runtime.deferreturn",target:"_blank",rel:"noopener noreferrer"},Ve=n("code",null,"runtime.deferreturn",-1),Ae={href:"https://draveness.me/golang/tree/runtime.gorecover",target:"_blank",rel:"noopener noreferrer"},De=n("code",null,"runtime.gorecover",-1),Te={href:"https://draveness.me/golang/tree/runtime._defer",target:"_blank",rel:"noopener noreferrer"},Je=n("code",null,"runtime._defer",-1),Me={href:"https://draveness.me/golang/tree/runtime.fatalpanic",target:"_blank",rel:"noopener noreferrer"},We=n("code",null,"runtime.fatalpanic",-1),Ze=n("code",null,"panic",-1),$e=o('<h2 id="_5-make-and-new" tabindex="-1"><a class="header-anchor" href="#_5-make-and-new" aria-hidden="true">#</a> 5. make and new</h2><p>make 和 new 的作用：</p><ol><li><code>make</code> 的作用是<strong>初始化</strong>内置的<strong>数据结构</strong>，<strong>切片、哈希表和 Channel</strong></li><li><code>new</code> 的作用是根据传入的类型<strong>分配一片内存空间</strong>并<strong>返回</strong>指向这片内存空间的<strong>指针</strong></li></ol><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282054210.png" alt="golang-make-and-new" tabindex="0" loading="lazy"><figcaption>golang-make-and-new</figcaption></figure><h3 id="_5-1-make" tabindex="-1"><a class="header-anchor" href="#_5-1-make" aria-hidden="true">#</a> 5.1 make</h3><p>编译期会将<code>make</code>转换成不同的节点：</p><figure><img src="https://raw.githubusercontent.com/dreamjz/pics/main/pics/2023/202309282055010.png" alt="golang-make-typecheck" tabindex="0" loading="lazy"><figcaption>golang-make-typecheck</figcaption></figure><p>后序将会调用不同的<strong>初始化函数</strong>执行。</p><h3 id="_5-2-new" tabindex="-1"><a class="header-anchor" href="#_5-2-new" aria-hidden="true">#</a> 5.2 new</h3><p>编译器会在中间代码生成阶段通过以下两个函数处理该关键字：</p>',10),qe={href:"https://draveness.me/golang/tree/cmd/compile/internal/gc.callnew",target:"_blank",rel:"noopener noreferrer"},Ke=n("code",null,"cmd/compile/internal/gc.callnew",-1),Qe=n("code",null,"ONEWOBJ",-1),Ue=n("p",null,[n("code",null,"cmd/compile/internal/gc.state.expr")],-1),Xe=n("p",null,"会根据申请空间的大小分两种情况处理：",-1),Ye=n("li",null,[e("如果申请的"),n("strong",null,"空间为 0"),e("，就会返回一个表示"),n("strong",null,"空指针"),e("的 "),n("code",null,"zerobase"),e(" 变量；")],-1),ns={href:"https://draveness.me/golang/tree/runtime.newobject",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"runtime.newobject",-1),ss={href:"https://draveness.me/golang/tree/runtime.mallocgc",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"runtime.mallocgc",-1),os=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),e(" Reference")],-1),ts={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"};function rs(ls,cs){const s=c("ExternalLinkIcon");return r(),l("div",null,[p,n("p",null,[e("代码会被优化成使用"),n("a",d,[u,a(s)]),e("或"),n("a",h,[g,a(s)]),m,e("的数据。")]),_,n("p",null,[e("使用了"),n("a",v,[k,a(s)]),e("来随机选取桶的索引。")]),f,n("ul",null,[b,n("li",null,[e("若"),x,e("不只有一个字节，则需要"),n("a",w,[y,a(s)]),e("进行解码")])]),z,n("p",null,[O,e("无数据结构表示，但"),B,e("分支可用"),n("a",C,[G,a(s)]),e("表示：")]),N,n("ol",null,[E,n("li",null,[n("p",null,[j,e(" 存在多个 "),S,e(" 默认情况下会通过 "),n("a",R,[L,a(s)]),e(" 获取执行 "),P,e(" 的索引，并通过多个 "),H,e(" 语句执行对应 "),F,e(" 中的代码")])])]),I,n("p",null,[e("运行时执行编译期间展开的 "),n("a",V,[A,a(s)]),e(" 函数，该函数会按照以下的流程执行：")]),n("ol",null,[D,n("li",null,[e("根据 "),T,e(" 遍历所有的 "),J,e(" 查看是否有可以立刻处理的 Channel： "),n("ol",null,[M,n("li",null,[e("如果不存在，创建 "),n("a",W,[Z,a(s)]),e(" 结构体，将当前 Goroutine 加入到所有相关 Channel 的"),$,e("，并调用 "),n("a",q,[K,a(s)]),e(" 挂起当前 Goroutine 等待调度器的唤醒")])])]),n("li",null,[e("当调度器唤醒当前 Goroutine 时，会再次按照 "),Q,e(" 遍历所有的 "),U,e("，从中查找需要被处理的 "),n("a",X,[Y,a(s)]),e(" 对应的索引")])]),nn,en,n("ol",null,[sn,n("li",null,[an,e("的调用顺序："),on,e("，后定义的"),tn,e("先执行 "),n("ul",null,[rn,n("li",null,[e("运行 "),n("a",ln,[cn,a(s)]),e(" 时是从前到后依次执行")])])]),n("li",null,[pn,e("的参数："),dn,e("的参数会在"),un,e("时"),hn,e("进行"),gn,e("，而不是在调用时处理 "),n("ul",null,[n("li",null,[e("调用 "),n("a",mn,[_n,a(s)]),e(" 函数创建新的延迟调用时就会立刻拷贝函数的参数，函数的参数不会等到真正执行时计算")])])])]),vn,n("p",null,[n("a",kn,[fn,a(s)]),e("：")]),bn,n("ul",null,[n("li",null,[xn,e("，1.1 ~ 1.12 "),n("ul",null,[n("li",null,[e("编译期将 "),wn,e(" 关键字转换成 "),n("a",yn,[zn,a(s)]),e(" 并在调用 "),On,e(" 关键字的函数返回之前插入 "),n("a",Bn,[Cn,a(s)])]),n("li",null,[e("运行时调用 "),n("a",Gn,[Nn,a(s)]),e(" 会将一个新的 "),n("a",En,[jn,a(s)]),e(" 结构体追加到当前 Goroutine 的链表头")]),n("li",null,[e("运行时调用 "),n("a",Sn,[Rn,a(s)]),e(" 会从 Goroutine 的链表中取出 "),n("a",Ln,[Pn,a(s)]),e(" 结构并依次执行")])])]),n("li",null,[Hn,e("，1.13 "),n("ul",null,[n("li",null,[e("当该"),Fn,e("在函数体中"),In,e("时，编译期间的 "),n("a",Vn,[An,a(s)]),e(" 会将结构体分配到栈上并调用 "),n("a",Dn,[Tn,a(s)])])])]),n("li",null,[Jn,e("，1.14 "),n("ul",null,[Mn,n("li",null,[e("通过 "),Wn,e(" 和 "),n("a",Zn,[$n,a(s)]),e(" 存储 "),qn,e(" 关键字的相关信息；")]),n("li",null,[e("如果 "),Kn,e(" 关键字的执行可以在编译期间确定，会在函数返回前直接插入相应的代码，否则会由运行时的 "),n("a",Qn,[Un,a(s)]),e(" 处理")])])])]),Xn,n("p",null,[n("a",Yn,[ne,a(s)]),e("：")]),ee,n("ol",null,[n("li",null,[e("编译器会负责做转换关键字的工作； "),n("ol",null,[n("li",null,[e("将 "),se,e(" 和 "),ae,e(" 分别转换成 "),n("a",oe,[te,a(s)]),e(" 和 "),n("a",re,[le,a(s)]),e("；")]),n("li",null,[e("将 "),ce,e(" 转换成 "),n("a",ie,[pe,a(s)]),e(" 函数；")]),n("li",null,[e("在调用 "),de,e(" 的函数末尾调用 "),n("a",ue,[he,a(s)]),e(" 函数")])])]),n("li",null,[e("在运行过程中遇到 "),n("a",ge,[me,a(s)]),e(" 方法时，会从 Goroutine 的链表依次取出 "),n("a",_e,[ve,a(s)]),e(" 结构体并执行")]),n("li",null,[e("如果调用延迟执行函数时遇到了 "),n("a",ke,[fe,a(s)]),e(" 就会将 "),be,e(" 标记成 true 并返回 "),xe,e(" 的参数 "),n("ol",null,[n("li",null,[e("在这次调用结束之后，"),n("a",we,[ye,a(s)]),e(" 会从 "),n("a",ze,[Oe,a(s)]),e(" 结构体中取出程序计数器 "),Be,e(" 和栈指针 "),Ce,e(" 并调用 "),n("a",Ge,[Ne,a(s)]),e(" 函数进行恢复程序；")]),n("li",null,[n("a",Ee,[je,a(s)]),e(" 会根据传入的 "),Se,e(" 和 "),Re,e(" 跳转回 "),n("a",Le,[Pe,a(s)]),e("；")]),n("li",null,[e("编译器自动生成的代码会发现 "),n("a",He,[Fe,a(s)]),e(" 的返回值不为 0，这时会跳回 "),n("a",Ie,[Ve,a(s)]),e(" 并恢复到正常的执行流程")])])]),n("li",null,[e("如果没有遇到 "),n("a",Ae,[De,a(s)]),e(" 就会依次遍历所有的 "),n("a",Te,[Je,a(s)]),e("，并在最后调用 "),n("a",Me,[We,a(s)]),e(" 中止程序、打印 "),Ze,e(" 的参数并返回错误码 2")])]),$e,n("ol",null,[n("li",null,[n("p",null,[n("a",qe,[Ke,a(s)]),e(" 会将关键字转换成 "),Qe,e(" 类型的节点")])]),n("li",null,[Ue,Xe,n("ol",null,[Ye,n("li",null,[e("在遇到其他情况时会将关键字转换成 "),n("a",ns,[es,a(s)]),e(" 函数，会获取传入类型占用空间的大小，调用 "),n("a",ss,[as,a(s)]),e(" 在堆上申请一片内存空间并返回指向这片内存空间的指针")])])])]),os,n("ol",null,[n("li",null,[n("a",ts,[e("https://draveness.me/golang"),a(s)])])])])}const ps=t(i,[["render",rs],["__file","05.0.chapter_summary.html.vue"]]);export{ps as default};
